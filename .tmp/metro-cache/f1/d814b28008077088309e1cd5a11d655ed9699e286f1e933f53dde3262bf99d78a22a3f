{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":186,"column":41,"index":7711}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./modular.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":21,"index":305},"end":{"line":8,"column":44,"index":328}}],"key":"FrgRfTwrfMvrcBeFLlJz+0uWEvM="}},{"name":"./utils.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":19,"index":349},"end":{"line":9,"column":40,"index":370}}],"key":"03VO7/E+L2S6CYQuFHTg8eKUrwk="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.expand_message_xmd = expand_message_xmd;\n  exports.expand_message_xof = expand_message_xof;\n  exports.hash_to_field = hash_to_field;\n  exports.isogenyMap = isogenyMap;\n  exports.createHasher = createHasher;\n  var modular_js_1 = require(_dependencyMap[1], \"./modular.js\");\n  var utils_js_1 = require(_dependencyMap[2], \"./utils.js\");\n  // Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\n  var os2ip = utils_js_1.bytesToNumberBE;\n  // Integer to Octet Stream (numberToBytesBE)\n  function i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << 8 * length) throw new Error('invalid I2OSP input: ' + value);\n    var res = Array.from({\n      length\n    }).fill(0);\n    for (var i = length - 1; i >= 0; i--) {\n      res[i] = value & 0xff;\n      value >>>= 8;\n    }\n    return new Uint8Array(res);\n  }\n  function strxor(a, b) {\n    var arr = new Uint8Array(a.length);\n    for (var i = 0; i < a.length; i++) {\n      arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n  }\n  function anum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error('number expected');\n  }\n  /**\n   * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n   * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n   */\n  function expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0, utils_js_1.abytes)(msg);\n    (0, utils_js_1.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    var b_in_bytes = H.outputLen,\n      r_in_bytes = H.blockLen;\n    var ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n    var DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));\n    var Z_pad = i2osp(0, r_in_bytes);\n    var l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    var b = new Array(ell);\n    var b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (var i = 1; i <= ell; i++) {\n      var args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n      b[i] = H((0, utils_js_1.concatBytes)(...args));\n    }\n    var pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n  }\n  /**\n   * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n   * 1. The collision resistance of H MUST be at least k bits.\n   * 2. H MUST be an XOF that has been proved indifferentiable from\n   *    a random oracle under a reasonable cryptographic assumption.\n   * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n   */\n  function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0, utils_js_1.abytes)(msg);\n    (0, utils_js_1.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n      var dkLen = Math.ceil(2 * k / 8);\n      DST = H.create({\n        dkLen\n      }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n    return H.create({\n      dkLen: lenInBytes\n    }).update(msg).update(i2osp(lenInBytes, 2))\n    // 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update(i2osp(DST.length, 1)).digest();\n  }\n  /**\n   * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n   * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n   * @param msg a byte string containing the message to hash\n   * @param count the number of elements of F to output\n   * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n   * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n   */\n  function hash_to_field(msg, count, options) {\n    (0, utils_js_1.validateObject)(options, {\n      DST: 'stringOrUint8Array',\n      p: 'bigint',\n      m: 'isSafeInteger',\n      k: 'isSafeInteger',\n      hash: 'hash'\n    });\n    var p = options.p,\n      k = options.k,\n      m = options.m,\n      hash = options.hash,\n      expand = options.expand,\n      _DST = options.DST;\n    (0, utils_js_1.abytes)(msg);\n    anum(count);\n    var DST = typeof _DST === 'string' ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;\n    var log2p = p.toString(2).length;\n    var L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    var len_in_bytes = count * m * L;\n    var prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n      prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    } else if (expand === 'xof') {\n      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    } else if (expand === '_internal_pass') {\n      // for internal tests only\n      prb = msg;\n    } else {\n      throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    var u = new Array(count);\n    for (var i = 0; i < count; i++) {\n      var e = new Array(m);\n      for (var j = 0; j < m; j++) {\n        var elm_offset = L * (j + i * m);\n        var tv = prb.subarray(elm_offset, elm_offset + L);\n        e[j] = (0, modular_js_1.mod)(os2ip(tv), p);\n      }\n      u[i] = e;\n    }\n    return u;\n  }\n  function isogenyMap(field, map) {\n    // Make same order as in spec\n    var COEFF = map.map(i => Array.from(i).reverse());\n    return (x, y) => {\n      var _COEFF$map = COEFF.map(val => val.reduce((acc, i) => field.add(field.mul(acc, x), i))),\n        _COEFF$map2 = _slicedToArray(_COEFF$map, 4),\n        xNum = _COEFF$map2[0],\n        xDen = _COEFF$map2[1],\n        yNum = _COEFF$map2[2],\n        yDen = _COEFF$map2[3];\n      x = field.div(xNum, xDen); // xNum / xDen\n      y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n      return {\n        x: x,\n        y: y\n      };\n    };\n  }\n  /** Creates hash-to-curve methods from EC Point and mapToCurve function. */\n  function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n    return {\n      // Encodes byte string to elliptic curve.\n      // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n      hashToCurve(msg, options) {\n        var u = hash_to_field(msg, 2, {\n          ...def,\n          DST: def.DST,\n          ...options\n        });\n        var u0 = Point.fromAffine(mapToCurve(u[0]));\n        var u1 = Point.fromAffine(mapToCurve(u[1]));\n        var P = u0.add(u1).clearCofactor();\n        P.assertValidity();\n        return P;\n      },\n      // Encodes byte string to elliptic curve.\n      // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n      encodeToCurve(msg, options) {\n        var u = hash_to_field(msg, 1, {\n          ...def,\n          DST: def.encodeDST,\n          ...options\n        });\n        var P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n        P.assertValidity();\n        return P;\n      },\n      // Same as encodeToCurve, but without hash\n      mapToCurve(scalars) {\n        if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n        for (var i of scalars) if (typeof i !== 'bigint') throw new Error('mapToCurve: expected array of bigints');\n        var P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n        P.assertValidity();\n        return P;\n      }\n    };\n  }\n});","lineCount":203,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"expand_message_xmd"],[8,28,3,26],[8,31,3,29,"expand_message_xmd"],[8,49,3,47],[9,2,4,0,"exports"],[9,9,4,7],[9,10,4,8,"expand_message_xof"],[9,28,4,26],[9,31,4,29,"expand_message_xof"],[9,49,4,47],[10,2,5,0,"exports"],[10,9,5,7],[10,10,5,8,"hash_to_field"],[10,23,5,21],[10,26,5,24,"hash_to_field"],[10,39,5,37],[11,2,6,0,"exports"],[11,9,6,7],[11,10,6,8,"isogenyMap"],[11,20,6,18],[11,23,6,21,"isogenyMap"],[11,33,6,31],[12,2,7,0,"exports"],[12,9,7,7],[12,10,7,8,"createHasher"],[12,22,7,20],[12,25,7,23,"createHasher"],[12,37,7,35],[13,2,8,0],[13,6,8,6,"modular_js_1"],[13,18,8,18],[13,21,8,21,"require"],[13,28,8,28],[13,29,8,28,"_dependencyMap"],[13,43,8,28],[13,62,8,43],[13,63,8,44],[14,2,9,0],[14,6,9,6,"utils_js_1"],[14,16,9,16],[14,19,9,19,"require"],[14,26,9,26],[14,27,9,26,"_dependencyMap"],[14,41,9,26],[14,58,9,39],[14,59,9,40],[15,2,10,0],[16,2,11,0],[16,6,11,6,"os2ip"],[16,11,11,11],[16,14,11,14,"utils_js_1"],[16,24,11,24],[16,25,11,25,"bytesToNumberBE"],[16,40,11,40],[17,2,12,0],[18,2,13,0],[18,11,13,9,"i2osp"],[18,16,13,14,"i2osp"],[18,17,13,15,"value"],[18,22,13,20],[18,24,13,22,"length"],[18,30,13,28],[18,32,13,30],[19,4,14,4,"anum"],[19,8,14,8],[19,9,14,9,"value"],[19,14,14,14],[19,15,14,15],[20,4,15,4,"anum"],[20,8,15,8],[20,9,15,9,"length"],[20,15,15,15],[20,16,15,16],[21,4,16,4],[21,8,16,8,"value"],[21,13,16,13],[21,16,16,16],[21,17,16,17],[21,21,16,21,"value"],[21,26,16,26],[21,30,16,30],[21,31,16,31],[21,35,16,36],[21,36,16,37],[21,39,16,40,"length"],[21,45,16,47],[21,47,17,8],[21,53,17,14],[21,57,17,18,"Error"],[21,62,17,23],[21,63,17,24],[21,86,17,47],[21,89,17,50,"value"],[21,94,17,55],[21,95,17,56],[22,4,18,4],[22,8,18,10,"res"],[22,11,18,13],[22,14,18,16,"Array"],[22,19,18,21],[22,20,18,22,"from"],[22,24,18,26],[22,25,18,27],[23,6,18,29,"length"],[24,4,18,36],[24,5,18,37],[24,6,18,38],[24,7,18,39,"fill"],[24,11,18,43],[24,12,18,44],[24,13,18,45],[24,14,18,46],[25,4,19,4],[25,9,19,9],[25,13,19,13,"i"],[25,14,19,14],[25,17,19,17,"length"],[25,23,19,23],[25,26,19,26],[25,27,19,27],[25,29,19,29,"i"],[25,30,19,30],[25,34,19,34],[25,35,19,35],[25,37,19,37,"i"],[25,38,19,38],[25,40,19,40],[25,42,19,42],[26,6,20,8,"res"],[26,9,20,11],[26,10,20,12,"i"],[26,11,20,13],[26,12,20,14],[26,15,20,17,"value"],[26,20,20,22],[26,23,20,25],[26,27,20,29],[27,6,21,8,"value"],[27,11,21,13],[27,17,21,19],[27,18,21,20],[28,4,22,4],[29,4,23,4],[29,11,23,11],[29,15,23,15,"Uint8Array"],[29,25,23,25],[29,26,23,26,"res"],[29,29,23,29],[29,30,23,30],[30,2,24,0],[31,2,25,0],[31,11,25,9,"strxor"],[31,17,25,15,"strxor"],[31,18,25,16,"a"],[31,19,25,17],[31,21,25,19,"b"],[31,22,25,20],[31,24,25,22],[32,4,26,4],[32,8,26,10,"arr"],[32,11,26,13],[32,14,26,16],[32,18,26,20,"Uint8Array"],[32,28,26,30],[32,29,26,31,"a"],[32,30,26,32],[32,31,26,33,"length"],[32,37,26,39],[32,38,26,40],[33,4,27,4],[33,9,27,9],[33,13,27,13,"i"],[33,14,27,14],[33,17,27,17],[33,18,27,18],[33,20,27,20,"i"],[33,21,27,21],[33,24,27,24,"a"],[33,25,27,25],[33,26,27,26,"length"],[33,32,27,32],[33,34,27,34,"i"],[33,35,27,35],[33,37,27,37],[33,39,27,39],[34,6,28,8,"arr"],[34,9,28,11],[34,10,28,12,"i"],[34,11,28,13],[34,12,28,14],[34,15,28,17,"a"],[34,16,28,18],[34,17,28,19,"i"],[34,18,28,20],[34,19,28,21],[34,22,28,24,"b"],[34,23,28,25],[34,24,28,26,"i"],[34,25,28,27],[34,26,28,28],[35,4,29,4],[36,4,30,4],[36,11,30,11,"arr"],[36,14,30,14],[37,2,31,0],[38,2,32,0],[38,11,32,9,"anum"],[38,15,32,13,"anum"],[38,16,32,14,"item"],[38,20,32,18],[38,22,32,20],[39,4,33,4],[39,8,33,8],[39,9,33,9,"Number"],[39,15,33,15],[39,16,33,16,"isSafeInteger"],[39,29,33,29],[39,30,33,30,"item"],[39,34,33,34],[39,35,33,35],[39,37,34,8],[39,43,34,14],[39,47,34,18,"Error"],[39,52,34,23],[39,53,34,24],[39,70,34,41],[39,71,34,42],[40,2,35,0],[41,2,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,2,40,0],[45,11,40,9,"expand_message_xmd"],[45,29,40,27,"expand_message_xmd"],[45,30,40,28,"msg"],[45,33,40,31],[45,35,40,33,"DST"],[45,38,40,36],[45,40,40,38,"lenInBytes"],[45,50,40,48],[45,52,40,50,"H"],[45,53,40,51],[45,55,40,53],[46,4,41,4],[46,5,41,5],[46,6,41,6],[46,8,41,8,"utils_js_1"],[46,18,41,18],[46,19,41,19,"abytes"],[46,25,41,25],[46,27,41,27,"msg"],[46,30,41,30],[46,31,41,31],[47,4,42,4],[47,5,42,5],[47,6,42,6],[47,8,42,8,"utils_js_1"],[47,18,42,18],[47,19,42,19,"abytes"],[47,25,42,25],[47,27,42,27,"DST"],[47,30,42,30],[47,31,42,31],[48,4,43,4,"anum"],[48,8,43,8],[48,9,43,9,"lenInBytes"],[48,19,43,19],[48,20,43,20],[49,4,44,4],[50,4,45,4],[50,8,45,8,"DST"],[50,11,45,11],[50,12,45,12,"length"],[50,18,45,18],[50,21,45,21],[50,24,45,24],[50,26,46,8,"DST"],[50,29,46,11],[50,32,46,14,"H"],[50,33,46,15],[50,34,46,16],[50,35,46,17],[50,36,46,18],[50,38,46,20,"utils_js_1"],[50,48,46,30],[50,49,46,31,"concatBytes"],[50,60,46,42],[50,62,46,44],[50,63,46,45],[50,64,46,46],[50,66,46,48,"utils_js_1"],[50,76,46,58],[50,77,46,59,"utf8ToBytes"],[50,88,46,70],[50,90,46,72],[50,109,46,91],[50,110,46,92],[50,112,46,94,"DST"],[50,115,46,97],[50,116,46,98],[50,117,46,99],[51,4,47,4],[51,8,47,23,"b_in_bytes"],[51,18,47,33],[51,21,47,60,"H"],[51,22,47,61],[51,23,47,12,"outputLen"],[51,32,47,21],[52,6,47,45,"r_in_bytes"],[52,16,47,55],[52,19,47,60,"H"],[52,20,47,61],[52,21,47,35,"blockLen"],[52,29,47,43],[53,4,48,4],[53,8,48,10,"ell"],[53,11,48,13],[53,14,48,16,"Math"],[53,18,48,20],[53,19,48,21,"ceil"],[53,23,48,25],[53,24,48,26,"lenInBytes"],[53,34,48,36],[53,37,48,39,"b_in_bytes"],[53,47,48,49],[53,48,48,50],[54,4,49,4],[54,8,49,8,"lenInBytes"],[54,18,49,18],[54,21,49,21],[54,26,49,26],[54,30,49,30,"ell"],[54,33,49,33],[54,36,49,36],[54,39,49,39],[54,41,50,8],[54,47,50,14],[54,51,50,18,"Error"],[54,56,50,23],[54,57,50,24],[54,97,50,64],[54,98,50,65],[55,4,51,4],[55,8,51,10,"DST_prime"],[55,17,51,19],[55,20,51,22],[55,21,51,23],[55,22,51,24],[55,24,51,26,"utils_js_1"],[55,34,51,36],[55,35,51,37,"concatBytes"],[55,46,51,48],[55,48,51,50,"DST"],[55,51,51,53],[55,53,51,55,"i2osp"],[55,58,51,60],[55,59,51,61,"DST"],[55,62,51,64],[55,63,51,65,"length"],[55,69,51,71],[55,71,51,73],[55,72,51,74],[55,73,51,75],[55,74,51,76],[56,4,52,4],[56,8,52,10,"Z_pad"],[56,13,52,15],[56,16,52,18,"i2osp"],[56,21,52,23],[56,22,52,24],[56,23,52,25],[56,25,52,27,"r_in_bytes"],[56,35,52,37],[56,36,52,38],[57,4,53,4],[57,8,53,10,"l_i_b_str"],[57,17,53,19],[57,20,53,22,"i2osp"],[57,25,53,27],[57,26,53,28,"lenInBytes"],[57,36,53,38],[57,38,53,40],[57,39,53,41],[57,40,53,42],[57,41,53,43],[57,42,53,44],[58,4,54,4],[58,8,54,10,"b"],[58,9,54,11],[58,12,54,14],[58,16,54,18,"Array"],[58,21,54,23],[58,22,54,24,"ell"],[58,25,54,27],[58,26,54,28],[59,4,55,4],[59,8,55,10,"b_0"],[59,11,55,13],[59,14,55,16,"H"],[59,15,55,17],[59,16,55,18],[59,17,55,19],[59,18,55,20],[59,20,55,22,"utils_js_1"],[59,30,55,32],[59,31,55,33,"concatBytes"],[59,42,55,44],[59,44,55,46,"Z_pad"],[59,49,55,51],[59,51,55,53,"msg"],[59,54,55,56],[59,56,55,58,"l_i_b_str"],[59,65,55,67],[59,67,55,69,"i2osp"],[59,72,55,74],[59,73,55,75],[59,74,55,76],[59,76,55,78],[59,77,55,79],[59,78,55,80],[59,80,55,82,"DST_prime"],[59,89,55,91],[59,90,55,92],[59,91,55,93],[60,4,56,4,"b"],[60,5,56,5],[60,6,56,6],[60,7,56,7],[60,8,56,8],[60,11,56,11,"H"],[60,12,56,12],[60,13,56,13],[60,14,56,14],[60,15,56,15],[60,17,56,17,"utils_js_1"],[60,27,56,27],[60,28,56,28,"concatBytes"],[60,39,56,39],[60,41,56,41,"b_0"],[60,44,56,44],[60,46,56,46,"i2osp"],[60,51,56,51],[60,52,56,52],[60,53,56,53],[60,55,56,55],[60,56,56,56],[60,57,56,57],[60,59,56,59,"DST_prime"],[60,68,56,68],[60,69,56,69],[60,70,56,70],[61,4,57,4],[61,9,57,9],[61,13,57,13,"i"],[61,14,57,14],[61,17,57,17],[61,18,57,18],[61,20,57,20,"i"],[61,21,57,21],[61,25,57,25,"ell"],[61,28,57,28],[61,30,57,30,"i"],[61,31,57,31],[61,33,57,33],[61,35,57,35],[62,6,58,8],[62,10,58,14,"args"],[62,14,58,18],[62,17,58,21],[62,18,58,22,"strxor"],[62,24,58,28],[62,25,58,29,"b_0"],[62,28,58,32],[62,30,58,34,"b"],[62,31,58,35],[62,32,58,36,"i"],[62,33,58,37],[62,36,58,40],[62,37,58,41],[62,38,58,42],[62,39,58,43],[62,41,58,45,"i2osp"],[62,46,58,50],[62,47,58,51,"i"],[62,48,58,52],[62,51,58,55],[62,52,58,56],[62,54,58,58],[62,55,58,59],[62,56,58,60],[62,58,58,62,"DST_prime"],[62,67,58,71],[62,68,58,72],[63,6,59,8,"b"],[63,7,59,9],[63,8,59,10,"i"],[63,9,59,11],[63,10,59,12],[63,13,59,15,"H"],[63,14,59,16],[63,15,59,17],[63,16,59,18],[63,17,59,19],[63,19,59,21,"utils_js_1"],[63,29,59,31],[63,30,59,32,"concatBytes"],[63,41,59,43],[63,43,59,45],[63,46,59,48,"args"],[63,50,59,52],[63,51,59,53],[63,52,59,54],[64,4,60,4],[65,4,61,4],[65,8,61,10,"pseudo_random_bytes"],[65,27,61,29],[65,30,61,32],[65,31,61,33],[65,32,61,34],[65,34,61,36,"utils_js_1"],[65,44,61,46],[65,45,61,47,"concatBytes"],[65,56,61,58],[65,58,61,60],[65,61,61,63,"b"],[65,62,61,64],[65,63,61,65],[66,4,62,4],[66,11,62,11,"pseudo_random_bytes"],[66,30,62,30],[66,31,62,31,"slice"],[66,36,62,36],[66,37,62,37],[66,38,62,38],[66,40,62,40,"lenInBytes"],[66,50,62,50],[66,51,62,51],[67,2,63,0],[68,2,64,0],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,0,70,0],[75,2,71,0],[75,11,71,9,"expand_message_xof"],[75,29,71,27,"expand_message_xof"],[75,30,71,28,"msg"],[75,33,71,31],[75,35,71,33,"DST"],[75,38,71,36],[75,40,71,38,"lenInBytes"],[75,50,71,48],[75,52,71,50,"k"],[75,53,71,51],[75,55,71,53,"H"],[75,56,71,54],[75,58,71,56],[76,4,72,4],[76,5,72,5],[76,6,72,6],[76,8,72,8,"utils_js_1"],[76,18,72,18],[76,19,72,19,"abytes"],[76,25,72,25],[76,27,72,27,"msg"],[76,30,72,30],[76,31,72,31],[77,4,73,4],[77,5,73,5],[77,6,73,6],[77,8,73,8,"utils_js_1"],[77,18,73,18],[77,19,73,19,"abytes"],[77,25,73,25],[77,27,73,27,"DST"],[77,30,73,30],[77,31,73,31],[78,4,74,4,"anum"],[78,8,74,8],[78,9,74,9,"lenInBytes"],[78,19,74,19],[78,20,74,20],[79,4,75,4],[80,4,76,4],[81,4,77,4],[81,8,77,8,"DST"],[81,11,77,11],[81,12,77,12,"length"],[81,18,77,18],[81,21,77,21],[81,24,77,24],[81,26,77,26],[82,6,78,8],[82,10,78,14,"dkLen"],[82,15,78,19],[82,18,78,22,"Math"],[82,22,78,26],[82,23,78,27,"ceil"],[82,27,78,31],[82,28,78,33],[82,29,78,34],[82,32,78,37,"k"],[82,33,78,38],[82,36,78,42],[82,37,78,43],[82,38,78,44],[83,6,79,8,"DST"],[83,9,79,11],[83,12,79,14,"H"],[83,13,79,15],[83,14,79,16,"create"],[83,20,79,22],[83,21,79,23],[84,8,79,25,"dkLen"],[85,6,79,31],[85,7,79,32],[85,8,79,33],[85,9,79,34,"update"],[85,15,79,40],[85,16,79,41],[85,17,79,42],[85,18,79,43],[85,20,79,45,"utils_js_1"],[85,30,79,55],[85,31,79,56,"utf8ToBytes"],[85,42,79,67],[85,44,79,69],[85,63,79,88],[85,64,79,89],[85,65,79,90],[85,66,79,91,"update"],[85,72,79,97],[85,73,79,98,"DST"],[85,76,79,101],[85,77,79,102],[85,78,79,103,"digest"],[85,84,79,109],[85,85,79,110],[85,86,79,111],[86,4,80,4],[87,4,81,4],[87,8,81,8,"lenInBytes"],[87,18,81,18],[87,21,81,21],[87,26,81,26],[87,30,81,30,"DST"],[87,33,81,33],[87,34,81,34,"length"],[87,40,81,40],[87,43,81,43],[87,46,81,46],[87,48,82,8],[87,54,82,14],[87,58,82,18,"Error"],[87,63,82,23],[87,64,82,24],[87,104,82,64],[87,105,82,65],[88,4,83,4],[88,11,83,12,"H"],[88,12,83,13],[88,13,83,14,"create"],[88,19,83,20],[88,20,83,21],[89,6,83,23,"dkLen"],[89,11,83,28],[89,13,83,30,"lenInBytes"],[90,4,83,41],[90,5,83,42],[90,6,83,43],[90,7,84,9,"update"],[90,13,84,15],[90,14,84,16,"msg"],[90,17,84,19],[90,18,84,20],[90,19,85,9,"update"],[90,25,85,15],[90,26,85,16,"i2osp"],[90,31,85,21],[90,32,85,22,"lenInBytes"],[90,42,85,32],[90,44,85,34],[90,45,85,35],[90,46,85,36],[91,4,86,8],[92,4,86,8],[92,5,87,9,"update"],[92,11,87,15],[92,12,87,16,"DST"],[92,15,87,19],[92,16,87,20],[92,17,88,9,"update"],[92,23,88,15],[92,24,88,16,"i2osp"],[92,29,88,21],[92,30,88,22,"DST"],[92,33,88,25],[92,34,88,26,"length"],[92,40,88,32],[92,42,88,34],[92,43,88,35],[92,44,88,36],[92,45,88,37],[92,46,89,9,"digest"],[92,52,89,15],[92,53,89,16],[92,54,89,17],[93,2,90,0],[94,2,91,0],[95,0,92,0],[96,0,93,0],[97,0,94,0],[98,0,95,0],[99,0,96,0],[100,0,97,0],[101,0,98,0],[102,2,99,0],[102,11,99,9,"hash_to_field"],[102,24,99,22,"hash_to_field"],[102,25,99,23,"msg"],[102,28,99,26],[102,30,99,28,"count"],[102,35,99,33],[102,37,99,35,"options"],[102,44,99,42],[102,46,99,44],[103,4,100,4],[103,5,100,5],[103,6,100,6],[103,8,100,8,"utils_js_1"],[103,18,100,18],[103,19,100,19,"validateObject"],[103,33,100,33],[103,35,100,35,"options"],[103,42,100,42],[103,44,100,44],[104,6,101,8,"DST"],[104,9,101,11],[104,11,101,13],[104,31,101,33],[105,6,102,8,"p"],[105,7,102,9],[105,9,102,11],[105,17,102,19],[106,6,103,8,"m"],[106,7,103,9],[106,9,103,11],[106,24,103,26],[107,6,104,8,"k"],[107,7,104,9],[107,9,104,11],[107,24,104,26],[108,6,105,8,"hash"],[108,10,105,12],[108,12,105,14],[109,4,106,4],[109,5,106,5],[109,6,106,6],[110,4,107,4],[110,8,107,12,"p"],[110,9,107,13],[110,12,107,49,"options"],[110,19,107,56],[110,20,107,12,"p"],[110,21,107,13],[111,6,107,15,"k"],[111,7,107,16],[111,10,107,49,"options"],[111,17,107,56],[111,18,107,15,"k"],[111,19,107,16],[112,6,107,18,"m"],[112,7,107,19],[112,10,107,49,"options"],[112,17,107,56],[112,18,107,18,"m"],[112,19,107,19],[113,6,107,21,"hash"],[113,10,107,25],[113,13,107,49,"options"],[113,20,107,56],[113,21,107,21,"hash"],[113,25,107,25],[114,6,107,27,"expand"],[114,12,107,33],[114,15,107,49,"options"],[114,22,107,56],[114,23,107,27,"expand"],[114,29,107,33],[115,6,107,40,"_DST"],[115,10,107,44],[115,13,107,49,"options"],[115,20,107,56],[115,21,107,35,"DST"],[115,24,107,38],[116,4,108,4],[116,5,108,5],[116,6,108,6],[116,8,108,8,"utils_js_1"],[116,18,108,18],[116,19,108,19,"abytes"],[116,25,108,25],[116,27,108,27,"msg"],[116,30,108,30],[116,31,108,31],[117,4,109,4,"anum"],[117,8,109,8],[117,9,109,9,"count"],[117,14,109,14],[117,15,109,15],[118,4,110,4],[118,8,110,10,"DST"],[118,11,110,13],[118,14,110,16],[118,21,110,23,"_DST"],[118,25,110,27],[118,30,110,32],[118,38,110,40],[118,41,110,43],[118,42,110,44],[118,43,110,45],[118,45,110,47,"utils_js_1"],[118,55,110,57],[118,56,110,58,"utf8ToBytes"],[118,67,110,69],[118,69,110,71,"_DST"],[118,73,110,75],[118,74,110,76],[118,77,110,79,"_DST"],[118,81,110,83],[119,4,111,4],[119,8,111,10,"log2p"],[119,13,111,15],[119,16,111,18,"p"],[119,17,111,19],[119,18,111,20,"toString"],[119,26,111,28],[119,27,111,29],[119,28,111,30],[119,29,111,31],[119,30,111,32,"length"],[119,36,111,38],[120,4,112,4],[120,8,112,10,"L"],[120,9,112,11],[120,12,112,14,"Math"],[120,16,112,18],[120,17,112,19,"ceil"],[120,21,112,23],[120,22,112,24],[120,23,112,25,"log2p"],[120,28,112,30],[120,31,112,33,"k"],[120,32,112,34],[120,36,112,38],[120,37,112,39],[120,38,112,40],[120,39,112,41],[120,40,112,42],[121,4,113,4],[121,8,113,10,"len_in_bytes"],[121,20,113,22],[121,23,113,25,"count"],[121,28,113,30],[121,31,113,33,"m"],[121,32,113,34],[121,35,113,37,"L"],[121,36,113,38],[122,4,114,4],[122,8,114,8,"prb"],[122,11,114,11],[122,12,114,12],[122,13,114,13],[123,4,115,4],[123,8,115,8,"expand"],[123,14,115,14],[123,19,115,19],[123,24,115,24],[123,26,115,26],[124,6,116,8,"prb"],[124,9,116,11],[124,12,116,14,"expand_message_xmd"],[124,30,116,32],[124,31,116,33,"msg"],[124,34,116,36],[124,36,116,38,"DST"],[124,39,116,41],[124,41,116,43,"len_in_bytes"],[124,53,116,55],[124,55,116,57,"hash"],[124,59,116,61],[124,60,116,62],[125,4,117,4],[125,5,117,5],[125,11,118,9],[125,15,118,13,"expand"],[125,21,118,19],[125,26,118,24],[125,31,118,29],[125,33,118,31],[126,6,119,8,"prb"],[126,9,119,11],[126,12,119,14,"expand_message_xof"],[126,30,119,32],[126,31,119,33,"msg"],[126,34,119,36],[126,36,119,38,"DST"],[126,39,119,41],[126,41,119,43,"len_in_bytes"],[126,53,119,55],[126,55,119,57,"k"],[126,56,119,58],[126,58,119,60,"hash"],[126,62,119,64],[126,63,119,65],[127,4,120,4],[127,5,120,5],[127,11,121,9],[127,15,121,13,"expand"],[127,21,121,19],[127,26,121,24],[127,42,121,40],[127,44,121,42],[128,6,122,8],[129,6,123,8,"prb"],[129,9,123,11],[129,12,123,14,"msg"],[129,15,123,17],[130,4,124,4],[130,5,124,5],[130,11,125,9],[131,6,126,8],[131,12,126,14],[131,16,126,18,"Error"],[131,21,126,23],[131,22,126,24],[131,53,126,55],[131,54,126,56],[132,4,127,4],[133,4,128,4],[133,8,128,10,"u"],[133,9,128,11],[133,12,128,14],[133,16,128,18,"Array"],[133,21,128,23],[133,22,128,24,"count"],[133,27,128,29],[133,28,128,30],[134,4,129,4],[134,9,129,9],[134,13,129,13,"i"],[134,14,129,14],[134,17,129,17],[134,18,129,18],[134,20,129,20,"i"],[134,21,129,21],[134,24,129,24,"count"],[134,29,129,29],[134,31,129,31,"i"],[134,32,129,32],[134,34,129,34],[134,36,129,36],[135,6,130,8],[135,10,130,14,"e"],[135,11,130,15],[135,14,130,18],[135,18,130,22,"Array"],[135,23,130,27],[135,24,130,28,"m"],[135,25,130,29],[135,26,130,30],[136,6,131,8],[136,11,131,13],[136,15,131,17,"j"],[136,16,131,18],[136,19,131,21],[136,20,131,22],[136,22,131,24,"j"],[136,23,131,25],[136,26,131,28,"m"],[136,27,131,29],[136,29,131,31,"j"],[136,30,131,32],[136,32,131,34],[136,34,131,36],[137,8,132,12],[137,12,132,18,"elm_offset"],[137,22,132,28],[137,25,132,31,"L"],[137,26,132,32],[137,30,132,36,"j"],[137,31,132,37],[137,34,132,40,"i"],[137,35,132,41],[137,38,132,44,"m"],[137,39,132,45],[137,40,132,46],[138,8,133,12],[138,12,133,18,"tv"],[138,14,133,20],[138,17,133,23,"prb"],[138,20,133,26],[138,21,133,27,"subarray"],[138,29,133,35],[138,30,133,36,"elm_offset"],[138,40,133,46],[138,42,133,48,"elm_offset"],[138,52,133,58],[138,55,133,61,"L"],[138,56,133,62],[138,57,133,63],[139,8,134,12,"e"],[139,9,134,13],[139,10,134,14,"j"],[139,11,134,15],[139,12,134,16],[139,15,134,19],[139,16,134,20],[139,17,134,21],[139,19,134,23,"modular_js_1"],[139,31,134,35],[139,32,134,36,"mod"],[139,35,134,39],[139,37,134,41,"os2ip"],[139,42,134,46],[139,43,134,47,"tv"],[139,45,134,49],[139,46,134,50],[139,48,134,52,"p"],[139,49,134,53],[139,50,134,54],[140,6,135,8],[141,6,136,8,"u"],[141,7,136,9],[141,8,136,10,"i"],[141,9,136,11],[141,10,136,12],[141,13,136,15,"e"],[141,14,136,16],[142,4,137,4],[143,4,138,4],[143,11,138,11,"u"],[143,12,138,12],[144,2,139,0],[145,2,140,0],[145,11,140,9,"isogenyMap"],[145,21,140,19,"isogenyMap"],[145,22,140,20,"field"],[145,27,140,25],[145,29,140,27,"map"],[145,32,140,30],[145,34,140,32],[146,4,141,4],[147,4,142,4],[147,8,142,10,"COEFF"],[147,13,142,15],[147,16,142,18,"map"],[147,19,142,21],[147,20,142,22,"map"],[147,23,142,25],[147,24,142,27,"i"],[147,25,142,28],[147,29,142,33,"Array"],[147,34,142,38],[147,35,142,39,"from"],[147,39,142,43],[147,40,142,44,"i"],[147,41,142,45],[147,42,142,46],[147,43,142,47,"reverse"],[147,50,142,54],[147,51,142,55],[147,52,142,56],[147,53,142,57],[148,4,143,4],[148,11,143,11],[148,12,143,12,"x"],[148,13,143,13],[148,15,143,15,"y"],[148,16,143,16],[148,21,143,21],[149,6,144,8],[149,10,144,8,"_COEFF$map"],[149,20,144,8],[149,23,144,41,"COEFF"],[149,28,144,46],[149,29,144,47,"map"],[149,32,144,50],[149,33,144,52,"val"],[149,36,144,55],[149,40,144,60,"val"],[149,43,144,63],[149,44,144,64,"reduce"],[149,50,144,70],[149,51,144,71],[149,52,144,72,"acc"],[149,55,144,75],[149,57,144,77,"i"],[149,58,144,78],[149,63,144,83,"field"],[149,68,144,88],[149,69,144,89,"add"],[149,72,144,92],[149,73,144,93,"field"],[149,78,144,98],[149,79,144,99,"mul"],[149,82,144,102],[149,83,144,103,"acc"],[149,86,144,106],[149,88,144,108,"x"],[149,89,144,109],[149,90,144,110],[149,92,144,112,"i"],[149,93,144,113],[149,94,144,114],[149,95,144,115],[149,96,144,116],[150,8,144,116,"_COEFF$map2"],[150,19,144,116],[150,22,144,116,"_slicedToArray"],[150,36,144,116],[150,37,144,116,"_COEFF$map"],[150,47,144,116],[151,8,144,15,"xNum"],[151,12,144,19],[151,15,144,19,"_COEFF$map2"],[151,26,144,19],[152,8,144,21,"xDen"],[152,12,144,25],[152,15,144,25,"_COEFF$map2"],[152,26,144,25],[153,8,144,27,"yNum"],[153,12,144,31],[153,15,144,31,"_COEFF$map2"],[153,26,144,31],[154,8,144,33,"yDen"],[154,12,144,37],[154,15,144,37,"_COEFF$map2"],[154,26,144,37],[155,6,145,8,"x"],[155,7,145,9],[155,10,145,12,"field"],[155,15,145,17],[155,16,145,18,"div"],[155,19,145,21],[155,20,145,22,"xNum"],[155,24,145,26],[155,26,145,28,"xDen"],[155,30,145,32],[155,31,145,33],[155,32,145,34],[155,33,145,35],[156,6,146,8,"y"],[156,7,146,9],[156,10,146,12,"field"],[156,15,146,17],[156,16,146,18,"mul"],[156,19,146,21],[156,20,146,22,"y"],[156,21,146,23],[156,23,146,25,"field"],[156,28,146,30],[156,29,146,31,"div"],[156,32,146,34],[156,33,146,35,"yNum"],[156,37,146,39],[156,39,146,41,"yDen"],[156,43,146,45],[156,44,146,46],[156,45,146,47],[156,46,146,48],[156,47,146,49],[157,6,147,8],[157,13,147,15],[158,8,147,17,"x"],[158,9,147,18],[158,11,147,20,"x"],[158,12,147,21],[159,8,147,23,"y"],[159,9,147,24],[159,11,147,26,"y"],[160,6,147,28],[160,7,147,29],[161,4,148,4],[161,5,148,5],[162,2,149,0],[163,2,150,0],[164,2,151,0],[164,11,151,9,"createHasher"],[164,23,151,21,"createHasher"],[164,24,151,22,"Point"],[164,29,151,27],[164,31,151,29,"mapToCurve"],[164,41,151,39],[164,43,151,41,"def"],[164,46,151,44],[164,48,151,46],[165,4,152,4],[165,8,152,8],[165,15,152,15,"mapToCurve"],[165,25,152,25],[165,30,152,30],[165,40,152,40],[165,42,153,8],[165,48,153,14],[165,52,153,18,"Error"],[165,57,153,23],[165,58,153,24],[165,88,153,54],[165,89,153,55],[166,4,154,4],[166,11,154,11],[167,6,155,8],[168,6,156,8],[169,6,157,8,"hashToCurve"],[169,17,157,19,"hashToCurve"],[169,18,157,20,"msg"],[169,21,157,23],[169,23,157,25,"options"],[169,30,157,32],[169,32,157,34],[170,8,158,12],[170,12,158,18,"u"],[170,13,158,19],[170,16,158,22,"hash_to_field"],[170,29,158,35],[170,30,158,36,"msg"],[170,33,158,39],[170,35,158,41],[170,36,158,42],[170,38,158,44],[171,10,158,46],[171,13,158,49,"def"],[171,16,158,52],[172,10,158,54,"DST"],[172,13,158,57],[172,15,158,59,"def"],[172,18,158,62],[172,19,158,63,"DST"],[172,22,158,66],[173,10,158,68],[173,13,158,71,"options"],[174,8,158,79],[174,9,158,80],[174,10,158,81],[175,8,159,12],[175,12,159,18,"u0"],[175,14,159,20],[175,17,159,23,"Point"],[175,22,159,28],[175,23,159,29,"fromAffine"],[175,33,159,39],[175,34,159,40,"mapToCurve"],[175,44,159,50],[175,45,159,51,"u"],[175,46,159,52],[175,47,159,53],[175,48,159,54],[175,49,159,55],[175,50,159,56],[175,51,159,57],[176,8,160,12],[176,12,160,18,"u1"],[176,14,160,20],[176,17,160,23,"Point"],[176,22,160,28],[176,23,160,29,"fromAffine"],[176,33,160,39],[176,34,160,40,"mapToCurve"],[176,44,160,50],[176,45,160,51,"u"],[176,46,160,52],[176,47,160,53],[176,48,160,54],[176,49,160,55],[176,50,160,56],[176,51,160,57],[177,8,161,12],[177,12,161,18,"P"],[177,13,161,19],[177,16,161,22,"u0"],[177,18,161,24],[177,19,161,25,"add"],[177,22,161,28],[177,23,161,29,"u1"],[177,25,161,31],[177,26,161,32],[177,27,161,33,"clearCofactor"],[177,40,161,46],[177,41,161,47],[177,42,161,48],[178,8,162,12,"P"],[178,9,162,13],[178,10,162,14,"assertValidity"],[178,24,162,28],[178,25,162,29],[178,26,162,30],[179,8,163,12],[179,15,163,19,"P"],[179,16,163,20],[180,6,164,8],[180,7,164,9],[181,6,165,8],[182,6,166,8],[183,6,167,8,"encodeToCurve"],[183,19,167,21,"encodeToCurve"],[183,20,167,22,"msg"],[183,23,167,25],[183,25,167,27,"options"],[183,32,167,34],[183,34,167,36],[184,8,168,12],[184,12,168,18,"u"],[184,13,168,19],[184,16,168,22,"hash_to_field"],[184,29,168,35],[184,30,168,36,"msg"],[184,33,168,39],[184,35,168,41],[184,36,168,42],[184,38,168,44],[185,10,168,46],[185,13,168,49,"def"],[185,16,168,52],[186,10,168,54,"DST"],[186,13,168,57],[186,15,168,59,"def"],[186,18,168,62],[186,19,168,63,"encodeDST"],[186,28,168,72],[187,10,168,74],[187,13,168,77,"options"],[188,8,168,85],[188,9,168,86],[188,10,168,87],[189,8,169,12],[189,12,169,18,"P"],[189,13,169,19],[189,16,169,22,"Point"],[189,21,169,27],[189,22,169,28,"fromAffine"],[189,32,169,38],[189,33,169,39,"mapToCurve"],[189,43,169,49],[189,44,169,50,"u"],[189,45,169,51],[189,46,169,52],[189,47,169,53],[189,48,169,54],[189,49,169,55],[189,50,169,56],[189,51,169,57,"clearCofactor"],[189,64,169,70],[189,65,169,71],[189,66,169,72],[190,8,170,12,"P"],[190,9,170,13],[190,10,170,14,"assertValidity"],[190,24,170,28],[190,25,170,29],[190,26,170,30],[191,8,171,12],[191,15,171,19,"P"],[191,16,171,20],[192,6,172,8],[192,7,172,9],[193,6,173,8],[194,6,174,8,"mapToCurve"],[194,16,174,18,"mapToCurve"],[194,17,174,19,"scalars"],[194,24,174,26],[194,26,174,28],[195,8,175,12],[195,12,175,16],[195,13,175,17,"Array"],[195,18,175,22],[195,19,175,23,"isArray"],[195,26,175,30],[195,27,175,31,"scalars"],[195,34,175,38],[195,35,175,39],[195,37,176,16],[195,43,176,22],[195,47,176,26,"Error"],[195,52,176,31],[195,53,176,32],[195,92,176,71],[195,93,176,72],[196,8,177,12],[196,13,177,17],[196,17,177,23,"i"],[196,18,177,24],[196,22,177,28,"scalars"],[196,29,177,35],[196,31,178,16],[196,35,178,20],[196,42,178,27,"i"],[196,43,178,28],[196,48,178,33],[196,56,178,41],[196,58,179,20],[196,64,179,26],[196,68,179,30,"Error"],[196,73,179,35],[196,74,179,36],[196,113,179,75],[196,114,179,76],[197,8,180,12],[197,12,180,18,"P"],[197,13,180,19],[197,16,180,22,"Point"],[197,21,180,27],[197,22,180,28,"fromAffine"],[197,32,180,38],[197,33,180,39,"mapToCurve"],[197,43,180,49],[197,44,180,50,"scalars"],[197,51,180,57],[197,52,180,58],[197,53,180,59],[197,54,180,60,"clearCofactor"],[197,67,180,73],[197,68,180,74],[197,69,180,75],[198,8,181,12,"P"],[198,9,181,13],[198,10,181,14,"assertValidity"],[198,24,181,28],[198,25,181,29],[198,26,181,30],[199,8,182,12],[199,15,182,19,"P"],[199,16,182,20],[200,6,183,8],[201,4,184,4],[201,5,184,5],[202,2,185,0],[203,0,185,1],[203,3]],"functionMap":{"names":["<global>","i2osp","strxor","anum","expand_message_xmd","expand_message_xof","hash_to_field","isogenyMap","map.map$argument_0","<anonymous>","COEFF.map$argument_0","val.reduce$argument_0","createHasher","hashToCurve","encodeToCurve","mapToCurve"],"mappings":"AAA;ACY;CDW;AEC;CFM;AGC;CHG;AIK;CJuB;AKQ;CLmB;AMS;CNwC;AOC;0BCE,8BD;WEC;mDCC,oBC,2CD,CD;KFI;CPC;AYE;QCM;SDO;QEG;SFK;QGE;SHS;CZE"}},"type":"js/module"}]}