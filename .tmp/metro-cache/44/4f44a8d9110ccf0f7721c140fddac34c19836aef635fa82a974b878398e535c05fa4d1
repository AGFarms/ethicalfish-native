{"dependencies":[{"name":"../../errors/encoding.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":22,"index":256},"end":{"line":8,"column":57,"index":291}}],"key":"lnPLkJE3anL8Xkoa6kTdC5TXMoA="}},{"name":"../data/pad.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":17,"index":310},"end":{"line":9,"column":42,"index":335}}],"key":"pWvt3jaCXRmfpgmejFTCxZ8h/Ho="}},{"name":"./fromHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":10,"column":21,"index":358},"end":{"line":10,"column":44,"index":381}}],"key":"OUSIOu/yi5l1IER8v8UxpGlc2RA="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.toHex = toHex;\n  exports.boolToHex = boolToHex;\n  exports.bytesToHex = bytesToHex;\n  exports.numberToHex = numberToHex;\n  exports.stringToHex = stringToHex;\n  var encoding_js_1 = require(_dependencyMap[0], \"../../errors/encoding.js\");\n  var pad_js_1 = require(_dependencyMap[1], \"../data/pad.js\");\n  var fromHex_js_1 = require(_dependencyMap[2], \"./fromHex.js\");\n  var hexes = Array.from({\n    length: 256\n  }, (_v, i) => i.toString(16).padStart(2, '0'));\n  function toHex(value) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof value === 'number' || typeof value === 'bigint') return numberToHex(value, opts);\n    if (typeof value === 'string') {\n      return stringToHex(value, opts);\n    }\n    if (typeof value === 'boolean') return boolToHex(value, opts);\n    return bytesToHex(value, opts);\n  }\n  function boolToHex(value) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var hex = `0x${Number(value)}`;\n    if (typeof opts.size === 'number') {\n      (0, fromHex_js_1.assertSize)(hex, {\n        size: opts.size\n      });\n      return (0, pad_js_1.pad)(hex, {\n        size: opts.size\n      });\n    }\n    return hex;\n  }\n  function bytesToHex(value) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var string = '';\n    for (var i = 0; i < value.length; i++) {\n      string += hexes[value[i]];\n    }\n    var hex = `0x${string}`;\n    if (typeof opts.size === 'number') {\n      (0, fromHex_js_1.assertSize)(hex, {\n        size: opts.size\n      });\n      return (0, pad_js_1.pad)(hex, {\n        dir: 'right',\n        size: opts.size\n      });\n    }\n    return hex;\n  }\n  function numberToHex(value_) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var signed = opts.signed,\n      size = opts.size;\n    var value = BigInt(value_);\n    var maxValue;\n    if (size) {\n      if (signed) maxValue = (1n << BigInt(size) * 8n - 1n) - 1n;else maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    } else if (typeof value_ === 'number') {\n      maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    var minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0;\n    if (maxValue && value > maxValue || value < minValue) {\n      var suffix = typeof value_ === 'bigint' ? 'n' : '';\n      throw new encoding_js_1.IntegerOutOfRangeError({\n        max: maxValue ? `${maxValue}${suffix}` : undefined,\n        min: `${minValue}${suffix}`,\n        signed,\n        size,\n        value: `${value_}${suffix}`\n      });\n    }\n    var hex = `0x${(signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value).toString(16)}`;\n    if (size) return (0, pad_js_1.pad)(hex, {\n      size\n    });\n    return hex;\n  }\n  var encoder = new TextEncoder();\n  function stringToHex(value_) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var value = encoder.encode(value_);\n    return bytesToHex(value, opts);\n  }\n});","lineCount":92,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"toHex"],[7,15,3,13],[7,18,3,16,"toHex"],[7,23,3,21],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"boolToHex"],[8,19,4,17],[8,22,4,20,"boolToHex"],[8,31,4,29],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"bytesToHex"],[9,20,5,18],[9,23,5,21,"bytesToHex"],[9,33,5,31],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"numberToHex"],[10,21,6,19],[10,24,6,22,"numberToHex"],[10,35,6,33],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"stringToHex"],[11,21,7,19],[11,24,7,22,"stringToHex"],[11,35,7,33],[12,2,8,0],[12,6,8,6,"encoding_js_1"],[12,19,8,19],[12,22,8,22,"require"],[12,29,8,29],[12,30,8,29,"_dependencyMap"],[12,44,8,29],[12,75,8,56],[12,76,8,57],[13,2,9,0],[13,6,9,6,"pad_js_1"],[13,14,9,14],[13,17,9,17,"require"],[13,24,9,24],[13,25,9,24,"_dependencyMap"],[13,39,9,24],[13,60,9,41],[13,61,9,42],[14,2,10,0],[14,6,10,6,"fromHex_js_1"],[14,18,10,18],[14,21,10,21,"require"],[14,28,10,28],[14,29,10,28,"_dependencyMap"],[14,43,10,28],[14,62,10,43],[14,63,10,44],[15,2,11,0],[15,6,11,6,"hexes"],[15,11,11,11],[15,14,11,14,"Array"],[15,19,11,19],[15,20,11,20,"from"],[15,24,11,24],[15,25,11,25],[16,4,11,27,"length"],[16,10,11,33],[16,12,11,35],[17,2,11,39],[17,3,11,40],[17,5,11,42],[17,6,11,43,"_v"],[17,8,11,45],[17,10,11,47,"i"],[17,11,11,48],[17,16,11,53,"i"],[17,17,11,54],[17,18,11,55,"toString"],[17,26,11,63],[17,27,11,64],[17,29,11,66],[17,30,11,67],[17,31,11,68,"padStart"],[17,39,11,76],[17,40,11,77],[17,41,11,78],[17,43,11,80],[17,46,11,83],[17,47,11,84],[17,48,11,85],[18,2,12,0],[18,11,12,9,"toHex"],[18,16,12,14,"toHex"],[18,17,12,15,"value"],[18,22,12,20],[18,24,12,33],[19,4,12,33],[19,8,12,22,"opts"],[19,12,12,26],[19,15,12,26,"arguments"],[19,24,12,26],[19,25,12,26,"length"],[19,31,12,26],[19,39,12,26,"arguments"],[19,48,12,26],[19,56,12,26,"undefined"],[19,65,12,26],[19,68,12,26,"arguments"],[19,77,12,26],[19,83,12,29],[19,84,12,30],[19,85,12,31],[20,4,13,4],[20,8,13,8],[20,15,13,15,"value"],[20,20,13,20],[20,25,13,25],[20,33,13,33],[20,37,13,37],[20,44,13,44,"value"],[20,49,13,49],[20,54,13,54],[20,62,13,62],[20,64,14,8],[20,71,14,15,"numberToHex"],[20,82,14,26],[20,83,14,27,"value"],[20,88,14,32],[20,90,14,34,"opts"],[20,94,14,38],[20,95,14,39],[21,4,15,4],[21,8,15,8],[21,15,15,15,"value"],[21,20,15,20],[21,25,15,25],[21,33,15,33],[21,35,15,35],[22,6,16,8],[22,13,16,15,"stringToHex"],[22,24,16,26],[22,25,16,27,"value"],[22,30,16,32],[22,32,16,34,"opts"],[22,36,16,38],[22,37,16,39],[23,4,17,4],[24,4,18,4],[24,8,18,8],[24,15,18,15,"value"],[24,20,18,20],[24,25,18,25],[24,34,18,34],[24,36,19,8],[24,43,19,15,"boolToHex"],[24,52,19,24],[24,53,19,25,"value"],[24,58,19,30],[24,60,19,32,"opts"],[24,64,19,36],[24,65,19,37],[25,4,20,4],[25,11,20,11,"bytesToHex"],[25,21,20,21],[25,22,20,22,"value"],[25,27,20,27],[25,29,20,29,"opts"],[25,33,20,33],[25,34,20,34],[26,2,21,0],[27,2,22,0],[27,11,22,9,"boolToHex"],[27,20,22,18,"boolToHex"],[27,21,22,19,"value"],[27,26,22,24],[27,28,22,37],[28,4,22,37],[28,8,22,26,"opts"],[28,12,22,30],[28,15,22,30,"arguments"],[28,24,22,30],[28,25,22,30,"length"],[28,31,22,30],[28,39,22,30,"arguments"],[28,48,22,30],[28,56,22,30,"undefined"],[28,65,22,30],[28,68,22,30,"arguments"],[28,77,22,30],[28,83,22,33],[28,84,22,34],[28,85,22,35],[29,4,23,4],[29,8,23,10,"hex"],[29,11,23,13],[29,14,23,16],[29,19,23,21,"Number"],[29,25,23,27],[29,26,23,28,"value"],[29,31,23,33],[29,32,23,34],[29,34,23,36],[30,4,24,4],[30,8,24,8],[30,15,24,15,"opts"],[30,19,24,19],[30,20,24,20,"size"],[30,24,24,24],[30,29,24,29],[30,37,24,37],[30,39,24,39],[31,6,25,8],[31,7,25,9],[31,8,25,10],[31,10,25,12,"fromHex_js_1"],[31,22,25,24],[31,23,25,25,"assertSize"],[31,33,25,35],[31,35,25,37,"hex"],[31,38,25,40],[31,40,25,42],[32,8,25,44,"size"],[32,12,25,48],[32,14,25,50,"opts"],[32,18,25,54],[32,19,25,55,"size"],[33,6,25,60],[33,7,25,61],[33,8,25,62],[34,6,26,8],[34,13,26,15],[34,14,26,16],[34,15,26,17],[34,17,26,19,"pad_js_1"],[34,25,26,27],[34,26,26,28,"pad"],[34,29,26,31],[34,31,26,33,"hex"],[34,34,26,36],[34,36,26,38],[35,8,26,40,"size"],[35,12,26,44],[35,14,26,46,"opts"],[35,18,26,50],[35,19,26,51,"size"],[36,6,26,56],[36,7,26,57],[36,8,26,58],[37,4,27,4],[38,4,28,4],[38,11,28,11,"hex"],[38,14,28,14],[39,2,29,0],[40,2,30,0],[40,11,30,9,"bytesToHex"],[40,21,30,19,"bytesToHex"],[40,22,30,20,"value"],[40,27,30,25],[40,29,30,38],[41,4,30,38],[41,8,30,27,"opts"],[41,12,30,31],[41,15,30,31,"arguments"],[41,24,30,31],[41,25,30,31,"length"],[41,31,30,31],[41,39,30,31,"arguments"],[41,48,30,31],[41,56,30,31,"undefined"],[41,65,30,31],[41,68,30,31,"arguments"],[41,77,30,31],[41,83,30,34],[41,84,30,35],[41,85,30,36],[42,4,31,4],[42,8,31,8,"string"],[42,14,31,14],[42,17,31,17],[42,19,31,19],[43,4,32,4],[43,9,32,9],[43,13,32,13,"i"],[43,14,32,14],[43,17,32,17],[43,18,32,18],[43,20,32,20,"i"],[43,21,32,21],[43,24,32,24,"value"],[43,29,32,29],[43,30,32,30,"length"],[43,36,32,36],[43,38,32,38,"i"],[43,39,32,39],[43,41,32,41],[43,43,32,43],[44,6,33,8,"string"],[44,12,33,14],[44,16,33,18,"hexes"],[44,21,33,23],[44,22,33,24,"value"],[44,27,33,29],[44,28,33,30,"i"],[44,29,33,31],[44,30,33,32],[44,31,33,33],[45,4,34,4],[46,4,35,4],[46,8,35,10,"hex"],[46,11,35,13],[46,14,35,16],[46,19,35,21,"string"],[46,25,35,27],[46,27,35,29],[47,4,36,4],[47,8,36,8],[47,15,36,15,"opts"],[47,19,36,19],[47,20,36,20,"size"],[47,24,36,24],[47,29,36,29],[47,37,36,37],[47,39,36,39],[48,6,37,8],[48,7,37,9],[48,8,37,10],[48,10,37,12,"fromHex_js_1"],[48,22,37,24],[48,23,37,25,"assertSize"],[48,33,37,35],[48,35,37,37,"hex"],[48,38,37,40],[48,40,37,42],[49,8,37,44,"size"],[49,12,37,48],[49,14,37,50,"opts"],[49,18,37,54],[49,19,37,55,"size"],[50,6,37,60],[50,7,37,61],[50,8,37,62],[51,6,38,8],[51,13,38,15],[51,14,38,16],[51,15,38,17],[51,17,38,19,"pad_js_1"],[51,25,38,27],[51,26,38,28,"pad"],[51,29,38,31],[51,31,38,33,"hex"],[51,34,38,36],[51,36,38,38],[52,8,38,40,"dir"],[52,11,38,43],[52,13,38,45],[52,20,38,52],[53,8,38,54,"size"],[53,12,38,58],[53,14,38,60,"opts"],[53,18,38,64],[53,19,38,65,"size"],[54,6,38,70],[54,7,38,71],[54,8,38,72],[55,4,39,4],[56,4,40,4],[56,11,40,11,"hex"],[56,14,40,14],[57,2,41,0],[58,2,42,0],[58,11,42,9,"numberToHex"],[58,22,42,20,"numberToHex"],[58,23,42,21,"value_"],[58,29,42,27],[58,31,42,40],[59,4,42,40],[59,8,42,29,"opts"],[59,12,42,33],[59,15,42,33,"arguments"],[59,24,42,33],[59,25,42,33,"length"],[59,31,42,33],[59,39,42,33,"arguments"],[59,48,42,33],[59,56,42,33,"undefined"],[59,65,42,33],[59,68,42,33,"arguments"],[59,77,42,33],[59,83,42,36],[59,84,42,37],[59,85,42,38],[60,4,43,4],[60,8,43,12,"signed"],[60,14,43,18],[60,17,43,29,"opts"],[60,21,43,33],[60,22,43,12,"signed"],[60,28,43,18],[61,6,43,20,"size"],[61,10,43,24],[61,13,43,29,"opts"],[61,17,43,33],[61,18,43,20,"size"],[61,22,43,24],[62,4,44,4],[62,8,44,10,"value"],[62,13,44,15],[62,16,44,18,"BigInt"],[62,22,44,24],[62,23,44,25,"value_"],[62,29,44,31],[62,30,44,32],[63,4,45,4],[63,8,45,8,"maxValue"],[63,16,45,16],[64,4,46,4],[64,8,46,8,"size"],[64,12,46,12],[64,14,46,14],[65,6,47,8],[65,10,47,12,"signed"],[65,16,47,18],[65,18,48,12,"maxValue"],[65,26,48,20],[65,29,48,23],[65,30,48,24],[65,32,48,26],[65,36,48,31,"BigInt"],[65,42,48,37],[65,43,48,38,"size"],[65,47,48,42],[65,48,48,43],[65,51,48,46],[65,53,48,48],[65,56,48,51],[65,58,48,54],[65,62,48,58],[65,64,48,60],[65,65,48,61],[65,70,50,12,"maxValue"],[65,78,50,20],[65,81,50,23],[65,83,50,25],[65,88,50,30,"BigInt"],[65,94,50,36],[65,95,50,37,"size"],[65,99,50,41],[65,100,50,42],[65,103,50,45],[65,105,50,47],[65,106,50,48],[65,109,50,51],[65,111,50,53],[66,4,51,4],[66,5,51,5],[66,11,52,9],[66,15,52,13],[66,22,52,20,"value_"],[66,28,52,26],[66,33,52,31],[66,41,52,39],[66,43,52,41],[67,6,53,8,"maxValue"],[67,14,53,16],[67,17,53,19,"BigInt"],[67,23,53,25],[67,24,53,26,"Number"],[67,30,53,32],[67,31,53,33,"MAX_SAFE_INTEGER"],[67,47,53,49],[67,48,53,50],[68,4,54,4],[69,4,55,4],[69,8,55,10,"minValue"],[69,16,55,18],[69,19,55,21],[69,26,55,28,"maxValue"],[69,34,55,36],[69,39,55,41],[69,47,55,49],[69,51,55,53,"signed"],[69,57,55,59],[69,60,55,62],[69,61,55,63,"maxValue"],[69,69,55,71],[69,72,55,74],[69,74,55,76],[69,77,55,79],[69,78,55,80],[70,4,56,4],[70,8,56,9,"maxValue"],[70,16,56,17],[70,20,56,21,"value"],[70,25,56,26],[70,28,56,29,"maxValue"],[70,36,56,37],[70,40,56,42,"value"],[70,45,56,47],[70,48,56,50,"minValue"],[70,56,56,58],[70,58,56,60],[71,6,57,8],[71,10,57,14,"suffix"],[71,16,57,20],[71,19,57,23],[71,26,57,30,"value_"],[71,32,57,36],[71,37,57,41],[71,45,57,49],[71,48,57,52],[71,51,57,55],[71,54,57,58],[71,56,57,60],[72,6,58,8],[72,12,58,14],[72,16,58,18,"encoding_js_1"],[72,29,58,31],[72,30,58,32,"IntegerOutOfRangeError"],[72,52,58,54],[72,53,58,55],[73,8,59,12,"max"],[73,11,59,15],[73,13,59,17,"maxValue"],[73,21,59,25],[73,24,59,28],[73,27,59,31,"maxValue"],[73,35,59,39],[73,38,59,42,"suffix"],[73,44,59,48],[73,46,59,50],[73,49,59,53,"undefined"],[73,58,59,62],[74,8,60,12,"min"],[74,11,60,15],[74,13,60,17],[74,16,60,20,"minValue"],[74,24,60,28],[74,27,60,31,"suffix"],[74,33,60,37],[74,35,60,39],[75,8,61,12,"signed"],[75,14,61,18],[76,8,62,12,"size"],[76,12,62,16],[77,8,63,12,"value"],[77,13,63,17],[77,15,63,19],[77,18,63,22,"value_"],[77,24,63,28],[77,27,63,31,"suffix"],[77,33,63,37],[78,6,64,8],[78,7,64,9],[78,8,64,10],[79,4,65,4],[80,4,66,4],[80,8,66,10,"hex"],[80,11,66,13],[80,14,66,16],[80,19,66,21],[80,20,66,22,"signed"],[80,26,66,28],[80,30,66,32,"value"],[80,35,66,37],[80,38,66,40],[80,39,66,41],[80,42,66,44],[80,43,66,45],[80,45,66,47],[80,49,66,51,"BigInt"],[80,55,66,57],[80,56,66,58,"size"],[80,60,66,62],[80,63,66,65],[80,64,66,66],[80,65,66,67],[80,69,66,71,"BigInt"],[80,75,66,77],[80,76,66,78,"value"],[80,81,66,83],[80,82,66,84],[80,85,66,87,"value"],[80,90,66,92],[80,92,66,94,"toString"],[80,100,66,102],[80,101,66,103],[80,103,66,105],[80,104,66,106],[80,106,66,108],[81,4,67,4],[81,8,67,8,"size"],[81,12,67,12],[81,14,68,8],[81,21,68,15],[81,22,68,16],[81,23,68,17],[81,25,68,19,"pad_js_1"],[81,33,68,27],[81,34,68,28,"pad"],[81,37,68,31],[81,39,68,33,"hex"],[81,42,68,36],[81,44,68,38],[82,6,68,40,"size"],[83,4,68,45],[83,5,68,46],[83,6,68,47],[84,4,69,4],[84,11,69,11,"hex"],[84,14,69,14],[85,2,70,0],[86,2,71,0],[86,6,71,6,"encoder"],[86,13,71,13],[86,16,71,16],[86,20,71,20,"TextEncoder"],[86,31,71,31],[86,32,71,32],[86,33,71,33],[87,2,72,0],[87,11,72,9,"stringToHex"],[87,22,72,20,"stringToHex"],[87,23,72,21,"value_"],[87,29,72,27],[87,31,72,40],[88,4,72,40],[88,8,72,29,"opts"],[88,12,72,33],[88,15,72,33,"arguments"],[88,24,72,33],[88,25,72,33,"length"],[88,31,72,33],[88,39,72,33,"arguments"],[88,48,72,33],[88,56,72,33,"undefined"],[88,65,72,33],[88,68,72,33,"arguments"],[88,77,72,33],[88,83,72,36],[88,84,72,37],[88,85,72,38],[89,4,73,4],[89,8,73,10,"value"],[89,13,73,15],[89,16,73,18,"encoder"],[89,23,73,25],[89,24,73,26,"encode"],[89,30,73,32],[89,31,73,33,"value_"],[89,37,73,39],[89,38,73,40],[90,4,74,4],[90,11,74,11,"bytesToHex"],[90,21,74,21],[90,22,74,22,"value"],[90,27,74,27],[90,29,74,29,"opts"],[90,33,74,33],[90,34,74,34],[91,2,75,0],[92,0,75,1],[92,3]],"functionMap":{"names":["<global>","Array.from$argument_1","toHex","boolToHex","bytesToHex","numberToHex","stringToHex"],"mappings":"AAA;0CCU,0CD;AEC;CFS;AGC;CHO;AIC;CJW;AKC;CL4B;AME;CNG"}},"type":"js/module"}]}