{"dependencies":[{"name":"elliptic","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":33,"index":33}}],"key":"n3dAEMNKUOLFwwWj38tX3drZ698="}},{"name":"sha3","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":34},"end":{"line":2,"column":25,"index":59}}],"key":"NKewUIZ67xZcn0nhuSF3l3TerAE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SignAlgorithm = exports.HashAlgorithm = void 0;\n  exports.sign = sign;\n  var _elliptic = require(_dependencyMap[0], \"elliptic\");\n  var _sha = require(_dependencyMap[1], \"sha3\");\n  var HashAlgorithm = exports.HashAlgorithm = /*#__PURE__*/function (HashAlgorithm) {\n    HashAlgorithm[HashAlgorithm[\"SHA2_256\"] = 1] = \"SHA2_256\";\n    HashAlgorithm[HashAlgorithm[\"SHA2_384\"] = 2] = \"SHA2_384\";\n    HashAlgorithm[HashAlgorithm[\"SHA3_256\"] = 3] = \"SHA3_256\";\n    HashAlgorithm[HashAlgorithm[\"SHA3_384\"] = 4] = \"SHA3_384\";\n    HashAlgorithm[HashAlgorithm[\"KMAC128_BLS_BLS12_381\"] = 5] = \"KMAC128_BLS_BLS12_381\";\n    HashAlgorithm[HashAlgorithm[\"KECCAK_256\"] = 6] = \"KECCAK_256\";\n    return HashAlgorithm;\n  }({});\n  var SignAlgorithm = exports.SignAlgorithm = /*#__PURE__*/function (SignAlgorithm) {\n    SignAlgorithm[SignAlgorithm[\"ECDSA_P256\"] = 1] = \"ECDSA_P256\";\n    SignAlgorithm[SignAlgorithm[\"ECDSA_secp256k1\"] = 2] = \"ECDSA_secp256k1\";\n    SignAlgorithm[SignAlgorithm[\"BLS_BLS12_381\"] = 3] = \"BLS_BLS12_381\";\n    return SignAlgorithm;\n  }({});\n  var ec = new _elliptic.ec(\"p256\");\n  var hashMsgHex = msgHex => {\n    var sha = new _sha.SHA3(256);\n    sha.update(Buffer.from(msgHex, \"hex\"));\n    return sha.digest();\n  };\n  function sign(privateKey, msgHex) {\n    var key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n    var sig = key.sign(hashMsgHex(msgHex));\n    var n = 32;\n    var r = sig.r.toArrayLike(Buffer, \"be\", n);\n    var s = sig.s.toArrayLike(Buffer, \"be\", n);\n    return Buffer.concat([r, s]).toString(\"hex\");\n  }\n});","lineCount":38,"map":[[7,2,1,0],[7,6,1,0,"_elliptic"],[7,15,1,0],[7,18,1,0,"require"],[7,25,1,0],[7,26,1,0,"_dependencyMap"],[7,40,1,0],[8,2,2,0],[8,6,2,0,"_sha"],[8,10,2,0],[8,13,2,0,"require"],[8,20,2,0],[8,21,2,0,"_dependencyMap"],[8,35,2,0],[9,2,2,25],[9,6,4,12,"HashAlgorithm"],[9,19,4,25],[9,22,4,25,"exports"],[9,29,4,25],[9,30,4,25,"HashAlgorithm"],[9,43,4,25],[9,69,4,12,"HashAlgorithm"],[9,82,4,25],[10,4,4,12,"HashAlgorithm"],[10,17,4,25],[10,18,4,12,"HashAlgorithm"],[10,31,4,25],[11,4,4,12,"HashAlgorithm"],[11,17,4,25],[11,18,4,12,"HashAlgorithm"],[11,31,4,25],[12,4,4,12,"HashAlgorithm"],[12,17,4,25],[12,18,4,12,"HashAlgorithm"],[12,31,4,25],[13,4,4,12,"HashAlgorithm"],[13,17,4,25],[13,18,4,12,"HashAlgorithm"],[13,31,4,25],[14,4,4,12,"HashAlgorithm"],[14,17,4,25],[14,18,4,12,"HashAlgorithm"],[14,31,4,25],[15,4,4,12,"HashAlgorithm"],[15,17,4,25],[15,18,4,12,"HashAlgorithm"],[15,31,4,25],[16,4,4,25],[16,11,4,12,"HashAlgorithm"],[16,24,4,25],[17,2,4,25],[18,2,4,25],[18,6,13,12,"SignAlgorithm"],[18,19,13,25],[18,22,13,25,"exports"],[18,29,13,25],[18,30,13,25,"SignAlgorithm"],[18,43,13,25],[18,69,13,12,"SignAlgorithm"],[18,82,13,25],[19,4,13,12,"SignAlgorithm"],[19,17,13,25],[19,18,13,12,"SignAlgorithm"],[19,31,13,25],[20,4,13,12,"SignAlgorithm"],[20,17,13,25],[20,18,13,12,"SignAlgorithm"],[20,31,13,25],[21,4,13,12,"SignAlgorithm"],[21,17,13,25],[21,18,13,12,"SignAlgorithm"],[21,31,13,25],[22,4,13,25],[22,11,13,12,"SignAlgorithm"],[22,24,13,25],[23,2,13,25],[24,2,19,0],[24,6,19,6,"ec"],[24,8,19,8],[24,11,19,11],[24,15,19,15,"EC"],[24,27,19,17],[24,28,19,18],[24,34,19,24],[24,35,19,25],[25,2,21,0],[25,6,21,6,"hashMsgHex"],[25,16,21,16],[25,19,21,20,"msgHex"],[25,25,21,34],[25,29,21,39],[26,4,22,2],[26,8,22,8,"sha"],[26,11,22,11],[26,14,22,14],[26,18,22,18,"SHA3"],[26,27,22,22],[26,28,22,23],[26,31,22,26],[26,32,22,27],[27,4,23,2,"sha"],[27,7,23,5],[27,8,23,6,"update"],[27,14,23,12],[27,15,23,13,"Buffer"],[27,21,23,19],[27,22,23,20,"from"],[27,26,23,24],[27,27,23,25,"msgHex"],[27,33,23,31],[27,35,23,33],[27,40,23,38],[27,41,23,39],[27,42,23,40],[28,4,24,2],[28,11,24,9,"sha"],[28,14,24,12],[28,15,24,13,"digest"],[28,21,24,19],[28,22,24,20],[28,23,24,21],[29,2,25,0],[29,3,25,1],[30,2,27,7],[30,11,27,16,"sign"],[30,15,27,20,"sign"],[30,16,27,21,"privateKey"],[30,26,27,39],[30,28,27,41,"msgHex"],[30,34,27,55],[30,36,27,57],[31,4,28,2],[31,8,28,8,"key"],[31,11,28,11],[31,14,28,14,"ec"],[31,16,28,16],[31,17,28,17,"keyFromPrivate"],[31,31,28,31],[31,32,28,32,"Buffer"],[31,38,28,38],[31,39,28,39,"from"],[31,43,28,43],[31,44,28,44,"privateKey"],[31,54,28,54],[31,56,28,56],[31,61,28,61],[31,62,28,62],[31,63,28,63],[32,4,29,2],[32,8,29,8,"sig"],[32,11,29,11],[32,14,29,14,"key"],[32,17,29,17],[32,18,29,18,"sign"],[32,22,29,22],[32,23,29,23,"hashMsgHex"],[32,33,29,33],[32,34,29,34,"msgHex"],[32,40,29,40],[32,41,29,41],[32,42,29,42],[33,4,30,2],[33,8,30,8,"n"],[33,9,30,9],[33,12,30,12],[33,14,30,14],[34,4,31,2],[34,8,31,8,"r"],[34,9,31,9],[34,12,31,12,"sig"],[34,15,31,15],[34,16,31,16,"r"],[34,17,31,17],[34,18,31,18,"toArrayLike"],[34,29,31,29],[34,30,31,30,"Buffer"],[34,36,31,36],[34,38,31,38],[34,42,31,42],[34,44,31,44,"n"],[34,45,31,45],[34,46,31,46],[35,4,32,2],[35,8,32,8,"s"],[35,9,32,9],[35,12,32,12,"sig"],[35,15,32,15],[35,16,32,16,"s"],[35,17,32,17],[35,18,32,18,"toArrayLike"],[35,29,32,29],[35,30,32,30,"Buffer"],[35,36,32,36],[35,38,32,38],[35,42,32,42],[35,44,32,44,"n"],[35,45,32,45],[35,46,32,46],[36,4,33,2],[36,11,33,9,"Buffer"],[36,17,33,15],[36,18,33,16,"concat"],[36,24,33,22],[36,25,33,23],[36,26,33,24,"r"],[36,27,33,25],[36,29,33,27,"s"],[36,30,33,28],[36,31,33,29],[36,32,33,30],[36,33,33,31,"toString"],[36,41,33,39],[36,42,33,40],[36,47,33,45],[36,48,33,46],[37,2,34,0],[38,0,34,1],[38,3]],"functionMap":{"names":["<global>","hashMsgHex","sign"],"mappings":"AAA;mBCoB;CDI;OEE"}},"type":"js/module"}]}