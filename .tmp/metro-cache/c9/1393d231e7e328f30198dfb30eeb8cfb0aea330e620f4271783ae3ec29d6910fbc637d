{"dependencies":[{"name":"../encoding/toBytes.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":21,"index":137},"end":{"line":4,"column":54,"index":170}}],"key":"IH3Jqmew4P7fKnssnSnuakMjJtk="}},{"name":"../encoding/toHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":19,"index":191},"end":{"line":5,"column":50,"index":222}}],"key":"bRt+1vooOX12K5i1W+v01PrrHLA="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.blobsToProofs = blobsToProofs;\n  var toBytes_js_1 = require(_dependencyMap[0], \"../encoding/toBytes.js\");\n  var toHex_js_1 = require(_dependencyMap[1], \"../encoding/toHex.js\");\n  function blobsToProofs(parameters) {\n    var kzg = parameters.kzg;\n    var to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n    var blobs = typeof parameters.blobs[0] === 'string' ? parameters.blobs.map(x => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;\n    var commitments = typeof parameters.commitments[0] === 'string' ? parameters.commitments.map(x => (0, toBytes_js_1.hexToBytes)(x)) : parameters.commitments;\n    var proofs = [];\n    for (var i = 0; i < blobs.length; i++) {\n      var blob = blobs[i];\n      var commitment = commitments[i];\n      proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));\n    }\n    return to === 'bytes' ? proofs : proofs.map(x => (0, toHex_js_1.bytesToHex)(x));\n  }\n});","lineCount":23,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"blobsToProofs"],[7,23,3,21],[7,26,3,24,"blobsToProofs"],[7,39,3,37],[8,2,4,0],[8,6,4,6,"toBytes_js_1"],[8,18,4,18],[8,21,4,21,"require"],[8,28,4,28],[8,29,4,28,"_dependencyMap"],[8,43,4,28],[8,72,4,53],[8,73,4,54],[9,2,5,0],[9,6,5,6,"toHex_js_1"],[9,16,5,16],[9,19,5,19,"require"],[9,26,5,26],[9,27,5,26,"_dependencyMap"],[9,41,5,26],[9,68,5,49],[9,69,5,50],[10,2,6,0],[10,11,6,9,"blobsToProofs"],[10,24,6,22,"blobsToProofs"],[10,25,6,23,"parameters"],[10,35,6,33],[10,37,6,35],[11,4,7,4],[11,8,7,12,"kzg"],[11,11,7,15],[11,14,7,20,"parameters"],[11,24,7,30],[11,25,7,12,"kzg"],[11,28,7,15],[12,4,8,4],[12,8,8,10,"to"],[12,10,8,12],[12,13,8,15,"parameters"],[12,23,8,25],[12,24,8,26,"to"],[12,26,8,28],[12,31,8,33],[12,38,8,40,"parameters"],[12,48,8,50],[12,49,8,51,"blobs"],[12,54,8,56],[12,55,8,57],[12,56,8,58],[12,57,8,59],[12,62,8,64],[12,70,8,72],[12,73,8,75],[12,78,8,80],[12,81,8,83],[12,88,8,90],[12,89,8,91],[13,4,9,4],[13,8,9,10,"blobs"],[13,13,9,15],[13,16,9,19],[13,23,9,26,"parameters"],[13,33,9,36],[13,34,9,37,"blobs"],[13,39,9,42],[13,40,9,43],[13,41,9,44],[13,42,9,45],[13,47,9,50],[13,55,9,58],[13,58,10,10,"parameters"],[13,68,10,20],[13,69,10,21,"blobs"],[13,74,10,26],[13,75,10,27,"map"],[13,78,10,30],[13,79,10,32,"x"],[13,80,10,33],[13,84,10,38],[13,85,10,39],[13,86,10,40],[13,88,10,42,"toBytes_js_1"],[13,100,10,54],[13,101,10,55,"hexToBytes"],[13,111,10,65],[13,113,10,67,"x"],[13,114,10,68],[13,115,10,69],[13,116,10,70],[13,119,11,10,"parameters"],[13,129,11,20],[13,130,11,21,"blobs"],[13,135,11,27],[14,4,12,4],[14,8,12,10,"commitments"],[14,19,12,21],[14,22,12,25],[14,29,12,32,"parameters"],[14,39,12,42],[14,40,12,43,"commitments"],[14,51,12,54],[14,52,12,55],[14,53,12,56],[14,54,12,57],[14,59,12,62],[14,67,12,70],[14,70,13,10,"parameters"],[14,80,13,20],[14,81,13,21,"commitments"],[14,92,13,32],[14,93,13,33,"map"],[14,96,13,36],[14,97,13,38,"x"],[14,98,13,39],[14,102,13,44],[14,103,13,45],[14,104,13,46],[14,106,13,48,"toBytes_js_1"],[14,118,13,60],[14,119,13,61,"hexToBytes"],[14,129,13,71],[14,131,13,73,"x"],[14,132,13,74],[14,133,13,75],[14,134,13,76],[14,137,14,10,"parameters"],[14,147,14,20],[14,148,14,21,"commitments"],[14,159,14,33],[15,4,15,4],[15,8,15,10,"proofs"],[15,14,15,16],[15,17,15,19],[15,19,15,21],[16,4,16,4],[16,9,16,9],[16,13,16,13,"i"],[16,14,16,14],[16,17,16,17],[16,18,16,18],[16,20,16,20,"i"],[16,21,16,21],[16,24,16,24,"blobs"],[16,29,16,29],[16,30,16,30,"length"],[16,36,16,36],[16,38,16,38,"i"],[16,39,16,39],[16,41,16,41],[16,43,16,43],[17,6,17,8],[17,10,17,14,"blob"],[17,14,17,18],[17,17,17,21,"blobs"],[17,22,17,26],[17,23,17,27,"i"],[17,24,17,28],[17,25,17,29],[18,6,18,8],[18,10,18,14,"commitment"],[18,20,18,24],[18,23,18,27,"commitments"],[18,34,18,38],[18,35,18,39,"i"],[18,36,18,40],[18,37,18,41],[19,6,19,8,"proofs"],[19,12,19,14],[19,13,19,15,"push"],[19,17,19,19],[19,18,19,20,"Uint8Array"],[19,28,19,30],[19,29,19,31,"from"],[19,33,19,35],[19,34,19,36,"kzg"],[19,37,19,39],[19,38,19,40,"computeBlobKzgProof"],[19,57,19,59],[19,58,19,60,"blob"],[19,62,19,64],[19,64,19,66,"commitment"],[19,74,19,76],[19,75,19,77],[19,76,19,78],[19,77,19,79],[20,4,20,4],[21,4,21,4],[21,11,21,12,"to"],[21,13,21,14],[21,18,21,19],[21,25,21,26],[21,28,22,10,"proofs"],[21,34,22,16],[21,37,23,10,"proofs"],[21,43,23,16],[21,44,23,17,"map"],[21,47,23,20],[21,48,23,22,"x"],[21,49,23,23],[21,53,23,28],[21,54,23,29],[21,55,23,30],[21,57,23,32,"toHex_js_1"],[21,67,23,42],[21,68,23,43,"bytesToHex"],[21,78,23,53],[21,80,23,55,"x"],[21,81,23,56],[21,82,23,57],[21,83,23,58],[22,2,24,0],[23,0,24,1],[23,3]],"functionMap":{"names":["<global>","blobsToProofs","parameters.blobs.map$argument_0","parameters.commitments.map$argument_0","proofs.map$argument_0"],"mappings":"AAA;ACK;+BCI,sCD;qCEG,sCF;qBGU,oCH;CDC"}},"type":"js/module"}]}