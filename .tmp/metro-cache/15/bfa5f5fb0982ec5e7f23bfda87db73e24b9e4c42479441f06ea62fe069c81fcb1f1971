{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":298,"column":0,"index":7366}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"punycode","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":17,"index":32},"end":{"line":3,"column":36,"index":51}}],"key":"/7R9EfqZZuV9raoZb1PnGE3lNHc="}},{"name":"./lib/regexes.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":16,"index":69},"end":{"line":4,"column":43,"index":96}}],"key":"yB8QL9LGw9SiaT31/CubewOMBdc="}},{"name":"./lib/mappingTable.json","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":21,"index":119},"end":{"line":5,"column":55,"index":153}}],"key":"tJkhfmYZSpzfM2/H8xr0bZJdxKc="}},{"name":"./lib/statusMapping.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":27,"index":182},"end":{"line":6,"column":60,"index":215}}],"key":"ONe7QYHcugrFhleKfIwkDkP6RUA="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var punycode = require(_dependencyMap[1], \"punycode\");\n  var regexes = require(_dependencyMap[2], \"./lib/regexes.js\");\n  var mappingTable = require(_dependencyMap[3], \"./lib/mappingTable.json\");\n  var _require = require(_dependencyMap[4], \"./lib/statusMapping.js\"),\n    STATUS_MAPPING = _require.STATUS_MAPPING;\n  function containsNonASCII(str) {\n    return /[^\\x00-\\x7F]/.test(str);\n  }\n  function findStatus(val, _ref) {\n    var useSTD3ASCIIRules = _ref.useSTD3ASCIIRules;\n    var start = 0;\n    var end = mappingTable.length - 1;\n    while (start <= end) {\n      var mid = Math.floor((start + end) / 2);\n      var target = mappingTable[mid];\n      var min = Array.isArray(target[0]) ? target[0][0] : target[0];\n      var max = Array.isArray(target[0]) ? target[0][1] : target[0];\n      if (min <= val && max >= val) {\n        if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n          return [STATUS_MAPPING.disallowed, ...target.slice(2)];\n        } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n          return [STATUS_MAPPING.valid, ...target.slice(2)];\n        } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n          return [STATUS_MAPPING.mapped, ...target.slice(2)];\n        }\n        return target.slice(1);\n      } else if (min > val) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n    return null;\n  }\n  function mapChars(domainName, _ref2) {\n    var useSTD3ASCIIRules = _ref2.useSTD3ASCIIRules,\n      processingOption = _ref2.processingOption;\n    var hasError = false;\n    var processed = \"\";\n    for (var ch of domainName) {\n      var _findStatus = findStatus(ch.codePointAt(0), {\n          useSTD3ASCIIRules\n        }),\n        _findStatus2 = _slicedToArray(_findStatus, 2),\n        status = _findStatus2[0],\n        mapping = _findStatus2[1];\n      switch (status) {\n        case STATUS_MAPPING.disallowed:\n          hasError = true;\n          processed += ch;\n          break;\n        case STATUS_MAPPING.ignored:\n          break;\n        case STATUS_MAPPING.mapped:\n          processed += mapping;\n          break;\n        case STATUS_MAPPING.deviation:\n          if (processingOption === \"transitional\") {\n            processed += mapping;\n          } else {\n            processed += ch;\n          }\n          break;\n        case STATUS_MAPPING.valid:\n          processed += ch;\n          break;\n      }\n    }\n    return {\n      string: processed,\n      error: hasError\n    };\n  }\n  function validateLabel(label, _ref3) {\n    var checkHyphens = _ref3.checkHyphens,\n      checkBidi = _ref3.checkBidi,\n      checkJoiners = _ref3.checkJoiners,\n      processingOption = _ref3.processingOption,\n      useSTD3ASCIIRules = _ref3.useSTD3ASCIIRules;\n    if (label.normalize(\"NFC\") !== label) {\n      return false;\n    }\n    var codePoints = Array.from(label);\n    if (checkHyphens) {\n      if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n        return false;\n      }\n    }\n    if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n      return false;\n    }\n    for (var ch of codePoints) {\n      var _findStatus3 = findStatus(ch.codePointAt(0), {\n          useSTD3ASCIIRules\n        }),\n        _findStatus4 = _slicedToArray(_findStatus3, 1),\n        status = _findStatus4[0];\n      if (processingOption === \"transitional\" && status !== STATUS_MAPPING.valid || processingOption === \"nontransitional\" && status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n        return false;\n      }\n    }\n\n    // https://tools.ietf.org/html/rfc5892#appendix-A\n    if (checkJoiners) {\n      var last = 0;\n      for (var _ref4 of codePoints.entries()) {\n        var _ref5 = _slicedToArray(_ref4, 2);\n        var i = _ref5[0];\n        var _ch = _ref5[1];\n        if (_ch === \"\\u200C\" || _ch === \"\\u200D\") {\n          if (i > 0) {\n            if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n              continue;\n            }\n            if (_ch === \"\\u200C\") {\n              // TODO: make this more efficient\n              var next = codePoints.indexOf(\"\\u200C\", i + 1);\n              var test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n              if (regexes.validZWNJ.test(test.join(\"\"))) {\n                last = i + 1;\n                continue;\n              }\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    // https://tools.ietf.org/html/rfc5893#section-2\n    if (checkBidi) {\n      var rtl;\n\n      // 1\n      if (regexes.bidiS1LTR.test(codePoints[0])) {\n        rtl = false;\n      } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n        rtl = true;\n      } else {\n        return false;\n      }\n      if (rtl) {\n        // 2-4\n        if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n          return false;\n        }\n      } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n        // 5-6\n        return false;\n      }\n    }\n    return true;\n  }\n  function isBidiDomain(labels) {\n    var domain = labels.map(label => {\n      if (label.startsWith(\"xn--\")) {\n        try {\n          return punycode.decode(label.substring(4));\n        } catch (err) {\n          return \"\";\n        }\n      }\n      return label;\n    }).join(\".\");\n    return regexes.bidiDomain.test(domain);\n  }\n  function processing(domainName, options) {\n    var processingOption = options.processingOption;\n\n    // 1. Map.\n    var _mapChars = mapChars(domainName, options),\n      string = _mapChars.string,\n      error = _mapChars.error;\n\n    // 2. Normalize.\n    string = string.normalize(\"NFC\");\n\n    // 3. Break.\n    var labels = string.split(\".\");\n    var isBidi = isBidiDomain(labels);\n\n    // 4. Convert/Validate.\n    for (var _ref6 of labels.entries()) {\n      var _ref7 = _slicedToArray(_ref6, 2);\n      var i = _ref7[0];\n      var origLabel = _ref7[1];\n      var label = origLabel;\n      var curProcessing = processingOption;\n      if (label.startsWith(\"xn--\")) {\n        try {\n          label = punycode.decode(label.substring(4));\n          labels[i] = label;\n        } catch (err) {\n          error = true;\n          continue;\n        }\n        curProcessing = \"nontransitional\";\n      }\n\n      // No need to validate if we already know there is an error.\n      if (error) {\n        continue;\n      }\n      var validation = validateLabel(label, Object.assign({}, options, {\n        processingOption: curProcessing,\n        checkBidi: options.checkBidi && isBidi\n      }));\n      if (!validation) {\n        error = true;\n      }\n    }\n    return {\n      string: labels.join(\".\"),\n      error\n    };\n  }\n  function toASCII(domainName) {\n    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref8$checkHyphens = _ref8.checkHyphens,\n      checkHyphens = _ref8$checkHyphens === void 0 ? false : _ref8$checkHyphens,\n      _ref8$checkBidi = _ref8.checkBidi,\n      checkBidi = _ref8$checkBidi === void 0 ? false : _ref8$checkBidi,\n      _ref8$checkJoiners = _ref8.checkJoiners,\n      checkJoiners = _ref8$checkJoiners === void 0 ? false : _ref8$checkJoiners,\n      _ref8$useSTD3ASCIIRul = _ref8.useSTD3ASCIIRules,\n      useSTD3ASCIIRules = _ref8$useSTD3ASCIIRul === void 0 ? false : _ref8$useSTD3ASCIIRul,\n      _ref8$processingOptio = _ref8.processingOption,\n      processingOption = _ref8$processingOptio === void 0 ? \"nontransitional\" : _ref8$processingOptio,\n      _ref8$verifyDNSLength = _ref8.verifyDNSLength,\n      verifyDNSLength = _ref8$verifyDNSLength === void 0 ? false : _ref8$verifyDNSLength;\n    if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n      throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n    }\n    var result = processing(domainName, {\n      processingOption,\n      checkHyphens,\n      checkBidi,\n      checkJoiners,\n      useSTD3ASCIIRules\n    });\n    var labels = result.string.split(\".\");\n    labels = labels.map(l => {\n      if (containsNonASCII(l)) {\n        try {\n          return \"xn--\" + punycode.encode(l);\n        } catch (e) {\n          result.error = true;\n        }\n      }\n      return l;\n    });\n    if (verifyDNSLength) {\n      var total = labels.join(\".\").length;\n      if (total > 253 || total === 0) {\n        result.error = true;\n      }\n      for (var i = 0; i < labels.length; ++i) {\n        if (labels[i].length > 63 || labels[i].length === 0) {\n          result.error = true;\n          break;\n        }\n      }\n    }\n    if (result.error) {\n      return null;\n    }\n    return labels.join(\".\");\n  }\n  function toUnicode(domainName) {\n    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref9$checkHyphens = _ref9.checkHyphens,\n      checkHyphens = _ref9$checkHyphens === void 0 ? false : _ref9$checkHyphens,\n      _ref9$checkBidi = _ref9.checkBidi,\n      checkBidi = _ref9$checkBidi === void 0 ? false : _ref9$checkBidi,\n      _ref9$checkJoiners = _ref9.checkJoiners,\n      checkJoiners = _ref9$checkJoiners === void 0 ? false : _ref9$checkJoiners,\n      _ref9$useSTD3ASCIIRul = _ref9.useSTD3ASCIIRules,\n      useSTD3ASCIIRules = _ref9$useSTD3ASCIIRul === void 0 ? false : _ref9$useSTD3ASCIIRul,\n      _ref9$processingOptio = _ref9.processingOption,\n      processingOption = _ref9$processingOptio === void 0 ? \"nontransitional\" : _ref9$processingOptio;\n    var result = processing(domainName, {\n      processingOption,\n      checkHyphens,\n      checkBidi,\n      checkJoiners,\n      useSTD3ASCIIRules\n    });\n    return {\n      domain: result.string,\n      error: result.error\n    };\n  }\n  module.exports = {\n    toASCII,\n    toUnicode\n  };\n});","lineCount":301,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,3,0],[5,6,3,6,"punycode"],[5,14,3,14],[5,17,3,17,"require"],[5,24,3,24],[5,25,3,24,"_dependencyMap"],[5,39,3,24],[5,54,3,35],[5,55,3,36],[6,2,4,0],[6,6,4,6,"regexes"],[6,13,4,13],[6,16,4,16,"require"],[6,23,4,23],[6,24,4,23,"_dependencyMap"],[6,38,4,23],[6,61,4,42],[6,62,4,43],[7,2,5,0],[7,6,5,6,"mappingTable"],[7,18,5,18],[7,21,5,21,"require"],[7,28,5,28],[7,29,5,28,"_dependencyMap"],[7,43,5,28],[7,73,5,54],[7,74,5,55],[8,2,6,0],[8,6,6,0,"_require"],[8,14,6,0],[8,17,6,27,"require"],[8,24,6,34],[8,25,6,34,"_dependencyMap"],[8,39,6,34],[8,68,6,59],[8,69,6,60],[9,4,6,8,"STATUS_MAPPING"],[9,18,6,22],[9,21,6,22,"_require"],[9,29,6,22],[9,30,6,8,"STATUS_MAPPING"],[9,44,6,22],[10,2,8,0],[10,11,8,9,"containsNonASCII"],[10,27,8,25,"containsNonASCII"],[10,28,8,26,"str"],[10,31,8,29],[10,33,8,31],[11,4,9,2],[11,11,9,9],[11,25,9,23],[11,26,9,24,"test"],[11,30,9,28],[11,31,9,29,"str"],[11,34,9,32],[11,35,9,33],[12,2,10,0],[13,2,12,0],[13,11,12,9,"findStatus"],[13,21,12,19,"findStatus"],[13,22,12,20,"val"],[13,25,12,23],[13,27,12,23,"_ref"],[13,31,12,23],[13,33,12,48],[14,4,12,48],[14,8,12,27,"useSTD3ASCIIRules"],[14,25,12,44],[14,28,12,44,"_ref"],[14,32,12,44],[14,33,12,27,"useSTD3ASCIIRules"],[14,50,12,44],[15,4,13,2],[15,8,13,6,"start"],[15,13,13,11],[15,16,13,14],[15,17,13,15],[16,4,14,2],[16,8,14,6,"end"],[16,11,14,9],[16,14,14,12,"mappingTable"],[16,26,14,24],[16,27,14,25,"length"],[16,33,14,31],[16,36,14,34],[16,37,14,35],[17,4,16,2],[17,11,16,9,"start"],[17,16,16,14],[17,20,16,18,"end"],[17,23,16,21],[17,25,16,23],[18,6,17,4],[18,10,17,10,"mid"],[18,13,17,13],[18,16,17,16,"Math"],[18,20,17,20],[18,21,17,21,"floor"],[18,26,17,26],[18,27,17,27],[18,28,17,28,"start"],[18,33,17,33],[18,36,17,36,"end"],[18,39,17,39],[18,43,17,43],[18,44,17,44],[18,45,17,45],[19,6,19,4],[19,10,19,10,"target"],[19,16,19,16],[19,19,19,19,"mappingTable"],[19,31,19,31],[19,32,19,32,"mid"],[19,35,19,35],[19,36,19,36],[20,6,20,4],[20,10,20,10,"min"],[20,13,20,13],[20,16,20,16,"Array"],[20,21,20,21],[20,22,20,22,"isArray"],[20,29,20,29],[20,30,20,30,"target"],[20,36,20,36],[20,37,20,37],[20,38,20,38],[20,39,20,39],[20,40,20,40],[20,43,20,43,"target"],[20,49,20,49],[20,50,20,50],[20,51,20,51],[20,52,20,52],[20,53,20,53],[20,54,20,54],[20,55,20,55],[20,58,20,58,"target"],[20,64,20,64],[20,65,20,65],[20,66,20,66],[20,67,20,67],[21,6,21,4],[21,10,21,10,"max"],[21,13,21,13],[21,16,21,16,"Array"],[21,21,21,21],[21,22,21,22,"isArray"],[21,29,21,29],[21,30,21,30,"target"],[21,36,21,36],[21,37,21,37],[21,38,21,38],[21,39,21,39],[21,40,21,40],[21,43,21,43,"target"],[21,49,21,49],[21,50,21,50],[21,51,21,51],[21,52,21,52],[21,53,21,53],[21,54,21,54],[21,55,21,55],[21,58,21,58,"target"],[21,64,21,64],[21,65,21,65],[21,66,21,66],[21,67,21,67],[22,6,23,4],[22,10,23,8,"min"],[22,13,23,11],[22,17,23,15,"val"],[22,20,23,18],[22,24,23,22,"max"],[22,27,23,25],[22,31,23,29,"val"],[22,34,23,32],[22,36,23,34],[23,8,24,6],[23,12,24,10,"useSTD3ASCIIRules"],[23,29,24,27],[23,34,25,11,"target"],[23,40,25,17],[23,41,25,18],[23,42,25,19],[23,43,25,20],[23,48,25,25,"STATUS_MAPPING"],[23,62,25,39],[23,63,25,40,"disallowed_STD3_valid"],[23,84,25,61],[23,88,25,65,"target"],[23,94,25,71],[23,95,25,72],[23,96,25,73],[23,97,25,74],[23,102,25,79,"STATUS_MAPPING"],[23,116,25,93],[23,117,25,94,"disallowed_STD3_mapped"],[23,139,25,116],[23,140,25,117],[23,142,25,119],[24,10,26,8],[24,17,26,15],[24,18,26,16,"STATUS_MAPPING"],[24,32,26,30],[24,33,26,31,"disallowed"],[24,43,26,41],[24,45,26,43],[24,48,26,46,"target"],[24,54,26,52],[24,55,26,53,"slice"],[24,60,26,58],[24,61,26,59],[24,62,26,60],[24,63,26,61],[24,64,26,62],[25,8,27,6],[25,9,27,7],[25,15,27,13],[25,19,27,17,"target"],[25,25,27,23],[25,26,27,24],[25,27,27,25],[25,28,27,26],[25,33,27,31,"STATUS_MAPPING"],[25,47,27,45],[25,48,27,46,"disallowed_STD3_valid"],[25,69,27,67],[25,71,27,69],[26,10,28,8],[26,17,28,15],[26,18,28,16,"STATUS_MAPPING"],[26,32,28,30],[26,33,28,31,"valid"],[26,38,28,36],[26,40,28,38],[26,43,28,41,"target"],[26,49,28,47],[26,50,28,48,"slice"],[26,55,28,53],[26,56,28,54],[26,57,28,55],[26,58,28,56],[26,59,28,57],[27,8,29,6],[27,9,29,7],[27,15,29,13],[27,19,29,17,"target"],[27,25,29,23],[27,26,29,24],[27,27,29,25],[27,28,29,26],[27,33,29,31,"STATUS_MAPPING"],[27,47,29,45],[27,48,29,46,"disallowed_STD3_mapped"],[27,70,29,68],[27,72,29,70],[28,10,30,8],[28,17,30,15],[28,18,30,16,"STATUS_MAPPING"],[28,32,30,30],[28,33,30,31,"mapped"],[28,39,30,37],[28,41,30,39],[28,44,30,42,"target"],[28,50,30,48],[28,51,30,49,"slice"],[28,56,30,54],[28,57,30,55],[28,58,30,56],[28,59,30,57],[28,60,30,58],[29,8,31,6],[30,8,33,6],[30,15,33,13,"target"],[30,21,33,19],[30,22,33,20,"slice"],[30,27,33,25],[30,28,33,26],[30,29,33,27],[30,30,33,28],[31,6,34,4],[31,7,34,5],[31,13,34,11],[31,17,34,15,"min"],[31,20,34,18],[31,23,34,21,"val"],[31,26,34,24],[31,28,34,26],[32,8,35,6,"end"],[32,11,35,9],[32,14,35,12,"mid"],[32,17,35,15],[32,20,35,18],[32,21,35,19],[33,6,36,4],[33,7,36,5],[33,13,36,11],[34,8,37,6,"start"],[34,13,37,11],[34,16,37,14,"mid"],[34,19,37,17],[34,22,37,20],[34,23,37,21],[35,6,38,4],[36,4,39,2],[37,4,41,2],[37,11,41,9],[37,15,41,13],[38,2,42,0],[39,2,44,0],[39,11,44,9,"mapChars"],[39,19,44,17,"mapChars"],[39,20,44,18,"domainName"],[39,30,44,28],[39,32,44,28,"_ref2"],[39,37,44,28],[39,39,44,71],[40,4,44,71],[40,8,44,32,"useSTD3ASCIIRules"],[40,25,44,49],[40,28,44,49,"_ref2"],[40,33,44,49],[40,34,44,32,"useSTD3ASCIIRules"],[40,51,44,49],[41,6,44,51,"processingOption"],[41,22,44,67],[41,25,44,67,"_ref2"],[41,30,44,67],[41,31,44,51,"processingOption"],[41,47,44,67],[42,4,45,2],[42,8,45,6,"hasError"],[42,16,45,14],[42,19,45,17],[42,24,45,22],[43,4,46,2],[43,8,46,6,"processed"],[43,17,46,15],[43,20,46,18],[43,22,46,20],[44,4,48,2],[44,9,48,7],[44,13,48,13,"ch"],[44,15,48,15],[44,19,48,19,"domainName"],[44,29,48,29],[44,31,48,31],[45,6,49,4],[45,10,49,4,"_findStatus"],[45,21,49,4],[45,24,49,30,"findStatus"],[45,34,49,40],[45,35,49,41,"ch"],[45,37,49,43],[45,38,49,44,"codePointAt"],[45,49,49,55],[45,50,49,56],[45,51,49,57],[45,52,49,58],[45,54,49,60],[46,10,49,62,"useSTD3ASCIIRules"],[47,8,49,80],[47,9,49,81],[47,10,49,82],[48,8,49,82,"_findStatus2"],[48,20,49,82],[48,23,49,82,"_slicedToArray"],[48,37,49,82],[48,38,49,82,"_findStatus"],[48,49,49,82],[49,8,49,11,"status"],[49,14,49,17],[49,17,49,17,"_findStatus2"],[49,29,49,17],[50,8,49,19,"mapping"],[50,15,49,26],[50,18,49,26,"_findStatus2"],[50,30,49,26],[51,6,51,4],[51,14,51,12,"status"],[51,20,51,18],[52,8,52,6],[52,13,52,11,"STATUS_MAPPING"],[52,27,52,25],[52,28,52,26,"disallowed"],[52,38,52,36],[53,10,53,8,"hasError"],[53,18,53,16],[53,21,53,19],[53,25,53,23],[54,10,54,8,"processed"],[54,19,54,17],[54,23,54,21,"ch"],[54,25,54,23],[55,10,55,8],[56,8,56,6],[56,13,56,11,"STATUS_MAPPING"],[56,27,56,25],[56,28,56,26,"ignored"],[56,35,56,33],[57,10,57,8],[58,8,58,6],[58,13,58,11,"STATUS_MAPPING"],[58,27,58,25],[58,28,58,26,"mapped"],[58,34,58,32],[59,10,59,8,"processed"],[59,19,59,17],[59,23,59,21,"mapping"],[59,30,59,28],[60,10,60,8],[61,8,61,6],[61,13,61,11,"STATUS_MAPPING"],[61,27,61,25],[61,28,61,26,"deviation"],[61,37,61,35],[62,10,62,8],[62,14,62,12,"processingOption"],[62,30,62,28],[62,35,62,33],[62,49,62,47],[62,51,62,49],[63,12,63,10,"processed"],[63,21,63,19],[63,25,63,23,"mapping"],[63,32,63,30],[64,10,64,8],[64,11,64,9],[64,17,64,15],[65,12,65,10,"processed"],[65,21,65,19],[65,25,65,23,"ch"],[65,27,65,25],[66,10,66,8],[67,10,67,8],[68,8,68,6],[68,13,68,11,"STATUS_MAPPING"],[68,27,68,25],[68,28,68,26,"valid"],[68,33,68,31],[69,10,69,8,"processed"],[69,19,69,17],[69,23,69,21,"ch"],[69,25,69,23],[70,10,70,8],[71,6,71,4],[72,4,72,2],[73,4,74,2],[73,11,74,9],[74,6,75,4,"string"],[74,12,75,10],[74,14,75,12,"processed"],[74,23,75,21],[75,6,76,4,"error"],[75,11,76,9],[75,13,76,11,"hasError"],[76,4,77,2],[76,5,77,3],[77,2,78,0],[78,2,80,0],[78,11,80,9,"validateLabel"],[78,24,80,22,"validateLabel"],[78,25,80,23,"label"],[78,30,80,28],[78,32,80,28,"_ref3"],[78,37,80,28],[78,39,80,110],[79,4,80,110],[79,8,80,32,"checkHyphens"],[79,20,80,44],[79,23,80,44,"_ref3"],[79,28,80,44],[79,29,80,32,"checkHyphens"],[79,41,80,44],[80,6,80,46,"checkBidi"],[80,15,80,55],[80,18,80,55,"_ref3"],[80,23,80,55],[80,24,80,46,"checkBidi"],[80,33,80,55],[81,6,80,57,"checkJoiners"],[81,18,80,69],[81,21,80,69,"_ref3"],[81,26,80,69],[81,27,80,57,"checkJoiners"],[81,39,80,69],[82,6,80,71,"processingOption"],[82,22,80,87],[82,25,80,87,"_ref3"],[82,30,80,87],[82,31,80,71,"processingOption"],[82,47,80,87],[83,6,80,89,"useSTD3ASCIIRules"],[83,23,80,106],[83,26,80,106,"_ref3"],[83,31,80,106],[83,32,80,89,"useSTD3ASCIIRules"],[83,49,80,106],[84,4,81,2],[84,8,81,6,"label"],[84,13,81,11],[84,14,81,12,"normalize"],[84,23,81,21],[84,24,81,22],[84,29,81,27],[84,30,81,28],[84,35,81,33,"label"],[84,40,81,38],[84,42,81,40],[85,6,82,4],[85,13,82,11],[85,18,82,16],[86,4,83,2],[87,4,85,2],[87,8,85,8,"codePoints"],[87,18,85,18],[87,21,85,21,"Array"],[87,26,85,26],[87,27,85,27,"from"],[87,31,85,31],[87,32,85,32,"label"],[87,37,85,37],[87,38,85,38],[88,4,87,2],[88,8,87,6,"checkHyphens"],[88,20,87,18],[88,22,87,20],[89,6,88,4],[89,10,88,9,"codePoints"],[89,20,88,19],[89,21,88,20],[89,22,88,21],[89,23,88,22],[89,28,88,27],[89,31,88,30],[89,35,88,34,"codePoints"],[89,45,88,44],[89,46,88,45],[89,47,88,46],[89,48,88,47],[89,53,88,52],[89,56,88,55],[89,60,89,9,"label"],[89,65,89,14],[89,66,89,15,"startsWith"],[89,76,89,25],[89,77,89,26],[89,80,89,29],[89,81,89,30],[89,85,89,34,"label"],[89,90,89,39],[89,91,89,40,"endsWith"],[89,99,89,48],[89,100,89,49],[89,103,89,52],[89,104,89,54],[89,106,89,56],[90,8,90,6],[90,15,90,13],[90,20,90,18],[91,6,91,4],[92,4,92,2],[93,4,94,2],[93,8,94,6,"label"],[93,13,94,11],[93,14,94,12,"includes"],[93,22,94,20],[93,23,94,21],[93,26,94,24],[93,27,94,25],[93,31,95,7,"codePoints"],[93,41,95,17],[93,42,95,18,"length"],[93,48,95,24],[93,51,95,27],[93,52,95,28],[93,56,95,32,"regexes"],[93,63,95,39],[93,64,95,40,"combiningMarks"],[93,78,95,54],[93,79,95,55,"test"],[93,83,95,59],[93,84,95,60,"codePoints"],[93,94,95,70],[93,95,95,71],[93,96,95,72],[93,97,95,73],[93,98,95,75],[93,100,95,77],[94,6,96,4],[94,13,96,11],[94,18,96,16],[95,4,97,2],[96,4,99,2],[96,9,99,7],[96,13,99,13,"ch"],[96,15,99,15],[96,19,99,19,"codePoints"],[96,29,99,29],[96,31,99,31],[97,6,100,4],[97,10,100,4,"_findStatus3"],[97,22,100,4],[97,25,100,21,"findStatus"],[97,35,100,31],[97,36,100,32,"ch"],[97,38,100,34],[97,39,100,35,"codePointAt"],[97,50,100,46],[97,51,100,47],[97,52,100,48],[97,53,100,49],[97,55,100,51],[98,10,100,53,"useSTD3ASCIIRules"],[99,8,100,71],[99,9,100,72],[99,10,100,73],[100,8,100,73,"_findStatus4"],[100,20,100,73],[100,23,100,73,"_slicedToArray"],[100,37,100,73],[100,38,100,73,"_findStatus3"],[100,50,100,73],[101,8,100,11,"status"],[101,14,100,17],[101,17,100,17,"_findStatus4"],[101,29,100,17],[102,6,101,4],[102,10,101,9,"processingOption"],[102,26,101,25],[102,31,101,30],[102,45,101,44],[102,49,101,48,"status"],[102,55,101,54],[102,60,101,59,"STATUS_MAPPING"],[102,74,101,73],[102,75,101,74,"valid"],[102,80,101,79],[102,84,102,9,"processingOption"],[102,100,102,25],[102,105,102,30],[102,122,102,47],[102,126,103,9,"status"],[102,132,103,15],[102,137,103,20,"STATUS_MAPPING"],[102,151,103,34],[102,152,103,35,"valid"],[102,157,103,40],[102,161,103,44,"status"],[102,167,103,50],[102,172,103,55,"STATUS_MAPPING"],[102,186,103,69],[102,187,103,70,"deviation"],[102,196,103,80],[102,198,103,82],[103,8,104,6],[103,15,104,13],[103,20,104,18],[104,6,105,4],[105,4,106,2],[107,4,108,2],[108,4,109,2],[108,8,109,6,"checkJoiners"],[108,20,109,18],[108,22,109,20],[109,6,110,4],[109,10,110,8,"last"],[109,14,110,12],[109,17,110,15],[109,18,110,16],[110,6,111,4],[110,15,111,4,"_ref4"],[110,20,111,4],[110,24,111,26,"codePoints"],[110,34,111,36],[110,35,111,37,"entries"],[110,42,111,44],[110,43,111,45],[110,44,111,46],[110,46,111,48],[111,8,111,48],[111,12,111,48,"_ref5"],[111,17,111,48],[111,20,111,48,"_slicedToArray"],[111,34,111,48],[111,35,111,48,"_ref4"],[111,40,111,48],[112,8,111,48],[112,12,111,16,"i"],[112,13,111,17],[112,16,111,17,"_ref5"],[112,21,111,17],[113,8,111,17],[113,12,111,19,"ch"],[113,15,111,21],[113,18,111,21,"_ref5"],[113,23,111,21],[114,8,112,6],[114,12,112,10,"ch"],[114,15,112,12],[114,20,112,17],[114,28,112,25],[114,32,112,29,"ch"],[114,35,112,31],[114,40,112,36],[114,48,112,44],[114,50,112,46],[115,10,113,8],[115,14,113,12,"i"],[115,15,113,13],[115,18,113,16],[115,19,113,17],[115,21,113,19],[116,12,114,10],[116,16,114,14,"regexes"],[116,23,114,21],[116,24,114,22,"combiningClassVirama"],[116,44,114,42],[116,45,114,43,"test"],[116,49,114,47],[116,50,114,48,"codePoints"],[116,60,114,58],[116,61,114,59,"i"],[116,62,114,60],[116,65,114,63],[116,66,114,64],[116,67,114,65],[116,68,114,66],[116,70,114,68],[117,14,115,12],[118,12,116,10],[119,12,117,10],[119,16,117,14,"ch"],[119,19,117,16],[119,24,117,21],[119,32,117,29],[119,34,117,31],[120,14,118,12],[121,14,119,12],[121,18,119,18,"next"],[121,22,119,22],[121,25,119,25,"codePoints"],[121,35,119,35],[121,36,119,36,"indexOf"],[121,43,119,43],[121,44,119,44],[121,52,119,52],[121,54,119,54,"i"],[121,55,119,55],[121,58,119,58],[121,59,119,59],[121,60,119,60],[122,14,120,12],[122,18,120,18,"test"],[122,22,120,22],[122,25,120,25,"next"],[122,29,120,29],[122,32,120,32],[122,33,120,33],[122,36,120,36,"codePoints"],[122,46,120,46],[122,47,120,47,"slice"],[122,52,120,52],[122,53,120,53,"last"],[122,57,120,57],[122,58,120,58],[122,61,120,61,"codePoints"],[122,71,120,71],[122,72,120,72,"slice"],[122,77,120,77],[122,78,120,78,"last"],[122,82,120,82],[122,84,120,84,"next"],[122,88,120,88],[122,89,120,89],[123,14,121,12],[123,18,121,16,"regexes"],[123,25,121,23],[123,26,121,24,"validZWNJ"],[123,35,121,33],[123,36,121,34,"test"],[123,40,121,38],[123,41,121,39,"test"],[123,45,121,43],[123,46,121,44,"join"],[123,50,121,48],[123,51,121,49],[123,53,121,51],[123,54,121,52],[123,55,121,53],[123,57,121,55],[124,16,122,14,"last"],[124,20,122,18],[124,23,122,21,"i"],[124,24,122,22],[124,27,122,25],[124,28,122,26],[125,16,123,14],[126,14,124,12],[127,12,125,10],[128,10,126,8],[129,10,127,8],[129,17,127,15],[129,22,127,20],[130,8,128,6],[131,6,129,4],[132,4,130,2],[134,4,132,2],[135,4,133,2],[135,8,133,6,"checkBidi"],[135,17,133,15],[135,19,133,17],[136,6,134,4],[136,10,134,8,"rtl"],[136,13,134,11],[138,6,136,4],[139,6,137,4],[139,10,137,8,"regexes"],[139,17,137,15],[139,18,137,16,"bidiS1LTR"],[139,27,137,25],[139,28,137,26,"test"],[139,32,137,30],[139,33,137,31,"codePoints"],[139,43,137,41],[139,44,137,42],[139,45,137,43],[139,46,137,44],[139,47,137,45],[139,49,137,47],[140,8,138,6,"rtl"],[140,11,138,9],[140,14,138,12],[140,19,138,17],[141,6,139,4],[141,7,139,5],[141,13,139,11],[141,17,139,15,"regexes"],[141,24,139,22],[141,25,139,23,"bidiS1RTL"],[141,34,139,32],[141,35,139,33,"test"],[141,39,139,37],[141,40,139,38,"codePoints"],[141,50,139,48],[141,51,139,49],[141,52,139,50],[141,53,139,51],[141,54,139,52],[141,56,139,54],[142,8,140,6,"rtl"],[142,11,140,9],[142,14,140,12],[142,18,140,16],[143,6,141,4],[143,7,141,5],[143,13,141,11],[144,8,142,6],[144,15,142,13],[144,20,142,18],[145,6,143,4],[146,6,145,4],[146,10,145,8,"rtl"],[146,13,145,11],[146,15,145,13],[147,8,146,6],[148,8,147,6],[148,12,147,10],[148,13,147,11,"regexes"],[148,20,147,18],[148,21,147,19,"bidiS2"],[148,27,147,25],[148,28,147,26,"test"],[148,32,147,30],[148,33,147,31,"label"],[148,38,147,36],[148,39,147,37],[148,43,148,10],[148,44,148,11,"regexes"],[148,51,148,18],[148,52,148,19,"bidiS3"],[148,58,148,25],[148,59,148,26,"test"],[148,63,148,30],[148,64,148,31,"label"],[148,69,148,36],[148,70,148,37],[148,74,149,11,"regexes"],[148,81,149,18],[148,82,149,19,"bidiS4EN"],[148,90,149,27],[148,91,149,28,"test"],[148,95,149,32],[148,96,149,33,"label"],[148,101,149,38],[148,102,149,39],[148,106,149,43,"regexes"],[148,113,149,50],[148,114,149,51,"bidiS4AN"],[148,122,149,59],[148,123,149,60,"test"],[148,127,149,64],[148,128,149,65,"label"],[148,133,149,70],[148,134,149,72],[148,136,149,74],[149,10,150,8],[149,17,150,15],[149,22,150,20],[150,8,151,6],[151,6,152,4],[151,7,152,5],[151,13,152,11],[151,17,152,15],[151,18,152,16,"regexes"],[151,25,152,23],[151,26,152,24,"bidiS5"],[151,32,152,30],[151,33,152,31,"test"],[151,37,152,35],[151,38,152,36,"label"],[151,43,152,41],[151,44,152,42],[151,48,153,15],[151,49,153,16,"regexes"],[151,56,153,23],[151,57,153,24,"bidiS6"],[151,63,153,30],[151,64,153,31,"test"],[151,68,153,35],[151,69,153,36,"label"],[151,74,153,41],[151,75,153,42],[151,77,153,44],[152,8,153,46],[153,8,154,6],[153,15,154,13],[153,20,154,18],[154,6,155,4],[155,4,156,2],[156,4,158,2],[156,11,158,9],[156,15,158,13],[157,2,159,0],[158,2,161,0],[158,11,161,9,"isBidiDomain"],[158,23,161,21,"isBidiDomain"],[158,24,161,22,"labels"],[158,30,161,28],[158,32,161,30],[159,4,162,2],[159,8,162,8,"domain"],[159,14,162,14],[159,17,162,17,"labels"],[159,23,162,23],[159,24,162,24,"map"],[159,27,162,27],[159,28,162,28,"label"],[159,33,162,33],[159,37,162,37],[160,6,163,4],[160,10,163,8,"label"],[160,15,163,13],[160,16,163,14,"startsWith"],[160,26,163,24],[160,27,163,25],[160,33,163,31],[160,34,163,32],[160,36,163,34],[161,8,164,6],[161,12,164,10],[162,10,165,8],[162,17,165,15,"punycode"],[162,25,165,23],[162,26,165,24,"decode"],[162,32,165,30],[162,33,165,31,"label"],[162,38,165,36],[162,39,165,37,"substring"],[162,48,165,46],[162,49,165,47],[162,50,165,48],[162,51,165,49],[162,52,165,50],[163,8,166,6],[163,9,166,7],[163,10,166,8],[163,17,166,15,"err"],[163,20,166,18],[163,22,166,20],[164,10,167,8],[164,17,167,15],[164,19,167,17],[165,8,168,6],[166,6,169,4],[167,6,170,4],[167,13,170,11,"label"],[167,18,170,16],[168,4,171,2],[168,5,171,3],[168,6,171,4],[168,7,171,5,"join"],[168,11,171,9],[168,12,171,10],[168,15,171,13],[168,16,171,14],[169,4,172,2],[169,11,172,9,"regexes"],[169,18,172,16],[169,19,172,17,"bidiDomain"],[169,29,172,27],[169,30,172,28,"test"],[169,34,172,32],[169,35,172,33,"domain"],[169,41,172,39],[169,42,172,40],[170,2,173,0],[171,2,175,0],[171,11,175,9,"processing"],[171,21,175,19,"processing"],[171,22,175,20,"domainName"],[171,32,175,30],[171,34,175,32,"options"],[171,41,175,39],[171,43,175,41],[172,4,176,2],[172,8,176,10,"processingOption"],[172,24,176,26],[172,27,176,31,"options"],[172,34,176,38],[172,35,176,10,"processingOption"],[172,51,176,26],[174,4,178,2],[175,4,179,2],[175,8,179,2,"_mapChars"],[175,17,179,2],[175,20,179,26,"mapChars"],[175,28,179,34],[175,29,179,35,"domainName"],[175,39,179,45],[175,41,179,47,"options"],[175,48,179,54],[175,49,179,55],[176,6,179,8,"string"],[176,12,179,14],[176,15,179,14,"_mapChars"],[176,24,179,14],[176,25,179,8,"string"],[176,31,179,14],[177,6,179,16,"error"],[177,11,179,21],[177,14,179,21,"_mapChars"],[177,23,179,21],[177,24,179,16,"error"],[177,29,179,21],[179,4,181,2],[180,4,182,2,"string"],[180,10,182,8],[180,13,182,11,"string"],[180,19,182,17],[180,20,182,18,"normalize"],[180,29,182,27],[180,30,182,28],[180,35,182,33],[180,36,182,34],[182,4,184,2],[183,4,185,2],[183,8,185,8,"labels"],[183,14,185,14],[183,17,185,17,"string"],[183,23,185,23],[183,24,185,24,"split"],[183,29,185,29],[183,30,185,30],[183,33,185,33],[183,34,185,34],[184,4,186,2],[184,8,186,8,"isBidi"],[184,14,186,14],[184,17,186,17,"isBidiDomain"],[184,29,186,29],[184,30,186,30,"labels"],[184,36,186,36],[184,37,186,37],[186,4,188,2],[187,4,189,2],[187,13,189,2,"_ref6"],[187,18,189,2],[187,22,189,31,"labels"],[187,28,189,37],[187,29,189,38,"entries"],[187,36,189,45],[187,37,189,46],[187,38,189,47],[187,40,189,49],[188,6,189,49],[188,10,189,49,"_ref7"],[188,15,189,49],[188,18,189,49,"_slicedToArray"],[188,32,189,49],[188,33,189,49,"_ref6"],[188,38,189,49],[189,6,189,49],[189,10,189,14,"i"],[189,11,189,15],[189,14,189,15,"_ref7"],[189,19,189,15],[190,6,189,15],[190,10,189,17,"origLabel"],[190,19,189,26],[190,22,189,26,"_ref7"],[190,27,189,26],[191,6,190,4],[191,10,190,8,"label"],[191,15,190,13],[191,18,190,16,"origLabel"],[191,27,190,25],[192,6,191,4],[192,10,191,8,"curProcessing"],[192,23,191,21],[192,26,191,24,"processingOption"],[192,42,191,40],[193,6,192,4],[193,10,192,8,"label"],[193,15,192,13],[193,16,192,14,"startsWith"],[193,26,192,24],[193,27,192,25],[193,33,192,31],[193,34,192,32],[193,36,192,34],[194,8,193,6],[194,12,193,10],[195,10,194,8,"label"],[195,15,194,13],[195,18,194,16,"punycode"],[195,26,194,24],[195,27,194,25,"decode"],[195,33,194,31],[195,34,194,32,"label"],[195,39,194,37],[195,40,194,38,"substring"],[195,49,194,47],[195,50,194,48],[195,51,194,49],[195,52,194,50],[195,53,194,51],[196,10,195,8,"labels"],[196,16,195,14],[196,17,195,15,"i"],[196,18,195,16],[196,19,195,17],[196,22,195,20,"label"],[196,27,195,25],[197,8,196,6],[197,9,196,7],[197,10,196,8],[197,17,196,15,"err"],[197,20,196,18],[197,22,196,20],[198,10,197,8,"error"],[198,15,197,13],[198,18,197,16],[198,22,197,20],[199,10,198,8],[200,8,199,6],[201,8,200,6,"curProcessing"],[201,21,200,19],[201,24,200,22],[201,41,200,39],[202,6,201,4],[204,6,203,4],[205,6,204,4],[205,10,204,8,"error"],[205,15,204,13],[205,17,204,15],[206,8,205,6],[207,6,206,4],[208,6,207,4],[208,10,207,10,"validation"],[208,20,207,20],[208,23,207,23,"validateLabel"],[208,36,207,36],[208,37,207,37,"label"],[208,42,207,42],[208,44,207,44,"Object"],[208,50,207,50],[208,51,207,51,"assign"],[208,57,207,57],[208,58,207,58],[208,59,207,59],[208,60,207,60],[208,62,207,62,"options"],[208,69,207,69],[208,71,207,71],[209,8,208,6,"processingOption"],[209,24,208,22],[209,26,208,24,"curProcessing"],[209,39,208,37],[210,8,209,6,"checkBidi"],[210,17,209,15],[210,19,209,17,"options"],[210,26,209,24],[210,27,209,25,"checkBidi"],[210,36,209,34],[210,40,209,38,"isBidi"],[211,6,210,4],[211,7,210,5],[211,8,210,6],[211,9,210,7],[212,6,211,4],[212,10,211,8],[212,11,211,9,"validation"],[212,21,211,19],[212,23,211,21],[213,8,212,6,"error"],[213,13,212,11],[213,16,212,14],[213,20,212,18],[214,6,213,4],[215,4,214,2],[216,4,216,2],[216,11,216,9],[217,6,217,4,"string"],[217,12,217,10],[217,14,217,12,"labels"],[217,20,217,18],[217,21,217,19,"join"],[217,25,217,23],[217,26,217,24],[217,29,217,27],[217,30,217,28],[218,6,218,4,"error"],[219,4,219,2],[219,5,219,3],[220,2,220,0],[221,2,222,0],[221,11,222,9,"toASCII"],[221,18,222,16,"toASCII"],[221,19,222,17,"domainName"],[221,29,222,27],[221,31,229,8],[222,4,229,8],[222,8,229,8,"_ref8"],[222,13,229,8],[222,16,229,8,"arguments"],[222,25,229,8],[222,26,229,8,"length"],[222,32,229,8],[222,40,229,8,"arguments"],[222,49,229,8],[222,57,229,8,"undefined"],[222,66,229,8],[222,69,229,8,"arguments"],[222,78,229,8],[222,84,229,4],[222,85,229,5],[222,86,229,6],[223,6,229,6,"_ref8$checkHyphens"],[223,24,229,6],[223,27,229,6,"_ref8"],[223,32,229,6],[223,33,223,2,"checkHyphens"],[223,45,223,14],[224,6,223,2,"checkHyphens"],[224,18,223,14],[224,21,223,14,"_ref8$checkHyphens"],[224,39,223,14],[224,53,223,17],[224,58,223,22],[224,61,223,22,"_ref8$checkHyphens"],[224,79,223,22],[225,6,223,22,"_ref8$checkBidi"],[225,21,223,22],[225,24,223,22,"_ref8"],[225,29,223,22],[225,30,224,2,"checkBidi"],[225,39,224,11],[226,6,224,2,"checkBidi"],[226,15,224,11],[226,18,224,11,"_ref8$checkBidi"],[226,33,224,11],[226,47,224,14],[226,52,224,19],[226,55,224,19,"_ref8$checkBidi"],[226,70,224,19],[227,6,224,19,"_ref8$checkJoiners"],[227,24,224,19],[227,27,224,19,"_ref8"],[227,32,224,19],[227,33,225,2,"checkJoiners"],[227,45,225,14],[228,6,225,2,"checkJoiners"],[228,18,225,14],[228,21,225,14,"_ref8$checkJoiners"],[228,39,225,14],[228,53,225,17],[228,58,225,22],[228,61,225,22,"_ref8$checkJoiners"],[228,79,225,22],[229,6,225,22,"_ref8$useSTD3ASCIIRul"],[229,27,225,22],[229,30,225,22,"_ref8"],[229,35,225,22],[229,36,226,2,"useSTD3ASCIIRules"],[229,53,226,19],[230,6,226,2,"useSTD3ASCIIRules"],[230,23,226,19],[230,26,226,19,"_ref8$useSTD3ASCIIRul"],[230,47,226,19],[230,61,226,22],[230,66,226,27],[230,69,226,27,"_ref8$useSTD3ASCIIRul"],[230,90,226,27],[231,6,226,27,"_ref8$processingOptio"],[231,27,226,27],[231,30,226,27,"_ref8"],[231,35,226,27],[231,36,227,2,"processingOption"],[231,52,227,18],[232,6,227,2,"processingOption"],[232,22,227,18],[232,25,227,18,"_ref8$processingOptio"],[232,46,227,18],[232,60,227,21],[232,77,227,38],[232,80,227,38,"_ref8$processingOptio"],[232,101,227,38],[233,6,227,38,"_ref8$verifyDNSLength"],[233,27,227,38],[233,30,227,38,"_ref8"],[233,35,227,38],[233,36,228,2,"verifyDNSLength"],[233,51,228,17],[234,6,228,2,"verifyDNSLength"],[234,21,228,17],[234,24,228,17,"_ref8$verifyDNSLength"],[234,45,228,17],[234,59,228,20],[234,64,228,25],[234,67,228,25,"_ref8$verifyDNSLength"],[234,88,228,25],[235,4,230,2],[235,8,230,6,"processingOption"],[235,24,230,22],[235,29,230,27],[235,43,230,41],[235,47,230,45,"processingOption"],[235,63,230,61],[235,68,230,66],[235,85,230,83],[235,87,230,85],[236,6,231,4],[236,12,231,10],[236,16,231,14,"RangeError"],[236,26,231,24],[236,27,231,25],[236,92,231,90],[236,93,231,91],[237,4,232,2],[238,4,234,2],[238,8,234,8,"result"],[238,14,234,14],[238,17,234,17,"processing"],[238,27,234,27],[238,28,234,28,"domainName"],[238,38,234,38],[238,40,234,40],[239,6,235,4,"processingOption"],[239,22,235,20],[240,6,236,4,"checkHyphens"],[240,18,236,16],[241,6,237,4,"checkBidi"],[241,15,237,13],[242,6,238,4,"checkJoiners"],[242,18,238,16],[243,6,239,4,"useSTD3ASCIIRules"],[244,4,240,2],[244,5,240,3],[244,6,240,4],[245,4,241,2],[245,8,241,6,"labels"],[245,14,241,12],[245,17,241,15,"result"],[245,23,241,21],[245,24,241,22,"string"],[245,30,241,28],[245,31,241,29,"split"],[245,36,241,34],[245,37,241,35],[245,40,241,38],[245,41,241,39],[246,4,242,2,"labels"],[246,10,242,8],[246,13,242,11,"labels"],[246,19,242,17],[246,20,242,18,"map"],[246,23,242,21],[246,24,242,22,"l"],[246,25,242,23],[246,29,242,27],[247,6,243,4],[247,10,243,8,"containsNonASCII"],[247,26,243,24],[247,27,243,25,"l"],[247,28,243,26],[247,29,243,27],[247,31,243,29],[248,8,244,6],[248,12,244,10],[249,10,245,8],[249,17,245,15],[249,23,245,21],[249,26,245,24,"punycode"],[249,34,245,32],[249,35,245,33,"encode"],[249,41,245,39],[249,42,245,40,"l"],[249,43,245,41],[249,44,245,42],[250,8,246,6],[250,9,246,7],[250,10,246,8],[250,17,246,15,"e"],[250,18,246,16],[250,20,246,18],[251,10,247,8,"result"],[251,16,247,14],[251,17,247,15,"error"],[251,22,247,20],[251,25,247,23],[251,29,247,27],[252,8,248,6],[253,6,249,4],[254,6,250,4],[254,13,250,11,"l"],[254,14,250,12],[255,4,251,2],[255,5,251,3],[255,6,251,4],[256,4,253,2],[256,8,253,6,"verifyDNSLength"],[256,23,253,21],[256,25,253,23],[257,6,254,4],[257,10,254,10,"total"],[257,15,254,15],[257,18,254,18,"labels"],[257,24,254,24],[257,25,254,25,"join"],[257,29,254,29],[257,30,254,30],[257,33,254,33],[257,34,254,34],[257,35,254,35,"length"],[257,41,254,41],[258,6,255,4],[258,10,255,8,"total"],[258,15,255,13],[258,18,255,16],[258,21,255,19],[258,25,255,23,"total"],[258,30,255,28],[258,35,255,33],[258,36,255,34],[258,38,255,36],[259,8,256,6,"result"],[259,14,256,12],[259,15,256,13,"error"],[259,20,256,18],[259,23,256,21],[259,27,256,25],[260,6,257,4],[261,6,259,4],[261,11,259,9],[261,15,259,13,"i"],[261,16,259,14],[261,19,259,17],[261,20,259,18],[261,22,259,20,"i"],[261,23,259,21],[261,26,259,24,"labels"],[261,32,259,30],[261,33,259,31,"length"],[261,39,259,37],[261,41,259,39],[261,43,259,41,"i"],[261,44,259,42],[261,46,259,44],[262,8,260,6],[262,12,260,10,"labels"],[262,18,260,16],[262,19,260,17,"i"],[262,20,260,18],[262,21,260,19],[262,22,260,20,"length"],[262,28,260,26],[262,31,260,29],[262,33,260,31],[262,37,260,35,"labels"],[262,43,260,41],[262,44,260,42,"i"],[262,45,260,43],[262,46,260,44],[262,47,260,45,"length"],[262,53,260,51],[262,58,260,56],[262,59,260,57],[262,61,260,59],[263,10,261,8,"result"],[263,16,261,14],[263,17,261,15,"error"],[263,22,261,20],[263,25,261,23],[263,29,261,27],[264,10,262,8],[265,8,263,6],[266,6,264,4],[267,4,265,2],[268,4,267,2],[268,8,267,6,"result"],[268,14,267,12],[268,15,267,13,"error"],[268,20,267,18],[268,22,267,20],[269,6,268,4],[269,13,268,11],[269,17,268,15],[270,4,269,2],[271,4,270,2],[271,11,270,9,"labels"],[271,17,270,15],[271,18,270,16,"join"],[271,22,270,20],[271,23,270,21],[271,26,270,24],[271,27,270,25],[272,2,271,0],[273,2,273,0],[273,11,273,9,"toUnicode"],[273,20,273,18,"toUnicode"],[273,21,273,19,"domainName"],[273,31,273,29],[273,33,279,8],[274,4,279,8],[274,8,279,8,"_ref9"],[274,13,279,8],[274,16,279,8,"arguments"],[274,25,279,8],[274,26,279,8,"length"],[274,32,279,8],[274,40,279,8,"arguments"],[274,49,279,8],[274,57,279,8,"undefined"],[274,66,279,8],[274,69,279,8,"arguments"],[274,78,279,8],[274,84,279,4],[274,85,279,5],[274,86,279,6],[275,6,279,6,"_ref9$checkHyphens"],[275,24,279,6],[275,27,279,6,"_ref9"],[275,32,279,6],[275,33,274,2,"checkHyphens"],[275,45,274,14],[276,6,274,2,"checkHyphens"],[276,18,274,14],[276,21,274,14,"_ref9$checkHyphens"],[276,39,274,14],[276,53,274,17],[276,58,274,22],[276,61,274,22,"_ref9$checkHyphens"],[276,79,274,22],[277,6,274,22,"_ref9$checkBidi"],[277,21,274,22],[277,24,274,22,"_ref9"],[277,29,274,22],[277,30,275,2,"checkBidi"],[277,39,275,11],[278,6,275,2,"checkBidi"],[278,15,275,11],[278,18,275,11,"_ref9$checkBidi"],[278,33,275,11],[278,47,275,14],[278,52,275,19],[278,55,275,19,"_ref9$checkBidi"],[278,70,275,19],[279,6,275,19,"_ref9$checkJoiners"],[279,24,275,19],[279,27,275,19,"_ref9"],[279,32,275,19],[279,33,276,2,"checkJoiners"],[279,45,276,14],[280,6,276,2,"checkJoiners"],[280,18,276,14],[280,21,276,14,"_ref9$checkJoiners"],[280,39,276,14],[280,53,276,17],[280,58,276,22],[280,61,276,22,"_ref9$checkJoiners"],[280,79,276,22],[281,6,276,22,"_ref9$useSTD3ASCIIRul"],[281,27,276,22],[281,30,276,22,"_ref9"],[281,35,276,22],[281,36,277,2,"useSTD3ASCIIRules"],[281,53,277,19],[282,6,277,2,"useSTD3ASCIIRules"],[282,23,277,19],[282,26,277,19,"_ref9$useSTD3ASCIIRul"],[282,47,277,19],[282,61,277,22],[282,66,277,27],[282,69,277,27,"_ref9$useSTD3ASCIIRul"],[282,90,277,27],[283,6,277,27,"_ref9$processingOptio"],[283,27,277,27],[283,30,277,27,"_ref9"],[283,35,277,27],[283,36,278,2,"processingOption"],[283,52,278,18],[284,6,278,2,"processingOption"],[284,22,278,18],[284,25,278,18,"_ref9$processingOptio"],[284,46,278,18],[284,60,278,21],[284,77,278,38],[284,80,278,38,"_ref9$processingOptio"],[284,101,278,38],[285,4,280,2],[285,8,280,8,"result"],[285,14,280,14],[285,17,280,17,"processing"],[285,27,280,27],[285,28,280,28,"domainName"],[285,38,280,38],[285,40,280,40],[286,6,281,4,"processingOption"],[286,22,281,20],[287,6,282,4,"checkHyphens"],[287,18,282,16],[288,6,283,4,"checkBidi"],[288,15,283,13],[289,6,284,4,"checkJoiners"],[289,18,284,16],[290,6,285,4,"useSTD3ASCIIRules"],[291,4,286,2],[291,5,286,3],[291,6,286,4],[292,4,288,2],[292,11,288,9],[293,6,289,4,"domain"],[293,12,289,10],[293,14,289,12,"result"],[293,20,289,18],[293,21,289,19,"string"],[293,27,289,25],[294,6,290,4,"error"],[294,11,290,9],[294,13,290,11,"result"],[294,19,290,17],[294,20,290,18,"error"],[295,4,291,2],[295,5,291,3],[296,2,292,0],[297,2,294,0,"module"],[297,8,294,6],[297,9,294,7,"exports"],[297,16,294,14],[297,19,294,17],[298,4,295,2,"toASCII"],[298,11,295,9],[299,4,296,2,"toUnicode"],[300,2,297,0],[300,3,297,1],[301,0,297,2],[301,3]],"functionMap":{"names":["<global>","containsNonASCII","findStatus","mapChars","validateLabel","isBidiDomain","labels.map$argument_0","processing","toASCII","toUnicode"],"mappings":"AAA;ACO;CDE;AEE;CF8B;AGE;CHkC;AIE;CJ+E;AKE;4BCC;GDS;CLE;AOE;CP6C;AQE;sBFoB;GES;CRoB;ASE;CTmB"}},"type":"js/module"}]}