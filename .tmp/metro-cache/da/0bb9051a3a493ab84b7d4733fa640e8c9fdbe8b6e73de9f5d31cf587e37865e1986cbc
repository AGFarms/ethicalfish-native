{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":521,"column":44,"index":18033}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"escape-string-regexp","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":49,"index":174},"end":{"line":7,"column":80,"index":205}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"query-string","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":42,"index":250},"end":{"line":8,"column":65,"index":273}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":23,"index":299},"end":{"line":9,"column":54,"index":330}}],"key":"NsX6PlUeFYWbdEP4TkdHPhoJrio="}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":10,"column":24,"index":356},"end":{"line":10,"column":56,"index":388}}],"key":"LWWRvMxZGN5gJT3WCfTl1X4UAPQ="}},{"name":"./getPatternParts.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":11,"column":23,"index":413},"end":{"line":11,"column":54,"index":444}}],"key":"z4Ap0VIyJOTYCzFllv6s+WEku7M="}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":12,"column":20,"index":466},"end":{"line":12,"column":48,"index":494}}],"key":"Vb50P4WVkAnizz+ENIDrg6CJX4g="}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":13,"column":26,"index":522},"end":{"line":13,"column":60,"index":556}}],"key":"VmpJdDW9SG25WCfHhqlvsXwd7IE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[1], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(require(_dependencyMap[2], \"query-string\"));\n  var _arrayStartsWith = require(_dependencyMap[3], \"./arrayStartsWith.js\");\n  var _findFocusedRoute = require(_dependencyMap[4], \"./findFocusedRoute.js\");\n  var _getPatternParts = require(_dependencyMap[5], \"./getPatternParts.js\");\n  var _isArrayEqual = require(_dependencyMap[6], \"./isArrayEqual.js\");\n  var _validatePathConfig = require(_dependencyMap[7], \"./validatePathConfig.js\");\n  function _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(),\n      t = new WeakMap();\n    return (_getRequireWildcardCache = function (e) {\n      return e ? t : r;\n    })(e);\n  }\n  function _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n      default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n      },\n      a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n  }\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfig.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqual.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWith.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWith.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(routeName => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, _arrayStartsWith.arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(_ref => {\n              var _ref2 = _slicedToArray(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(it => it.index === index);\n              if (param?.screen === routeName && param?.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(it => it != null).map(_ref3 => {\n              var _ref4 = _slicedToArray(_ref3, 2),\n                key = _ref4[0],\n                value = _ref4[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, paths, parse) => {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function (_screen) {\n      parts.push(...(0, _getPatternParts.getPatternParts)(path).map(part => ({\n        ...part,\n        screen: _screen\n      })));\n    };\n    for (var _ref5 of paths) {\n      var _screen = _ref5.screen;\n      var path = _ref5.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, _escapeStringRegexp.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(it => it.segment);\n    var params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":563,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,4,2,"value"],[6,9,4,7],[6,11,4,9],[7,2,5,0],[7,3,5,1],[7,4,5,2],[8,2,6,0,"exports"],[8,9,6,7],[8,10,6,8,"getStateFromPath"],[8,26,6,24],[8,29,6,27,"getStateFromPath"],[8,45,6,43],[9,2,7,0],[9,6,7,4,"_escapeStringRegexp"],[9,25,7,23],[9,28,7,26,"_interopRequireDefault"],[9,50,7,48],[9,51,7,49,"require"],[9,58,7,56],[9,59,7,56,"_dependencyMap"],[9,73,7,56],[9,100,7,79],[9,101,7,80],[9,102,7,81],[10,2,8,0],[10,6,8,4,"queryString"],[10,17,8,15],[10,20,8,18,"_interopRequireWildcard"],[10,43,8,41],[10,44,8,42,"require"],[10,51,8,49],[10,52,8,49,"_dependencyMap"],[10,66,8,49],[10,85,8,64],[10,86,8,65],[10,87,8,66],[11,2,9,0],[11,6,9,4,"_arrayStartsWith"],[11,22,9,20],[11,25,9,23,"require"],[11,32,9,30],[11,33,9,30,"_dependencyMap"],[11,47,9,30],[11,74,9,53],[11,75,9,54],[12,2,10,0],[12,6,10,4,"_findFocusedRoute"],[12,23,10,21],[12,26,10,24,"require"],[12,33,10,31],[12,34,10,31,"_dependencyMap"],[12,48,10,31],[12,76,10,55],[12,77,10,56],[13,2,11,0],[13,6,11,4,"_getPatternParts"],[13,22,11,20],[13,25,11,23,"require"],[13,32,11,30],[13,33,11,30,"_dependencyMap"],[13,47,11,30],[13,74,11,53],[13,75,11,54],[14,2,12,0],[14,6,12,4,"_isArrayEqual"],[14,19,12,17],[14,22,12,20,"require"],[14,29,12,27],[14,30,12,27,"_dependencyMap"],[14,44,12,27],[14,68,12,47],[14,69,12,48],[15,2,13,0],[15,6,13,4,"_validatePathConfig"],[15,25,13,23],[15,28,13,26,"require"],[15,35,13,33],[15,36,13,33,"_dependencyMap"],[15,50,13,33],[15,80,13,59],[15,81,13,60],[16,2,14,0],[16,11,14,9,"_getRequireWildcardCache"],[16,35,14,33,"_getRequireWildcardCache"],[16,36,14,34,"e"],[16,37,14,35],[16,39,14,37],[17,4,14,39],[17,8,14,43],[17,18,14,53],[17,22,14,57],[17,29,14,64,"WeakMap"],[17,36,14,71],[17,38,14,73],[17,45,14,80],[17,49,14,84],[18,4,14,86],[18,8,14,90,"r"],[18,9,14,91],[18,12,14,94],[18,16,14,98,"WeakMap"],[18,23,14,105],[18,24,14,106],[18,25,14,107],[19,6,14,109,"t"],[19,7,14,110],[19,10,14,113],[19,14,14,117,"WeakMap"],[19,21,14,124],[19,22,14,125],[19,23,14,126],[20,4,14,128],[20,11,14,135],[20,12,14,136,"_getRequireWildcardCache"],[20,36,14,160],[20,39,14,163],[20,48,14,163,"_getRequireWildcardCache"],[20,49,14,173,"e"],[20,50,14,174],[20,52,14,176],[21,6,14,178],[21,13,14,185,"e"],[21,14,14,186],[21,17,14,189,"t"],[21,18,14,190],[21,21,14,193,"r"],[21,22,14,194],[22,4,14,196],[22,5,14,197],[22,7,14,199,"e"],[22,8,14,200],[22,9,14,201],[23,2,14,203],[24,2,15,0],[24,11,15,9,"_interopRequireWildcard"],[24,34,15,32,"_interopRequireWildcard"],[24,35,15,33,"e"],[24,36,15,34],[24,38,15,36,"r"],[24,39,15,37],[24,41,15,39],[25,4,15,41],[25,8,15,45],[25,9,15,46,"r"],[25,10,15,47],[25,14,15,51,"e"],[25,15,15,52],[25,19,15,56,"e"],[25,20,15,57],[25,21,15,58,"__esModule"],[25,31,15,68],[25,33,15,70],[25,40,15,77,"e"],[25,41,15,78],[26,4,15,80],[26,8,15,84],[26,12,15,88],[26,17,15,93,"e"],[26,18,15,94],[26,22,15,98],[26,30,15,106],[26,34,15,110],[26,41,15,117,"e"],[26,42,15,118],[26,46,15,122],[26,56,15,132],[26,60,15,136],[26,67,15,143,"e"],[26,68,15,144],[26,70,15,146],[26,77,15,153],[27,6,15,155,"default"],[27,13,15,162],[27,15,15,164,"e"],[28,4,15,166],[28,5,15,167],[29,4,15,169],[29,8,15,173,"t"],[29,9,15,174],[29,12,15,177,"_getRequireWildcardCache"],[29,36,15,201],[29,37,15,202,"r"],[29,38,15,203],[29,39,15,204],[30,4,15,206],[30,8,15,210,"t"],[30,9,15,211],[30,13,15,215,"t"],[30,14,15,216],[30,15,15,217,"has"],[30,18,15,220],[30,19,15,221,"e"],[30,20,15,222],[30,21,15,223],[30,23,15,225],[30,30,15,232,"t"],[30,31,15,233],[30,32,15,234,"get"],[30,35,15,237],[30,36,15,238,"e"],[30,37,15,239],[30,38,15,240],[31,4,15,242],[31,8,15,246,"n"],[31,9,15,247],[31,12,15,250],[32,8,15,252,"__proto__"],[32,17,15,261],[32,19,15,263],[33,6,15,268],[33,7,15,269],[34,6,15,271,"a"],[34,7,15,272],[34,10,15,275,"Object"],[34,16,15,281],[34,17,15,282,"defineProperty"],[34,31,15,296],[34,35,15,300,"Object"],[34,41,15,306],[34,42,15,307,"getOwnPropertyDescriptor"],[34,66,15,331],[35,4,15,333],[35,9,15,338],[35,13,15,342,"u"],[35,14,15,343],[35,18,15,347,"e"],[35,19,15,348],[35,21,15,350],[35,25,15,354],[35,34,15,363],[35,39,15,368,"u"],[35,40,15,369],[35,44,15,373],[35,45,15,374],[35,46,15,375],[35,47,15,376,"hasOwnProperty"],[35,61,15,390],[35,62,15,391,"call"],[35,66,15,395],[35,67,15,396,"e"],[35,68,15,397],[35,70,15,399,"u"],[35,71,15,400],[35,72,15,401],[35,74,15,403],[36,6,15,405],[36,10,15,409,"i"],[36,11,15,410],[36,14,15,413,"a"],[36,15,15,414],[36,18,15,417,"Object"],[36,24,15,423],[36,25,15,424,"getOwnPropertyDescriptor"],[36,49,15,448],[36,50,15,449,"e"],[36,51,15,450],[36,53,15,452,"u"],[36,54,15,453],[36,55,15,454],[36,58,15,457],[36,62,15,461],[37,6,15,463,"i"],[37,7,15,464],[37,12,15,469,"i"],[37,13,15,470],[37,14,15,471,"get"],[37,17,15,474],[37,21,15,478,"i"],[37,22,15,479],[37,23,15,480,"set"],[37,26,15,483],[37,27,15,484],[37,30,15,487,"Object"],[37,36,15,493],[37,37,15,494,"defineProperty"],[37,51,15,508],[37,52,15,509,"n"],[37,53,15,510],[37,55,15,512,"u"],[37,56,15,513],[37,58,15,515,"i"],[37,59,15,516],[37,60,15,517],[37,63,15,520,"n"],[37,64,15,521],[37,65,15,522,"u"],[37,66,15,523],[37,67,15,524],[37,70,15,527,"e"],[37,71,15,528],[37,72,15,529,"u"],[37,73,15,530],[37,74,15,531],[38,4,15,533],[39,4,15,535],[39,11,15,542,"n"],[39,12,15,543],[39,13,15,544,"default"],[39,20,15,551],[39,23,15,554,"e"],[39,24,15,555],[39,26,15,557,"t"],[39,27,15,558],[39,31,15,562,"t"],[39,32,15,563],[39,33,15,564,"set"],[39,36,15,567],[39,37,15,568,"e"],[39,38,15,569],[39,40,15,571,"n"],[39,41,15,572],[39,42,15,573],[39,44,15,575,"n"],[39,45,15,576],[40,2,15,578],[41,2,16,0],[41,11,16,9,"_interopRequireDefault"],[41,33,16,31,"_interopRequireDefault"],[41,34,16,32,"e"],[41,35,16,33],[41,37,16,35],[42,4,16,37],[42,11,16,44,"e"],[42,12,16,45],[42,16,16,49,"e"],[42,17,16,50],[42,18,16,51,"__esModule"],[42,28,16,61],[42,31,16,64,"e"],[42,32,16,65],[42,35,16,68],[43,6,16,70,"default"],[43,13,16,77],[43,15,16,79,"e"],[44,4,16,81],[44,5,16,82],[45,2,16,84],[46,2,17,0],[47,0,18,0],[48,0,19,0],[49,0,20,0],[50,0,21,0],[51,0,22,0],[52,0,23,0],[53,0,24,0],[54,0,25,0],[55,0,26,0],[56,0,27,0],[57,0,28,0],[58,0,29,0],[59,0,30,0],[60,0,31,0],[61,0,32,0],[62,0,33,0],[63,0,34,0],[64,0,35,0],[65,0,36,0],[66,0,37,0],[67,2,38,0],[67,11,38,9,"getStateFromPath"],[67,27,38,25,"getStateFromPath"],[67,28,38,26,"path"],[67,32,38,30],[67,34,38,32,"options"],[67,41,38,39],[67,43,38,41],[68,4,39,2],[68,8,39,2,"_getConfigResources"],[68,27,39,2],[68,30,42,6,"getConfigResources"],[68,48,42,24],[68,49,42,25,"options"],[68,56,42,32],[68,57,42,33],[69,6,40,4,"initialRoutes"],[69,19,40,17],[69,22,40,17,"_getConfigResources"],[69,41,40,17],[69,42,40,4,"initialRoutes"],[69,55,40,17],[70,6,41,4,"configs"],[70,13,41,11],[70,16,41,11,"_getConfigResources"],[70,35,41,11],[70,36,41,4,"configs"],[70,43,41,11],[71,4,43,2],[71,8,43,8,"screens"],[71,15,43,15],[71,18,43,18,"options"],[71,25,43,25],[71,27,43,27,"screens"],[71,34,43,34],[72,4,44,2],[72,8,44,6,"remaining"],[72,17,44,15],[72,20,44,18,"path"],[72,24,44,22],[72,25,44,23,"replace"],[72,32,44,30],[72,33,44,31],[72,39,44,37],[72,41,44,39],[72,44,44,42],[72,45,44,43],[72,46,44,44],[73,4,44,44],[73,5,45,3,"replace"],[73,12,45,10],[73,13,45,11],[73,18,45,16],[73,20,45,18],[73,22,45,20],[73,23,45,21],[73,24,45,22],[74,4,45,22],[74,5,46,3,"replace"],[74,12,46,10],[74,13,46,11],[74,20,46,18],[74,22,46,20],[74,24,46,22],[74,25,46,23],[74,26,46,24],[74,27,46,25],[76,4,48,2],[77,4,49,2,"remaining"],[77,13,49,11],[77,16,49,14,"remaining"],[77,25,49,23],[77,26,49,24,"endsWith"],[77,34,49,32],[77,35,49,33],[77,38,49,36],[77,39,49,37],[77,42,49,40,"remaining"],[77,51,49,49],[77,54,49,52],[77,57,49,55,"remaining"],[77,66,49,64],[77,69,49,67],[78,4,50,2],[78,8,50,8,"prefix"],[78,14,50,14],[78,17,50,17,"options"],[78,24,50,24],[78,26,50,26,"path"],[78,30,50,30],[78,32,50,32,"replace"],[78,39,50,39],[78,40,50,40],[78,45,50,45],[78,47,50,47],[78,49,50,49],[78,50,50,50],[78,51,50,51],[78,52,50,52],[80,4,52,2],[80,8,52,6,"prefix"],[80,14,52,12],[80,16,52,14],[81,6,53,4],[82,6,54,4],[82,10,54,10,"normalizedPrefix"],[82,26,54,26],[82,29,54,29,"prefix"],[82,35,54,35],[82,36,54,36,"endsWith"],[82,44,54,44],[82,45,54,45],[82,48,54,48],[82,49,54,49],[82,52,54,52,"prefix"],[82,58,54,58],[82,61,54,61],[82,64,54,64,"prefix"],[82,70,54,70],[82,73,54,73],[84,6,56,4],[85,6,57,4],[85,10,57,8],[85,11,57,9,"remaining"],[85,20,57,18],[85,21,57,19,"startsWith"],[85,31,57,29],[85,32,57,30,"normalizedPrefix"],[85,48,57,46],[85,49,57,47],[85,51,57,49],[86,8,58,6],[86,15,58,13,"undefined"],[86,24,58,22],[87,6,59,4],[89,6,61,4],[90,6,62,4,"remaining"],[90,15,62,13],[90,18,62,16,"remaining"],[90,27,62,25],[90,28,62,26,"replace"],[90,35,62,33],[90,36,62,34,"normalizedPrefix"],[90,52,62,50],[90,54,62,52],[90,56,62,54],[90,57,62,55],[91,4,63,2],[92,4,64,2],[92,8,64,6,"screens"],[92,15,64,13],[92,20,64,18,"undefined"],[92,29,64,27],[92,31,64,29],[93,6,65,4],[94,6,66,4],[94,10,66,10,"routes"],[94,17,66,16],[94,20,66,19,"remaining"],[94,29,66,28],[94,30,66,29,"split"],[94,35,66,34],[94,36,66,35],[94,39,66,38],[94,40,66,39],[94,41,66,40,"filter"],[94,47,66,46],[94,48,66,47,"Boolean"],[94,55,66,54],[94,56,66,55],[94,57,66,56,"map"],[94,60,66,59],[94,61,66,60,"segment"],[94,68,66,67],[94,72,66,71],[95,8,67,6],[95,12,67,12,"name"],[95,16,67,16],[95,19,67,19,"decodeURIComponent"],[95,37,67,37],[95,38,67,38,"segment"],[95,45,67,45],[95,46,67,46],[96,8,68,6],[96,15,68,13],[97,10,69,8,"name"],[98,8,70,6],[98,9,70,7],[99,6,71,4],[99,7,71,5],[99,8,71,6],[100,6,72,4],[100,10,72,8,"routes"],[100,17,72,14],[100,18,72,15,"length"],[100,24,72,21],[100,26,72,23],[101,8,73,6],[101,15,73,13,"createNestedStateObject"],[101,38,73,36],[101,39,73,37,"path"],[101,43,73,41],[101,45,73,43,"routes"],[101,52,73,49],[101,54,73,51,"initialRoutes"],[101,67,73,64],[101,68,73,65],[102,6,74,4],[103,6,75,4],[103,13,75,11,"undefined"],[103,22,75,20],[104,4,76,2],[105,4,77,2],[105,8,77,6,"remaining"],[105,17,77,15],[105,22,77,20],[105,25,77,23],[105,27,77,25],[106,6,78,4],[107,6,79,4],[108,6,80,4],[108,10,80,10,"match"],[108,15,80,15],[108,18,80,18,"configs"],[108,25,80,25],[108,26,80,26,"find"],[108,30,80,30],[108,31,80,31,"config"],[108,37,80,37],[108,41,80,41,"config"],[108,47,80,47],[108,48,80,48,"segments"],[108,56,80,56],[108,57,80,57,"join"],[108,61,80,61],[108,62,80,62],[108,65,80,65],[108,66,80,66],[108,71,80,71],[108,73,80,73],[108,74,80,74],[109,6,81,4],[109,10,81,8,"match"],[109,15,81,13],[109,17,81,15],[110,8,82,6],[110,15,82,13,"createNestedStateObject"],[110,38,82,36],[110,39,82,37,"path"],[110,43,82,41],[110,45,82,43,"match"],[110,50,82,48],[110,51,82,49,"routeNames"],[110,61,82,59],[110,62,82,60,"map"],[110,65,82,63],[110,66,82,64,"name"],[110,70,82,68],[110,75,82,73],[111,10,83,8,"name"],[112,8,84,6],[112,9,84,7],[112,10,84,8],[112,11,84,9],[112,13,84,11,"initialRoutes"],[112,26,84,24],[112,28,84,26,"configs"],[112,35,84,33],[112,36,84,34],[113,6,85,4],[114,6,86,4],[114,13,86,11,"undefined"],[114,22,86,20],[115,4,87,2],[116,4,88,2],[116,8,88,6,"result"],[116,14,88,12],[117,4,89,2],[117,8,89,6,"current"],[117,15,89,13],[119,4,91,2],[120,4,92,2],[121,4,93,2],[121,8,93,2,"_matchAgainstConfigs"],[121,28,93,2],[121,31,96,6,"matchAgainstConfigs"],[121,50,96,25],[121,51,96,26,"remaining"],[121,60,96,35],[121,62,96,37,"configs"],[121,69,96,44],[121,70,96,45],[122,6,94,4,"routes"],[122,12,94,10],[122,15,94,10,"_matchAgainstConfigs"],[122,35,94,10],[122,36,94,4,"routes"],[122,42,94,10],[123,6,95,4,"remainingPath"],[123,19,95,17],[123,22,95,17,"_matchAgainstConfigs"],[123,42,95,17],[123,43,95,4,"remainingPath"],[123,56,95,17],[124,4,97,2],[124,8,97,6,"routes"],[124,14,97,12],[124,19,97,17,"undefined"],[124,28,97,26],[124,30,97,28],[125,6,98,4],[126,6,99,4,"current"],[126,13,99,11],[126,16,99,14,"createNestedStateObject"],[126,39,99,37],[126,40,99,38,"path"],[126,44,99,42],[126,46,99,44,"routes"],[126,52,99,50],[126,54,99,52,"initialRoutes"],[126,67,99,65],[126,69,99,67,"configs"],[126,76,99,74],[126,77,99,75],[127,6,100,4,"remaining"],[127,15,100,13],[127,18,100,16,"remainingPath"],[127,31,100,29],[128,6,101,4,"result"],[128,12,101,10],[128,15,101,13,"current"],[128,22,101,20],[129,4,102,2],[130,4,103,2],[130,8,103,6,"current"],[130,15,103,13],[130,19,103,17],[130,23,103,21],[130,27,103,25,"result"],[130,33,103,31],[130,37,103,35],[130,41,103,39],[130,43,103,41],[131,6,104,4],[131,13,104,11,"undefined"],[131,22,104,20],[132,4,105,2],[133,4,106,2],[133,11,106,9,"result"],[133,17,106,15],[134,2,107,0],[136,2,109,0],[137,0,110,0],[138,0,111,0],[139,2,112,0],[139,6,112,6,"cachedConfigResources"],[139,27,112,27],[139,30,112,30],[139,34,112,34,"WeakMap"],[139,41,112,41],[139,42,112,42],[139,43,112,43],[140,2,113,0],[140,11,113,9,"getConfigResources"],[140,29,113,27,"getConfigResources"],[140,30,113,28,"options"],[140,37,113,35],[140,39,113,37],[141,4,114,2],[141,8,114,6],[141,9,114,7,"options"],[141,16,114,14],[141,18,114,16],[141,25,114,23,"prepareConfigResources"],[141,47,114,45],[141,48,114,46],[141,49,114,47],[142,4,115,2],[142,8,115,8,"cached"],[142,14,115,14],[142,17,115,17,"cachedConfigResources"],[142,38,115,38],[142,39,115,39,"get"],[142,42,115,42],[142,43,115,43,"options"],[142,50,115,50],[142,51,115,51],[143,4,116,2],[143,8,116,6,"cached"],[143,14,116,12],[143,16,116,14],[143,23,116,21,"cached"],[143,29,116,27],[144,4,117,2],[144,8,117,8,"resources"],[144,17,117,17],[144,20,117,20,"prepareConfigResources"],[144,42,117,42],[144,43,117,43,"options"],[144,50,117,50],[144,51,117,51],[145,4,118,2,"cachedConfigResources"],[145,25,118,23],[145,26,118,24,"set"],[145,29,118,27],[145,30,118,28,"options"],[145,37,118,35],[145,39,118,37,"resources"],[145,48,118,46],[145,49,118,47],[146,4,119,2],[146,11,119,9,"resources"],[146,20,119,18],[147,2,120,0],[148,2,121,0],[148,11,121,9,"prepareConfigResources"],[148,33,121,31,"prepareConfigResources"],[148,34,121,32,"options"],[148,41,121,39],[148,43,121,41],[149,4,122,2],[149,8,122,6,"options"],[149,15,122,13],[149,17,122,15],[150,6,123,4],[150,7,123,5],[150,8,123,6],[150,10,123,8,"_validatePathConfig"],[150,29,123,27],[150,30,123,28,"validatePathConfig"],[150,48,123,46],[150,50,123,48,"options"],[150,57,123,55],[150,58,123,56],[151,4,124,2],[152,4,125,2],[152,8,125,8,"initialRoutes"],[152,21,125,21],[152,24,125,24,"getInitialRoutes"],[152,40,125,40],[152,41,125,41,"options"],[152,48,125,48],[152,49,125,49],[153,4,126,2],[153,8,126,8,"configs"],[153,15,126,15],[153,18,126,18,"getSortedNormalizedConfigs"],[153,44,126,44],[153,45,126,45,"initialRoutes"],[153,58,126,58],[153,60,126,60,"options"],[153,67,126,67],[153,69,126,69,"screens"],[153,76,126,76],[153,77,126,77],[154,4,127,2,"checkForDuplicatedConfigs"],[154,29,127,27],[154,30,127,28,"configs"],[154,37,127,35],[154,38,127,36],[155,4,128,2],[155,8,128,8,"configWithRegexes"],[155,25,128,25],[155,28,128,28,"getConfigsWithRegexes"],[155,49,128,49],[155,50,128,50,"configs"],[155,57,128,57],[155,58,128,58],[156,4,129,2],[156,11,129,9],[157,6,130,4,"initialRoutes"],[157,19,130,17],[158,6,131,4,"configs"],[158,13,131,11],[159,6,132,4,"configWithRegexes"],[160,4,133,2],[160,5,133,3],[161,2,134,0],[162,2,135,0],[162,11,135,9,"getInitialRoutes"],[162,27,135,25,"getInitialRoutes"],[162,28,135,26,"options"],[162,35,135,33],[162,37,135,35],[163,4,136,2],[163,8,136,8,"initialRoutes"],[163,21,136,21],[163,24,136,24],[163,26,136,26],[164,4,137,2],[164,8,137,6,"options"],[164,15,137,13],[164,17,137,15,"initialRouteName"],[164,33,137,31],[164,35,137,33],[165,6,138,4,"initialRoutes"],[165,19,138,17],[165,20,138,18,"push"],[165,24,138,22],[165,25,138,23],[166,8,139,6,"initialRouteName"],[166,24,139,22],[166,26,139,24,"options"],[166,33,139,31],[166,34,139,32,"initialRouteName"],[166,50,139,48],[167,8,140,6,"parentScreens"],[167,21,140,19],[167,23,140,21],[168,6,141,4],[168,7,141,5],[168,8,141,6],[169,4,142,2],[170,4,143,2],[170,11,143,9,"initialRoutes"],[170,24,143,22],[171,2,144,0],[172,2,145,0],[172,11,145,9,"getSortedNormalizedConfigs"],[172,37,145,35,"getSortedNormalizedConfigs"],[172,38,145,36,"initialRoutes"],[172,51,145,49],[172,53,145,65],[173,4,145,65],[173,8,145,51,"screens"],[173,15,145,58],[173,18,145,58,"arguments"],[173,27,145,58],[173,28,145,58,"length"],[173,34,145,58],[173,42,145,58,"arguments"],[173,51,145,58],[173,59,145,58,"undefined"],[173,68,145,58],[173,71,145,58,"arguments"],[173,80,145,58],[173,86,145,61],[173,87,145,62],[173,88,145,63],[174,4,146,2],[175,4,147,2],[175,11,147,9],[175,13,147,11],[175,14,147,12,"concat"],[175,20,147,18],[175,21,147,19],[175,24,147,22,"Object"],[175,30,147,28],[175,31,147,29,"keys"],[175,35,147,33],[175,36,147,34,"screens"],[175,43,147,41],[175,44,147,42],[175,45,147,43,"map"],[175,48,147,46],[175,49,147,47,"key"],[175,52,147,50],[175,56,147,54,"createNormalizedConfigs"],[175,79,147,77],[175,80,147,78,"key"],[175,83,147,81],[175,85,147,83,"screens"],[175,92,147,90],[175,94,147,92,"initialRoutes"],[175,107,147,105],[175,109,147,107],[175,111,147,109],[175,113,147,111],[175,115,147,113],[175,117,147,115],[175,119,147,117],[175,120,147,118],[175,121,147,119],[175,122,147,120],[175,123,147,121,"sort"],[175,127,147,125],[175,128,147,126],[175,129,147,127,"a"],[175,130,147,128],[175,132,147,130,"b"],[175,133,147,131],[175,138,147,136],[176,6,148,4],[177,6,149,4],[178,6,150,4],[179,6,151,4],[180,6,152,4],[181,6,153,4],[183,6,155,4],[184,6,156,4],[185,6,157,4],[185,10,157,8],[185,11,157,9],[185,12,157,10],[185,14,157,12,"_isArrayEqual"],[185,27,157,25],[185,28,157,26,"isArrayEqual"],[185,40,157,38],[185,42,157,40,"a"],[185,43,157,41],[185,44,157,42,"segments"],[185,52,157,50],[185,54,157,52,"b"],[185,55,157,53],[185,56,157,54,"segments"],[185,64,157,62],[185,65,157,63],[185,67,157,65],[186,8,158,6],[186,15,158,13,"b"],[186,16,158,14],[186,17,158,15,"routeNames"],[186,27,158,25],[186,28,158,26,"join"],[186,32,158,30],[186,33,158,31],[186,36,158,34],[186,37,158,35],[186,38,158,36,"localeCompare"],[186,51,158,49],[186,52,158,50,"a"],[186,53,158,51],[186,54,158,52,"routeNames"],[186,64,158,62],[186,65,158,63,"join"],[186,69,158,67],[186,70,158,68],[186,73,158,71],[186,74,158,72],[186,75,158,73],[187,6,159,4],[189,6,161,4],[190,6,162,4],[191,6,163,4],[191,10,163,8],[191,11,163,9],[191,12,163,10],[191,14,163,12,"_arrayStartsWith"],[191,30,163,28],[191,31,163,29,"arrayStartsWith"],[191,46,163,44],[191,48,163,46,"a"],[191,49,163,47],[191,50,163,48,"segments"],[191,58,163,56],[191,60,163,58,"b"],[191,61,163,59],[191,62,163,60,"segments"],[191,70,163,68],[191,71,163,69],[191,73,163,71],[192,8,164,6],[192,15,164,13],[192,16,164,14],[192,17,164,15],[193,6,165,4],[194,6,166,4],[194,10,166,8],[194,11,166,9],[194,12,166,10],[194,14,166,12,"_arrayStartsWith"],[194,30,166,28],[194,31,166,29,"arrayStartsWith"],[194,46,166,44],[194,48,166,46,"b"],[194,49,166,47],[194,50,166,48,"segments"],[194,58,166,56],[194,60,166,58,"a"],[194,61,166,59],[194,62,166,60,"segments"],[194,70,166,68],[194,71,166,69],[194,73,166,71],[195,8,167,6],[195,15,167,13],[195,16,167,14],[196,6,168,4],[197,6,169,4],[197,11,169,9],[197,15,169,13,"i"],[197,16,169,14],[197,19,169,17],[197,20,169,18],[197,22,169,20,"i"],[197,23,169,21],[197,26,169,24,"Math"],[197,30,169,28],[197,31,169,29,"max"],[197,34,169,32],[197,35,169,33,"a"],[197,36,169,34],[197,37,169,35,"segments"],[197,45,169,43],[197,46,169,44,"length"],[197,52,169,50],[197,54,169,52,"b"],[197,55,169,53],[197,56,169,54,"segments"],[197,64,169,62],[197,65,169,63,"length"],[197,71,169,69],[197,72,169,70],[197,74,169,72,"i"],[197,75,169,73],[197,77,169,75],[197,79,169,77],[198,8,170,6],[199,8,171,6],[199,12,171,10,"a"],[199,13,171,11],[199,14,171,12,"segments"],[199,22,171,20],[199,23,171,21,"i"],[199,24,171,22],[199,25,171,23],[199,29,171,27],[199,33,171,31],[199,35,171,33],[200,10,172,8],[200,17,172,15],[200,18,172,16],[201,8,173,6],[203,8,175,6],[204,8,176,6],[204,12,176,10,"b"],[204,13,176,11],[204,14,176,12,"segments"],[204,22,176,20],[204,23,176,21,"i"],[204,24,176,22],[204,25,176,23],[204,29,176,27],[204,33,176,31],[204,35,176,33],[205,10,177,8],[205,17,177,15],[205,18,177,16],[205,19,177,17],[206,8,178,6],[207,8,179,6],[207,12,179,12,"aWildCard"],[207,21,179,21],[207,24,179,24,"a"],[207,25,179,25],[207,26,179,26,"segments"],[207,34,179,34],[207,35,179,35,"i"],[207,36,179,36],[207,37,179,37],[207,42,179,42],[207,45,179,45],[208,8,180,6],[208,12,180,12,"bWildCard"],[208,21,180,21],[208,24,180,24,"b"],[208,25,180,25],[208,26,180,26,"segments"],[208,34,180,34],[208,35,180,35,"i"],[208,36,180,36],[208,37,180,37],[208,42,180,42],[208,45,180,45],[209,8,181,6],[209,12,181,12,"aParam"],[209,18,181,18],[209,21,181,21,"a"],[209,22,181,22],[209,23,181,23,"segments"],[209,31,181,31],[209,32,181,32,"i"],[209,33,181,33],[209,34,181,34],[209,35,181,35,"startsWith"],[209,45,181,45],[209,46,181,46],[209,49,181,49],[209,50,181,50],[210,8,182,6],[210,12,182,12,"bParam"],[210,18,182,18],[210,21,182,21,"b"],[210,22,182,22],[210,23,182,23,"segments"],[210,31,182,31],[210,32,182,32,"i"],[210,33,182,33],[210,34,182,34],[210,35,182,35,"startsWith"],[210,45,182,45],[210,46,182,46],[210,49,182,49],[210,50,182,50],[211,8,183,6],[211,12,183,12,"aRegex"],[211,18,183,18],[211,21,183,21,"aParam"],[211,27,183,27],[211,31,183,31,"a"],[211,32,183,32],[211,33,183,33,"segments"],[211,41,183,41],[211,42,183,42,"i"],[211,43,183,43],[211,44,183,44],[211,45,183,45,"includes"],[211,53,183,53],[211,54,183,54],[211,57,183,57],[211,58,183,58],[212,8,184,6],[212,12,184,12,"bRegex"],[212,18,184,18],[212,21,184,21,"bParam"],[212,27,184,27],[212,31,184,31,"b"],[212,32,184,32],[212,33,184,33,"segments"],[212,41,184,41],[212,42,184,42,"i"],[212,43,184,43],[212,44,184,44],[212,45,184,45,"includes"],[212,53,184,53],[212,54,184,54],[212,57,184,57],[212,58,184,58],[214,8,186,6],[215,8,187,6],[215,12,187,10,"aWildCard"],[215,21,187,19],[215,25,187,23,"bWildCard"],[215,34,187,32],[215,38,187,36,"aRegex"],[215,44,187,42],[215,48,187,46,"bRegex"],[215,54,187,52],[215,56,187,54],[216,10,188,8],[217,8,189,6],[219,8,191,6],[220,8,192,6],[220,12,192,10,"aWildCard"],[220,21,192,19],[220,25,192,23],[220,26,192,24,"bWildCard"],[220,35,192,33],[220,37,192,35],[221,10,193,8],[221,17,193,15],[221,18,193,16],[222,8,194,6],[224,8,196,6],[225,8,197,6],[225,12,197,10,"bWildCard"],[225,21,197,19],[225,25,197,23],[225,26,197,24,"aWildCard"],[225,35,197,33],[225,37,197,35],[226,10,198,8],[226,17,198,15],[226,18,198,16],[226,19,198,17],[227,8,199,6],[229,8,201,6],[230,8,202,6],[230,12,202,10,"aParam"],[230,18,202,16],[230,22,202,20],[230,23,202,21,"bParam"],[230,29,202,27],[230,31,202,29],[231,10,203,8],[231,17,203,15],[231,18,203,16],[232,8,204,6],[234,8,206,6],[235,8,207,6],[235,12,207,10,"bParam"],[235,18,207,16],[235,22,207,20],[235,23,207,21,"aParam"],[235,29,207,27],[235,31,207,29],[236,10,208,8],[236,17,208,15],[236,18,208,16],[236,19,208,17],[237,8,209,6],[239,8,211,6],[240,8,212,6],[240,12,212,10,"aRegex"],[240,18,212,16],[240,22,212,20],[240,23,212,21,"bRegex"],[240,29,212,27],[240,31,212,29],[241,10,213,8],[241,17,213,15],[241,18,213,16],[241,19,213,17],[242,8,214,6],[244,8,216,6],[245,8,217,6],[245,12,217,10,"bRegex"],[245,18,217,16],[245,22,217,20],[245,23,217,21,"aRegex"],[245,29,217,27],[245,31,217,29],[246,10,218,8],[246,17,218,15],[246,18,218,16],[247,8,219,6],[248,6,220,4],[249,6,221,4],[249,13,221,11,"a"],[249,14,221,12],[249,15,221,13,"segments"],[249,23,221,21],[249,24,221,22,"length"],[249,30,221,28],[249,33,221,31,"b"],[249,34,221,32],[249,35,221,33,"segments"],[249,43,221,41],[249,44,221,42,"length"],[249,50,221,48],[250,4,222,2],[250,5,222,3],[250,6,222,4],[251,2,223,0],[252,2,224,0],[252,11,224,9,"checkForDuplicatedConfigs"],[252,36,224,34,"checkForDuplicatedConfigs"],[252,37,224,35,"configs"],[252,44,224,42],[252,46,224,44],[253,4,225,2],[254,4,226,2,"configs"],[254,11,226,9],[254,12,226,10,"reduce"],[254,18,226,16],[254,19,226,17],[254,20,226,18,"acc"],[254,23,226,21],[254,25,226,23,"config"],[254,31,226,29],[254,36,226,34],[255,6,227,4],[255,10,227,10,"pattern"],[255,17,227,17],[255,20,227,20,"config"],[255,26,227,26],[255,27,227,27,"segments"],[255,35,227,35],[255,36,227,36,"join"],[255,40,227,40],[255,41,227,41],[255,44,227,44],[255,45,227,45],[256,6,228,4],[256,10,228,8,"acc"],[256,13,228,11],[256,14,228,12,"pattern"],[256,21,228,19],[256,22,228,20],[256,24,228,22],[257,8,229,6],[257,12,229,12,"a"],[257,13,229,13],[257,16,229,16,"acc"],[257,19,229,19],[257,20,229,20,"pattern"],[257,27,229,27],[257,28,229,28],[257,29,229,29,"routeNames"],[257,39,229,39],[258,8,230,6],[258,12,230,12,"b"],[258,13,230,13],[258,16,230,16,"config"],[258,22,230,22],[258,23,230,23,"routeNames"],[258,33,230,33],[260,8,232,6],[261,8,233,6],[262,8,234,6],[262,12,234,12,"intersects"],[262,22,234,22],[262,25,234,25,"a"],[262,26,234,26],[262,27,234,27,"length"],[262,33,234,33],[262,36,234,36,"b"],[262,37,234,37],[262,38,234,38,"length"],[262,44,234,44],[262,47,234,47,"b"],[262,48,234,48],[262,49,234,49,"every"],[262,54,234,54],[262,55,234,55],[262,56,234,56,"it"],[262,58,234,58],[262,60,234,60,"i"],[262,61,234,61],[262,66,234,66,"a"],[262,67,234,67],[262,68,234,68,"i"],[262,69,234,69],[262,70,234,70],[262,75,234,75,"it"],[262,77,234,77],[262,78,234,78],[262,81,234,81,"a"],[262,82,234,82],[262,83,234,83,"every"],[262,88,234,88],[262,89,234,89],[262,90,234,90,"it"],[262,92,234,92],[262,94,234,94,"i"],[262,95,234,95],[262,100,234,100,"b"],[262,101,234,101],[262,102,234,102,"i"],[262,103,234,103],[262,104,234,104],[262,109,234,109,"it"],[262,111,234,111],[262,112,234,112],[263,8,235,6],[263,12,235,10],[263,13,235,11,"intersects"],[263,23,235,21],[263,25,235,23],[264,10,236,8],[264,16,236,14],[264,20,236,18,"Error"],[264,25,236,23],[264,26,236,24],[264,91,236,89,"pattern"],[264,98,236,96],[264,121,236,119,"a"],[264,122,236,120],[264,123,236,121,"join"],[264,127,236,125],[264,128,236,126],[264,133,236,131],[264,134,236,132],[264,144,236,142,"b"],[264,145,236,143],[264,146,236,144,"join"],[264,150,236,148],[264,151,236,149],[264,156,236,154],[264,157,236,155],[264,229,236,227],[264,230,236,228],[265,8,237,6],[266,6,238,4],[267,6,239,4],[267,13,239,11,"Object"],[267,19,239,17],[267,20,239,18,"assign"],[267,26,239,24],[267,27,239,25,"acc"],[267,30,239,28],[267,32,239,30],[268,8,240,6],[268,9,240,7,"pattern"],[268,16,240,14],[268,19,240,17,"config"],[269,6,241,4],[269,7,241,5],[269,8,241,6],[270,4,242,2],[270,5,242,3],[270,7,242,5],[270,8,242,6],[270,9,242,7],[270,10,242,8],[271,2,243,0],[272,2,244,0],[272,11,244,9,"getConfigsWithRegexes"],[272,32,244,30,"getConfigsWithRegexes"],[272,33,244,31,"configs"],[272,40,244,38],[272,42,244,40],[273,4,245,2],[273,11,245,9,"configs"],[273,18,245,16],[273,19,245,17,"map"],[273,22,245,20],[273,23,245,21,"c"],[273,24,245,22],[273,29,245,27],[274,6,246,4],[274,9,246,7,"c"],[274,10,246,8],[275,6,247,4],[276,6,248,4,"regex"],[276,11,248,9],[276,13,248,11,"c"],[276,14,248,12],[276,15,248,13,"regex"],[276,20,248,18],[276,23,248,21],[276,27,248,25,"RegExp"],[276,33,248,31],[276,34,248,32,"c"],[276,35,248,33],[276,36,248,34,"regex"],[276,41,248,39],[276,42,248,40,"source"],[276,48,248,46],[276,51,248,49],[276,54,248,52],[276,55,248,53],[276,58,248,56,"undefined"],[277,4,249,2],[277,5,249,3],[277,6,249,4],[277,7,249,5],[278,2,250,0],[279,2,251,0],[279,6,251,6,"matchAgainstConfigs"],[279,25,251,25],[279,28,251,28,"matchAgainstConfigs"],[279,29,251,29,"remaining"],[279,38,251,38],[279,40,251,40,"configs"],[279,47,251,47],[279,52,251,52],[280,4,252,2],[280,8,252,6,"routes"],[280,14,252,12],[281,4,253,2],[281,8,253,6,"remainingPath"],[281,21,253,19],[281,24,253,22,"remaining"],[281,33,253,31],[283,4,255,2],[284,4,255,2],[284,8,255,2,"_loop"],[284,13,255,2],[284,25,255,2,"_loop"],[284,26,255,2,"config"],[284,32,255,2],[284,34,256,32],[285,8,257,4],[285,12,257,8],[285,13,257,9,"config"],[285,19,257,15],[285,20,257,16,"regex"],[285,25,257,21],[285,27,257,23],[286,10,257,23],[287,8,259,4],[288,8,260,4],[288,12,260,10,"match"],[288,17,260,15],[288,20,260,18,"remainingPath"],[288,33,260,31],[288,34,260,32,"match"],[288,39,260,37],[288,40,260,38,"config"],[288,46,260,44],[288,47,260,45,"regex"],[288,52,260,50],[288,53,260,51],[290,8,262,4],[291,8,263,4],[291,12,263,8,"match"],[291,17,263,13],[291,19,263,15],[292,10,264,6,"routes"],[292,16,264,12],[292,19,264,15,"config"],[292,25,264,21],[292,26,264,22,"routeNames"],[292,36,264,32],[292,37,264,33,"map"],[292,40,264,36],[292,41,264,37,"routeName"],[292,50,264,46],[292,54,264,50],[293,12,265,8],[293,16,265,14,"routeConfig"],[293,27,265,25],[293,30,265,28,"configs"],[293,37,265,35],[293,38,265,36,"find"],[293,42,265,40],[293,43,265,41,"c"],[293,44,265,42],[293,48,265,46],[294,14,266,10],[295,14,267,10],[295,21,267,17,"c"],[295,22,267,18],[295,23,267,19,"screen"],[295,29,267,25],[295,34,267,30,"routeName"],[295,43,267,39],[295,47,267,43],[295,48,267,44],[295,49,267,45],[295,51,267,47,"_arrayStartsWith"],[295,67,267,63],[295,68,267,64,"arrayStartsWith"],[295,83,267,79],[295,85,267,81,"config"],[295,91,267,87],[295,92,267,88,"segments"],[295,100,267,96],[295,102,267,98,"c"],[295,103,267,99],[295,104,267,100,"segments"],[295,112,267,108],[295,113,267,109],[296,12,268,8],[296,13,268,9],[296,14,268,10],[297,12,269,8],[297,16,269,14,"params"],[297,22,269,20],[297,25,269,23,"routeConfig"],[297,36,269,34],[297,40,269,38,"match"],[297,45,269,43],[297,46,269,44,"groups"],[297,52,269,50],[297,55,269,53,"Object"],[297,61,269,59],[297,62,269,60,"fromEntries"],[297,73,269,71],[297,74,269,72,"Object"],[297,80,269,78],[297,81,269,79,"entries"],[297,88,269,86],[297,89,269,87,"match"],[297,94,269,92],[297,95,269,93,"groups"],[297,101,269,99],[297,102,269,100],[297,103,269,101,"map"],[297,106,269,104],[297,107,269,105,"_ref"],[297,111,269,105],[297,115,269,123],[298,14,269,123],[298,18,269,123,"_ref2"],[298,23,269,123],[298,26,269,123,"_slicedToArray"],[298,40,269,123],[298,41,269,123,"_ref"],[298,45,269,123],[299,16,269,107,"key"],[299,19,269,110],[299,22,269,110,"_ref2"],[299,27,269,110],[300,16,269,112,"value"],[300,21,269,117],[300,24,269,117,"_ref2"],[300,29,269,117],[301,14,270,10],[301,18,270,16,"index"],[301,23,270,21],[301,26,270,24,"Number"],[301,32,270,30],[301,33,270,31,"key"],[301,36,270,34],[301,37,270,35,"replace"],[301,44,270,42],[301,45,270,43],[301,53,270,51],[301,55,270,53],[301,57,270,55],[301,58,270,56],[301,59,270,57],[302,14,271,10],[302,18,271,16,"param"],[302,23,271,21],[302,26,271,24,"routeConfig"],[302,37,271,35],[302,38,271,36,"params"],[302,44,271,42],[302,45,271,43,"find"],[302,49,271,47],[302,50,271,48,"it"],[302,52,271,50],[302,56,271,54,"it"],[302,58,271,56],[302,59,271,57,"index"],[302,64,271,62],[302,69,271,67,"index"],[302,74,271,72],[302,75,271,73],[303,14,272,10],[303,18,272,14,"param"],[303,23,272,19],[303,25,272,21,"screen"],[303,31,272,27],[303,36,272,32,"routeName"],[303,45,272,41],[303,49,272,45,"param"],[303,54,272,50],[303,56,272,52,"name"],[303,60,272,56],[303,62,272,58],[304,16,273,12],[304,23,273,19],[304,24,273,20,"param"],[304,29,273,25],[304,30,273,26,"name"],[304,34,273,30],[304,36,273,32,"value"],[304,41,273,37],[304,42,273,38],[305,14,274,10],[306,14,275,10],[306,21,275,17],[306,25,275,21],[307,12,276,8],[307,13,276,9],[307,14,276,10],[307,15,276,11,"filter"],[307,21,276,17],[307,22,276,18,"it"],[307,24,276,20],[307,28,276,24,"it"],[307,30,276,26],[307,34,276,30],[307,38,276,34],[307,39,276,35],[307,40,276,36,"map"],[307,43,276,39],[307,44,276,40,"_ref3"],[307,49,276,40],[307,53,276,58],[308,14,276,58],[308,18,276,58,"_ref4"],[308,23,276,58],[308,26,276,58,"_slicedToArray"],[308,40,276,58],[308,41,276,58,"_ref3"],[308,46,276,58],[309,16,276,42,"key"],[309,19,276,45],[309,22,276,45,"_ref4"],[309,27,276,45],[310,16,276,47,"value"],[310,21,276,52],[310,24,276,52,"_ref4"],[310,29,276,52],[311,14,277,10],[311,18,277,14,"value"],[311,23,277,19],[311,27,277,23],[311,31,277,27],[311,33,277,29],[312,16,278,12],[312,23,278,19],[312,24,278,20,"key"],[312,27,278,23],[312,29,278,25,"undefined"],[312,38,278,34],[312,39,278,35],[313,14,279,10],[314,14,280,10],[314,18,280,16,"decoded"],[314,25,280,23],[314,28,280,26,"decodeURIComponent"],[314,46,280,44],[314,47,280,45,"value"],[314,52,280,50],[314,53,280,51],[315,14,281,10],[315,18,281,16,"parsed"],[315,24,281,22],[315,27,281,25,"routeConfig"],[315,38,281,36],[315,39,281,37,"parse"],[315,44,281,42],[315,47,281,45,"key"],[315,50,281,48],[315,51,281,49],[315,54,281,52,"routeConfig"],[315,65,281,63],[315,66,281,64,"parse"],[315,71,281,69],[315,72,281,70,"key"],[315,75,281,73],[315,76,281,74],[315,77,281,75,"decoded"],[315,84,281,82],[315,85,281,83],[315,88,281,86,"decoded"],[315,95,281,93],[316,14,282,10],[316,21,282,17],[316,22,282,18,"key"],[316,25,282,21],[316,27,282,23,"parsed"],[316,33,282,29],[316,34,282,30],[317,12,283,8],[317,13,283,9],[317,14,283,10],[317,15,283,11],[317,18,283,14,"undefined"],[317,27,283,23],[318,12,284,8],[318,16,284,12,"params"],[318,22,284,18],[318,26,284,22,"Object"],[318,32,284,28],[318,33,284,29,"keys"],[318,37,284,33],[318,38,284,34,"params"],[318,44,284,40],[318,45,284,41],[318,46,284,42,"length"],[318,52,284,48],[318,54,284,50],[319,14,285,10],[319,21,285,17],[320,16,286,12,"name"],[320,20,286,16],[320,22,286,18,"routeName"],[320,31,286,27],[321,16,287,12,"params"],[322,14,288,10],[322,15,288,11],[323,12,289,8],[324,12,290,8],[324,19,290,15],[325,14,291,10,"name"],[325,18,291,14],[325,20,291,16,"routeName"],[326,12,292,8],[326,13,292,9],[327,10,293,6],[327,11,293,7],[327,12,293,8],[328,10,294,6,"remainingPath"],[328,23,294,19],[328,26,294,22,"remainingPath"],[328,39,294,35],[328,40,294,36,"replace"],[328,47,294,43],[328,48,294,44,"match"],[328,53,294,49],[328,54,294,50],[328,55,294,51],[328,56,294,52],[328,58,294,54],[328,60,294,56],[328,61,294,57],[329,10,294,58],[330,8,296,4],[331,6,297,2],[331,7,297,3],[332,6,297,3,"_ret"],[332,10,297,3],[333,4,256,2],[333,9,256,7],[333,13,256,13,"config"],[333,19,256,19],[333,23,256,23,"configs"],[333,30,256,30],[334,6,256,30,"_ret"],[334,10,256,30],[334,13,256,30,"_loop"],[334,18,256,30],[334,19,256,30,"config"],[334,25,256,30],[335,6,256,30],[335,10,256,30,"_ret"],[335,14,256,30],[335,22,258,6],[336,6,258,15],[336,10,258,15,"_ret"],[336,14,258,15],[336,22,295,6],[337,4,295,12],[338,4,298,2],[338,11,298,9],[339,6,299,4,"routes"],[339,12,299,10],[340,6,300,4,"remainingPath"],[341,4,301,2],[341,5,301,3],[342,2,302,0],[342,3,302,1],[343,2,303,0],[343,6,303,6,"createNormalizedConfigs"],[343,29,303,29],[343,32,303,32,"createNormalizedConfigs"],[343,33,303,33,"screen"],[343,39,303,39],[343,41,303,41,"routeConfig"],[343,52,303,52],[343,54,303,54,"initials"],[343,62,303,62],[343,64,303,64,"paths"],[343,69,303,69],[343,71,303,71,"parentScreens"],[343,84,303,84],[343,86,303,86,"routeNames"],[343,96,303,96],[343,101,303,101],[344,4,304,2],[344,8,304,8,"configs"],[344,15,304,15],[344,18,304,18],[344,20,304,20],[345,4,305,2,"routeNames"],[345,14,305,12],[345,15,305,13,"push"],[345,19,305,17],[345,20,305,18,"screen"],[345,26,305,24],[345,27,305,25],[346,4,306,2,"parentScreens"],[346,17,306,15],[346,18,306,16,"push"],[346,22,306,20],[346,23,306,21,"screen"],[346,29,306,27],[346,30,306,28],[347,4,307,2],[347,8,307,8,"config"],[347,14,307,14],[347,17,307,17,"routeConfig"],[347,28,307,28],[347,29,307,29,"screen"],[347,35,307,35],[347,36,307,36],[348,4,308,2],[348,8,308,6],[348,15,308,13,"config"],[348,21,308,19],[348,26,308,24],[348,34,308,32],[348,36,308,34],[349,6,309,4,"paths"],[349,11,309,9],[349,12,309,10,"push"],[349,16,309,14],[349,17,309,15],[350,8,310,6,"screen"],[350,14,310,12],[351,8,311,6,"path"],[351,12,311,10],[351,14,311,12,"config"],[352,6,312,4],[352,7,312,5],[352,8,312,6],[353,6,313,4,"configs"],[353,13,313,11],[353,14,313,12,"push"],[353,18,313,16],[353,19,313,17,"createConfigItem"],[353,35,313,33],[353,36,313,34,"screen"],[353,42,313,40],[353,44,313,42],[353,45,313,43],[353,48,313,46,"routeNames"],[353,58,313,56],[353,59,313,57],[353,61,313,59],[353,62,313,60],[353,65,313,63,"paths"],[353,70,313,68],[353,71,313,69],[353,72,313,70],[353,73,313,71],[354,4,314,2],[354,5,314,3],[354,11,314,9],[354,15,314,13],[354,22,314,20,"config"],[354,28,314,26],[354,33,314,31],[354,41,314,39],[354,43,314,41],[355,6,315,4],[356,6,316,4],[357,6,317,4],[358,6,318,4],[358,10,318,8],[358,17,318,15,"config"],[358,23,318,21],[358,24,318,22,"path"],[358,28,318,26],[358,33,318,31],[358,41,318,39],[358,43,318,41],[359,8,319,6],[359,12,319,10,"config"],[359,18,319,16],[359,19,319,17,"exact"],[359,24,319,22],[359,28,319,26,"config"],[359,34,319,32],[359,35,319,33,"path"],[359,39,319,37],[359,43,319,41],[359,47,319,45],[359,49,319,47],[360,10,320,8],[360,16,320,14],[360,20,320,18,"Error"],[360,25,320,23],[360,26,320,24],[360,37,320,35,"screen"],[360,43,320,41],[360,223,320,221],[360,224,320,222],[361,8,321,6],[363,8,323,6],[364,8,324,6],[365,8,325,6],[365,12,325,12,"aliasConfigs"],[365,24,325,24],[365,27,325,27],[365,29,325,29],[366,8,326,6],[366,12,326,10,"config"],[366,18,326,16],[366,19,326,17,"alias"],[366,24,326,22],[366,26,326,24],[367,10,327,8],[367,15,327,13],[367,19,327,19,"alias"],[367,24,327,24],[367,28,327,28,"config"],[367,34,327,34],[367,35,327,35,"alias"],[367,40,327,40],[367,42,327,42],[368,12,328,10],[368,16,328,14],[368,23,328,21,"alias"],[368,28,328,26],[368,33,328,31],[368,41,328,39],[368,43,328,41],[369,14,329,12,"aliasConfigs"],[369,26,329,24],[369,27,329,25,"push"],[369,31,329,29],[369,32,329,30,"createConfigItem"],[369,48,329,46],[369,49,329,47,"screen"],[369,55,329,53],[369,57,329,55],[369,58,329,56],[369,61,329,59,"routeNames"],[369,71,329,69],[369,72,329,70],[369,74,329,72],[369,75,329,73],[369,78,329,76,"paths"],[369,83,329,81],[369,85,329,83],[370,16,330,14,"screen"],[370,22,330,20],[371,16,331,14,"path"],[371,20,331,18],[371,22,331,20,"alias"],[372,14,332,12],[372,15,332,13],[372,16,332,14],[372,18,332,16,"config"],[372,24,332,22],[372,25,332,23,"parse"],[372,30,332,28],[372,31,332,29],[372,32,332,30],[373,12,333,10],[373,13,333,11],[373,19,333,17],[373,23,333,21],[373,30,333,28,"alias"],[373,35,333,33],[373,40,333,38],[373,48,333,46],[373,50,333,48],[374,14,334,12,"aliasConfigs"],[374,26,334,24],[374,27,334,25,"push"],[374,31,334,29],[374,32,334,30,"createConfigItem"],[374,48,334,46],[374,49,334,47,"screen"],[374,55,334,53],[374,57,334,55],[374,58,334,56],[374,61,334,59,"routeNames"],[374,71,334,69],[374,72,334,70],[374,74,334,72,"alias"],[374,79,334,77],[374,80,334,78,"exact"],[374,85,334,83],[374,88,334,86],[374,89,334,87],[375,16,335,14,"screen"],[375,22,335,20],[376,16,336,14,"path"],[376,20,336,18],[376,22,336,20,"alias"],[376,27,336,25],[376,28,336,26,"path"],[377,14,337,12],[377,15,337,13],[377,16,337,14],[377,19,337,17],[377,20,337,18],[377,23,337,21,"paths"],[377,28,337,26],[377,30,337,28],[378,16,338,14,"screen"],[378,22,338,20],[379,16,339,14,"path"],[379,20,339,18],[379,22,339,20,"alias"],[379,27,339,25],[379,28,339,26,"path"],[380,14,340,12],[380,15,340,13],[380,16,340,14],[380,18,340,16,"alias"],[380,23,340,21],[380,24,340,22,"parse"],[380,29,340,27],[380,30,340,28],[380,31,340,29],[381,12,341,10],[382,10,342,8],[383,8,343,6],[384,8,344,6],[384,12,344,10,"config"],[384,18,344,16],[384,19,344,17,"exact"],[384,24,344,22],[384,26,344,24],[385,10,345,8],[386,10,346,8],[387,10,347,8,"paths"],[387,15,347,13],[387,16,347,14,"length"],[387,22,347,20],[387,25,347,23],[387,26,347,24],[388,8,348,6],[389,8,349,6,"paths"],[389,13,349,11],[389,14,349,12,"push"],[389,18,349,16],[389,19,349,17],[390,10,350,8,"screen"],[390,16,350,14],[391,10,351,8,"path"],[391,14,351,12],[391,16,351,14,"config"],[391,22,351,20],[391,23,351,21,"path"],[392,8,352,6],[392,9,352,7],[392,10,352,8],[393,8,353,6,"configs"],[393,15,353,13],[393,16,353,14,"push"],[393,20,353,18],[393,21,353,19,"createConfigItem"],[393,37,353,35],[393,38,353,36,"screen"],[393,44,353,42],[393,46,353,44],[393,47,353,45],[393,50,353,48,"routeNames"],[393,60,353,58],[393,61,353,59],[393,63,353,61],[393,64,353,62],[393,67,353,65,"paths"],[393,72,353,70],[393,73,353,71],[393,75,353,73,"config"],[393,81,353,79],[393,82,353,80,"parse"],[393,87,353,85],[393,88,353,86],[393,89,353,87],[394,8,354,6,"configs"],[394,15,354,13],[394,16,354,14,"push"],[394,20,354,18],[394,21,354,19],[394,24,354,22,"aliasConfigs"],[394,36,354,34],[394,37,354,35],[395,6,355,4],[396,6,356,4],[396,10,356,8],[396,17,356,15,"config"],[396,23,356,21],[396,28,356,26],[396,36,356,34],[396,40,356,38],[396,47,356,45,"config"],[396,53,356,51],[396,54,356,52,"path"],[396,58,356,56],[396,63,356,61],[396,71,356,69],[396,75,356,73,"config"],[396,81,356,79],[396,82,356,80,"alias"],[396,87,356,85],[396,89,356,87,"length"],[396,95,356,93],[396,97,356,95],[397,8,357,6],[397,14,357,12],[397,18,357,16,"Error"],[397,23,357,21],[397,24,357,22],[397,35,357,33,"screen"],[397,41,357,39],[397,126,357,124],[397,127,357,125],[398,6,358,4],[399,6,359,4],[399,10,359,8,"config"],[399,16,359,14],[399,17,359,15,"screens"],[399,24,359,22],[399,26,359,24],[400,8,360,6],[401,8,361,6],[401,12,361,10,"config"],[401,18,361,16],[401,19,361,17,"initialRouteName"],[401,35,361,33],[401,37,361,35],[402,10,362,8,"initials"],[402,18,362,16],[402,19,362,17,"push"],[402,23,362,21],[402,24,362,22],[403,12,363,10,"initialRouteName"],[403,28,363,26],[403,30,363,28,"config"],[403,36,363,34],[403,37,363,35,"initialRouteName"],[403,53,363,51],[404,12,364,10,"parentScreens"],[405,10,365,8],[405,11,365,9],[405,12,365,10],[406,8,366,6],[407,8,367,6,"Object"],[407,14,367,12],[407,15,367,13,"keys"],[407,19,367,17],[407,20,367,18,"config"],[407,26,367,24],[407,27,367,25,"screens"],[407,34,367,32],[407,35,367,33],[407,36,367,34,"forEach"],[407,43,367,41],[407,44,367,42,"nestedConfig"],[407,56,367,54],[407,60,367,58],[408,10,368,8],[408,14,368,14,"result"],[408,20,368,20],[408,23,368,23,"createNormalizedConfigs"],[408,46,368,46],[408,47,368,47,"nestedConfig"],[408,59,368,59],[408,61,368,61,"config"],[408,67,368,67],[408,68,368,68,"screens"],[408,75,368,75],[408,77,368,77,"initials"],[408,85,368,85],[408,87,368,87],[408,88,368,88],[408,91,368,91,"paths"],[408,96,368,96],[408,97,368,97],[408,99,368,99],[408,100,368,100],[408,103,368,103,"parentScreens"],[408,116,368,116],[408,117,368,117],[408,119,368,119,"routeNames"],[408,129,368,129],[408,130,368,130],[409,10,369,8,"configs"],[409,17,369,15],[409,18,369,16,"push"],[409,22,369,20],[409,23,369,21],[409,26,369,24,"result"],[409,32,369,30],[409,33,369,31],[410,8,370,6],[410,9,370,7],[410,10,370,8],[411,6,371,4],[412,4,372,2],[413,4,373,2,"routeNames"],[413,14,373,12],[413,15,373,13,"pop"],[413,18,373,16],[413,19,373,17],[413,20,373,18],[414,4,374,2],[414,11,374,9,"configs"],[414,18,374,16],[415,2,375,0],[415,3,375,1],[416,2,376,0],[416,6,376,6,"createConfigItem"],[416,22,376,22],[416,25,376,25,"createConfigItem"],[416,26,376,26,"screen"],[416,32,376,32],[416,34,376,34,"routeNames"],[416,44,376,44],[416,46,376,46,"paths"],[416,51,376,51],[416,53,376,53,"parse"],[416,58,376,58],[416,63,376,63],[417,4,377,2],[417,8,377,8,"parts"],[417,13,377,13],[417,16,377,16],[417,18,377,18],[419,4,379,2],[420,4,379,2],[420,8,379,2,"_loop2"],[420,14,379,2],[420,26,379,2,"_loop2"],[420,27,379,2,"_screen"],[420,34,379,2],[420,36,383,14],[421,6,384,4,"parts"],[421,11,384,9],[421,12,384,10,"push"],[421,16,384,14],[421,17,384,15],[421,20,384,18],[421,21,384,19],[421,22,384,20],[421,24,384,22,"_getPatternParts"],[421,40,384,38],[421,41,384,39,"getPatternParts"],[421,56,384,54],[421,58,384,56,"path"],[421,62,384,60],[421,63,384,61],[421,64,384,62,"map"],[421,67,384,65],[421,68,384,66,"part"],[421,72,384,70],[421,77,384,75],[422,8,385,6],[422,11,385,9,"part"],[422,15,385,13],[423,8,386,6,"screen"],[423,14,386,12],[423,16,386,6,"screen"],[424,6,387,4],[424,7,387,5],[424,8,387,6],[424,9,387,7],[424,10,387,8],[425,4,388,2],[425,5,388,3],[426,4,380,2],[426,13,380,2,"_ref5"],[426,18,380,2],[426,22,383,7,"paths"],[426,27,383,12],[427,6,383,12],[427,10,381,4,"screen"],[427,17,381,10],[427,20,381,10,"_ref5"],[427,25,381,10],[427,26,381,4,"screen"],[427,32,381,10],[428,6,381,10],[428,10,382,4,"path"],[428,14,382,8],[428,17,382,8,"_ref5"],[428,22,382,8],[428,23,382,4,"path"],[428,27,382,8],[429,6,382,8,"_loop2"],[429,12,382,8],[429,13,382,8,"_screen"],[429,20,382,8],[430,4,382,8],[431,4,389,2],[431,8,389,8,"regex"],[431,13,389,13],[431,16,389,16,"parts"],[431,21,389,21],[431,22,389,22,"length"],[431,28,389,28],[431,31,389,31],[431,35,389,35,"RegExp"],[431,41,389,41],[431,42,389,42],[431,47,389,47,"parts"],[431,52,389,52],[431,53,389,53,"map"],[431,56,389,56],[431,57,389,57],[431,58,389,58,"it"],[431,60,389,60],[431,62,389,62,"i"],[431,63,389,63],[431,68,389,68],[432,6,390,4],[432,10,390,8,"it"],[432,12,390,10],[432,13,390,11,"param"],[432,18,390,16],[432,20,390,18],[433,8,391,6],[433,12,391,12,"reg"],[433,15,391,15],[433,18,391,18,"it"],[433,20,391,20],[433,21,391,21,"regex"],[433,26,391,26],[433,30,391,30],[433,37,391,37],[434,8,392,6],[434,15,392,13],[434,29,392,27,"i"],[434,30,392,28],[434,34,392,32,"reg"],[434,37,392,35],[434,45,392,43,"it"],[434,47,392,45],[434,48,392,46,"optional"],[434,56,392,54],[434,59,392,57],[434,62,392,60],[434,65,392,63],[434,67,392,65],[434,70,392,68],[435,6,393,4],[436,6,394,4],[436,13,394,11],[436,16,394,14,"it"],[436,18,394,16],[436,19,394,17,"segment"],[436,26,394,24],[436,31,394,29],[436,34,394,32],[436,37,394,35],[436,41,394,39],[436,44,394,42],[436,45,394,43],[436,46,394,44],[436,48,394,46,"_escapeStringRegexp"],[436,67,394,65],[436,68,394,66,"default"],[436,75,394,73],[436,77,394,75,"it"],[436,79,394,77],[436,80,394,78,"segment"],[436,87,394,85],[436,88,394,86],[436,93,394,91],[437,4,395,2],[437,5,395,3],[437,6,395,4],[437,7,395,5,"join"],[437,11,395,9],[437,12,395,10],[437,14,395,12],[437,15,395,13],[437,19,395,17],[437,20,395,18],[437,23,395,21,"undefined"],[437,32,395,30],[438,4,396,2],[438,8,396,8,"segments"],[438,16,396,16],[438,19,396,19,"parts"],[438,24,396,24],[438,25,396,25,"map"],[438,28,396,28],[438,29,396,29,"it"],[438,31,396,31],[438,35,396,35,"it"],[438,37,396,37],[438,38,396,38,"segment"],[438,45,396,45],[438,46,396,46],[439,4,397,2],[439,8,397,8,"params"],[439,14,397,14],[439,17,397,17,"parts"],[439,22,397,22],[439,23,397,23,"map"],[439,26,397,26],[439,27,397,27],[439,28,397,28,"it"],[439,30,397,30],[439,32,397,32,"i"],[439,33,397,33],[439,38,397,38,"it"],[439,40,397,40],[439,41,397,41,"param"],[439,46,397,46],[439,49,397,49],[440,6,398,4,"index"],[440,11,398,9],[440,13,398,11,"i"],[440,14,398,12],[441,6,399,4,"screen"],[441,12,399,10],[441,14,399,12,"it"],[441,16,399,14],[441,17,399,15,"screen"],[441,23,399,21],[442,6,400,4,"name"],[442,10,400,8],[442,12,400,10,"it"],[442,14,400,12],[442,15,400,13,"param"],[443,4,401,2],[443,5,401,3],[443,8,401,6],[443,12,401,10],[443,13,401,11],[443,14,401,12,"filter"],[443,20,401,18],[443,21,401,19,"it"],[443,23,401,21],[443,27,401,25,"it"],[443,29,401,27],[443,33,401,31],[443,37,401,35],[443,38,401,36],[444,4,402,2],[444,11,402,9],[445,6,403,4,"screen"],[445,12,403,10],[446,6,404,4,"regex"],[446,11,404,9],[447,6,405,4,"segments"],[447,14,405,12],[448,6,406,4,"params"],[448,12,406,10],[449,6,407,4,"routeNames"],[449,16,407,14],[450,6,408,4,"parse"],[451,4,409,2],[451,5,409,3],[452,2,410,0],[452,3,410,1],[453,2,411,0],[453,6,411,6,"findParseConfigForRoute"],[453,29,411,29],[453,32,411,32,"findParseConfigForRoute"],[453,33,411,33,"routeName"],[453,42,411,42],[453,44,411,44,"flatConfig"],[453,54,411,54],[453,59,411,59],[454,4,412,2],[454,9,412,7],[454,13,412,13,"config"],[454,19,412,19],[454,23,412,23,"flatConfig"],[454,33,412,33],[454,35,412,35],[455,6,413,4],[455,10,413,8,"routeName"],[455,19,413,17],[455,24,413,22,"config"],[455,30,413,28],[455,31,413,29,"routeNames"],[455,41,413,39],[455,42,413,40,"config"],[455,48,413,46],[455,49,413,47,"routeNames"],[455,59,413,57],[455,60,413,58,"length"],[455,66,413,64],[455,69,413,67],[455,70,413,68],[455,71,413,69],[455,73,413,71],[456,8,414,6],[456,15,414,13,"config"],[456,21,414,19],[456,22,414,20,"parse"],[456,27,414,25],[457,6,415,4],[458,4,416,2],[459,4,417,2],[459,11,417,9,"undefined"],[459,20,417,18],[460,2,418,0],[460,3,418,1],[462,2,420,0],[463,2,421,0],[463,6,421,6,"findInitialRoute"],[463,22,421,22],[463,25,421,25,"findInitialRoute"],[463,26,421,26,"routeName"],[463,35,421,35],[463,37,421,37,"parentScreens"],[463,50,421,50],[463,52,421,52,"initialRoutes"],[463,65,421,65],[463,70,421,70],[464,4,422,2],[464,9,422,7],[464,13,422,13,"config"],[464,19,422,19],[464,23,422,23,"initialRoutes"],[464,36,422,36],[464,38,422,38],[465,6,423,4],[465,10,423,8,"parentScreens"],[465,23,423,21],[465,24,423,22,"length"],[465,30,423,28],[465,35,423,33,"config"],[465,41,423,39],[465,42,423,40,"parentScreens"],[465,55,423,53],[465,56,423,54,"length"],[465,62,423,60],[465,64,423,62],[466,8,424,6],[466,12,424,10,"sameParents"],[466,23,424,21],[466,26,424,24],[466,30,424,28],[467,8,425,6],[467,13,425,11],[467,17,425,15,"i"],[467,18,425,16],[467,21,425,19],[467,22,425,20],[467,24,425,22,"i"],[467,25,425,23],[467,28,425,26,"parentScreens"],[467,41,425,39],[467,42,425,40,"length"],[467,48,425,46],[467,50,425,48,"i"],[467,51,425,49],[467,53,425,51],[467,55,425,53],[468,10,426,8],[468,14,426,12,"parentScreens"],[468,27,426,25],[468,28,426,26,"i"],[468,29,426,27],[468,30,426,28],[468,31,426,29,"localeCompare"],[468,44,426,42],[468,45,426,43,"config"],[468,51,426,49],[468,52,426,50,"parentScreens"],[468,65,426,63],[468,66,426,64,"i"],[468,67,426,65],[468,68,426,66],[468,69,426,67],[468,74,426,72],[468,75,426,73],[468,77,426,75],[469,12,427,10,"sameParents"],[469,23,427,21],[469,26,427,24],[469,31,427,29],[470,12,428,10],[471,10,429,8],[472,8,430,6],[473,8,431,6],[473,12,431,10,"sameParents"],[473,23,431,21],[473,25,431,23],[474,10,432,8],[474,17,432,15,"routeName"],[474,26,432,24],[474,31,432,29,"config"],[474,37,432,35],[474,38,432,36,"initialRouteName"],[474,54,432,52],[474,57,432,55,"config"],[474,63,432,61],[474,64,432,62,"initialRouteName"],[474,80,432,78],[474,83,432,81,"undefined"],[474,92,432,90],[475,8,433,6],[476,6,434,4],[477,4,435,2],[478,4,436,2],[478,11,436,9,"undefined"],[478,20,436,18],[479,2,437,0],[479,3,437,1],[481,2,439,0],[482,2,440,0],[483,2,441,0],[483,6,441,6,"createStateObject"],[483,23,441,23],[483,26,441,26,"createStateObject"],[483,27,441,27,"initialRoute"],[483,39,441,39],[483,41,441,41,"route"],[483,46,441,46],[483,48,441,48,"isEmpty"],[483,55,441,55],[483,60,441,60],[484,4,442,2],[484,8,442,6,"isEmpty"],[484,15,442,13],[484,17,442,15],[485,6,443,4],[485,10,443,8,"initialRoute"],[485,22,443,20],[485,24,443,22],[486,8,444,6],[486,15,444,13],[487,10,445,8,"index"],[487,15,445,13],[487,17,445,15],[487,18,445,16],[488,10,446,8,"routes"],[488,16,446,14],[488,18,446,16],[488,19,446,17],[489,12,447,10,"name"],[489,16,447,14],[489,18,447,16,"initialRoute"],[490,10,448,8],[490,11,448,9],[490,13,448,11,"route"],[490,18,448,16],[491,8,449,6],[491,9,449,7],[492,6,450,4],[492,7,450,5],[492,13,450,11],[493,8,451,6],[493,15,451,13],[494,10,452,8,"routes"],[494,16,452,14],[494,18,452,16],[494,19,452,17,"route"],[494,24,452,22],[495,8,453,6],[495,9,453,7],[496,6,454,4],[497,4,455,2],[497,5,455,3],[497,11,455,9],[498,6,456,4],[498,10,456,8,"initialRoute"],[498,22,456,20],[498,24,456,22],[499,8,457,6],[499,15,457,13],[500,10,458,8,"index"],[500,15,458,13],[500,17,458,15],[500,18,458,16],[501,10,459,8,"routes"],[501,16,459,14],[501,18,459,16],[501,19,459,17],[502,12,460,10,"name"],[502,16,460,14],[502,18,460,16,"initialRoute"],[503,10,461,8],[503,11,461,9],[503,13,461,11],[504,12,462,10],[504,15,462,13,"route"],[504,20,462,18],[505,12,463,10,"state"],[505,17,463,15],[505,19,463,17],[506,14,464,12,"routes"],[506,20,464,18],[506,22,464,20],[507,12,465,10],[508,10,466,8],[508,11,466,9],[509,8,467,6],[509,9,467,7],[510,6,468,4],[510,7,468,5],[510,13,468,11],[511,8,469,6],[511,15,469,13],[512,10,470,8,"routes"],[512,16,470,14],[512,18,470,16],[512,19,470,17],[513,12,471,10],[513,15,471,13,"route"],[513,20,471,18],[514,12,472,10,"state"],[514,17,472,15],[514,19,472,17],[515,14,473,12,"routes"],[515,20,473,18],[515,22,473,20],[516,12,474,10],[517,10,475,8],[517,11,475,9],[518,8,476,6],[518,9,476,7],[519,6,477,4],[520,4,478,2],[521,2,479,0],[521,3,479,1],[522,2,480,0],[522,6,480,6,"createNestedStateObject"],[522,29,480,29],[522,32,480,32,"createNestedStateObject"],[522,33,480,33,"path"],[522,37,480,37],[522,39,480,39,"routes"],[522,45,480,45],[522,47,480,47,"initialRoutes"],[522,60,480,60],[522,62,480,62,"flatConfig"],[522,72,480,72],[522,77,480,77],[523,4,481,2],[523,8,481,6,"route"],[523,13,481,11],[523,16,481,14,"routes"],[523,22,481,20],[523,23,481,21,"shift"],[523,28,481,26],[523,29,481,27],[523,30,481,28],[524,4,482,2],[524,8,482,8,"parentScreens"],[524,21,482,21],[524,24,482,24],[524,26,482,26],[525,4,483,2],[525,8,483,6,"initialRoute"],[525,20,483,18],[525,23,483,21,"findInitialRoute"],[525,39,483,37],[525,40,483,38,"route"],[525,45,483,43],[525,46,483,44,"name"],[525,50,483,48],[525,52,483,50,"parentScreens"],[525,65,483,63],[525,67,483,65,"initialRoutes"],[525,80,483,78],[525,81,483,79],[526,4,484,2,"parentScreens"],[526,17,484,15],[526,18,484,16,"push"],[526,22,484,20],[526,23,484,21,"route"],[526,28,484,26],[526,29,484,27,"name"],[526,33,484,31],[526,34,484,32],[527,4,485,2],[527,8,485,8,"state"],[527,13,485,13],[527,16,485,16,"createStateObject"],[527,33,485,33],[527,34,485,34,"initialRoute"],[527,46,485,46],[527,48,485,48,"route"],[527,53,485,53],[527,55,485,55,"routes"],[527,61,485,61],[527,62,485,62,"length"],[527,68,485,68],[527,73,485,73],[527,74,485,74],[527,75,485,75],[528,4,486,2],[528,8,486,6,"routes"],[528,14,486,12],[528,15,486,13,"length"],[528,21,486,19],[528,24,486,22],[528,25,486,23],[528,27,486,25],[529,6,487,4],[529,10,487,8,"nestedState"],[529,21,487,19],[529,24,487,22,"state"],[529,29,487,27],[530,6,488,4],[530,13,488,11,"route"],[530,18,488,16],[530,21,488,19,"routes"],[530,27,488,25],[530,28,488,26,"shift"],[530,33,488,31],[530,34,488,32],[530,35,488,33],[530,37,488,35],[531,8,489,6,"initialRoute"],[531,20,489,18],[531,23,489,21,"findInitialRoute"],[531,39,489,37],[531,40,489,38,"route"],[531,45,489,43],[531,46,489,44,"name"],[531,50,489,48],[531,52,489,50,"parentScreens"],[531,65,489,63],[531,67,489,65,"initialRoutes"],[531,80,489,78],[531,81,489,79],[532,8,490,6],[532,12,490,12,"nestedStateIndex"],[532,28,490,28],[532,31,490,31,"nestedState"],[532,42,490,42],[532,43,490,43,"index"],[532,48,490,48],[532,52,490,52,"nestedState"],[532,63,490,63],[532,64,490,64,"routes"],[532,70,490,70],[532,71,490,71,"length"],[532,77,490,77],[532,80,490,80],[532,81,490,81],[533,8,491,6,"nestedState"],[533,19,491,17],[533,20,491,18,"routes"],[533,26,491,24],[533,27,491,25,"nestedStateIndex"],[533,43,491,41],[533,44,491,42],[533,45,491,43,"state"],[533,50,491,48],[533,53,491,51,"createStateObject"],[533,70,491,68],[533,71,491,69,"initialRoute"],[533,83,491,81],[533,85,491,83,"route"],[533,90,491,88],[533,92,491,90,"routes"],[533,98,491,96],[533,99,491,97,"length"],[533,105,491,103],[533,110,491,108],[533,111,491,109],[533,112,491,110],[534,8,492,6],[534,12,492,10,"routes"],[534,18,492,16],[534,19,492,17,"length"],[534,25,492,23],[534,28,492,26],[534,29,492,27],[534,31,492,29],[535,10,493,8,"nestedState"],[535,21,493,19],[535,24,493,22,"nestedState"],[535,35,493,33],[535,36,493,34,"routes"],[535,42,493,40],[535,43,493,41,"nestedStateIndex"],[535,59,493,57],[535,60,493,58],[535,61,493,59,"state"],[535,66,493,64],[536,8,494,6],[537,8,495,6,"parentScreens"],[537,21,495,19],[537,22,495,20,"push"],[537,26,495,24],[537,27,495,25,"route"],[537,32,495,30],[537,33,495,31,"name"],[537,37,495,35],[537,38,495,36],[538,6,496,4],[539,4,497,2],[540,4,498,2,"route"],[540,9,498,7],[540,12,498,10],[540,13,498,11],[540,14,498,12],[540,16,498,14,"_findFocusedRoute"],[540,33,498,31],[540,34,498,32,"findFocusedRoute"],[540,50,498,48],[540,52,498,50,"state"],[540,57,498,55],[540,58,498,56],[541,4,499,2,"route"],[541,9,499,7],[541,10,499,8,"path"],[541,14,499,12],[541,17,499,15,"path"],[541,21,499,19],[541,22,499,20,"replace"],[541,29,499,27],[541,30,499,28],[541,35,499,33],[541,37,499,35],[541,39,499,37],[541,40,499,38],[542,4,500,2],[542,8,500,8,"params"],[542,14,500,14],[542,17,500,17,"parseQueryParams"],[542,33,500,33],[542,34,500,34,"path"],[542,38,500,38],[542,40,500,40,"flatConfig"],[542,50,500,50],[542,53,500,53,"findParseConfigForRoute"],[542,76,500,76],[542,77,500,77,"route"],[542,82,500,82],[542,83,500,83,"name"],[542,87,500,87],[542,89,500,89,"flatConfig"],[542,99,500,99],[542,100,500,100],[542,103,500,103,"undefined"],[542,112,500,112],[542,113,500,113],[543,4,501,2],[543,8,501,6,"params"],[543,14,501,12],[543,16,501,14],[544,6,502,4,"route"],[544,11,502,9],[544,12,502,10,"params"],[544,18,502,16],[544,21,502,19],[545,8,503,6],[545,11,503,9,"route"],[545,16,503,14],[545,17,503,15,"params"],[545,23,503,21],[546,8,504,6],[546,11,504,9,"params"],[547,6,505,4],[547,7,505,5],[548,4,506,2],[549,4,507,2],[549,11,507,9,"state"],[549,16,507,14],[550,2,508,0],[550,3,508,1],[551,2,509,0],[551,6,509,6,"parseQueryParams"],[551,22,509,22],[551,25,509,25,"parseQueryParams"],[551,26,509,26,"path"],[551,30,509,30],[551,32,509,32,"parseConfig"],[551,43,509,43],[551,48,509,48],[552,4,510,2],[552,8,510,8,"query"],[552,13,510,13],[552,16,510,16,"path"],[552,20,510,20],[552,21,510,21,"split"],[552,26,510,26],[552,27,510,27],[552,30,510,30],[552,31,510,31],[552,32,510,32],[552,33,510,33],[552,34,510,34],[553,4,511,2],[553,8,511,8,"params"],[553,14,511,14],[553,17,511,17,"queryString"],[553,28,511,28],[553,29,511,29,"parse"],[553,34,511,34],[553,35,511,35,"query"],[553,40,511,40],[553,41,511,41],[554,4,512,2],[554,8,512,6,"parseConfig"],[554,19,512,17],[554,21,512,19],[555,6,513,4,"Object"],[555,12,513,10],[555,13,513,11,"keys"],[555,17,513,15],[555,18,513,16,"params"],[555,24,513,22],[555,25,513,23],[555,26,513,24,"forEach"],[555,33,513,31],[555,34,513,32,"name"],[555,38,513,36],[555,42,513,40],[556,8,514,6],[556,12,514,10,"Object"],[556,18,514,16],[556,19,514,17,"hasOwnProperty"],[556,33,514,31],[556,34,514,32,"call"],[556,38,514,36],[556,39,514,37,"parseConfig"],[556,50,514,48],[556,52,514,50,"name"],[556,56,514,54],[556,57,514,55],[556,61,514,59],[556,68,514,66,"params"],[556,74,514,72],[556,75,514,73,"name"],[556,79,514,77],[556,80,514,78],[556,85,514,83],[556,93,514,91],[556,95,514,93],[557,10,515,8,"params"],[557,16,515,14],[557,17,515,15,"name"],[557,21,515,19],[557,22,515,20],[557,25,515,23,"parseConfig"],[557,36,515,34],[557,37,515,35,"name"],[557,41,515,39],[557,42,515,40],[557,43,515,41,"params"],[557,49,515,47],[557,50,515,48,"name"],[557,54,515,52],[557,55,515,53],[557,56,515,54],[558,8,516,6],[559,6,517,4],[559,7,517,5],[559,8,517,6],[560,4,518,2],[561,4,519,2],[561,11,519,9,"Object"],[561,17,519,15],[561,18,519,16,"keys"],[561,22,519,20],[561,23,519,21,"params"],[561,29,519,27],[561,30,519,28],[561,31,519,29,"length"],[561,37,519,35],[561,40,519,38,"params"],[561,46,519,44],[561,49,519,47,"undefined"],[561,58,519,56],[562,2,520,0],[562,3,520,1],[563,0,520,2],[563,3]],"functionMap":{"names":["<global>","_getRequireWildcardCache","_interopRequireWildcard","_interopRequireDefault","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;ACa,4MD;AEC,mkBF;AGC,qFH;AIsB;4DC4B;KDK;+BES,0CF;gEGE;QHE;CJuB;AQM;CRO;ASC;CTa;AUC;CVS;AWC;+CCE,uED,QE;GF2E;CXC;AcC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CdC;AkBC;qBCC;IDI;ClBC;4BoBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CpBS;gC0BC;0CCgE;ODG;C1BK;yB4BC;kECQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;C5BS;gCgCC;ChCO;yBiCG;CjCgB;0BkCI;ClCsC;gCmCC;CnC4B;yBoCC;gCTI;KSI;CpCG"}},"type":"js/module"}]}