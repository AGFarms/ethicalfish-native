{"dependencies":[{"name":"./useRouteCache.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":21,"index":170},"end":{"line":7,"column":50,"index":199}}],"key":"DLDCUXJuuAAKVK0kNgVpuWazcFg="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getFocusedRouteNameFromRoute = getFocusedRouteNameFromRoute;\n  var _useRouteCache = require(_dependencyMap[0], \"./useRouteCache.js\");\n  function getFocusedRouteNameFromRoute(route) {\n    // @ts-expect-error: this isn't in type definitions coz we want this private\n    var state = route[_useRouteCache.CHILD_STATE] ?? route.state;\n    var params = route.params;\n    var routeName = state ?\n    // Get the currently active route name in the nested navigator\n    state.routes[\n    // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n    // The type property will only exist for rehydrated state and not for state from deep link\n    state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n    // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string' ? params.screen : undefined;\n    return routeName;\n  }\n});","lineCount":23,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"getFocusedRouteNameFromRoute"],[7,38,6,36],[7,41,6,39,"getFocusedRouteNameFromRoute"],[7,69,6,67],[8,2,7,0],[8,6,7,4,"_useRouteCache"],[8,20,7,18],[8,23,7,21,"require"],[8,30,7,28],[8,31,7,28,"_dependencyMap"],[8,45,7,28],[8,70,7,49],[8,71,7,50],[9,2,8,0],[9,11,8,9,"getFocusedRouteNameFromRoute"],[9,39,8,37,"getFocusedRouteNameFromRoute"],[9,40,8,38,"route"],[9,45,8,43],[9,47,8,45],[10,4,9,2],[11,4,10,2],[11,8,10,8,"state"],[11,13,10,13],[11,16,10,16,"route"],[11,21,10,21],[11,22,10,22,"_useRouteCache"],[11,36,10,36],[11,37,10,37,"CHILD_STATE"],[11,48,10,48],[11,49,10,49],[11,53,10,53,"route"],[11,58,10,58],[11,59,10,59,"state"],[11,64,10,64],[12,4,11,2],[12,8,11,8,"params"],[12,14,11,14],[12,17,11,17,"route"],[12,22,11,22],[12,23,11,23,"params"],[12,29,11,29],[13,4,12,2],[13,8,12,8,"routeName"],[13,17,12,17],[13,20,12,20,"state"],[13,25,12,25],[14,4,13,2],[15,4,14,2,"state"],[15,9,14,7],[15,10,14,8,"routes"],[15,16,14,14],[16,4,15,2],[17,4,16,2],[18,4,17,2,"state"],[18,9,17,7],[18,10,17,8,"index"],[18,15,17,13],[18,20,17,18],[18,27,17,25,"state"],[18,32,17,30],[18,33,17,31,"type"],[18,37,17,35],[18,42,17,40],[18,50,17,48],[18,54,17,52,"state"],[18,59,17,57],[18,60,17,58,"type"],[18,64,17,62],[18,69,17,67],[18,76,17,74],[18,79,17,77],[18,80,17,78],[18,83,17,81,"state"],[18,88,17,86],[18,89,17,87,"routes"],[18,95,17,93],[18,96,17,94,"length"],[18,102,17,100],[18,105,17,103],[18,106,17,104],[18,107,17,105],[18,108,17,106],[18,109,17,107,"name"],[18,113,17,111],[19,4,18,2],[20,4,19,2],[20,11,19,9,"params"],[20,17,19,15],[20,19,19,17,"screen"],[20,25,19,23],[20,30,19,28],[20,38,19,36],[20,41,19,39,"params"],[20,47,19,45],[20,48,19,46,"screen"],[20,54,19,52],[20,57,19,55,"undefined"],[20,66,19,64],[21,4,20,2],[21,11,20,9,"routeName"],[21,20,20,18],[22,2,21,0],[23,0,21,1],[23,3]],"functionMap":{"names":["<global>","getFocusedRouteNameFromRoute"],"mappings":"AAA;ACO;CDa"}},"type":"js/module"}]}