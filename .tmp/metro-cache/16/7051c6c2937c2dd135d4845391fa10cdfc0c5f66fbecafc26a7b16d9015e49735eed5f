{"dependencies":[{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":48,"column":0,"index":1377}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":48,"column":0,"index":1377}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":48,"column":0,"index":1377}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"../bytes.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":12,"index":91},"end":{"line":5,"column":34,"index":113}}],"key":"m3x3BVgt8SPUbuy9aq+rIFLlpKQ="}},{"name":"../varint.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":13,"index":128},"end":{"line":6,"column":36,"index":151}}],"key":"UEp3531eZENGXG/OQgkHbcW1euU="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _createClass = require(_dependencyMap[0], \"@babel/runtime/helpers/createClass\");\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _slicedToArray = require(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var bytes = require(_dependencyMap[3], \"../bytes.js\");\n  var varint = require(_dependencyMap[4], \"../varint.js\");\n  var create = (code, digest) => {\n    var size = digest.byteLength;\n    var sizeOffset = varint.encodingLength(code);\n    var digestOffset = sizeOffset + varint.encodingLength(size);\n    var bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n  };\n  var decode = multihash => {\n    var bytes$1 = bytes.coerce(multihash);\n    var _varint$decode = varint.decode(bytes$1),\n      _varint$decode2 = _slicedToArray(_varint$decode, 2),\n      code = _varint$decode2[0],\n      sizeOffset = _varint$decode2[1];\n    var _varint$decode3 = varint.decode(bytes$1.subarray(sizeOffset)),\n      _varint$decode4 = _slicedToArray(_varint$decode3, 2),\n      size = _varint$decode4[0],\n      digestOffset = _varint$decode4[1];\n    var digest = bytes$1.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n      throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes$1);\n  };\n  var equals = (a, b) => {\n    if (a === b) {\n      return true;\n    } else {\n      return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);\n    }\n  };\n  var Digest = /*#__PURE__*/_createClass(function Digest(code, size, digest, bytes) {\n    _classCallCheck(this, Digest);\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  });\n  exports.Digest = Digest;\n  exports.create = create;\n  exports.decode = decode;\n  exports.equals = equals;\n});","lineCount":56,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_createClass"],[4,18,1,13],[4,21,1,13,"require"],[4,28,1,13],[4,29,1,13,"_dependencyMap"],[4,43,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,6,1,13,"_slicedToArray"],[6,20,1,13],[6,23,1,13,"require"],[6,30,1,13],[6,31,1,13,"_dependencyMap"],[6,45,1,13],[7,2,3,0,"Object"],[7,8,3,6],[7,9,3,7,"defineProperty"],[7,23,3,21],[7,24,3,22,"exports"],[7,31,3,29],[7,33,3,31],[7,45,3,43],[7,47,3,45],[8,4,3,47,"value"],[8,9,3,52],[8,11,3,54],[9,2,3,59],[9,3,3,60],[9,4,3,61],[10,2,5,0],[10,6,5,4,"bytes"],[10,11,5,9],[10,14,5,12,"require"],[10,21,5,19],[10,22,5,19,"_dependencyMap"],[10,36,5,19],[10,54,5,33],[10,55,5,34],[11,2,6,0],[11,6,6,4,"varint"],[11,12,6,10],[11,15,6,13,"require"],[11,22,6,20],[11,23,6,20,"_dependencyMap"],[11,37,6,20],[11,56,6,35],[11,57,6,36],[12,2,8,0],[12,6,8,6,"create"],[12,12,8,12],[12,15,8,15,"create"],[12,16,8,16,"code"],[12,20,8,20],[12,22,8,22,"digest"],[12,28,8,28],[12,33,8,33],[13,4,9,2],[13,8,9,8,"size"],[13,12,9,12],[13,15,9,15,"digest"],[13,21,9,21],[13,22,9,22,"byteLength"],[13,32,9,32],[14,4,10,2],[14,8,10,8,"sizeOffset"],[14,18,10,18],[14,21,10,21,"varint"],[14,27,10,27],[14,28,10,28,"encodingLength"],[14,42,10,42],[14,43,10,43,"code"],[14,47,10,47],[14,48,10,48],[15,4,11,2],[15,8,11,8,"digestOffset"],[15,20,11,20],[15,23,11,23,"sizeOffset"],[15,33,11,33],[15,36,11,36,"varint"],[15,42,11,42],[15,43,11,43,"encodingLength"],[15,57,11,57],[15,58,11,58,"size"],[15,62,11,62],[15,63,11,63],[16,4,12,2],[16,8,12,8,"bytes"],[16,13,12,13],[16,16,12,16],[16,20,12,20,"Uint8Array"],[16,30,12,30],[16,31,12,31,"digestOffset"],[16,43,12,43],[16,46,12,46,"size"],[16,50,12,50],[16,51,12,51],[17,4,13,2,"varint"],[17,10,13,8],[17,11,13,9,"encodeTo"],[17,19,13,17],[17,20,13,18,"code"],[17,24,13,22],[17,26,13,24,"bytes"],[17,31,13,29],[17,33,13,31],[17,34,13,32],[17,35,13,33],[18,4,14,2,"varint"],[18,10,14,8],[18,11,14,9,"encodeTo"],[18,19,14,17],[18,20,14,18,"size"],[18,24,14,22],[18,26,14,24,"bytes"],[18,31,14,29],[18,33,14,31,"sizeOffset"],[18,43,14,41],[18,44,14,42],[19,4,15,2,"bytes"],[19,9,15,7],[19,10,15,8,"set"],[19,13,15,11],[19,14,15,12,"digest"],[19,20,15,18],[19,22,15,20,"digestOffset"],[19,34,15,32],[19,35,15,33],[20,4,16,2],[20,11,16,9],[20,15,16,13,"Digest"],[20,21,16,19],[20,22,16,20,"code"],[20,26,16,24],[20,28,16,26,"size"],[20,32,16,30],[20,34,16,32,"digest"],[20,40,16,38],[20,42,16,40,"bytes"],[20,47,16,45],[20,48,16,46],[21,2,17,0],[21,3,17,1],[22,2,18,0],[22,6,18,6,"decode"],[22,12,18,12],[22,15,18,15,"multihash"],[22,24,18,24],[22,28,18,28],[23,4,19,2],[23,8,19,8,"bytes$1"],[23,15,19,15],[23,18,19,18,"bytes"],[23,23,19,23],[23,24,19,24,"coerce"],[23,30,19,30],[23,31,19,31,"multihash"],[23,40,19,40],[23,41,19,41],[24,4,20,2],[24,8,20,2,"_varint$decode"],[24,22,20,2],[24,25,20,29,"varint"],[24,31,20,35],[24,32,20,36,"decode"],[24,38,20,42],[24,39,20,43,"bytes$1"],[24,46,20,50],[24,47,20,51],[25,6,20,51,"_varint$decode2"],[25,21,20,51],[25,24,20,51,"_slicedToArray"],[25,38,20,51],[25,39,20,51,"_varint$decode"],[25,53,20,51],[26,6,20,9,"code"],[26,10,20,13],[26,13,20,13,"_varint$decode2"],[26,28,20,13],[27,6,20,15,"sizeOffset"],[27,16,20,25],[27,19,20,25,"_varint$decode2"],[27,34,20,25],[28,4,21,2],[28,8,21,2,"_varint$decode3"],[28,23,21,2],[28,26,21,31,"varint"],[28,32,21,37],[28,33,21,38,"decode"],[28,39,21,44],[28,40,21,45,"bytes$1"],[28,47,21,52],[28,48,21,53,"subarray"],[28,56,21,61],[28,57,21,62,"sizeOffset"],[28,67,21,72],[28,68,21,73],[28,69,21,74],[29,6,21,74,"_varint$decode4"],[29,21,21,74],[29,24,21,74,"_slicedToArray"],[29,38,21,74],[29,39,21,74,"_varint$decode3"],[29,54,21,74],[30,6,21,9,"size"],[30,10,21,13],[30,13,21,13,"_varint$decode4"],[30,28,21,13],[31,6,21,15,"digestOffset"],[31,18,21,27],[31,21,21,27,"_varint$decode4"],[31,36,21,27],[32,4,22,2],[32,8,22,8,"digest"],[32,14,22,14],[32,17,22,17,"bytes$1"],[32,24,22,24],[32,25,22,25,"subarray"],[32,33,22,33],[32,34,22,34,"sizeOffset"],[32,44,22,44],[32,47,22,47,"digestOffset"],[32,59,22,59],[32,60,22,60],[33,4,23,2],[33,8,23,6,"digest"],[33,14,23,12],[33,15,23,13,"byteLength"],[33,25,23,23],[33,30,23,28,"size"],[33,34,23,32],[33,36,23,34],[34,6,24,4],[34,12,24,10],[34,16,24,14,"Error"],[34,21,24,19],[34,22,24,20],[34,40,24,38],[34,41,24,39],[35,4,25,2],[36,4,26,2],[36,11,26,9],[36,15,26,13,"Digest"],[36,21,26,19],[36,22,26,20,"code"],[36,26,26,24],[36,28,26,26,"size"],[36,32,26,30],[36,34,26,32,"digest"],[36,40,26,38],[36,42,26,40,"bytes$1"],[36,49,26,47],[36,50,26,48],[37,2,27,0],[37,3,27,1],[38,2,28,0],[38,6,28,6,"equals"],[38,12,28,12],[38,15,28,15,"equals"],[38,16,28,16,"a"],[38,17,28,17],[38,19,28,19,"b"],[38,20,28,20],[38,25,28,25],[39,4,29,2],[39,8,29,6,"a"],[39,9,29,7],[39,14,29,12,"b"],[39,15,29,13],[39,17,29,15],[40,6,30,4],[40,13,30,11],[40,17,30,15],[41,4,31,2],[41,5,31,3],[41,11,31,9],[42,6,32,4],[42,13,32,11,"a"],[42,14,32,12],[42,15,32,13,"code"],[42,19,32,17],[42,24,32,22,"b"],[42,25,32,23],[42,26,32,24,"code"],[42,30,32,28],[42,34,32,32,"a"],[42,35,32,33],[42,36,32,34,"size"],[42,40,32,38],[42,45,32,43,"b"],[42,46,32,44],[42,47,32,45,"size"],[42,51,32,49],[42,55,32,53,"bytes"],[42,60,32,58],[42,61,32,59,"equals"],[42,67,32,65],[42,68,32,66,"a"],[42,69,32,67],[42,70,32,68,"bytes"],[42,75,32,73],[42,77,32,75,"b"],[42,78,32,76],[42,79,32,77,"bytes"],[42,84,32,82],[42,85,32,83],[43,4,33,2],[44,2,34,0],[44,3,34,1],[45,2,34,2],[45,6,35,6,"Digest"],[45,12,35,12],[45,28,35,12,"_createClass"],[45,40,35,12],[45,41,36,2],[45,50,36,2,"Digest"],[45,57,36,14,"code"],[45,61,36,18],[45,63,36,20,"size"],[45,67,36,24],[45,69,36,26,"digest"],[45,75,36,32],[45,77,36,34,"bytes"],[45,82,36,39],[45,84,36,41],[46,4,36,41,"_classCallCheck"],[46,19,36,41],[46,26,36,41,"Digest"],[46,32,36,41],[47,4,37,4],[47,8,37,8],[47,9,37,9,"code"],[47,13,37,13],[47,16,37,16,"code"],[47,20,37,20],[48,4,38,4],[48,8,38,8],[48,9,38,9,"size"],[48,13,38,13],[48,16,38,16,"size"],[48,20,38,20],[49,4,39,4],[49,8,39,8],[49,9,39,9,"digest"],[49,15,39,15],[49,18,39,18,"digest"],[49,24,39,24],[50,4,40,4],[50,8,40,8],[50,9,40,9,"bytes"],[50,14,40,14],[50,17,40,17,"bytes"],[50,22,40,22],[51,2,41,2],[51,3,41,3],[52,2,44,0,"exports"],[52,9,44,7],[52,10,44,8,"Digest"],[52,16,44,14],[52,19,44,17,"Digest"],[52,25,44,23],[53,2,45,0,"exports"],[53,9,45,7],[53,10,45,8,"create"],[53,16,45,14],[53,19,45,17,"create"],[53,25,45,23],[54,2,46,0,"exports"],[54,9,46,7],[54,10,46,8,"decode"],[54,16,46,14],[54,19,46,17,"decode"],[54,25,46,23],[55,2,47,0,"exports"],[55,9,47,7],[55,10,47,8,"equals"],[55,16,47,14],[55,19,47,17,"equals"],[55,25,47,23],[56,0,47,24],[56,3]],"functionMap":{"names":["<global>","create","decode","equals","Digest","Digest#constructor"],"mappings":"AAA;eCO;CDS;eEC;CFS;eGC;CHM;AIC;ECC;GDK;CJC"}},"type":"js/module"}]}