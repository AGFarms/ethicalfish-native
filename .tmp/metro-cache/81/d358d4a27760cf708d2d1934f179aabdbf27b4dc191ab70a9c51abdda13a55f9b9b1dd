{"dependencies":[{"name":"../Hex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":12,"index":252},"end":{"line":8,"column":32,"index":272}}],"key":"UJeTEf3C18ChmI4dAVgl6EHI5mI="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.assertSize = assertSize;\n  exports.assertStartOffset = assertStartOffset;\n  exports.assertEndOffset = assertEndOffset;\n  exports.pad = pad;\n  exports.trim = trim;\n  var Hex = require(_dependencyMap[0], \"../Hex.js\");\n  function assertSize(hex, size_) {\n    if (Hex.size(hex) > size_) throw new Hex.SizeOverflowError({\n      givenSize: Hex.size(hex),\n      maxSize: size_\n    });\n  }\n  function assertStartOffset(value, start) {\n    if (typeof start === 'number' && start > 0 && start > Hex.size(value) - 1) throw new Hex.SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: Hex.size(value)\n    });\n  }\n  function assertEndOffset(value, start, end) {\n    if (typeof start === 'number' && typeof end === 'number' && Hex.size(value) !== end - start) {\n      throw new Hex.SliceOffsetOutOfBoundsError({\n        offset: end,\n        position: 'end',\n        size: Hex.size(value)\n      });\n    }\n  }\n  function pad(hex_) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dir = options.dir,\n      _options$size = options.size,\n      size = _options$size === void 0 ? 32 : _options$size;\n    if (size === 0) return hex_;\n    var hex = hex_.replace('0x', '');\n    if (hex.length > size * 2) throw new Hex.SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size,\n      type: 'Hex'\n    });\n    return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](size * 2, '0')}`;\n  }\n  function trim(value) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$dir = options.dir,\n      dir = _options$dir === void 0 ? 'left' : _options$dir;\n    var data = value.replace('0x', '');\n    var sliceLength = 0;\n    for (var i = 0; i < data.length - 1; i++) {\n      if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0') sliceLength++;else break;\n    }\n    data = dir === 'left' ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n    if (data === '0') return '0x';\n    if (dir === 'right' && data.length % 2 === 1) return `0x${data}0`;\n    return `0x${data}`;\n  }\n});","lineCount":63,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"assertSize"],[7,20,3,18],[7,23,3,21,"assertSize"],[7,33,3,31],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"assertStartOffset"],[8,27,4,25],[8,30,4,28,"assertStartOffset"],[8,47,4,45],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"assertEndOffset"],[9,25,5,23],[9,28,5,26,"assertEndOffset"],[9,43,5,41],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"pad"],[10,13,6,11],[10,16,6,14,"pad"],[10,19,6,17],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"trim"],[11,14,7,12],[11,17,7,15,"trim"],[11,21,7,19],[12,2,8,0],[12,6,8,6,"Hex"],[12,9,8,9],[12,12,8,12,"require"],[12,19,8,19],[12,20,8,19,"_dependencyMap"],[12,34,8,19],[12,50,8,31],[12,51,8,32],[13,2,9,0],[13,11,9,9,"assertSize"],[13,21,9,19,"assertSize"],[13,22,9,20,"hex"],[13,25,9,23],[13,27,9,25,"size_"],[13,32,9,30],[13,34,9,32],[14,4,10,4],[14,8,10,8,"Hex"],[14,11,10,11],[14,12,10,12,"size"],[14,16,10,16],[14,17,10,17,"hex"],[14,20,10,20],[14,21,10,21],[14,24,10,24,"size_"],[14,29,10,29],[14,31,11,8],[14,37,11,14],[14,41,11,18,"Hex"],[14,44,11,21],[14,45,11,22,"SizeOverflowError"],[14,62,11,39],[14,63,11,40],[15,6,12,12,"givenSize"],[15,15,12,21],[15,17,12,23,"Hex"],[15,20,12,26],[15,21,12,27,"size"],[15,25,12,31],[15,26,12,32,"hex"],[15,29,12,35],[15,30,12,36],[16,6,13,12,"maxSize"],[16,13,13,19],[16,15,13,21,"size_"],[17,4,14,8],[17,5,14,9],[17,6,14,10],[18,2,15,0],[19,2,16,0],[19,11,16,9,"assertStartOffset"],[19,28,16,26,"assertStartOffset"],[19,29,16,27,"value"],[19,34,16,32],[19,36,16,34,"start"],[19,41,16,39],[19,43,16,41],[20,4,17,4],[20,8,17,8],[20,15,17,15,"start"],[20,20,17,20],[20,25,17,25],[20,33,17,33],[20,37,17,37,"start"],[20,42,17,42],[20,45,17,45],[20,46,17,46],[20,50,17,50,"start"],[20,55,17,55],[20,58,17,58,"Hex"],[20,61,17,61],[20,62,17,62,"size"],[20,66,17,66],[20,67,17,67,"value"],[20,72,17,72],[20,73,17,73],[20,76,17,76],[20,77,17,77],[20,79,18,8],[20,85,18,14],[20,89,18,18,"Hex"],[20,92,18,21],[20,93,18,22,"SliceOffsetOutOfBoundsError"],[20,120,18,49],[20,121,18,50],[21,6,19,12,"offset"],[21,12,19,18],[21,14,19,20,"start"],[21,19,19,25],[22,6,20,12,"position"],[22,14,20,20],[22,16,20,22],[22,23,20,29],[23,6,21,12,"size"],[23,10,21,16],[23,12,21,18,"Hex"],[23,15,21,21],[23,16,21,22,"size"],[23,20,21,26],[23,21,21,27,"value"],[23,26,21,32],[24,4,22,8],[24,5,22,9],[24,6,22,10],[25,2,23,0],[26,2,24,0],[26,11,24,9,"assertEndOffset"],[26,26,24,24,"assertEndOffset"],[26,27,24,25,"value"],[26,32,24,30],[26,34,24,32,"start"],[26,39,24,37],[26,41,24,39,"end"],[26,44,24,42],[26,46,24,44],[27,4,25,4],[27,8,25,8],[27,15,25,15,"start"],[27,20,25,20],[27,25,25,25],[27,33,25,33],[27,37,26,8],[27,44,26,15,"end"],[27,47,26,18],[27,52,26,23],[27,60,26,31],[27,64,27,8,"Hex"],[27,67,27,11],[27,68,27,12,"size"],[27,72,27,16],[27,73,27,17,"value"],[27,78,27,22],[27,79,27,23],[27,84,27,28,"end"],[27,87,27,31],[27,90,27,34,"start"],[27,95,27,39],[27,97,27,41],[28,6,28,8],[28,12,28,14],[28,16,28,18,"Hex"],[28,19,28,21],[28,20,28,22,"SliceOffsetOutOfBoundsError"],[28,47,28,49],[28,48,28,50],[29,8,29,12,"offset"],[29,14,29,18],[29,16,29,20,"end"],[29,19,29,23],[30,8,30,12,"position"],[30,16,30,20],[30,18,30,22],[30,23,30,27],[31,8,31,12,"size"],[31,12,31,16],[31,14,31,18,"Hex"],[31,17,31,21],[31,18,31,22,"size"],[31,22,31,26],[31,23,31,27,"value"],[31,28,31,32],[32,6,32,8],[32,7,32,9],[32,8,32,10],[33,4,33,4],[34,2,34,0],[35,2,35,0],[35,11,35,9,"pad"],[35,14,35,12,"pad"],[35,15,35,13,"hex_"],[35,19,35,17],[35,21,35,33],[36,4,35,33],[36,8,35,19,"options"],[36,15,35,26],[36,18,35,26,"arguments"],[36,27,35,26],[36,28,35,26,"length"],[36,34,35,26],[36,42,35,26,"arguments"],[36,51,35,26],[36,59,35,26,"undefined"],[36,68,35,26],[36,71,35,26,"arguments"],[36,80,35,26],[36,86,35,29],[36,87,35,30],[36,88,35,31],[37,4,36,4],[37,8,36,12,"dir"],[37,11,36,15],[37,14,36,31,"options"],[37,21,36,38],[37,22,36,12,"dir"],[37,25,36,15],[38,6,36,15,"_options$size"],[38,19,36,15],[38,22,36,31,"options"],[38,29,36,38],[38,30,36,17,"size"],[38,34,36,21],[39,6,36,17,"size"],[39,10,36,21],[39,13,36,21,"_options$size"],[39,26,36,21],[39,40,36,24],[39,42,36,26],[39,45,36,26,"_options$size"],[39,58,36,26],[40,4,37,4],[40,8,37,8,"size"],[40,12,37,12],[40,17,37,17],[40,18,37,18],[40,20,38,8],[40,27,38,15,"hex_"],[40,31,38,19],[41,4,39,4],[41,8,39,10,"hex"],[41,11,39,13],[41,14,39,16,"hex_"],[41,18,39,20],[41,19,39,21,"replace"],[41,26,39,28],[41,27,39,29],[41,31,39,33],[41,33,39,35],[41,35,39,37],[41,36,39,38],[42,4,40,4],[42,8,40,8,"hex"],[42,11,40,11],[42,12,40,12,"length"],[42,18,40,18],[42,21,40,21,"size"],[42,25,40,25],[42,28,40,28],[42,29,40,29],[42,31,41,8],[42,37,41,14],[42,41,41,18,"Hex"],[42,44,41,21],[42,45,41,22,"SizeExceedsPaddingSizeError"],[42,72,41,49],[42,73,41,50],[43,6,42,12,"size"],[43,10,42,16],[43,12,42,18,"Math"],[43,16,42,22],[43,17,42,23,"ceil"],[43,21,42,27],[43,22,42,28,"hex"],[43,25,42,31],[43,26,42,32,"length"],[43,32,42,38],[43,35,42,41],[43,36,42,42],[43,37,42,43],[44,6,43,12,"targetSize"],[44,16,43,22],[44,18,43,24,"size"],[44,22,43,28],[45,6,44,12,"type"],[45,10,44,16],[45,12,44,18],[46,4,45,8],[46,5,45,9],[46,6,45,10],[47,4,46,4],[47,11,46,11],[47,16,46,16,"hex"],[47,19,46,19],[47,20,46,20,"dir"],[47,23,46,23],[47,28,46,28],[47,35,46,35],[47,38,46,38],[47,46,46,46],[47,49,46,49],[47,59,46,59],[47,60,46,60],[47,61,46,61,"size"],[47,65,46,65],[47,68,46,68],[47,69,46,69],[47,71,46,71],[47,74,46,74],[47,75,46,75],[47,77,46,77],[48,2,47,0],[49,2,48,0],[49,11,48,9,"trim"],[49,15,48,13,"trim"],[49,16,48,14,"value"],[49,21,48,19],[49,23,48,35],[50,4,48,35],[50,8,48,21,"options"],[50,15,48,28],[50,18,48,28,"arguments"],[50,27,48,28],[50,28,48,28,"length"],[50,34,48,28],[50,42,48,28,"arguments"],[50,51,48,28],[50,59,48,28,"undefined"],[50,68,48,28],[50,71,48,28,"arguments"],[50,80,48,28],[50,86,48,31],[50,87,48,32],[50,88,48,33],[51,4,49,4],[51,8,49,4,"_options$dir"],[51,20,49,4],[51,23,49,29,"options"],[51,30,49,36],[51,31,49,12,"dir"],[51,34,49,15],[52,6,49,12,"dir"],[52,9,49,15],[52,12,49,15,"_options$dir"],[52,24,49,15],[52,38,49,18],[52,44,49,24],[52,47,49,24,"_options$dir"],[52,59,49,24],[53,4,50,4],[53,8,50,8,"data"],[53,12,50,12],[53,15,50,15,"value"],[53,20,50,20],[53,21,50,21,"replace"],[53,28,50,28],[53,29,50,29],[53,33,50,33],[53,35,50,35],[53,37,50,37],[53,38,50,38],[54,4,51,4],[54,8,51,8,"sliceLength"],[54,19,51,19],[54,22,51,22],[54,23,51,23],[55,4,52,4],[55,9,52,9],[55,13,52,13,"i"],[55,14,52,14],[55,17,52,17],[55,18,52,18],[55,20,52,20,"i"],[55,21,52,21],[55,24,52,24,"data"],[55,28,52,28],[55,29,52,29,"length"],[55,35,52,35],[55,38,52,38],[55,39,52,39],[55,41,52,41,"i"],[55,42,52,42],[55,44,52,44],[55,46,52,46],[56,6,53,8],[56,10,53,12,"data"],[56,14,53,16],[56,15,53,17,"dir"],[56,18,53,20],[56,23,53,25],[56,29,53,31],[56,32,53,34,"i"],[56,33,53,35],[56,36,53,38,"data"],[56,40,53,42],[56,41,53,43,"length"],[56,47,53,49],[56,50,53,52,"i"],[56,51,53,53],[56,54,53,56],[56,55,53,57],[56,56,53,58],[56,57,53,59,"toString"],[56,65,53,67],[56,66,53,68],[56,67,53,69],[56,72,53,74],[56,75,53,77],[56,77,54,12,"sliceLength"],[56,88,54,23],[56,90,54,25],[56,91,54,26],[56,96,56,12],[57,4,57,4],[58,4,58,4,"data"],[58,8,58,8],[58,11,59,8,"dir"],[58,14,59,11],[58,19,59,16],[58,25,59,22],[58,28,60,14,"data"],[58,32,60,18],[58,33,60,19,"slice"],[58,38,60,24],[58,39,60,25,"sliceLength"],[58,50,60,36],[58,51,60,37],[58,54,61,14,"data"],[58,58,61,18],[58,59,61,19,"slice"],[58,64,61,24],[58,65,61,25],[58,66,61,26],[58,68,61,28,"data"],[58,72,61,32],[58,73,61,33,"length"],[58,79,61,39],[58,82,61,42,"sliceLength"],[58,93,61,53],[58,94,61,54],[59,4,62,4],[59,8,62,8,"data"],[59,12,62,12],[59,17,62,17],[59,20,62,20],[59,22,63,8],[59,29,63,15],[59,33,63,19],[60,4,64,4],[60,8,64,8,"dir"],[60,11,64,11],[60,16,64,16],[60,23,64,23],[60,27,64,27,"data"],[60,31,64,31],[60,32,64,32,"length"],[60,38,64,38],[60,41,64,41],[60,42,64,42],[60,47,64,47],[60,48,64,48],[60,50,65,8],[60,57,65,15],[60,62,65,20,"data"],[60,66,65,24],[60,69,65,27],[61,4,66,4],[61,11,66,11],[61,16,66,16,"data"],[61,20,66,20],[61,22,66,22],[62,2,67,0],[63,0,67,1],[63,3]],"functionMap":{"names":["<global>","assertSize","assertStartOffset","assertEndOffset","pad","trim"],"mappings":"AAA;ACQ;CDM;AEC;CFO;AGC;CHU;AIC;CJY;AKC;CLmB"}},"type":"js/module"}]}