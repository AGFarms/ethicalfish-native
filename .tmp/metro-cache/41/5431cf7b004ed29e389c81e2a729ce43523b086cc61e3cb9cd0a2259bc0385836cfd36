{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Internal assertion helpers.\n   * @module\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.anumber = anumber;\n  exports.abytes = abytes;\n  exports.ahash = ahash;\n  exports.aexists = aexists;\n  exports.aoutput = aoutput;\n  /** Asserts something is positive integer. */\n  function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n  }\n  /** Is number an Uint8Array? Copied from utils for perf. */\n  function isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n  }\n  /** Asserts something is Uint8Array. */\n  function abytes(b) {\n    if (!isBytes(b)) throw new Error('Uint8Array expected');\n    for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      lengths[_key - 1] = arguments[_key];\n    }\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n  }\n  /** Asserts something is hash */\n  function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n  }\n  /** Asserts a hash instance has not been destroyed / finished */\n  function aexists(instance) {\n    var checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n  }\n  /** Asserts output is properly-sized byte array */\n  function aoutput(out, instance) {\n    abytes(out);\n    var min = instance.outputLen;\n    if (out.length < min) {\n      throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n  }\n});","lineCount":52,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,0,5,0],[8,2,6,0,"Object"],[8,8,6,6],[8,9,6,7,"defineProperty"],[8,23,6,21],[8,24,6,22,"exports"],[8,31,6,29],[8,33,6,31],[8,45,6,43],[8,47,6,45],[9,4,6,47,"value"],[9,9,6,52],[9,11,6,54],[10,2,6,59],[10,3,6,60],[10,4,6,61],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"anumber"],[11,17,7,15],[11,20,7,18,"anumber"],[11,27,7,25],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"abytes"],[12,16,8,14],[12,19,8,17,"abytes"],[12,25,8,23],[13,2,9,0,"exports"],[13,9,9,7],[13,10,9,8,"ahash"],[13,15,9,13],[13,18,9,16,"ahash"],[13,23,9,21],[14,2,10,0,"exports"],[14,9,10,7],[14,10,10,8,"aexists"],[14,17,10,15],[14,20,10,18,"aexists"],[14,27,10,25],[15,2,11,0,"exports"],[15,9,11,7],[15,10,11,8,"aoutput"],[15,17,11,15],[15,20,11,18,"aoutput"],[15,27,11,25],[16,2,12,0],[17,2,13,0],[17,11,13,9,"anumber"],[17,18,13,16,"anumber"],[17,19,13,17,"n"],[17,20,13,18],[17,22,13,20],[18,4,14,4],[18,8,14,8],[18,9,14,9,"Number"],[18,15,14,15],[18,16,14,16,"isSafeInteger"],[18,29,14,29],[18,30,14,30,"n"],[18,31,14,31],[18,32,14,32],[18,36,14,36,"n"],[18,37,14,37],[18,40,14,40],[18,41,14,41],[18,43,15,8],[18,49,15,14],[18,53,15,18,"Error"],[18,58,15,23],[18,59,15,24],[18,92,15,57],[18,95,15,60,"n"],[18,96,15,61],[18,97,15,62],[19,2,16,0],[20,2,17,0],[21,2,18,0],[21,11,18,9,"isBytes"],[21,18,18,16,"isBytes"],[21,19,18,17,"a"],[21,20,18,18],[21,22,18,20],[22,4,19,4],[22,11,19,11,"a"],[22,12,19,12],[22,24,19,24,"Uint8Array"],[22,34,19,34],[22,38,19,39,"ArrayBuffer"],[22,49,19,50],[22,50,19,51,"isView"],[22,56,19,57],[22,57,19,58,"a"],[22,58,19,59],[22,59,19,60],[22,63,19,64,"a"],[22,64,19,65],[22,65,19,66,"constructor"],[22,76,19,77],[22,77,19,78,"name"],[22,81,19,82],[22,86,19,87],[22,98,19,100],[23,2,20,0],[24,2,21,0],[25,2,22,0],[25,11,22,9,"abytes"],[25,17,22,15,"abytes"],[25,18,22,16,"b"],[25,19,22,17],[25,21,22,31],[26,4,23,4],[26,8,23,8],[26,9,23,9,"isBytes"],[26,16,23,16],[26,17,23,17,"b"],[26,18,23,18],[26,19,23,19],[26,21,24,8],[26,27,24,14],[26,31,24,18,"Error"],[26,36,24,23],[26,37,24,24],[26,58,24,45],[26,59,24,46],[27,4,24,47],[27,13,24,47,"_len"],[27,17,24,47],[27,20,24,47,"arguments"],[27,29,24,47],[27,30,24,47,"length"],[27,36,24,47],[27,38,22,22,"lengths"],[27,45,22,29],[27,52,22,29,"Array"],[27,57,22,29],[27,58,22,29,"_len"],[27,62,22,29],[27,69,22,29,"_len"],[27,73,22,29],[27,84,22,29,"_key"],[27,88,22,29],[27,94,22,29,"_key"],[27,98,22,29],[27,101,22,29,"_len"],[27,105,22,29],[27,107,22,29,"_key"],[27,111,22,29],[28,6,22,22,"lengths"],[28,13,22,29],[28,14,22,29,"_key"],[28,18,22,29],[28,26,22,29,"arguments"],[28,35,22,29],[28,36,22,29,"_key"],[28,40,22,29],[29,4,22,29],[30,4,25,4],[30,8,25,8,"lengths"],[30,15,25,15],[30,16,25,16,"length"],[30,22,25,22],[30,25,25,25],[30,26,25,26],[30,30,25,30],[30,31,25,31,"lengths"],[30,38,25,38],[30,39,25,39,"includes"],[30,47,25,47],[30,48,25,48,"b"],[30,49,25,49],[30,50,25,50,"length"],[30,56,25,56],[30,57,25,57],[30,59,26,8],[30,65,26,14],[30,69,26,18,"Error"],[30,74,26,23],[30,75,26,24],[30,107,26,56],[30,110,26,59,"lengths"],[30,117,26,66],[30,120,26,69],[30,135,26,84],[30,138,26,87,"b"],[30,139,26,88],[30,140,26,89,"length"],[30,146,26,95],[30,147,26,96],[31,2,27,0],[32,2,28,0],[33,2,29,0],[33,11,29,9,"ahash"],[33,16,29,14,"ahash"],[33,17,29,15,"h"],[33,18,29,16],[33,20,29,18],[34,4,30,4],[34,8,30,8],[34,15,30,15,"h"],[34,16,30,16],[34,21,30,21],[34,31,30,31],[34,35,30,35],[34,42,30,42,"h"],[34,43,30,43],[34,44,30,44,"create"],[34,50,30,50],[34,55,30,55],[34,65,30,65],[34,67,31,8],[34,73,31,14],[34,77,31,18,"Error"],[34,82,31,23],[34,83,31,24],[34,132,31,73],[34,133,31,74],[35,4,32,4,"anumber"],[35,11,32,11],[35,12,32,12,"h"],[35,13,32,13],[35,14,32,14,"outputLen"],[35,23,32,23],[35,24,32,24],[36,4,33,4,"anumber"],[36,11,33,11],[36,12,33,12,"h"],[36,13,33,13],[36,14,33,14,"blockLen"],[36,22,33,22],[36,23,33,23],[37,2,34,0],[38,2,35,0],[39,2,36,0],[39,11,36,9,"aexists"],[39,18,36,16,"aexists"],[39,19,36,17,"instance"],[39,27,36,25],[39,29,36,49],[40,4,36,49],[40,8,36,27,"checkFinished"],[40,21,36,40],[40,24,36,40,"arguments"],[40,33,36,40],[40,34,36,40,"length"],[40,40,36,40],[40,48,36,40,"arguments"],[40,57,36,40],[40,65,36,40,"undefined"],[40,74,36,40],[40,77,36,40,"arguments"],[40,86,36,40],[40,92,36,43],[40,96,36,47],[41,4,37,4],[41,8,37,8,"instance"],[41,16,37,16],[41,17,37,17,"destroyed"],[41,26,37,26],[41,28,38,8],[41,34,38,14],[41,38,38,18,"Error"],[41,43,38,23],[41,44,38,24],[41,78,38,58],[41,79,38,59],[42,4,39,4],[42,8,39,8,"checkFinished"],[42,21,39,21],[42,25,39,25,"instance"],[42,33,39,33],[42,34,39,34,"finished"],[42,42,39,42],[42,44,40,8],[42,50,40,14],[42,54,40,18,"Error"],[42,59,40,23],[42,60,40,24],[42,99,40,63],[42,100,40,64],[43,2,41,0],[44,2,42,0],[45,2,43,0],[45,11,43,9,"aoutput"],[45,18,43,16,"aoutput"],[45,19,43,17,"out"],[45,22,43,20],[45,24,43,22,"instance"],[45,32,43,30],[45,34,43,32],[46,4,44,4,"abytes"],[46,10,44,10],[46,11,44,11,"out"],[46,14,44,14],[46,15,44,15],[47,4,45,4],[47,8,45,10,"min"],[47,11,45,13],[47,14,45,16,"instance"],[47,22,45,24],[47,23,45,25,"outputLen"],[47,32,45,34],[48,4,46,4],[48,8,46,8,"out"],[48,11,46,11],[48,12,46,12,"length"],[48,18,46,18],[48,21,46,21,"min"],[48,24,46,24],[48,26,46,26],[49,6,47,8],[49,12,47,14],[49,16,47,18,"Error"],[49,21,47,23],[49,22,47,24],[49,78,47,80],[49,81,47,83,"min"],[49,84,47,86],[49,85,47,87],[50,4,48,4],[51,2,49,0],[52,0,49,1],[52,3]],"functionMap":{"names":["<global>","anumber","isBytes","abytes","ahash","aexists","aoutput"],"mappings":"AAA;ACY;CDG;AEE;CFE;AGE;CHK;AIE;CJK;AKE;CLK;AME;CNM"}},"type":"js/module"}]}