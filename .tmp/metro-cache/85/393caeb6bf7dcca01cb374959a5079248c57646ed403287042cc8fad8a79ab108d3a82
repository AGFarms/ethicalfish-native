{"dependencies":[{"name":"./modular.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":13,"column":21,"index":415},"end":{"line":13,"column":44,"index":438}}],"key":"FrgRfTwrfMvrcBeFLlJz+0uWEvM="}},{"name":"./utils.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":14,"column":19,"index":459},"end":{"line":14,"column":40,"index":480}}],"key":"03VO7/E+L2S6CYQuFHTg8eKUrwk="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.wNAF = wNAF;\n  exports.pippenger = pippenger;\n  exports.precomputeMSMUnsafe = precomputeMSMUnsafe;\n  exports.validateBasic = validateBasic;\n  /**\n   * Methods for elliptic curve multiplication by scalars.\n   * Contains wNAF, pippenger\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  var modular_js_1 = require(_dependencyMap[0], \"./modular.js\");\n  var utils_js_1 = require(_dependencyMap[1], \"./utils.js\");\n  var _0n = BigInt(0);\n  var _1n = BigInt(1);\n  function constTimeNegate(condition, item) {\n    var neg = item.negate();\n    return condition ? neg : item;\n  }\n  function validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n  }\n  function calcWOpts(W, bits) {\n    validateW(W, bits);\n    var windows = Math.ceil(bits / W) + 1; // +1, because\n    var windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return {\n      windows,\n      windowSize\n    };\n  }\n  function validateMSMPoints(points, c) {\n    if (!Array.isArray(points)) throw new Error('array expected');\n    points.forEach((p, i) => {\n      if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n    });\n  }\n  function validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n      if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n    });\n  }\n  // Since points in different groups cannot be equal (different object constructor),\n  // we can have single place to store precomputes\n  var pointPrecomputes = new WeakMap();\n  var pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\n  function getW(P) {\n    return pointWindowSizes.get(P) || 1;\n  }\n  /**\n   * Elliptic curve multiplication of Point by scalar. Fragile.\n   * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n   * Creates precomputation tables for fast multiplication:\n   * - private scalar is split by fixed size windows of W bits\n   * - every window point is collected from window's table & added to accumulator\n   * - since windows are different, same point inside tables won't be accessed more than once per calc\n   * - each multiplication is 'Math.ceil(CURVE_ORDER / ùëä) + 1' point additions (fixed for any scalar)\n   * - +1 window is neccessary for wNAF\n   * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n   *\n   * @todo Research returning 2d JS array of windows, instead of a single window.\n   * This would allow windows to be in different memory locations\n   */\n  function wNAF(c, bits) {\n    return {\n      constTimeNegate,\n      hasPrecomputes(elm) {\n        return getW(elm) !== 1;\n      },\n      // non-const time multiplication ladder\n      unsafeLadder(elm, n) {\n        var p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : c.ZERO;\n        var d = elm;\n        while (n > _0n) {\n          if (n & _1n) p = p.add(d);\n          d = d.double();\n          n >>= _1n;\n        }\n        return p;\n      },\n      /**\n       * Creates a wNAF precomputation window. Used for caching.\n       * Default window size is set by `utils.precompute()` and is equal to 8.\n       * Number of precomputed points depends on the curve size:\n       * 2^(ùëä‚àí1) * (Math.ceil(ùëõ / ùëä) + 1), where:\n       * - ùëä is the window size\n       * - ùëõ is the bitlength of the curve order.\n       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n       * @param elm Point instance\n       * @param W window size\n       * @returns precomputed point tables flattened to a single array\n       */\n      precomputeWindow(elm, W) {\n        var _calcWOpts = calcWOpts(W, bits),\n          windows = _calcWOpts.windows,\n          windowSize = _calcWOpts.windowSize;\n        var points = [];\n        var p = elm;\n        var base = p;\n        for (var window = 0; window < windows; window++) {\n          base = p;\n          points.push(base);\n          // =1, because we skip zero\n          for (var i = 1; i < windowSize; i++) {\n            base = base.add(p);\n            points.push(base);\n          }\n          p = base.double();\n        }\n        return points;\n      },\n      /**\n       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n       * @param W window size\n       * @param precomputes precomputed tables\n       * @param n scalar (we don't check here, but should be less than curve order)\n       * @returns real and fake (for const-time) points\n       */\n      wNAF(W, precomputes, n) {\n        // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n        // But need to carefully remove other checks before wNAF. ORDER == bits here\n        var _calcWOpts2 = calcWOpts(W, bits),\n          windows = _calcWOpts2.windows,\n          windowSize = _calcWOpts2.windowSize;\n        var p = c.ZERO;\n        var f = c.BASE;\n        var mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n        var maxNumber = 2 ** W;\n        var shiftBy = BigInt(W);\n        for (var window = 0; window < windows; window++) {\n          var offset = window * windowSize;\n          // Extract W bits.\n          var wbits = Number(n & mask);\n          // Shift number by W bits.\n          n >>= shiftBy;\n          // If the bits are bigger than max size, we'll split those.\n          // +224 => 256 - 32\n          if (wbits > windowSize) {\n            wbits -= maxNumber;\n            n += _1n;\n          }\n          // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n          // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n          // there is negate now: it is possible that negated element from low value\n          // would be the same as high element, which will create carry into next window.\n          // It's not obvious how this can fail, but still worth investigating later.\n          // Check if we're onto Zero point.\n          // Add random point inside current window to f.\n          var offset1 = offset;\n          var offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n          var cond1 = window % 2 !== 0;\n          var cond2 = wbits < 0;\n          if (wbits === 0) {\n            // The most important part for const-time getPublicKey\n            f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n          } else {\n            p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n          }\n        }\n        // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n        // Even if the variable is still unused, there are some checks which will\n        // throw an exception, so compiler needs to prove they won't happen, which is hard.\n        // At this point there is a way to F be infinity-point even if p is not,\n        // which makes it less const-time: around 1 bigint multiply.\n        return {\n          p,\n          f\n        };\n      },\n      /**\n       * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n       * @param W window size\n       * @param precomputes precomputed tables\n       * @param n scalar (we don't check here, but should be less than curve order)\n       * @param acc accumulator point to add result of multiplication\n       * @returns point\n       */\n      wNAFUnsafe(W, precomputes, n) {\n        var acc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : c.ZERO;\n        var _calcWOpts3 = calcWOpts(W, bits),\n          windows = _calcWOpts3.windows,\n          windowSize = _calcWOpts3.windowSize;\n        var mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n        var maxNumber = 2 ** W;\n        var shiftBy = BigInt(W);\n        for (var window = 0; window < windows; window++) {\n          var offset = window * windowSize;\n          if (n === _0n) break; // No need to go over empty scalar\n          // Extract W bits.\n          var wbits = Number(n & mask);\n          // Shift number by W bits.\n          n >>= shiftBy;\n          // If the bits are bigger than max size, we'll split those.\n          // +224 => 256 - 32\n          if (wbits > windowSize) {\n            wbits -= maxNumber;\n            n += _1n;\n          }\n          if (wbits === 0) continue;\n          var curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n          if (wbits < 0) curr = curr.negate();\n          // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n          acc = acc.add(curr);\n        }\n        return acc;\n      },\n      getPrecomputes(W, P, transform) {\n        // Calculate precomputes on a first run, reuse them after\n        var comp = pointPrecomputes.get(P);\n        if (!comp) {\n          comp = this.precomputeWindow(P, W);\n          if (W !== 1) pointPrecomputes.set(P, transform(comp));\n        }\n        return comp;\n      },\n      wNAFCached(P, n, transform) {\n        var W = getW(P);\n        return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n      },\n      wNAFCachedUnsafe(P, n, transform, prev) {\n        var W = getW(P);\n        if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n        return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n      },\n      // We calculate precomputes for elliptic curve point multiplication\n      // using windowed method. This specifies window size and\n      // stores precomputed values. Usually only base point would be precomputed.\n      setWindowSize(P, W) {\n        validateW(W, bits);\n        pointWindowSizes.set(P, W);\n        pointPrecomputes.delete(P);\n      }\n    };\n  }\n  /**\n   * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n   * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n   * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n   * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n   * @param c Curve Point constructor\n   * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n   * @param points array of L curve points\n   * @param scalars array of L scalars (aka private keys / bigints)\n   */\n  function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length) throw new Error('arrays of points and scalars must have equal length');\n    var zero = c.ZERO;\n    var wbits = (0, utils_js_1.bitLen)(BigInt(points.length));\n    var windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    var MASK = (1 << windowSize) - 1;\n    var buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    var lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    var sum = zero;\n    for (var i = lastBits; i >= 0; i -= windowSize) {\n      buckets.fill(zero);\n      for (var j = 0; j < scalars.length; j++) {\n        var scalar = scalars[j];\n        var _wbits = Number(scalar >> BigInt(i) & BigInt(MASK));\n        buckets[_wbits] = buckets[_wbits].add(points[j]);\n      }\n      var resI = zero; // not using this will do small speed-up, but will lose ct\n      // Skip first bucket, because it is zero\n      for (var _j = buckets.length - 1, sumI = zero; _j > 0; _j--) {\n        sumI = sumI.add(buckets[_j]);\n        resI = resI.add(sumI);\n      }\n      sum = sum.add(resI);\n      if (i !== 0) for (var _j2 = 0; _j2 < windowSize; _j2++) sum = sum.double();\n    }\n    return sum;\n  }\n  /**\n   * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n   * @param c Curve Point constructor\n   * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n   * @param points array of L curve points\n   * @returns function which multiplies points with scaars\n   */\n  function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar √ó 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 √ó 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 √ó 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    var zero = c.ZERO;\n    var tableSize = 2 ** windowSize - 1; // table size (without zero)\n    var chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    var MASK = BigInt((1 << windowSize) - 1);\n    var tables = points.map(p => {\n      var res = [];\n      for (var i = 0, acc = p; i < tableSize; i++) {\n        res.push(acc);\n        acc = acc.add(p);\n      }\n      return res;\n    });\n    return scalars => {\n      validateMSMScalars(scalars, fieldN);\n      if (scalars.length > points.length) throw new Error('array of scalars must be smaller than array of points');\n      var res = zero;\n      for (var i = 0; i < chunks; i++) {\n        // No need to double if accumulator is still zero.\n        if (res !== zero) for (var j = 0; j < windowSize; j++) res = res.double();\n        var shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n        for (var _j3 = 0; _j3 < scalars.length; _j3++) {\n          var n = scalars[_j3];\n          var curr = Number(n >> shiftBy & MASK);\n          if (!curr) continue; // skip zero scalars chunks\n          res = res.add(tables[_j3][curr - 1]);\n        }\n      }\n      return res;\n    };\n  }\n  function validateBasic(curve) {\n    (0, modular_js_1.validateField)(curve.Fp);\n    (0, utils_js_1.validateObject)(curve, {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field'\n    }, {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger'\n    });\n    // Set defaults\n    return Object.freeze({\n      ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),\n      ...curve,\n      ...{\n        p: curve.Fp.ORDER\n      }\n    });\n  }\n});","lineCount":381,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"wNAF"],[7,14,3,12],[7,17,3,15,"wNAF"],[7,21,3,19],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"pippenger"],[8,19,4,17],[8,22,4,20,"pippenger"],[8,31,4,29],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"precomputeMSMUnsafe"],[9,29,5,27],[9,32,5,30,"precomputeMSMUnsafe"],[9,51,5,49],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"validateBasic"],[10,23,6,21],[10,26,6,24,"validateBasic"],[10,39,6,37],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,2,12,0],[17,2,13,0],[17,6,13,6,"modular_js_1"],[17,18,13,18],[17,21,13,21,"require"],[17,28,13,28],[17,29,13,28,"_dependencyMap"],[17,43,13,28],[17,62,13,43],[17,63,13,44],[18,2,14,0],[18,6,14,6,"utils_js_1"],[18,16,14,16],[18,19,14,19,"require"],[18,26,14,26],[18,27,14,26,"_dependencyMap"],[18,41,14,26],[18,58,14,39],[18,59,14,40],[19,2,15,0],[19,6,15,6,"_0n"],[19,9,15,9],[19,12,15,12,"BigInt"],[19,18,15,18],[19,19,15,19],[19,20,15,20],[19,21,15,21],[20,2,16,0],[20,6,16,6,"_1n"],[20,9,16,9],[20,12,16,12,"BigInt"],[20,18,16,18],[20,19,16,19],[20,20,16,20],[20,21,16,21],[21,2,17,0],[21,11,17,9,"constTimeNegate"],[21,26,17,24,"constTimeNegate"],[21,27,17,25,"condition"],[21,36,17,34],[21,38,17,36,"item"],[21,42,17,40],[21,44,17,42],[22,4,18,4],[22,8,18,10,"neg"],[22,11,18,13],[22,14,18,16,"item"],[22,18,18,20],[22,19,18,21,"negate"],[22,25,18,27],[22,26,18,28],[22,27,18,29],[23,4,19,4],[23,11,19,11,"condition"],[23,20,19,20],[23,23,19,23,"neg"],[23,26,19,26],[23,29,19,29,"item"],[23,33,19,33],[24,2,20,0],[25,2,21,0],[25,11,21,9,"validateW"],[25,20,21,18,"validateW"],[25,21,21,19,"W"],[25,22,21,20],[25,24,21,22,"bits"],[25,28,21,26],[25,30,21,28],[26,4,22,4],[26,8,22,8],[26,9,22,9,"Number"],[26,15,22,15],[26,16,22,16,"isSafeInteger"],[26,29,22,29],[26,30,22,30,"W"],[26,31,22,31],[26,32,22,32],[26,36,22,36,"W"],[26,37,22,37],[26,41,22,41],[26,42,22,42],[26,46,22,46,"W"],[26,47,22,47],[26,50,22,50,"bits"],[26,54,22,54],[26,56,23,8],[26,62,23,14],[26,66,23,18,"Error"],[26,71,23,23],[26,72,23,24],[26,108,23,60],[26,111,23,63,"bits"],[26,115,23,67],[26,118,23,70],[26,129,23,81],[26,132,23,84,"W"],[26,133,23,85],[26,134,23,86],[27,2,24,0],[28,2,25,0],[28,11,25,9,"calcWOpts"],[28,20,25,18,"calcWOpts"],[28,21,25,19,"W"],[28,22,25,20],[28,24,25,22,"bits"],[28,28,25,26],[28,30,25,28],[29,4,26,4,"validateW"],[29,13,26,13],[29,14,26,14,"W"],[29,15,26,15],[29,17,26,17,"bits"],[29,21,26,21],[29,22,26,22],[30,4,27,4],[30,8,27,10,"windows"],[30,15,27,17],[30,18,27,20,"Math"],[30,22,27,24],[30,23,27,25,"ceil"],[30,27,27,29],[30,28,27,30,"bits"],[30,32,27,34],[30,35,27,37,"W"],[30,36,27,38],[30,37,27,39],[30,40,27,42],[30,41,27,43],[30,42,27,44],[30,43,27,45],[31,4,28,4],[31,8,28,10,"windowSize"],[31,18,28,20],[31,21,28,23],[31,22,28,24],[31,27,28,29,"W"],[31,28,28,30],[31,31,28,33],[31,32,28,34],[31,33,28,35],[31,34,28,36],[31,35,28,37],[32,4,29,4],[32,11,29,11],[33,6,29,13,"windows"],[33,13,29,20],[34,6,29,22,"windowSize"],[35,4,29,33],[35,5,29,34],[36,2,30,0],[37,2,31,0],[37,11,31,9,"validateMSMPoints"],[37,28,31,26,"validateMSMPoints"],[37,29,31,27,"points"],[37,35,31,33],[37,37,31,35,"c"],[37,38,31,36],[37,40,31,38],[38,4,32,4],[38,8,32,8],[38,9,32,9,"Array"],[38,14,32,14],[38,15,32,15,"isArray"],[38,22,32,22],[38,23,32,23,"points"],[38,29,32,29],[38,30,32,30],[38,32,33,8],[38,38,33,14],[38,42,33,18,"Error"],[38,47,33,23],[38,48,33,24],[38,64,33,40],[38,65,33,41],[39,4,34,4,"points"],[39,10,34,10],[39,11,34,11,"forEach"],[39,18,34,18],[39,19,34,19],[39,20,34,20,"p"],[39,21,34,21],[39,23,34,23,"i"],[39,24,34,24],[39,29,34,29],[40,6,35,8],[40,10,35,12],[40,12,35,14,"p"],[40,13,35,15],[40,25,35,27,"c"],[40,26,35,28],[40,27,35,29],[40,29,36,12],[40,35,36,18],[40,39,36,22,"Error"],[40,44,36,27],[40,45,36,28],[40,70,36,53],[40,73,36,56,"i"],[40,74,36,57],[40,75,36,58],[41,4,37,4],[41,5,37,5],[41,6,37,6],[42,2,38,0],[43,2,39,0],[43,11,39,9,"validateMSMScalars"],[43,29,39,27,"validateMSMScalars"],[43,30,39,28,"scalars"],[43,37,39,35],[43,39,39,37,"field"],[43,44,39,42],[43,46,39,44],[44,4,40,4],[44,8,40,8],[44,9,40,9,"Array"],[44,14,40,14],[44,15,40,15,"isArray"],[44,22,40,22],[44,23,40,23,"scalars"],[44,30,40,30],[44,31,40,31],[44,33,41,8],[44,39,41,14],[44,43,41,18,"Error"],[44,48,41,23],[44,49,41,24],[44,76,41,51],[44,77,41,52],[45,4,42,4,"scalars"],[45,11,42,11],[45,12,42,12,"forEach"],[45,19,42,19],[45,20,42,20],[45,21,42,21,"s"],[45,22,42,22],[45,24,42,24,"i"],[45,25,42,25],[45,30,42,30],[46,6,43,8],[46,10,43,12],[46,11,43,13,"field"],[46,16,43,18],[46,17,43,19,"isValid"],[46,24,43,26],[46,25,43,27,"s"],[46,26,43,28],[46,27,43,29],[46,29,44,12],[46,35,44,18],[46,39,44,22,"Error"],[46,44,44,27],[46,45,44,28],[46,71,44,54],[46,74,44,57,"i"],[46,75,44,58],[46,76,44,59],[47,4,45,4],[47,5,45,5],[47,6,45,6],[48,2,46,0],[49,2,47,0],[50,2,48,0],[51,2,49,0],[51,6,49,6,"pointPrecomputes"],[51,22,49,22],[51,25,49,25],[51,29,49,29,"WeakMap"],[51,36,49,36],[51,37,49,37],[51,38,49,38],[52,2,50,0],[52,6,50,6,"pointWindowSizes"],[52,22,50,22],[52,25,50,25],[52,29,50,29,"WeakMap"],[52,36,50,36],[52,37,50,37],[52,38,50,38],[52,39,50,39],[52,40,50,40],[53,2,51,0],[53,11,51,9,"getW"],[53,15,51,13,"getW"],[53,16,51,14,"P"],[53,17,51,15],[53,19,51,17],[54,4,52,4],[54,11,52,11,"pointWindowSizes"],[54,27,52,27],[54,28,52,28,"get"],[54,31,52,31],[54,32,52,32,"P"],[54,33,52,33],[54,34,52,34],[54,38,52,38],[54,39,52,39],[55,2,53,0],[56,2,54,0],[57,0,55,0],[58,0,56,0],[59,0,57,0],[60,0,58,0],[61,0,59,0],[62,0,60,0],[63,0,61,0],[64,0,62,0],[65,0,63,0],[66,0,64,0],[67,0,65,0],[68,0,66,0],[69,0,67,0],[70,2,68,0],[70,11,68,9,"wNAF"],[70,15,68,13,"wNAF"],[70,16,68,14,"c"],[70,17,68,15],[70,19,68,17,"bits"],[70,23,68,21],[70,25,68,23],[71,4,69,4],[71,11,69,11],[72,6,70,8,"constTimeNegate"],[72,21,70,23],[73,6,71,8,"hasPrecomputes"],[73,20,71,22,"hasPrecomputes"],[73,21,71,23,"elm"],[73,24,71,26],[73,26,71,28],[74,8,72,12],[74,15,72,19,"getW"],[74,19,72,23],[74,20,72,24,"elm"],[74,23,72,27],[74,24,72,28],[74,29,72,33],[74,30,72,34],[75,6,73,8],[75,7,73,9],[76,6,74,8],[77,6,75,8,"unsafeLadder"],[77,18,75,20,"unsafeLadder"],[77,19,75,21,"elm"],[77,22,75,24],[77,24,75,26,"n"],[77,25,75,27],[77,27,75,41],[78,8,75,41],[78,12,75,29,"p"],[78,13,75,30],[78,16,75,30,"arguments"],[78,25,75,30],[78,26,75,30,"length"],[78,32,75,30],[78,40,75,30,"arguments"],[78,49,75,30],[78,57,75,30,"undefined"],[78,66,75,30],[78,69,75,30,"arguments"],[78,78,75,30],[78,84,75,33,"c"],[78,85,75,34],[78,86,75,35,"ZERO"],[78,90,75,39],[79,8,76,12],[79,12,76,16,"d"],[79,13,76,17],[79,16,76,20,"elm"],[79,19,76,23],[80,8,77,12],[80,15,77,19,"n"],[80,16,77,20],[80,19,77,23,"_0n"],[80,22,77,26],[80,24,77,28],[81,10,78,16],[81,14,78,20,"n"],[81,15,78,21],[81,18,78,24,"_1n"],[81,21,78,27],[81,23,79,20,"p"],[81,24,79,21],[81,27,79,24,"p"],[81,28,79,25],[81,29,79,26,"add"],[81,32,79,29],[81,33,79,30,"d"],[81,34,79,31],[81,35,79,32],[82,10,80,16,"d"],[82,11,80,17],[82,14,80,20,"d"],[82,15,80,21],[82,16,80,22,"double"],[82,22,80,28],[82,23,80,29],[82,24,80,30],[83,10,81,16,"n"],[83,11,81,17],[83,16,81,22,"_1n"],[83,19,81,25],[84,8,82,12],[85,8,83,12],[85,15,83,19,"p"],[85,16,83,20],[86,6,84,8],[86,7,84,9],[87,6,85,8],[88,0,86,0],[89,0,87,0],[90,0,88,0],[91,0,89,0],[92,0,90,0],[93,0,91,0],[94,0,92,0],[95,0,93,0],[96,0,94,0],[97,0,95,0],[98,0,96,0],[99,6,97,8,"precomputeWindow"],[99,22,97,24,"precomputeWindow"],[99,23,97,25,"elm"],[99,26,97,28],[99,28,97,30,"W"],[99,29,97,31],[99,31,97,33],[100,8,98,12],[100,12,98,12,"_calcWOpts"],[100,22,98,12],[100,25,98,44,"calcWOpts"],[100,34,98,53],[100,35,98,54,"W"],[100,36,98,55],[100,38,98,57,"bits"],[100,42,98,61],[100,43,98,62],[101,10,98,20,"windows"],[101,17,98,27],[101,20,98,27,"_calcWOpts"],[101,30,98,27],[101,31,98,20,"windows"],[101,38,98,27],[102,10,98,29,"windowSize"],[102,20,98,39],[102,23,98,39,"_calcWOpts"],[102,33,98,39],[102,34,98,29,"windowSize"],[102,44,98,39],[103,8,99,12],[103,12,99,18,"points"],[103,18,99,24],[103,21,99,27],[103,23,99,29],[104,8,100,12],[104,12,100,16,"p"],[104,13,100,17],[104,16,100,20,"elm"],[104,19,100,23],[105,8,101,12],[105,12,101,16,"base"],[105,16,101,20],[105,19,101,23,"p"],[105,20,101,24],[106,8,102,12],[106,13,102,17],[106,17,102,21,"window"],[106,23,102,27],[106,26,102,30],[106,27,102,31],[106,29,102,33,"window"],[106,35,102,39],[106,38,102,42,"windows"],[106,45,102,49],[106,47,102,51,"window"],[106,53,102,57],[106,55,102,59],[106,57,102,61],[107,10,103,16,"base"],[107,14,103,20],[107,17,103,23,"p"],[107,18,103,24],[108,10,104,16,"points"],[108,16,104,22],[108,17,104,23,"push"],[108,21,104,27],[108,22,104,28,"base"],[108,26,104,32],[108,27,104,33],[109,10,105,16],[110,10,106,16],[110,15,106,21],[110,19,106,25,"i"],[110,20,106,26],[110,23,106,29],[110,24,106,30],[110,26,106,32,"i"],[110,27,106,33],[110,30,106,36,"windowSize"],[110,40,106,46],[110,42,106,48,"i"],[110,43,106,49],[110,45,106,51],[110,47,106,53],[111,12,107,20,"base"],[111,16,107,24],[111,19,107,27,"base"],[111,23,107,31],[111,24,107,32,"add"],[111,27,107,35],[111,28,107,36,"p"],[111,29,107,37],[111,30,107,38],[112,12,108,20,"points"],[112,18,108,26],[112,19,108,27,"push"],[112,23,108,31],[112,24,108,32,"base"],[112,28,108,36],[112,29,108,37],[113,10,109,16],[114,10,110,16,"p"],[114,11,110,17],[114,14,110,20,"base"],[114,18,110,24],[114,19,110,25,"double"],[114,25,110,31],[114,26,110,32],[114,27,110,33],[115,8,111,12],[116,8,112,12],[116,15,112,19,"points"],[116,21,112,25],[117,6,113,8],[117,7,113,9],[118,6,114,8],[119,0,115,0],[120,0,116,0],[121,0,117,0],[122,0,118,0],[123,0,119,0],[124,0,120,0],[125,6,121,8,"wNAF"],[125,10,121,12,"wNAF"],[125,11,121,13,"W"],[125,12,121,14],[125,14,121,16,"precomputes"],[125,25,121,27],[125,27,121,29,"n"],[125,28,121,30],[125,30,121,32],[126,8,122,12],[127,8,123,12],[128,8,124,12],[128,12,124,12,"_calcWOpts2"],[128,23,124,12],[128,26,124,44,"calcWOpts"],[128,35,124,53],[128,36,124,54,"W"],[128,37,124,55],[128,39,124,57,"bits"],[128,43,124,61],[128,44,124,62],[129,10,124,20,"windows"],[129,17,124,27],[129,20,124,27,"_calcWOpts2"],[129,31,124,27],[129,32,124,20,"windows"],[129,39,124,27],[130,10,124,29,"windowSize"],[130,20,124,39],[130,23,124,39,"_calcWOpts2"],[130,34,124,39],[130,35,124,29,"windowSize"],[130,45,124,39],[131,8,125,12],[131,12,125,16,"p"],[131,13,125,17],[131,16,125,20,"c"],[131,17,125,21],[131,18,125,22,"ZERO"],[131,22,125,26],[132,8,126,12],[132,12,126,16,"f"],[132,13,126,17],[132,16,126,20,"c"],[132,17,126,21],[132,18,126,22,"BASE"],[132,22,126,26],[133,8,127,12],[133,12,127,18,"mask"],[133,16,127,22],[133,19,127,25,"BigInt"],[133,25,127,31],[133,26,127,32],[133,27,127,33],[133,31,127,37,"W"],[133,32,127,38],[133,35,127,41],[133,36,127,42],[133,37,127,43],[133,38,127,44],[133,39,127,45],[134,8,128,12],[134,12,128,18,"maxNumber"],[134,21,128,27],[134,24,128,30],[134,25,128,31],[134,29,128,35,"W"],[134,30,128,36],[135,8,129,12],[135,12,129,18,"shiftBy"],[135,19,129,25],[135,22,129,28,"BigInt"],[135,28,129,34],[135,29,129,35,"W"],[135,30,129,36],[135,31,129,37],[136,8,130,12],[136,13,130,17],[136,17,130,21,"window"],[136,23,130,27],[136,26,130,30],[136,27,130,31],[136,29,130,33,"window"],[136,35,130,39],[136,38,130,42,"windows"],[136,45,130,49],[136,47,130,51,"window"],[136,53,130,57],[136,55,130,59],[136,57,130,61],[137,10,131,16],[137,14,131,22,"offset"],[137,20,131,28],[137,23,131,31,"window"],[137,29,131,37],[137,32,131,40,"windowSize"],[137,42,131,50],[138,10,132,16],[139,10,133,16],[139,14,133,20,"wbits"],[139,19,133,25],[139,22,133,28,"Number"],[139,28,133,34],[139,29,133,35,"n"],[139,30,133,36],[139,33,133,39,"mask"],[139,37,133,43],[139,38,133,44],[140,10,134,16],[141,10,135,16,"n"],[141,11,135,17],[141,16,135,22,"shiftBy"],[141,23,135,29],[142,10,136,16],[143,10,137,16],[144,10,138,16],[144,14,138,20,"wbits"],[144,19,138,25],[144,22,138,28,"windowSize"],[144,32,138,38],[144,34,138,40],[145,12,139,20,"wbits"],[145,17,139,25],[145,21,139,29,"maxNumber"],[145,30,139,38],[146,12,140,20,"n"],[146,13,140,21],[146,17,140,25,"_1n"],[146,20,140,28],[147,10,141,16],[148,10,142,16],[149,10,143,16],[150,10,144,16],[151,10,145,16],[152,10,146,16],[153,10,147,16],[154,10,148,16],[155,10,149,16],[155,14,149,22,"offset1"],[155,21,149,29],[155,24,149,32,"offset"],[155,30,149,38],[156,10,150,16],[156,14,150,22,"offset2"],[156,21,150,29],[156,24,150,32,"offset"],[156,30,150,38],[156,33,150,41,"Math"],[156,37,150,45],[156,38,150,46,"abs"],[156,41,150,49],[156,42,150,50,"wbits"],[156,47,150,55],[156,48,150,56],[156,51,150,59],[156,52,150,60],[156,53,150,61],[156,54,150,62],[157,10,151,16],[157,14,151,22,"cond1"],[157,19,151,27],[157,22,151,30,"window"],[157,28,151,36],[157,31,151,39],[157,32,151,40],[157,37,151,45],[157,38,151,46],[158,10,152,16],[158,14,152,22,"cond2"],[158,19,152,27],[158,22,152,30,"wbits"],[158,27,152,35],[158,30,152,38],[158,31,152,39],[159,10,153,16],[159,14,153,20,"wbits"],[159,19,153,25],[159,24,153,30],[159,25,153,31],[159,27,153,33],[160,12,154,20],[161,12,155,20,"f"],[161,13,155,21],[161,16,155,24,"f"],[161,17,155,25],[161,18,155,26,"add"],[161,21,155,29],[161,22,155,30,"constTimeNegate"],[161,37,155,45],[161,38,155,46,"cond1"],[161,43,155,51],[161,45,155,53,"precomputes"],[161,56,155,64],[161,57,155,65,"offset1"],[161,64,155,72],[161,65,155,73],[161,66,155,74],[161,67,155,75],[162,10,156,16],[162,11,156,17],[162,17,157,21],[163,12,158,20,"p"],[163,13,158,21],[163,16,158,24,"p"],[163,17,158,25],[163,18,158,26,"add"],[163,21,158,29],[163,22,158,30,"constTimeNegate"],[163,37,158,45],[163,38,158,46,"cond2"],[163,43,158,51],[163,45,158,53,"precomputes"],[163,56,158,64],[163,57,158,65,"offset2"],[163,64,158,72],[163,65,158,73],[163,66,158,74],[163,67,158,75],[164,10,159,16],[165,8,160,12],[166,8,161,12],[167,8,162,12],[168,8,163,12],[169,8,164,12],[170,8,165,12],[171,8,166,12],[171,15,166,19],[172,10,166,21,"p"],[172,11,166,22],[173,10,166,24,"f"],[174,8,166,26],[174,9,166,27],[175,6,167,8],[175,7,167,9],[176,6,168,8],[177,0,169,0],[178,0,170,0],[179,0,171,0],[180,0,172,0],[181,0,173,0],[182,0,174,0],[183,0,175,0],[184,6,176,8,"wNAFUnsafe"],[184,16,176,18,"wNAFUnsafe"],[184,17,176,19,"W"],[184,18,176,20],[184,20,176,22,"precomputes"],[184,31,176,33],[184,33,176,35,"n"],[184,34,176,36],[184,36,176,52],[185,8,176,52],[185,12,176,38,"acc"],[185,15,176,41],[185,18,176,41,"arguments"],[185,27,176,41],[185,28,176,41,"length"],[185,34,176,41],[185,42,176,41,"arguments"],[185,51,176,41],[185,59,176,41,"undefined"],[185,68,176,41],[185,71,176,41,"arguments"],[185,80,176,41],[185,86,176,44,"c"],[185,87,176,45],[185,88,176,46,"ZERO"],[185,92,176,50],[186,8,177,12],[186,12,177,12,"_calcWOpts3"],[186,23,177,12],[186,26,177,44,"calcWOpts"],[186,35,177,53],[186,36,177,54,"W"],[186,37,177,55],[186,39,177,57,"bits"],[186,43,177,61],[186,44,177,62],[187,10,177,20,"windows"],[187,17,177,27],[187,20,177,27,"_calcWOpts3"],[187,31,177,27],[187,32,177,20,"windows"],[187,39,177,27],[188,10,177,29,"windowSize"],[188,20,177,39],[188,23,177,39,"_calcWOpts3"],[188,34,177,39],[188,35,177,29,"windowSize"],[188,45,177,39],[189,8,178,12],[189,12,178,18,"mask"],[189,16,178,22],[189,19,178,25,"BigInt"],[189,25,178,31],[189,26,178,32],[189,27,178,33],[189,31,178,37,"W"],[189,32,178,38],[189,35,178,41],[189,36,178,42],[189,37,178,43],[189,38,178,44],[189,39,178,45],[190,8,179,12],[190,12,179,18,"maxNumber"],[190,21,179,27],[190,24,179,30],[190,25,179,31],[190,29,179,35,"W"],[190,30,179,36],[191,8,180,12],[191,12,180,18,"shiftBy"],[191,19,180,25],[191,22,180,28,"BigInt"],[191,28,180,34],[191,29,180,35,"W"],[191,30,180,36],[191,31,180,37],[192,8,181,12],[192,13,181,17],[192,17,181,21,"window"],[192,23,181,27],[192,26,181,30],[192,27,181,31],[192,29,181,33,"window"],[192,35,181,39],[192,38,181,42,"windows"],[192,45,181,49],[192,47,181,51,"window"],[192,53,181,57],[192,55,181,59],[192,57,181,61],[193,10,182,16],[193,14,182,22,"offset"],[193,20,182,28],[193,23,182,31,"window"],[193,29,182,37],[193,32,182,40,"windowSize"],[193,42,182,50],[194,10,183,16],[194,14,183,20,"n"],[194,15,183,21],[194,20,183,26,"_0n"],[194,23,183,29],[194,25,184,20],[194,31,184,26],[194,32,184,27],[195,10,185,16],[196,10,186,16],[196,14,186,20,"wbits"],[196,19,186,25],[196,22,186,28,"Number"],[196,28,186,34],[196,29,186,35,"n"],[196,30,186,36],[196,33,186,39,"mask"],[196,37,186,43],[196,38,186,44],[197,10,187,16],[198,10,188,16,"n"],[198,11,188,17],[198,16,188,22,"shiftBy"],[198,23,188,29],[199,10,189,16],[200,10,190,16],[201,10,191,16],[201,14,191,20,"wbits"],[201,19,191,25],[201,22,191,28,"windowSize"],[201,32,191,38],[201,34,191,40],[202,12,192,20,"wbits"],[202,17,192,25],[202,21,192,29,"maxNumber"],[202,30,192,38],[203,12,193,20,"n"],[203,13,193,21],[203,17,193,25,"_1n"],[203,20,193,28],[204,10,194,16],[205,10,195,16],[205,14,195,20,"wbits"],[205,19,195,25],[205,24,195,30],[205,25,195,31],[205,27,196,20],[206,10,197,16],[206,14,197,20,"curr"],[206,18,197,24],[206,21,197,27,"precomputes"],[206,32,197,38],[206,33,197,39,"offset"],[206,39,197,45],[206,42,197,48,"Math"],[206,46,197,52],[206,47,197,53,"abs"],[206,50,197,56],[206,51,197,57,"wbits"],[206,56,197,62],[206,57,197,63],[206,60,197,66],[206,61,197,67],[206,62,197,68],[206,63,197,69],[206,64,197,70],[207,10,198,16],[207,14,198,20,"wbits"],[207,19,198,25],[207,22,198,28],[207,23,198,29],[207,25,199,20,"curr"],[207,29,199,24],[207,32,199,27,"curr"],[207,36,199,31],[207,37,199,32,"negate"],[207,43,199,38],[207,44,199,39],[207,45,199,40],[208,10,200,16],[209,10,201,16,"acc"],[209,13,201,19],[209,16,201,22,"acc"],[209,19,201,25],[209,20,201,26,"add"],[209,23,201,29],[209,24,201,30,"curr"],[209,28,201,34],[209,29,201,35],[210,8,202,12],[211,8,203,12],[211,15,203,19,"acc"],[211,18,203,22],[212,6,204,8],[212,7,204,9],[213,6,205,8,"getPrecomputes"],[213,20,205,22,"getPrecomputes"],[213,21,205,23,"W"],[213,22,205,24],[213,24,205,26,"P"],[213,25,205,27],[213,27,205,29,"transform"],[213,36,205,38],[213,38,205,40],[214,8,206,12],[215,8,207,12],[215,12,207,16,"comp"],[215,16,207,20],[215,19,207,23,"pointPrecomputes"],[215,35,207,39],[215,36,207,40,"get"],[215,39,207,43],[215,40,207,44,"P"],[215,41,207,45],[215,42,207,46],[216,8,208,12],[216,12,208,16],[216,13,208,17,"comp"],[216,17,208,21],[216,19,208,23],[217,10,209,16,"comp"],[217,14,209,20],[217,17,209,23],[217,21,209,27],[217,22,209,28,"precomputeWindow"],[217,38,209,44],[217,39,209,45,"P"],[217,40,209,46],[217,42,209,48,"W"],[217,43,209,49],[217,44,209,50],[218,10,210,16],[218,14,210,20,"W"],[218,15,210,21],[218,20,210,26],[218,21,210,27],[218,23,211,20,"pointPrecomputes"],[218,39,211,36],[218,40,211,37,"set"],[218,43,211,40],[218,44,211,41,"P"],[218,45,211,42],[218,47,211,44,"transform"],[218,56,211,53],[218,57,211,54,"comp"],[218,61,211,58],[218,62,211,59],[218,63,211,60],[219,8,212,12],[220,8,213,12],[220,15,213,19,"comp"],[220,19,213,23],[221,6,214,8],[221,7,214,9],[222,6,215,8,"wNAFCached"],[222,16,215,18,"wNAFCached"],[222,17,215,19,"P"],[222,18,215,20],[222,20,215,22,"n"],[222,21,215,23],[222,23,215,25,"transform"],[222,32,215,34],[222,34,215,36],[223,8,216,12],[223,12,216,18,"W"],[223,13,216,19],[223,16,216,22,"getW"],[223,20,216,26],[223,21,216,27,"P"],[223,22,216,28],[223,23,216,29],[224,8,217,12],[224,15,217,19],[224,19,217,23],[224,20,217,24,"wNAF"],[224,24,217,28],[224,25,217,29,"W"],[224,26,217,30],[224,28,217,32],[224,32,217,36],[224,33,217,37,"getPrecomputes"],[224,47,217,51],[224,48,217,52,"W"],[224,49,217,53],[224,51,217,55,"P"],[224,52,217,56],[224,54,217,58,"transform"],[224,63,217,67],[224,64,217,68],[224,66,217,70,"n"],[224,67,217,71],[224,68,217,72],[225,6,218,8],[225,7,218,9],[226,6,219,8,"wNAFCachedUnsafe"],[226,22,219,24,"wNAFCachedUnsafe"],[226,23,219,25,"P"],[226,24,219,26],[226,26,219,28,"n"],[226,27,219,29],[226,29,219,31,"transform"],[226,38,219,40],[226,40,219,42,"prev"],[226,44,219,46],[226,46,219,48],[227,8,220,12],[227,12,220,18,"W"],[227,13,220,19],[227,16,220,22,"getW"],[227,20,220,26],[227,21,220,27,"P"],[227,22,220,28],[227,23,220,29],[228,8,221,12],[228,12,221,16,"W"],[228,13,221,17],[228,18,221,22],[228,19,221,23],[228,21,222,16],[228,28,222,23],[228,32,222,27],[228,33,222,28,"unsafeLadder"],[228,45,222,40],[228,46,222,41,"P"],[228,47,222,42],[228,49,222,44,"n"],[228,50,222,45],[228,52,222,47,"prev"],[228,56,222,51],[228,57,222,52],[228,58,222,53],[228,59,222,54],[229,8,223,12],[229,15,223,19],[229,19,223,23],[229,20,223,24,"wNAFUnsafe"],[229,30,223,34],[229,31,223,35,"W"],[229,32,223,36],[229,34,223,38],[229,38,223,42],[229,39,223,43,"getPrecomputes"],[229,53,223,57],[229,54,223,58,"W"],[229,55,223,59],[229,57,223,61,"P"],[229,58,223,62],[229,60,223,64,"transform"],[229,69,223,73],[229,70,223,74],[229,72,223,76,"n"],[229,73,223,77],[229,75,223,79,"prev"],[229,79,223,83],[229,80,223,84],[230,6,224,8],[230,7,224,9],[231,6,225,8],[232,6,226,8],[233,6,227,8],[234,6,228,8,"setWindowSize"],[234,19,228,21,"setWindowSize"],[234,20,228,22,"P"],[234,21,228,23],[234,23,228,25,"W"],[234,24,228,26],[234,26,228,28],[235,8,229,12,"validateW"],[235,17,229,21],[235,18,229,22,"W"],[235,19,229,23],[235,21,229,25,"bits"],[235,25,229,29],[235,26,229,30],[236,8,230,12,"pointWindowSizes"],[236,24,230,28],[236,25,230,29,"set"],[236,28,230,32],[236,29,230,33,"P"],[236,30,230,34],[236,32,230,36,"W"],[236,33,230,37],[236,34,230,38],[237,8,231,12,"pointPrecomputes"],[237,24,231,28],[237,25,231,29,"delete"],[237,31,231,35],[237,32,231,36,"P"],[237,33,231,37],[237,34,231,38],[238,6,232,8],[239,4,233,4],[239,5,233,5],[240,2,234,0],[241,2,235,0],[242,0,236,0],[243,0,237,0],[244,0,238,0],[245,0,239,0],[246,0,240,0],[247,0,241,0],[248,0,242,0],[249,0,243,0],[250,0,244,0],[251,2,245,0],[251,11,245,9,"pippenger"],[251,20,245,18,"pippenger"],[251,21,245,19,"c"],[251,22,245,20],[251,24,245,22,"fieldN"],[251,30,245,28],[251,32,245,30,"points"],[251,38,245,36],[251,40,245,38,"scalars"],[251,47,245,45],[251,49,245,47],[252,4,246,4],[253,4,247,4],[254,4,248,4],[255,4,249,4],[256,4,250,4],[257,4,251,4],[258,4,252,4,"validateMSMPoints"],[258,21,252,21],[258,22,252,22,"points"],[258,28,252,28],[258,30,252,30,"c"],[258,31,252,31],[258,32,252,32],[259,4,253,4,"validateMSMScalars"],[259,22,253,22],[259,23,253,23,"scalars"],[259,30,253,30],[259,32,253,32,"fieldN"],[259,38,253,38],[259,39,253,39],[260,4,254,4],[260,8,254,8,"points"],[260,14,254,14],[260,15,254,15,"length"],[260,21,254,21],[260,26,254,26,"scalars"],[260,33,254,33],[260,34,254,34,"length"],[260,40,254,40],[260,42,255,8],[260,48,255,14],[260,52,255,18,"Error"],[260,57,255,23],[260,58,255,24],[260,111,255,77],[260,112,255,78],[261,4,256,4],[261,8,256,10,"zero"],[261,12,256,14],[261,15,256,17,"c"],[261,16,256,18],[261,17,256,19,"ZERO"],[261,21,256,23],[262,4,257,4],[262,8,257,10,"wbits"],[262,13,257,15],[262,16,257,18],[262,17,257,19],[262,18,257,20],[262,20,257,22,"utils_js_1"],[262,30,257,32],[262,31,257,33,"bitLen"],[262,37,257,39],[262,39,257,41,"BigInt"],[262,45,257,47],[262,46,257,48,"points"],[262,52,257,54],[262,53,257,55,"length"],[262,59,257,61],[262,60,257,62],[262,61,257,63],[263,4,258,4],[263,8,258,10,"windowSize"],[263,18,258,20],[263,21,258,23,"wbits"],[263,26,258,28],[263,29,258,31],[263,31,258,33],[263,34,258,36,"wbits"],[263,39,258,41],[263,42,258,44],[263,43,258,45],[263,46,258,48,"wbits"],[263,51,258,53],[263,54,258,56],[263,55,258,57],[263,58,258,60,"wbits"],[263,63,258,65],[263,66,258,68],[263,67,258,69],[263,70,258,72,"wbits"],[263,75,258,77],[263,78,258,80],[263,79,258,81],[263,82,258,84],[263,83,258,85],[263,84,258,86],[263,85,258,87],[264,4,259,4],[264,8,259,10,"MASK"],[264,12,259,14],[264,15,259,17],[264,16,259,18],[264,17,259,19],[264,21,259,23,"windowSize"],[264,31,259,33],[264,35,259,37],[264,36,259,38],[265,4,260,4],[265,8,260,10,"buckets"],[265,15,260,17],[265,18,260,20],[265,22,260,24,"Array"],[265,27,260,29],[265,28,260,30,"MASK"],[265,32,260,34],[265,35,260,37],[265,36,260,38],[265,37,260,39],[265,38,260,40,"fill"],[265,42,260,44],[265,43,260,45,"zero"],[265,47,260,49],[265,48,260,50],[265,49,260,51],[265,50,260,52],[266,4,261,4],[266,8,261,10,"lastBits"],[266,16,261,18],[266,19,261,21,"Math"],[266,23,261,25],[266,24,261,26,"floor"],[266,29,261,31],[266,30,261,32],[266,31,261,33,"fieldN"],[266,37,261,39],[266,38,261,40,"BITS"],[266,42,261,44],[266,45,261,47],[266,46,261,48],[266,50,261,52,"windowSize"],[266,60,261,62],[266,61,261,63],[266,64,261,66,"windowSize"],[266,74,261,76],[267,4,262,4],[267,8,262,8,"sum"],[267,11,262,11],[267,14,262,14,"zero"],[267,18,262,18],[268,4,263,4],[268,9,263,9],[268,13,263,13,"i"],[268,14,263,14],[268,17,263,17,"lastBits"],[268,25,263,25],[268,27,263,27,"i"],[268,28,263,28],[268,32,263,32],[268,33,263,33],[268,35,263,35,"i"],[268,36,263,36],[268,40,263,40,"windowSize"],[268,50,263,50],[268,52,263,52],[269,6,264,8,"buckets"],[269,13,264,15],[269,14,264,16,"fill"],[269,18,264,20],[269,19,264,21,"zero"],[269,23,264,25],[269,24,264,26],[270,6,265,8],[270,11,265,13],[270,15,265,17,"j"],[270,16,265,18],[270,19,265,21],[270,20,265,22],[270,22,265,24,"j"],[270,23,265,25],[270,26,265,28,"scalars"],[270,33,265,35],[270,34,265,36,"length"],[270,40,265,42],[270,42,265,44,"j"],[270,43,265,45],[270,45,265,47],[270,47,265,49],[271,8,266,12],[271,12,266,18,"scalar"],[271,18,266,24],[271,21,266,27,"scalars"],[271,28,266,34],[271,29,266,35,"j"],[271,30,266,36],[271,31,266,37],[272,8,267,12],[272,12,267,18,"wbits"],[272,18,267,23],[272,21,267,26,"Number"],[272,27,267,32],[272,28,267,34,"scalar"],[272,34,267,40],[272,38,267,44,"BigInt"],[272,44,267,50],[272,45,267,51,"i"],[272,46,267,52],[272,47,267,53],[272,50,267,57,"BigInt"],[272,56,267,63],[272,57,267,64,"MASK"],[272,61,267,68],[272,62,267,69],[272,63,267,70],[273,8,268,12,"buckets"],[273,15,268,19],[273,16,268,20,"wbits"],[273,22,268,25],[273,23,268,26],[273,26,268,29,"buckets"],[273,33,268,36],[273,34,268,37,"wbits"],[273,40,268,42],[273,41,268,43],[273,42,268,44,"add"],[273,45,268,47],[273,46,268,48,"points"],[273,52,268,54],[273,53,268,55,"j"],[273,54,268,56],[273,55,268,57],[273,56,268,58],[274,6,269,8],[275,6,270,8],[275,10,270,12,"resI"],[275,14,270,16],[275,17,270,19,"zero"],[275,21,270,23],[275,22,270,24],[275,23,270,25],[276,6,271,8],[277,6,272,8],[277,11,272,13],[277,15,272,17,"j"],[277,17,272,18],[277,20,272,21,"buckets"],[277,27,272,28],[277,28,272,29,"length"],[277,34,272,35],[277,37,272,38],[277,38,272,39],[277,40,272,41,"sumI"],[277,44,272,45],[277,47,272,48,"zero"],[277,51,272,52],[277,53,272,54,"j"],[277,55,272,55],[277,58,272,58],[277,59,272,59],[277,61,272,61,"j"],[277,63,272,62],[277,65,272,64],[277,67,272,66],[278,8,273,12,"sumI"],[278,12,273,16],[278,15,273,19,"sumI"],[278,19,273,23],[278,20,273,24,"add"],[278,23,273,27],[278,24,273,28,"buckets"],[278,31,273,35],[278,32,273,36,"j"],[278,34,273,37],[278,35,273,38],[278,36,273,39],[279,8,274,12,"resI"],[279,12,274,16],[279,15,274,19,"resI"],[279,19,274,23],[279,20,274,24,"add"],[279,23,274,27],[279,24,274,28,"sumI"],[279,28,274,32],[279,29,274,33],[280,6,275,8],[281,6,276,8,"sum"],[281,9,276,11],[281,12,276,14,"sum"],[281,15,276,17],[281,16,276,18,"add"],[281,19,276,21],[281,20,276,22,"resI"],[281,24,276,26],[281,25,276,27],[282,6,277,8],[282,10,277,12,"i"],[282,11,277,13],[282,16,277,18],[282,17,277,19],[282,19,278,12],[282,24,278,17],[282,28,278,21,"j"],[282,31,278,22],[282,34,278,25],[282,35,278,26],[282,37,278,28,"j"],[282,40,278,29],[282,43,278,32,"windowSize"],[282,53,278,42],[282,55,278,44,"j"],[282,58,278,45],[282,60,278,47],[282,62,279,16,"sum"],[282,65,279,19],[282,68,279,22,"sum"],[282,71,279,25],[282,72,279,26,"double"],[282,78,279,32],[282,79,279,33],[282,80,279,34],[283,4,280,4],[284,4,281,4],[284,11,281,11,"sum"],[284,14,281,14],[285,2,282,0],[286,2,283,0],[287,0,284,0],[288,0,285,0],[289,0,286,0],[290,0,287,0],[291,0,288,0],[292,0,289,0],[293,2,290,0],[293,11,290,9,"precomputeMSMUnsafe"],[293,30,290,28,"precomputeMSMUnsafe"],[293,31,290,29,"c"],[293,32,290,30],[293,34,290,32,"fieldN"],[293,40,290,38],[293,42,290,40,"points"],[293,48,290,46],[293,50,290,48,"windowSize"],[293,60,290,58],[293,62,290,60],[294,4,291,4],[295,0,292,0],[296,0,293,0],[297,0,294,0],[298,0,295,0],[299,0,296,0],[300,0,297,0],[301,0,298,0],[302,0,299,0],[303,0,300,0],[304,0,301,0],[305,0,302,0],[306,0,303,0],[307,0,304,0],[308,0,305,0],[309,0,306,0],[310,0,307,0],[311,0,308,0],[312,0,309,0],[313,0,310,0],[314,0,311,0],[315,0,312,0],[316,0,313,0],[317,0,314,0],[318,0,315,0],[319,0,316,0],[320,0,317,0],[321,0,318,0],[322,0,319,0],[323,0,320,0],[324,0,321,0],[325,0,322,0],[326,0,323,0],[327,0,324,0],[328,0,325,0],[329,4,326,4,"validateW"],[329,13,326,13],[329,14,326,14,"windowSize"],[329,24,326,24],[329,26,326,26,"fieldN"],[329,32,326,32],[329,33,326,33,"BITS"],[329,37,326,37],[329,38,326,38],[330,4,327,4,"validateMSMPoints"],[330,21,327,21],[330,22,327,22,"points"],[330,28,327,28],[330,30,327,30,"c"],[330,31,327,31],[330,32,327,32],[331,4,328,4],[331,8,328,10,"zero"],[331,12,328,14],[331,15,328,17,"c"],[331,16,328,18],[331,17,328,19,"ZERO"],[331,21,328,23],[332,4,329,4],[332,8,329,10,"tableSize"],[332,17,329,19],[332,20,329,22],[332,21,329,23],[332,25,329,27,"windowSize"],[332,35,329,37],[332,38,329,40],[332,39,329,41],[332,40,329,42],[332,41,329,43],[333,4,330,4],[333,8,330,10,"chunks"],[333,14,330,16],[333,17,330,19,"Math"],[333,21,330,23],[333,22,330,24,"ceil"],[333,26,330,28],[333,27,330,29,"fieldN"],[333,33,330,35],[333,34,330,36,"BITS"],[333,38,330,40],[333,41,330,43,"windowSize"],[333,51,330,53],[333,52,330,54],[333,53,330,55],[333,54,330,56],[334,4,331,4],[334,8,331,10,"MASK"],[334,12,331,14],[334,15,331,17,"BigInt"],[334,21,331,23],[334,22,331,24],[334,23,331,25],[334,24,331,26],[334,28,331,30,"windowSize"],[334,38,331,40],[334,42,331,44],[334,43,331,45],[334,44,331,46],[335,4,332,4],[335,8,332,10,"tables"],[335,14,332,16],[335,17,332,19,"points"],[335,23,332,25],[335,24,332,26,"map"],[335,27,332,29],[335,28,332,31,"p"],[335,29,332,32],[335,33,332,37],[336,6,333,8],[336,10,333,14,"res"],[336,13,333,17],[336,16,333,20],[336,18,333,22],[337,6,334,8],[337,11,334,13],[337,15,334,17,"i"],[337,16,334,18],[337,19,334,21],[337,20,334,22],[337,22,334,24,"acc"],[337,25,334,27],[337,28,334,30,"p"],[337,29,334,31],[337,31,334,33,"i"],[337,32,334,34],[337,35,334,37,"tableSize"],[337,44,334,46],[337,46,334,48,"i"],[337,47,334,49],[337,49,334,51],[337,51,334,53],[338,8,335,12,"res"],[338,11,335,15],[338,12,335,16,"push"],[338,16,335,20],[338,17,335,21,"acc"],[338,20,335,24],[338,21,335,25],[339,8,336,12,"acc"],[339,11,336,15],[339,14,336,18,"acc"],[339,17,336,21],[339,18,336,22,"add"],[339,21,336,25],[339,22,336,26,"p"],[339,23,336,27],[339,24,336,28],[340,6,337,8],[341,6,338,8],[341,13,338,15,"res"],[341,16,338,18],[342,4,339,4],[342,5,339,5],[342,6,339,6],[343,4,340,4],[343,11,340,12,"scalars"],[343,18,340,19],[343,22,340,24],[344,6,341,8,"validateMSMScalars"],[344,24,341,26],[344,25,341,27,"scalars"],[344,32,341,34],[344,34,341,36,"fieldN"],[344,40,341,42],[344,41,341,43],[345,6,342,8],[345,10,342,12,"scalars"],[345,17,342,19],[345,18,342,20,"length"],[345,24,342,26],[345,27,342,29,"points"],[345,33,342,35],[345,34,342,36,"length"],[345,40,342,42],[345,42,343,12],[345,48,343,18],[345,52,343,22,"Error"],[345,57,343,27],[345,58,343,28],[345,113,343,83],[345,114,343,84],[346,6,344,8],[346,10,344,12,"res"],[346,13,344,15],[346,16,344,18,"zero"],[346,20,344,22],[347,6,345,8],[347,11,345,13],[347,15,345,17,"i"],[347,16,345,18],[347,19,345,21],[347,20,345,22],[347,22,345,24,"i"],[347,23,345,25],[347,26,345,28,"chunks"],[347,32,345,34],[347,34,345,36,"i"],[347,35,345,37],[347,37,345,39],[347,39,345,41],[348,8,346,12],[349,8,347,12],[349,12,347,16,"res"],[349,15,347,19],[349,20,347,24,"zero"],[349,24,347,28],[349,26,348,16],[349,31,348,21],[349,35,348,25,"j"],[349,36,348,26],[349,39,348,29],[349,40,348,30],[349,42,348,32,"j"],[349,43,348,33],[349,46,348,36,"windowSize"],[349,56,348,46],[349,58,348,48,"j"],[349,59,348,49],[349,61,348,51],[349,63,349,20,"res"],[349,66,349,23],[349,69,349,26,"res"],[349,72,349,29],[349,73,349,30,"double"],[349,79,349,36],[349,80,349,37],[349,81,349,38],[350,8,350,12],[350,12,350,18,"shiftBy"],[350,19,350,25],[350,22,350,28,"BigInt"],[350,28,350,34],[350,29,350,35,"chunks"],[350,35,350,41],[350,38,350,44,"windowSize"],[350,48,350,54],[350,51,350,57],[350,52,350,58,"i"],[350,53,350,59],[350,56,350,62],[350,57,350,63],[350,61,350,67,"windowSize"],[350,71,350,77],[350,72,350,78],[351,8,351,12],[351,13,351,17],[351,17,351,21,"j"],[351,20,351,22],[351,23,351,25],[351,24,351,26],[351,26,351,28,"j"],[351,29,351,29],[351,32,351,32,"scalars"],[351,39,351,39],[351,40,351,40,"length"],[351,46,351,46],[351,48,351,48,"j"],[351,51,351,49],[351,53,351,51],[351,55,351,53],[352,10,352,16],[352,14,352,22,"n"],[352,15,352,23],[352,18,352,26,"scalars"],[352,25,352,33],[352,26,352,34,"j"],[352,29,352,35],[352,30,352,36],[353,10,353,16],[353,14,353,22,"curr"],[353,18,353,26],[353,21,353,29,"Number"],[353,27,353,35],[353,28,353,37,"n"],[353,29,353,38],[353,33,353,42,"shiftBy"],[353,40,353,49],[353,43,353,53,"MASK"],[353,47,353,57],[353,48,353,58],[354,10,354,16],[354,14,354,20],[354,15,354,21,"curr"],[354,19,354,25],[354,21,355,20],[354,30,355,29],[354,31,355,30],[355,10,356,16,"res"],[355,13,356,19],[355,16,356,22,"res"],[355,19,356,25],[355,20,356,26,"add"],[355,23,356,29],[355,24,356,30,"tables"],[355,30,356,36],[355,31,356,37,"j"],[355,34,356,38],[355,35,356,39],[355,36,356,40,"curr"],[355,40,356,44],[355,43,356,47],[355,44,356,48],[355,45,356,49],[355,46,356,50],[356,8,357,12],[357,6,358,8],[358,6,359,8],[358,13,359,15,"res"],[358,16,359,18],[359,4,360,4],[359,5,360,5],[360,2,361,0],[361,2,362,0],[361,11,362,9,"validateBasic"],[361,24,362,22,"validateBasic"],[361,25,362,23,"curve"],[361,30,362,28],[361,32,362,30],[362,4,363,4],[362,5,363,5],[362,6,363,6],[362,8,363,8,"modular_js_1"],[362,20,363,20],[362,21,363,21,"validateField"],[362,34,363,34],[362,36,363,36,"curve"],[362,41,363,41],[362,42,363,42,"Fp"],[362,44,363,44],[362,45,363,45],[363,4,364,4],[363,5,364,5],[363,6,364,6],[363,8,364,8,"utils_js_1"],[363,18,364,18],[363,19,364,19,"validateObject"],[363,33,364,33],[363,35,364,35,"curve"],[363,40,364,40],[363,42,364,42],[364,6,365,8,"n"],[364,7,365,9],[364,9,365,11],[364,17,365,19],[365,6,366,8,"h"],[365,7,366,9],[365,9,366,11],[365,17,366,19],[366,6,367,8,"Gx"],[366,8,367,10],[366,10,367,12],[366,17,367,19],[367,6,368,8,"Gy"],[367,8,368,10],[367,10,368,12],[368,4,369,4],[368,5,369,5],[368,7,369,7],[369,6,370,8,"nBitLength"],[369,16,370,18],[369,18,370,20],[369,33,370,35],[370,6,371,8,"nByteLength"],[370,17,371,19],[370,19,371,21],[371,4,372,4],[371,5,372,5],[371,6,372,6],[372,4,373,4],[373,4,374,4],[373,11,374,11,"Object"],[373,17,374,17],[373,18,374,18,"freeze"],[373,24,374,24],[373,25,374,25],[374,6,375,8],[374,9,375,11],[374,10,375,12],[374,11,375,13],[374,13,375,15,"modular_js_1"],[374,25,375,27],[374,26,375,28,"nLength"],[374,33,375,35],[374,35,375,37,"curve"],[374,40,375,42],[374,41,375,43,"n"],[374,42,375,44],[374,44,375,46,"curve"],[374,49,375,51],[374,50,375,52,"nBitLength"],[374,60,375,62],[374,61,375,63],[375,6,376,8],[375,9,376,11,"curve"],[375,14,376,16],[376,6,377,8],[376,9,377,11],[377,8,377,13,"p"],[377,9,377,14],[377,11,377,16,"curve"],[377,16,377,21],[377,17,377,22,"Fp"],[377,19,377,24],[377,20,377,25,"ORDER"],[378,6,377,31],[379,4,378,4],[379,5,378,5],[379,6,378,6],[380,2,379,0],[381,0,379,1],[381,3]],"functionMap":{"names":["<global>","constTimeNegate","validateW","calcWOpts","validateMSMPoints","points.forEach$argument_0","validateMSMScalars","scalars.forEach$argument_0","getW","wNAF","hasPrecomputes","unsafeLadder","precomputeWindow","wNAFUnsafe","getPrecomputes","wNAFCached","wNAFCachedUnsafe","setWindowSize","pippenger","precomputeMSMUnsafe","points.map$argument_0","<anonymous>","validateBasic"],"mappings":"AAA;ACgB;CDG;AEC;CFG;AGC;CHK;AIC;mBCG;KDG;CJC;AMC;oBCG;KDG;CNC;AQK;CRE;ASe;QCG;SDE;QEE;SFS;QGa;SHgB;QI+D;SJ4B;QKC;SLS;QMC;SNG;QOC;SPK;QQI;SRI;CTE;AkBW;ClBqC;AmBQ;8BC0C;KDO;WEC;KFoB;CnBC;AsBC;CtBiB"}},"type":"js/module"}]}