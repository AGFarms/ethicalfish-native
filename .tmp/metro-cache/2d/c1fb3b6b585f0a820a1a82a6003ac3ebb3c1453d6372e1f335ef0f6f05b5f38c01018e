{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /*!\n      localForage -- Offline Storage, Improved\n      Version 1.10.0\n      https://localforage.github.io/localForage\n      (c) 2013-2017 Mozilla, Apache License 2.0\n  */\n  (function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n      module.exports = f();\n    } else if (typeof define === \"function\" && define.amd) {\n      define([], f);\n    } else {\n      var g;\n      if (typeof window !== \"undefined\") {\n        g = window;\n      } else if (typeof global !== \"undefined\") {\n        g = global;\n      } else if (typeof self !== \"undefined\") {\n        g = self;\n      } else {\n        g = this;\n      }\n      g.localforage = f();\n    }\n  })(function () {\n    var define, module, exports;\n    return function e(t, n, r) {\n      function s(o, u) {\n        if (!n[o]) {\n          if (!t[o]) {\n            var a = typeof require == \"function\" && require;\n            if (!u && a) return a(o, !0);\n            if (i) return i(o, !0);\n            var f = new Error(\"Cannot find module '\" + o + \"'\");\n            throw f.code = \"MODULE_NOT_FOUND\", f;\n          }\n          var l = n[o] = {\n            exports: {}\n          };\n          t[o][0].call(l.exports, function (e) {\n            var n = t[o][1][e];\n            return s(n ? n : e);\n          }, l, l.exports, e, t, n, r);\n        }\n        return n[o].exports;\n      }\n      var i = typeof require == \"function\" && require;\n      for (var o = 0; o < r.length; o++) s(r[o]);\n      return s;\n    }({\n      1: [function (_dereq_, module, exports) {\n        (function (global) {\n          'use strict';\n\n          var Mutation = global.MutationObserver || global.WebKitMutationObserver;\n          var scheduleDrain;\n          {\n            if (Mutation) {\n              var called = 0;\n              var observer = new Mutation(nextTick);\n              var element = global.document.createTextNode('');\n              observer.observe(element, {\n                characterData: true\n              });\n              scheduleDrain = function () {\n                element.data = called = ++called % 2;\n              };\n            } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n              var channel = new global.MessageChannel();\n              channel.port1.onmessage = nextTick;\n              scheduleDrain = function () {\n                channel.port2.postMessage(0);\n              };\n            } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n              scheduleDrain = function () {\n                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n                var scriptEl = global.document.createElement('script');\n                scriptEl.onreadystatechange = function () {\n                  nextTick();\n                  scriptEl.onreadystatechange = null;\n                  scriptEl.parentNode.removeChild(scriptEl);\n                  scriptEl = null;\n                };\n                global.document.documentElement.appendChild(scriptEl);\n              };\n            } else {\n              scheduleDrain = function () {\n                setTimeout(nextTick, 0);\n              };\n            }\n          }\n          var draining;\n          var queue = [];\n          //named nextTick for less confusing stack traces\n          function nextTick() {\n            draining = true;\n            var i, oldQueue;\n            var len = queue.length;\n            while (len) {\n              oldQueue = queue;\n              queue = [];\n              i = -1;\n              while (++i < len) {\n                oldQueue[i]();\n              }\n              len = queue.length;\n            }\n            draining = false;\n          }\n          module.exports = immediate;\n          function immediate(task) {\n            if (queue.push(task) === 1 && !draining) {\n              scheduleDrain();\n            }\n          }\n        }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n      }, {}],\n      2: [function (_dereq_, module, exports) {\n        'use strict';\n\n        var immediate = _dereq_(1);\n\n        /* istanbul ignore next */\n        function INTERNAL() {}\n        var handlers = {};\n        var REJECTED = ['REJECTED'];\n        var FULFILLED = ['FULFILLED'];\n        var PENDING = ['PENDING'];\n        module.exports = Promise;\n        function Promise(resolver) {\n          if (typeof resolver !== 'function') {\n            throw new TypeError('resolver must be a function');\n          }\n          this.state = PENDING;\n          this.queue = [];\n          this.outcome = void 0;\n          if (resolver !== INTERNAL) {\n            safelyResolveThenable(this, resolver);\n          }\n        }\n        Promise.prototype[\"catch\"] = function (onRejected) {\n          return this.then(null, onRejected);\n        };\n        Promise.prototype.then = function (onFulfilled, onRejected) {\n          if (typeof onFulfilled !== 'function' && this.state === FULFILLED || typeof onRejected !== 'function' && this.state === REJECTED) {\n            return this;\n          }\n          var promise = new this.constructor(INTERNAL);\n          if (this.state !== PENDING) {\n            var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n            unwrap(promise, resolver, this.outcome);\n          } else {\n            this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n          }\n          return promise;\n        };\n        function QueueItem(promise, onFulfilled, onRejected) {\n          this.promise = promise;\n          if (typeof onFulfilled === 'function') {\n            this.onFulfilled = onFulfilled;\n            this.callFulfilled = this.otherCallFulfilled;\n          }\n          if (typeof onRejected === 'function') {\n            this.onRejected = onRejected;\n            this.callRejected = this.otherCallRejected;\n          }\n        }\n        QueueItem.prototype.callFulfilled = function (value) {\n          handlers.resolve(this.promise, value);\n        };\n        QueueItem.prototype.otherCallFulfilled = function (value) {\n          unwrap(this.promise, this.onFulfilled, value);\n        };\n        QueueItem.prototype.callRejected = function (value) {\n          handlers.reject(this.promise, value);\n        };\n        QueueItem.prototype.otherCallRejected = function (value) {\n          unwrap(this.promise, this.onRejected, value);\n        };\n        function unwrap(promise, func, value) {\n          immediate(function () {\n            var returnValue;\n            try {\n              returnValue = func(value);\n            } catch (e) {\n              return handlers.reject(promise, e);\n            }\n            if (returnValue === promise) {\n              handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n            } else {\n              handlers.resolve(promise, returnValue);\n            }\n          });\n        }\n        handlers.resolve = function (self, value) {\n          var result = tryCatch(getThen, value);\n          if (result.status === 'error') {\n            return handlers.reject(self, result.value);\n          }\n          var thenable = result.value;\n          if (thenable) {\n            safelyResolveThenable(self, thenable);\n          } else {\n            self.state = FULFILLED;\n            self.outcome = value;\n            var i = -1;\n            var len = self.queue.length;\n            while (++i < len) {\n              self.queue[i].callFulfilled(value);\n            }\n          }\n          return self;\n        };\n        handlers.reject = function (self, error) {\n          self.state = REJECTED;\n          self.outcome = error;\n          var i = -1;\n          var len = self.queue.length;\n          while (++i < len) {\n            self.queue[i].callRejected(error);\n          }\n          return self;\n        };\n        function getThen(obj) {\n          // Make sure we only access the accessor once as required by the spec\n          var then = obj && obj.then;\n          if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n            return function appyThen() {\n              then.apply(obj, arguments);\n            };\n          }\n        }\n        function safelyResolveThenable(self, thenable) {\n          // Either fulfill, reject or reject with error\n          var called = false;\n          function onError(value) {\n            if (called) {\n              return;\n            }\n            called = true;\n            handlers.reject(self, value);\n          }\n          function onSuccess(value) {\n            if (called) {\n              return;\n            }\n            called = true;\n            handlers.resolve(self, value);\n          }\n          function tryToUnwrap() {\n            thenable(onSuccess, onError);\n          }\n          var result = tryCatch(tryToUnwrap);\n          if (result.status === 'error') {\n            onError(result.value);\n          }\n        }\n        function tryCatch(func, value) {\n          var out = {};\n          try {\n            out.value = func(value);\n            out.status = 'success';\n          } catch (e) {\n            out.status = 'error';\n            out.value = e;\n          }\n          return out;\n        }\n        Promise.resolve = resolve;\n        function resolve(value) {\n          if (value instanceof this) {\n            return value;\n          }\n          return handlers.resolve(new this(INTERNAL), value);\n        }\n        Promise.reject = reject;\n        function reject(reason) {\n          var promise = new this(INTERNAL);\n          return handlers.reject(promise, reason);\n        }\n        Promise.all = all;\n        function all(iterable) {\n          var self = this;\n          if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n            return this.reject(new TypeError('must be an array'));\n          }\n          var len = iterable.length;\n          var called = false;\n          if (!len) {\n            return this.resolve([]);\n          }\n          var values = new Array(len);\n          var resolved = 0;\n          var i = -1;\n          var promise = new this(INTERNAL);\n          while (++i < len) {\n            allResolver(iterable[i], i);\n          }\n          return promise;\n          function allResolver(value, i) {\n            self.resolve(value).then(resolveFromAll, function (error) {\n              if (!called) {\n                called = true;\n                handlers.reject(promise, error);\n              }\n            });\n            function resolveFromAll(outValue) {\n              values[i] = outValue;\n              if (++resolved === len && !called) {\n                called = true;\n                handlers.resolve(promise, values);\n              }\n            }\n          }\n        }\n        Promise.race = race;\n        function race(iterable) {\n          var self = this;\n          if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n            return this.reject(new TypeError('must be an array'));\n          }\n          var len = iterable.length;\n          var called = false;\n          if (!len) {\n            return this.resolve([]);\n          }\n          var i = -1;\n          var promise = new this(INTERNAL);\n          while (++i < len) {\n            resolver(iterable[i]);\n          }\n          return promise;\n          function resolver(value) {\n            self.resolve(value).then(function (response) {\n              if (!called) {\n                called = true;\n                handlers.resolve(promise, response);\n              }\n            }, function (error) {\n              if (!called) {\n                called = true;\n                handlers.reject(promise, error);\n              }\n            });\n          }\n        }\n      }, {\n        \"1\": 1\n      }],\n      3: [function (_dereq_, module, exports) {\n        (function (global) {\n          'use strict';\n\n          if (typeof global.Promise !== 'function') {\n            global.Promise = _dereq_(2);\n          }\n        }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n      }, {\n        \"2\": 2\n      }],\n      4: [function (_dereq_, module, exports) {\n        'use strict';\n\n        var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n          return typeof obj;\n        } : function (obj) {\n          return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n        function getIDB() {\n          /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n          try {\n            if (typeof indexedDB !== 'undefined') {\n              return indexedDB;\n            }\n            if (typeof webkitIndexedDB !== 'undefined') {\n              return webkitIndexedDB;\n            }\n            if (typeof mozIndexedDB !== 'undefined') {\n              return mozIndexedDB;\n            }\n            if (typeof OIndexedDB !== 'undefined') {\n              return OIndexedDB;\n            }\n            if (typeof msIndexedDB !== 'undefined') {\n              return msIndexedDB;\n            }\n          } catch (e) {\n            return;\n          }\n        }\n        var idb = getIDB();\n        function isIndexedDBValid() {\n          try {\n            // Initialize IndexedDB; fall back to vendor-prefixed versions\n            // if needed.\n            if (!idb || !idb.open) {\n              return false;\n            }\n            // We mimic PouchDB here;\n            //\n            // We test for openDatabase because IE Mobile identifies itself\n            // as Safari. Oh the lulz...\n            var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n            var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n            // Safari <10.1 does not meet our requirements for IDB support\n            // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n            // Safari 10.1 shipped with fetch, we can use that to detect it.\n            // Note: this creates issues with `window.fetch` polyfills and\n            // overrides; see:\n            // https://github.com/localForage/localForage/issues/856\n            return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n            // some outdated implementations of IDB that appear on Samsung\n            // and HTC Android devices <4.4 are missing IDBKeyRange\n            // See: https://github.com/mozilla/localForage/issues/128\n            // See: https://github.com/mozilla/localForage/issues/272\n            typeof IDBKeyRange !== 'undefined';\n          } catch (e) {\n            return false;\n          }\n        }\n\n        // Abstracts constructing a Blob object, so it also works in older\n        // browsers that don't support the native Blob constructor. (i.e.\n        // old QtWebKit versions, at least).\n        // Abstracts constructing a Blob object, so it also works in older\n        // browsers that don't support the native Blob constructor. (i.e.\n        // old QtWebKit versions, at least).\n        function createBlob(parts, properties) {\n          /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n          parts = parts || [];\n          properties = properties || {};\n          try {\n            return new Blob(parts, properties);\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n            var builder = new Builder();\n            for (var i = 0; i < parts.length; i += 1) {\n              builder.append(parts[i]);\n            }\n            return builder.getBlob(properties.type);\n          }\n        }\n\n        // This is CommonJS because lie is an external dependency, so Rollup\n        // can just ignore it.\n        if (typeof Promise === 'undefined') {\n          // In the \"nopromises\" build this will just throw if you don't have\n          // a global promise object, but it would throw anyway later.\n          _dereq_(3);\n        }\n        var Promise$1 = Promise;\n        function executeCallback(promise, callback) {\n          if (callback) {\n            promise.then(function (result) {\n              callback(null, result);\n            }, function (error) {\n              callback(error);\n            });\n          }\n        }\n        function executeTwoCallbacks(promise, callback, errorCallback) {\n          if (typeof callback === 'function') {\n            promise.then(callback);\n          }\n          if (typeof errorCallback === 'function') {\n            promise[\"catch\"](errorCallback);\n          }\n        }\n        function normalizeKey(key) {\n          // Cast the key to a string, as that's all we can set as a key.\n          if (typeof key !== 'string') {\n            console.warn(key + ' used as a key, but it is not a string.');\n            key = String(key);\n          }\n          return key;\n        }\n        function getCallback() {\n          if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n            return arguments[arguments.length - 1];\n          }\n        }\n\n        // Some code originally from async_storage.js in\n        // [Gaia](https://github.com/mozilla-b2g/gaia).\n\n        var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\n        var supportsBlobs = void 0;\n        var dbContexts = {};\n        var toString = Object.prototype.toString;\n\n        // Transaction Modes\n        var READ_ONLY = 'readonly';\n        var READ_WRITE = 'readwrite';\n\n        // Transform a binary string to an array buffer, because otherwise\n        // weird stuff happens when you try to work with the binary string directly.\n        // It is known.\n        // From http://stackoverflow.com/questions/14967647/ (continues on next line)\n        // encode-decode-image-with-base64-breaks-image (2013-04-21)\n        function _binStringToArrayBuffer(bin) {\n          var length = bin.length;\n          var buf = new ArrayBuffer(length);\n          var arr = new Uint8Array(buf);\n          for (var i = 0; i < length; i++) {\n            arr[i] = bin.charCodeAt(i);\n          }\n          return buf;\n        }\n\n        //\n        // Blobs are not supported in all versions of IndexedDB, notably\n        // Chrome <37 and Android <5. In those versions, storing a blob will throw.\n        //\n        // Various other blob bugs exist in Chrome v37-42 (inclusive).\n        // Detecting them is expensive and confusing to users, and Chrome 37-42\n        // is at very low usage worldwide, so we do a hacky userAgent check instead.\n        //\n        // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n        // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n        // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n        //\n        // Code borrowed from PouchDB. See:\n        // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n        //\n        function _checkBlobSupportWithoutCaching(idb) {\n          return new Promise$1(function (resolve) {\n            var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n            var blob = createBlob(['']);\n            txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n            txn.onabort = function (e) {\n              // If the transaction aborts now its due to not being able to\n              // write to the database, likely due to the disk being full\n              e.preventDefault();\n              e.stopPropagation();\n              resolve(false);\n            };\n            txn.oncomplete = function () {\n              var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n              var matchedEdge = navigator.userAgent.match(/Edge\\//);\n              // MS Edge pretends to be Chrome 42:\n              // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n              resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n            };\n          })[\"catch\"](function () {\n            return false; // error, so assume unsupported\n          });\n        }\n        function _checkBlobSupport(idb) {\n          if (typeof supportsBlobs === 'boolean') {\n            return Promise$1.resolve(supportsBlobs);\n          }\n          return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n            supportsBlobs = value;\n            return supportsBlobs;\n          });\n        }\n        function _deferReadiness(dbInfo) {\n          var dbContext = dbContexts[dbInfo.name];\n\n          // Create a deferred object representing the current database operation.\n          var deferredOperation = {};\n          deferredOperation.promise = new Promise$1(function (resolve, reject) {\n            deferredOperation.resolve = resolve;\n            deferredOperation.reject = reject;\n          });\n\n          // Enqueue the deferred operation.\n          dbContext.deferredOperations.push(deferredOperation);\n\n          // Chain its promise to the database readiness.\n          if (!dbContext.dbReady) {\n            dbContext.dbReady = deferredOperation.promise;\n          } else {\n            dbContext.dbReady = dbContext.dbReady.then(function () {\n              return deferredOperation.promise;\n            });\n          }\n        }\n        function _advanceReadiness(dbInfo) {\n          var dbContext = dbContexts[dbInfo.name];\n\n          // Dequeue a deferred operation.\n          var deferredOperation = dbContext.deferredOperations.pop();\n\n          // Resolve its promise (which is part of the database readiness\n          // chain of promises).\n          if (deferredOperation) {\n            deferredOperation.resolve();\n            return deferredOperation.promise;\n          }\n        }\n        function _rejectReadiness(dbInfo, err) {\n          var dbContext = dbContexts[dbInfo.name];\n\n          // Dequeue a deferred operation.\n          var deferredOperation = dbContext.deferredOperations.pop();\n\n          // Reject its promise (which is part of the database readiness\n          // chain of promises).\n          if (deferredOperation) {\n            deferredOperation.reject(err);\n            return deferredOperation.promise;\n          }\n        }\n        function _getConnection(dbInfo, upgradeNeeded) {\n          return new Promise$1(function (resolve, reject) {\n            dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n            if (dbInfo.db) {\n              if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n              } else {\n                return resolve(dbInfo.db);\n              }\n            }\n            var dbArgs = [dbInfo.name];\n            if (upgradeNeeded) {\n              dbArgs.push(dbInfo.version);\n            }\n            var openreq = idb.open.apply(idb, dbArgs);\n            if (upgradeNeeded) {\n              openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                  db.createObjectStore(dbInfo.storeName);\n                  if (e.oldVersion <= 1) {\n                    // Added when support for blob shims was added\n                    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                  }\n                } catch (ex) {\n                  if (ex.name === 'ConstraintError') {\n                    console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                  } else {\n                    throw ex;\n                  }\n                }\n              };\n            }\n            openreq.onerror = function (e) {\n              e.preventDefault();\n              reject(openreq.error);\n            };\n            openreq.onsuccess = function () {\n              var db = openreq.result;\n              db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n              };\n              resolve(db);\n              _advanceReadiness(dbInfo);\n            };\n          });\n        }\n        function _getOriginalConnection(dbInfo) {\n          return _getConnection(dbInfo, false);\n        }\n        function _getUpgradedConnection(dbInfo) {\n          return _getConnection(dbInfo, true);\n        }\n        function _isUpgradeNeeded(dbInfo, defaultVersion) {\n          if (!dbInfo.db) {\n            return true;\n          }\n          var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n          var isDowngrade = dbInfo.version < dbInfo.db.version;\n          var isUpgrade = dbInfo.version > dbInfo.db.version;\n          if (isDowngrade) {\n            // If the version is not the default one\n            // then warn for impossible downgrade.\n            if (dbInfo.version !== defaultVersion) {\n              console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n            }\n            // Align the versions to prevent errors.\n            dbInfo.version = dbInfo.db.version;\n          }\n          if (isUpgrade || isNewStore) {\n            // If the store is new then increment the version (if needed).\n            // This will trigger an \"upgradeneeded\" event which is required\n            // for creating a store.\n            if (isNewStore) {\n              var incVersion = dbInfo.db.version + 1;\n              if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n              }\n            }\n            return true;\n          }\n          return false;\n        }\n\n        // encode a blob for indexeddb engines that don't support blobs\n        function _encodeBlob(blob) {\n          return new Promise$1(function (resolve, reject) {\n            var reader = new FileReader();\n            reader.onerror = reject;\n            reader.onloadend = function (e) {\n              var base64 = btoa(e.target.result || '');\n              resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n              });\n            };\n            reader.readAsBinaryString(blob);\n          });\n        }\n\n        // decode an encoded blob\n        function _decodeBlob(encodedBlob) {\n          var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n          return createBlob([arrayBuff], {\n            type: encodedBlob.type\n          });\n        }\n\n        // is this one of our fancy encoded blobs?\n        function _isEncodedBlob(value) {\n          return value && value.__local_forage_encoded_blob;\n        }\n\n        // Specialize the default `ready()` function by making it dependent\n        // on the current database operations. Thus, the driver will be actually\n        // ready when it's been initialized (default) *and* there are no pending\n        // operations on the database (initiated by some other instances).\n        function _fullyReady(callback) {\n          var self = this;\n          var promise = self._initReady().then(function () {\n            var dbContext = dbContexts[self._dbInfo.name];\n            if (dbContext && dbContext.dbReady) {\n              return dbContext.dbReady;\n            }\n          });\n          executeTwoCallbacks(promise, callback, callback);\n          return promise;\n        }\n\n        // Try to establish a new db connection to replace the\n        // current one which is broken (i.e. experiencing\n        // InvalidStateError while creating a transaction).\n        function _tryReconnect(dbInfo) {\n          _deferReadiness(dbInfo);\n          var dbContext = dbContexts[dbInfo.name];\n          var forages = dbContext.forages;\n          for (var i = 0; i < forages.length; i++) {\n            var forage = forages[i];\n            if (forage._dbInfo.db) {\n              forage._dbInfo.db.close();\n              forage._dbInfo.db = null;\n            }\n          }\n          dbInfo.db = null;\n          return _getOriginalConnection(dbInfo).then(function (db) {\n            dbInfo.db = db;\n            if (_isUpgradeNeeded(dbInfo)) {\n              // Reopen the database for upgrading.\n              return _getUpgradedConnection(dbInfo);\n            }\n            return db;\n          }).then(function (db) {\n            // store the latest db reference\n            // in case the db was upgraded\n            dbInfo.db = dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n              forages[i]._dbInfo.db = db;\n            }\n          })[\"catch\"](function (err) {\n            _rejectReadiness(dbInfo, err);\n            throw err;\n          });\n        }\n\n        // FF doesn't like Promises (micro-tasks) and IDDB store operations,\n        // so we have to do it with callbacks\n        function createTransaction(dbInfo, mode, callback, retries) {\n          if (retries === undefined) {\n            retries = 1;\n          }\n          try {\n            var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n            callback(null, tx);\n          } catch (err) {\n            if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n              return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                  // increase the db version, to create the new ObjectStore\n                  if (dbInfo.db) {\n                    dbInfo.version = dbInfo.db.version + 1;\n                  }\n                  // Reopen the database for upgrading.\n                  return _getUpgradedConnection(dbInfo);\n                }\n              }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                  createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n              })[\"catch\"](callback);\n            }\n            callback(err);\n          }\n        }\n        function createDbContext() {\n          return {\n            // Running localForages sharing a database.\n            forages: [],\n            // Shared database.\n            db: null,\n            // Database readiness (promise).\n            dbReady: null,\n            // Deferred operations on the database.\n            deferredOperations: []\n          };\n        }\n\n        // Open the IndexedDB database (automatically creates one if one didn't\n        // previously exist), using any options set in the config.\n        function _initStorage(options) {\n          var self = this;\n          var dbInfo = {\n            db: null\n          };\n          if (options) {\n            for (var i in options) {\n              dbInfo[i] = options[i];\n            }\n          }\n\n          // Get the current context of the database;\n          var dbContext = dbContexts[dbInfo.name];\n\n          // ...or create a new context.\n          if (!dbContext) {\n            dbContext = createDbContext();\n            // Register the new context in the global container.\n            dbContexts[dbInfo.name] = dbContext;\n          }\n\n          // Register itself as a running localForage in the current context.\n          dbContext.forages.push(self);\n\n          // Replace the default `ready()` function with the specialized one.\n          if (!self._initReady) {\n            self._initReady = self.ready;\n            self.ready = _fullyReady;\n          }\n\n          // Create an array of initialization states of the related localForages.\n          var initPromises = [];\n          function ignoreErrors() {\n            // Don't handle errors here,\n            // just makes sure related localForages aren't pending.\n            return Promise$1.resolve();\n          }\n          for (var j = 0; j < dbContext.forages.length; j++) {\n            var forage = dbContext.forages[j];\n            if (forage !== self) {\n              // Don't wait for itself...\n              initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n            }\n          }\n\n          // Take a snapshot of the related localForages.\n          var forages = dbContext.forages.slice(0);\n\n          // Initialize the connection process only when\n          // all the related localForages aren't pending.\n          return Promise$1.all(initPromises).then(function () {\n            dbInfo.db = dbContext.db;\n            // Get the connection or open a new one without upgrade.\n            return _getOriginalConnection(dbInfo);\n          }).then(function (db) {\n            dbInfo.db = db;\n            if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n              // Reopen the database for upgrading.\n              return _getUpgradedConnection(dbInfo);\n            }\n            return db;\n          }).then(function (db) {\n            dbInfo.db = dbContext.db = db;\n            self._dbInfo = dbInfo;\n            // Share the final connection amongst related localForages.\n            for (var k = 0; k < forages.length; k++) {\n              var forage = forages[k];\n              if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n              }\n            }\n          });\n        }\n        function getItem(key, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n                  var req = store.get(key);\n                  req.onsuccess = function () {\n                    var value = req.result;\n                    if (value === undefined) {\n                      value = null;\n                    }\n                    if (_isEncodedBlob(value)) {\n                      value = _decodeBlob(value);\n                    }\n                    resolve(value);\n                  };\n                  req.onerror = function () {\n                    reject(req.error);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Iterate over all items stored in database.\n        function iterate(iterator, callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n                  var req = store.openCursor();\n                  var iterationNumber = 1;\n                  req.onsuccess = function () {\n                    var cursor = req.result;\n                    if (cursor) {\n                      var value = cursor.value;\n                      if (_isEncodedBlob(value)) {\n                        value = _decodeBlob(value);\n                      }\n                      var result = iterator(value, cursor.key, iterationNumber++);\n\n                      // when the iterator callback returns any\n                      // (non-`undefined`) value, then we stop\n                      // the iteration immediately\n                      if (result !== void 0) {\n                        resolve(result);\n                      } else {\n                        cursor[\"continue\"]();\n                      }\n                    } else {\n                      resolve();\n                    }\n                  };\n                  req.onerror = function () {\n                    reject(req.error);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function setItem(key, value, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = new Promise$1(function (resolve, reject) {\n            var dbInfo;\n            self.ready().then(function () {\n              dbInfo = self._dbInfo;\n              if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                  if (blobSupport) {\n                    return value;\n                  }\n                  return _encodeBlob(value);\n                });\n              }\n              return value;\n            }).then(function (value) {\n              createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n\n                  // The reason we don't _save_ null is because IE 10 does\n                  // not support saving the `null` type in IndexedDB. How\n                  // ironic, given the bug below!\n                  // See: https://github.com/mozilla/localForage/issues/161\n                  if (value === null) {\n                    value = undefined;\n                  }\n                  var req = store.put(value, key);\n                  transaction.oncomplete = function () {\n                    // Cast to undefined so the value passed to\n                    // callback/promise is the same as what one would get out\n                    // of `getItem()` later. This leads to some weirdness\n                    // (setItem('foo', undefined) will return `null`), but\n                    // it's not my fault localStorage is our baseline and that\n                    // it's weird.\n                    if (value === undefined) {\n                      value = null;\n                    }\n                    resolve(value);\n                  };\n                  transaction.onabort = transaction.onerror = function () {\n                    var err = req.error ? req.error : req.transaction.error;\n                    reject(err);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function removeItem(key, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n                  // We use a Grunt task to make this safe for IE and some\n                  // versions of Android (including those used by Cordova).\n                  // Normally IE won't like `.delete()` and will insist on\n                  // using `['delete']()`, but we have a build step that\n                  // fixes this for us now.\n                  var req = store[\"delete\"](key);\n                  transaction.oncomplete = function () {\n                    resolve();\n                  };\n                  transaction.onerror = function () {\n                    reject(req.error);\n                  };\n\n                  // The request will be also be aborted if we've exceeded our storage\n                  // space.\n                  transaction.onabort = function () {\n                    var err = req.error ? req.error : req.transaction.error;\n                    reject(err);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function clear(callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n                  var req = store.clear();\n                  transaction.oncomplete = function () {\n                    resolve();\n                  };\n                  transaction.onabort = transaction.onerror = function () {\n                    var err = req.error ? req.error : req.transaction.error;\n                    reject(err);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function length(callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n                  var req = store.count();\n                  req.onsuccess = function () {\n                    resolve(req.result);\n                  };\n                  req.onerror = function () {\n                    reject(req.error);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function key(n, callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            if (n < 0) {\n              resolve(null);\n              return;\n            }\n            self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n                  var advanced = false;\n                  var req = store.openKeyCursor();\n                  req.onsuccess = function () {\n                    var cursor = req.result;\n                    if (!cursor) {\n                      // this means there weren't enough keys\n                      resolve(null);\n                      return;\n                    }\n                    if (n === 0) {\n                      // We have the first key, return it if that's what they\n                      // wanted.\n                      resolve(cursor.key);\n                    } else {\n                      if (!advanced) {\n                        // Otherwise, ask the cursor to skip ahead n\n                        // records.\n                        advanced = true;\n                        cursor.advance(n);\n                      } else {\n                        // When we get here, we've got the nth key.\n                        resolve(cursor.key);\n                      }\n                    }\n                  };\n                  req.onerror = function () {\n                    reject(req.error);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function keys(callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                  return reject(err);\n                }\n                try {\n                  var store = transaction.objectStore(self._dbInfo.storeName);\n                  var req = store.openKeyCursor();\n                  var keys = [];\n                  req.onsuccess = function () {\n                    var cursor = req.result;\n                    if (!cursor) {\n                      resolve(keys);\n                      return;\n                    }\n                    keys.push(cursor.key);\n                    cursor[\"continue\"]();\n                  };\n                  req.onerror = function () {\n                    reject(req.error);\n                  };\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function dropInstance(options, callback) {\n          callback = getCallback.apply(this, arguments);\n          var currentConfig = this.config();\n          options = typeof options !== 'function' && options || {};\n          if (!options.name) {\n            options.name = options.name || currentConfig.name;\n            options.storeName = options.storeName || currentConfig.storeName;\n          }\n          var self = this;\n          var promise;\n          if (!options.name) {\n            promise = Promise$1.reject('Invalid arguments');\n          } else {\n            var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n            var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n              var dbContext = dbContexts[options.name];\n              var forages = dbContext.forages;\n              dbContext.db = db;\n              for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n              }\n              return db;\n            });\n            if (!options.storeName) {\n              promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                  var forage = forages[i];\n                  forage._dbInfo.db = null;\n                }\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                  var req = idb.deleteDatabase(options.name);\n                  req.onerror = function () {\n                    var db = req.result;\n                    if (db) {\n                      db.close();\n                    }\n                    reject(req.error);\n                  };\n                  req.onblocked = function () {\n                    // Closing all open connections in onversionchange handler should prevent this situation, but if\n                    // we do get here, it just means the request remains pending - eventually it will succeed or error\n                    console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                  };\n                  req.onsuccess = function () {\n                    var db = req.result;\n                    if (db) {\n                      db.close();\n                    }\n                    resolve(db);\n                  };\n                });\n                return dropDBPromise.then(function (db) {\n                  dbContext.db = db;\n                  for (var i = 0; i < forages.length; i++) {\n                    var _forage = forages[i];\n                    _advanceReadiness(_forage._dbInfo);\n                  }\n                })[\"catch\"](function (err) {\n                  (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                  throw err;\n                });\n              });\n            } else {\n              promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                  return;\n                }\n                var newVersion = db.version + 1;\n                _deferReadiness(options);\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                  var forage = forages[i];\n                  forage._dbInfo.db = null;\n                  forage._dbInfo.version = newVersion;\n                }\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                  var req = idb.open(options.name, newVersion);\n                  req.onerror = function (err) {\n                    var db = req.result;\n                    db.close();\n                    reject(err);\n                  };\n                  req.onupgradeneeded = function () {\n                    var db = req.result;\n                    db.deleteObjectStore(options.storeName);\n                  };\n                  req.onsuccess = function () {\n                    var db = req.result;\n                    db.close();\n                    resolve(db);\n                  };\n                });\n                return dropObjectPromise.then(function (db) {\n                  dbContext.db = db;\n                  for (var j = 0; j < forages.length; j++) {\n                    var _forage2 = forages[j];\n                    _forage2._dbInfo.db = db;\n                    _advanceReadiness(_forage2._dbInfo);\n                  }\n                })[\"catch\"](function (err) {\n                  (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                  throw err;\n                });\n              });\n            }\n          }\n          executeCallback(promise, callback);\n          return promise;\n        }\n        var asyncStorage = {\n          _driver: 'asyncStorage',\n          _initStorage: _initStorage,\n          _support: isIndexedDBValid(),\n          iterate: iterate,\n          getItem: getItem,\n          setItem: setItem,\n          removeItem: removeItem,\n          clear: clear,\n          length: length,\n          key: key,\n          keys: keys,\n          dropInstance: dropInstance\n        };\n        function isWebSQLValid() {\n          return typeof openDatabase === 'function';\n        }\n\n        // Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n        // it to Base64, so this is how we store it to prevent very strange errors with less\n        // verbose ways of binary <-> string data storage.\n        var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        var BLOB_TYPE_PREFIX = '~~local_forage_type~';\n        var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n        var SERIALIZED_MARKER = '__lfsc__:';\n        var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n        // OMG the serializations!\n        var TYPE_ARRAYBUFFER = 'arbf';\n        var TYPE_BLOB = 'blob';\n        var TYPE_INT8ARRAY = 'si08';\n        var TYPE_UINT8ARRAY = 'ui08';\n        var TYPE_UINT8CLAMPEDARRAY = 'uic8';\n        var TYPE_INT16ARRAY = 'si16';\n        var TYPE_INT32ARRAY = 'si32';\n        var TYPE_UINT16ARRAY = 'ur16';\n        var TYPE_UINT32ARRAY = 'ui32';\n        var TYPE_FLOAT32ARRAY = 'fl32';\n        var TYPE_FLOAT64ARRAY = 'fl64';\n        var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n        var toString$1 = Object.prototype.toString;\n        function stringToBuffer(serializedString) {\n          // Fill the string into a ArrayBuffer.\n          var bufferLength = serializedString.length * 0.75;\n          var len = serializedString.length;\n          var i;\n          var p = 0;\n          var encoded1, encoded2, encoded3, encoded4;\n          if (serializedString[serializedString.length - 1] === '=') {\n            bufferLength--;\n            if (serializedString[serializedString.length - 2] === '=') {\n              bufferLength--;\n            }\n          }\n          var buffer = new ArrayBuffer(bufferLength);\n          var bytes = new Uint8Array(buffer);\n          for (i = 0; i < len; i += 4) {\n            encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n            encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n            encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n            encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n            /*jslint bitwise: true */\n            bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n            bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n            bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n          }\n          return buffer;\n        }\n\n        // Converts a buffer to a string to store, serialized, in the backend\n        // storage library.\n        function bufferToString(buffer) {\n          // base64-arraybuffer\n          var bytes = new Uint8Array(buffer);\n          var base64String = '';\n          var i;\n          for (i = 0; i < bytes.length; i += 3) {\n            /*jslint bitwise: true */\n            base64String += BASE_CHARS[bytes[i] >> 2];\n            base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n            base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n            base64String += BASE_CHARS[bytes[i + 2] & 63];\n          }\n          if (bytes.length % 3 === 2) {\n            base64String = base64String.substring(0, base64String.length - 1) + '=';\n          } else if (bytes.length % 3 === 1) {\n            base64String = base64String.substring(0, base64String.length - 2) + '==';\n          }\n          return base64String;\n        }\n\n        // Serialize a value, afterwards executing a callback (which usually\n        // instructs the `setItem()` callback/promise to be executed). This is how\n        // we store binary data with localStorage.\n        function serialize(value, callback) {\n          var valueType = '';\n          if (value) {\n            valueType = toString$1.call(value);\n          }\n\n          // Cannot use `value instanceof ArrayBuffer` or such here, as these\n          // checks fail when running the tests using casper.js...\n          //\n          // TODO: See why those tests fail and use a better solution.\n          if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n            // Convert binary arrays to a string and prefix the string with\n            // a special marker.\n            var buffer;\n            var marker = SERIALIZED_MARKER;\n            if (value instanceof ArrayBuffer) {\n              buffer = value;\n              marker += TYPE_ARRAYBUFFER;\n            } else {\n              buffer = value.buffer;\n              if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n              } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n              } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n              } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n              } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n              } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n              } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n              } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n              } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n              } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n              }\n            }\n            callback(marker + bufferToString(buffer));\n          } else if (valueType === '[object Blob]') {\n            // Conver the blob to a binaryArray and then to a string.\n            var fileReader = new FileReader();\n            fileReader.onload = function () {\n              // Backwards-compatible prefix for the blob type.\n              var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n              callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n            };\n            fileReader.readAsArrayBuffer(value);\n          } else {\n            try {\n              callback(JSON.stringify(value));\n            } catch (e) {\n              console.error(\"Couldn't convert value into a JSON string: \", value);\n              callback(null, e);\n            }\n          }\n        }\n\n        // Deserialize data we've inserted into a value column/field. We place\n        // special markers into our strings to mark them as encoded; this isn't\n        // as nice as a meta field, but it's the only sane thing we can do whilst\n        // keeping localStorage support intact.\n        //\n        // Oftentimes this will just deserialize JSON content, but if we have a\n        // special marker (SERIALIZED_MARKER, defined above), we will extract\n        // some kind of arraybuffer/binary data/typed array out of the string.\n        function deserialize(value) {\n          // If we haven't marked this string as being specially serialized (i.e.\n          // something other than serialized JSON), we can just return it and be\n          // done with it.\n          if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n            return JSON.parse(value);\n          }\n\n          // The following code deals with deserializing some kind of Blob or\n          // TypedArray. First we separate out the type of data we're dealing\n          // with from the data itself.\n          var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n          var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n          var blobType;\n          // Backwards-compatible blob type serialization strategy.\n          // DBs created with older versions of localForage will simply not have the blob type.\n          if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n            var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n            blobType = matcher[1];\n            serializedString = serializedString.substring(matcher[0].length);\n          }\n          var buffer = stringToBuffer(serializedString);\n\n          // Return the right type based on the code/type set during\n          // serialization.\n          switch (type) {\n            case TYPE_ARRAYBUFFER:\n              return buffer;\n            case TYPE_BLOB:\n              return createBlob([buffer], {\n                type: blobType\n              });\n            case TYPE_INT8ARRAY:\n              return new Int8Array(buffer);\n            case TYPE_UINT8ARRAY:\n              return new Uint8Array(buffer);\n            case TYPE_UINT8CLAMPEDARRAY:\n              return new Uint8ClampedArray(buffer);\n            case TYPE_INT16ARRAY:\n              return new Int16Array(buffer);\n            case TYPE_UINT16ARRAY:\n              return new Uint16Array(buffer);\n            case TYPE_INT32ARRAY:\n              return new Int32Array(buffer);\n            case TYPE_UINT32ARRAY:\n              return new Uint32Array(buffer);\n            case TYPE_FLOAT32ARRAY:\n              return new Float32Array(buffer);\n            case TYPE_FLOAT64ARRAY:\n              return new Float64Array(buffer);\n            default:\n              throw new Error('Unkown type: ' + type);\n          }\n        }\n        var localforageSerializer = {\n          serialize: serialize,\n          deserialize: deserialize,\n          stringToBuffer: stringToBuffer,\n          bufferToString: bufferToString\n        };\n\n        /*\n         * Includes code from:\n         *\n         * base64-arraybuffer\n         * https://github.com/niklasvh/base64-arraybuffer\n         *\n         * Copyright (c) 2012 Niklas von Hertzen\n         * Licensed under the MIT license.\n         */\n\n        function createDbTable(t, dbInfo, callback, errorCallback) {\n          t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n        }\n\n        // Open the WebSQL database (automatically creates one if one didn't\n        // previously exist), using any options set in the config.\n        function _initStorage$1(options) {\n          var self = this;\n          var dbInfo = {\n            db: null\n          };\n          if (options) {\n            for (var i in options) {\n              dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n            }\n          }\n          var dbInfoPromise = new Promise$1(function (resolve, reject) {\n            // Open the database; the openDatabase API will automatically\n            // create it for us if it doesn't exist.\n            try {\n              dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n            } catch (e) {\n              return reject(e);\n            }\n\n            // Create our key/value table if it doesn't exist.\n            dbInfo.db.transaction(function (t) {\n              createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n              }, function (t, error) {\n                reject(error);\n              });\n            }, reject);\n          });\n          dbInfo.serializer = localforageSerializer;\n          return dbInfoPromise;\n        }\n        function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n          t.executeSql(sqlStatement, args, callback, function (t, error) {\n            if (error.code === error.SYNTAX_ERR) {\n              t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                  // if the table is missing (was deleted)\n                  // re-create it table and retry\n                  createDbTable(t, dbInfo, function () {\n                    t.executeSql(sqlStatement, args, callback, errorCallback);\n                  }, errorCallback);\n                } else {\n                  errorCallback(t, error);\n                }\n              }, errorCallback);\n            } else {\n              errorCallback(t, error);\n            }\n          }, errorCallback);\n        }\n        function getItem$1(key, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                  var result = results.rows.length ? results.rows.item(0).value : null;\n\n                  // Check to see if this is serialized content we need to\n                  // unpack.\n                  if (result) {\n                    result = dbInfo.serializer.deserialize(result);\n                  }\n                  resolve(result);\n                }, function (t, error) {\n                  reject(error);\n                });\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function iterate$1(iterator, callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                  var rows = results.rows;\n                  var length = rows.length;\n                  for (var i = 0; i < length; i++) {\n                    var item = rows.item(i);\n                    var result = item.value;\n\n                    // Check to see if this is serialized content\n                    // we need to unpack.\n                    if (result) {\n                      result = dbInfo.serializer.deserialize(result);\n                    }\n                    result = iterator(result, item.key, i + 1);\n\n                    // void(0) prevents problems with redefinition\n                    // of `undefined`.\n                    if (result !== void 0) {\n                      resolve(result);\n                      return;\n                    }\n                  }\n                  resolve();\n                }, function (t, error) {\n                  reject(error);\n                });\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function _setItem(key, value, callback, retriesLeft) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              // The localStorage API doesn't return undefined values in an\n              // \"expected\" way, so undefined is always cast to null in all\n              // drivers. See: https://github.com/mozilla/localForage/pull/42\n              if (value === undefined) {\n                value = null;\n              }\n\n              // Save the original value to pass to the callback.\n              var originalValue = value;\n              var dbInfo = self._dbInfo;\n              dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                  reject(error);\n                } else {\n                  dbInfo.db.transaction(function (t) {\n                    tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                      resolve(originalValue);\n                    }, function (t, error) {\n                      reject(error);\n                    });\n                  }, function (sqlError) {\n                    // The transaction failed; check\n                    // to see if it's a quota error.\n                    if (sqlError.code === sqlError.QUOTA_ERR) {\n                      // We reject the callback outright for now, but\n                      // it's worth trying to re-run the transaction.\n                      // Even if the user accepts the prompt to use\n                      // more storage on Safari, this error will\n                      // be called.\n                      //\n                      // Try to re-run the transaction.\n                      if (retriesLeft > 0) {\n                        resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                        return;\n                      }\n                      reject(sqlError);\n                    }\n                  });\n                }\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function setItem$1(key, value, callback) {\n          return _setItem.apply(this, [key, value, callback, 1]);\n        }\n        function removeItem$1(key, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                  resolve();\n                }, function (t, error) {\n                  reject(error);\n                });\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Deletes every item in the table.\n        // TODO: Find out if this resets the AUTO_INCREMENT number.\n        function clear$1(callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                  resolve();\n                }, function (t, error) {\n                  reject(error);\n                });\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Does a simple `COUNT(key)` to get the number of items stored in\n        // localForage.\n        function length$1(callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                  var result = results.rows.item(0).c;\n                  resolve(result);\n                }, function (t, error) {\n                  reject(error);\n                });\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Return the key located at key index X; essentially gets the key from a\n        // `WHERE id = ?`. This is the most efficient way I can think to implement\n        // this rarely-used (in my experience) part of the API, but it can seem\n        // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n        // the ID of each key will change every time it's updated. Perhaps a stored\n        // procedure for the `setItem()` SQL would solve this problem?\n        // TODO: Don't change ID on `setItem()`.\n        function key$1(n, callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                  var result = results.rows.length ? results.rows.item(0).key : null;\n                  resolve(result);\n                }, function (t, error) {\n                  reject(error);\n                });\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function keys$1(callback) {\n          var self = this;\n          var promise = new Promise$1(function (resolve, reject) {\n            self.ready().then(function () {\n              var dbInfo = self._dbInfo;\n              dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                  var keys = [];\n                  for (var i = 0; i < results.rows.length; i++) {\n                    keys.push(results.rows.item(i).key);\n                  }\n                  resolve(keys);\n                }, function (t, error) {\n                  reject(error);\n                });\n              });\n            })[\"catch\"](reject);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // https://www.w3.org/TR/webdatabase/#databases\n        // > There is no way to enumerate or delete the databases available for an origin from this API.\n        function getAllStoreNames(db) {\n          return new Promise$1(function (resolve, reject) {\n            db.transaction(function (t) {\n              t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n                for (var i = 0; i < results.rows.length; i++) {\n                  storeNames.push(results.rows.item(i).name);\n                }\n                resolve({\n                  db: db,\n                  storeNames: storeNames\n                });\n              }, function (t, error) {\n                reject(error);\n              });\n            }, function (sqlError) {\n              reject(sqlError);\n            });\n          });\n        }\n        function dropInstance$1(options, callback) {\n          callback = getCallback.apply(this, arguments);\n          var currentConfig = this.config();\n          options = typeof options !== 'function' && options || {};\n          if (!options.name) {\n            options.name = options.name || currentConfig.name;\n            options.storeName = options.storeName || currentConfig.storeName;\n          }\n          var self = this;\n          var promise;\n          if (!options.name) {\n            promise = Promise$1.reject('Invalid arguments');\n          } else {\n            promise = new Promise$1(function (resolve) {\n              var db;\n              if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n              } else {\n                db = openDatabase(options.name, '', '', 0);\n              }\n              if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n              } else {\n                resolve({\n                  db: db,\n                  storeNames: [options.storeName]\n                });\n              }\n            }).then(function (operationInfo) {\n              return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                  function dropTable(storeName) {\n                    return new Promise$1(function (resolve, reject) {\n                      t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                        resolve();\n                      }, function (t, error) {\n                        reject(error);\n                      });\n                    });\n                  }\n                  var operations = [];\n                  for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                    operations.push(dropTable(operationInfo.storeNames[i]));\n                  }\n                  Promise$1.all(operations).then(function () {\n                    resolve();\n                  })[\"catch\"](function (e) {\n                    reject(e);\n                  });\n                }, function (sqlError) {\n                  reject(sqlError);\n                });\n              });\n            });\n          }\n          executeCallback(promise, callback);\n          return promise;\n        }\n        var webSQLStorage = {\n          _driver: 'webSQLStorage',\n          _initStorage: _initStorage$1,\n          _support: isWebSQLValid(),\n          iterate: iterate$1,\n          getItem: getItem$1,\n          setItem: setItem$1,\n          removeItem: removeItem$1,\n          clear: clear$1,\n          length: length$1,\n          key: key$1,\n          keys: keys$1,\n          dropInstance: dropInstance$1\n        };\n        function isLocalStorageValid() {\n          try {\n            return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n            // in IE8 typeof localStorage.setItem === 'object'\n            !!localStorage.setItem;\n          } catch (e) {\n            return false;\n          }\n        }\n        function _getKeyPrefix(options, defaultConfig) {\n          var keyPrefix = options.name + '/';\n          if (options.storeName !== defaultConfig.storeName) {\n            keyPrefix += options.storeName + '/';\n          }\n          return keyPrefix;\n        }\n\n        // Check if localStorage throws when saving an item\n        function checkIfLocalStorageThrows() {\n          var localStorageTestKey = '_localforage_support_test';\n          try {\n            localStorage.setItem(localStorageTestKey, true);\n            localStorage.removeItem(localStorageTestKey);\n            return false;\n          } catch (e) {\n            return true;\n          }\n        }\n\n        // Check if localStorage is usable and allows to save an item\n        // This method checks if localStorage is usable in Safari Private Browsing\n        // mode, or in any other case where the available quota for localStorage\n        // is 0 and there wasn't any saved items yet.\n        function _isLocalStorageUsable() {\n          return !checkIfLocalStorageThrows() || localStorage.length > 0;\n        }\n\n        // Config the localStorage backend, using options set in the config.\n        function _initStorage$2(options) {\n          var self = this;\n          var dbInfo = {};\n          if (options) {\n            for (var i in options) {\n              dbInfo[i] = options[i];\n            }\n          }\n          dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n          if (!_isLocalStorageUsable()) {\n            return Promise$1.reject();\n          }\n          self._dbInfo = dbInfo;\n          dbInfo.serializer = localforageSerializer;\n          return Promise$1.resolve();\n        }\n\n        // Remove all keys from the datastore, effectively destroying all data in\n        // the app's key/value store!\n        function clear$2(callback) {\n          var self = this;\n          var promise = self.ready().then(function () {\n            var keyPrefix = self._dbInfo.keyPrefix;\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n              var key = localStorage.key(i);\n              if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n              }\n            }\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Retrieve an item from the store. Unlike the original async_storage\n        // library in Gaia, we don't modify return values at all. If a key's value\n        // is `undefined`, we pass that value to the callback function.\n        function getItem$2(key, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the key\n            // is likely undefined and we'll pass it straight to the\n            // callback.\n            if (result) {\n              result = dbInfo.serializer.deserialize(result);\n            }\n            return result;\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Iterate over all items in the store.\n        function iterate$2(iterator, callback) {\n          var self = this;\n          var promise = self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var keyPrefix = dbInfo.keyPrefix;\n            var keyPrefixLength = keyPrefix.length;\n            var length = localStorage.length;\n\n            // We use a dedicated iterator instead of the `i` variable below\n            // so other keys we fetch in localStorage aren't counted in\n            // the `iterationNumber` argument passed to the `iterate()`\n            // callback.\n            //\n            // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n            var iterationNumber = 1;\n            for (var i = 0; i < length; i++) {\n              var key = localStorage.key(i);\n              if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n              }\n              var value = localStorage.getItem(key);\n\n              // If a result was found, parse it from the serialized\n              // string into a JS object. If result isn't truthy, the\n              // key is likely undefined and we'll pass it straight\n              // to the iterator.\n              if (value) {\n                value = dbInfo.serializer.deserialize(value);\n              }\n              value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n              if (value !== void 0) {\n                return value;\n              }\n            }\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Same as localStorage's key() method, except takes a callback.\n        function key$2(n, callback) {\n          var self = this;\n          var promise = self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var result;\n            try {\n              result = localStorage.key(n);\n            } catch (error) {\n              result = null;\n            }\n\n            // Remove the prefix from the key, if a key is found.\n            if (result) {\n              result = result.substring(dbInfo.keyPrefix.length);\n            }\n            return result;\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function keys$2(callback) {\n          var self = this;\n          var promise = self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var length = localStorage.length;\n            var keys = [];\n            for (var i = 0; i < length; i++) {\n              var itemKey = localStorage.key(i);\n              if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n              }\n            }\n            return keys;\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Supply the number of keys in the datastore to the callback function.\n        function length$2(callback) {\n          var self = this;\n          var promise = self.keys().then(function (keys) {\n            return keys.length;\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Remove an item from the store, nice and simple.\n        function removeItem$2(key, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            localStorage.removeItem(dbInfo.keyPrefix + key);\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n\n        // Set a key's value and run an optional callback once the value is set.\n        // Unlike Gaia's implementation, the callback function is passed the value,\n        // in case you want to operate on that value only after you're sure it\n        // saved, or something like that.\n        function setItem$2(key, value, callback) {\n          var self = this;\n          key = normalizeKey(key);\n          var promise = self.ready().then(function () {\n            // Convert undefined values to null.\n            // https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n              value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n            return new Promise$1(function (resolve, reject) {\n              var dbInfo = self._dbInfo;\n              dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                  reject(error);\n                } else {\n                  try {\n                    localStorage.setItem(dbInfo.keyPrefix + key, value);\n                    resolve(originalValue);\n                  } catch (e) {\n                    // localStorage capacity exceeded.\n                    // TODO: Make this a specific error/event.\n                    if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                      reject(e);\n                    }\n                    reject(e);\n                  }\n                }\n              });\n            });\n          });\n          executeCallback(promise, callback);\n          return promise;\n        }\n        function dropInstance$2(options, callback) {\n          callback = getCallback.apply(this, arguments);\n          options = typeof options !== 'function' && options || {};\n          if (!options.name) {\n            var currentConfig = this.config();\n            options.name = options.name || currentConfig.name;\n            options.storeName = options.storeName || currentConfig.storeName;\n          }\n          var self = this;\n          var promise;\n          if (!options.name) {\n            promise = Promise$1.reject('Invalid arguments');\n          } else {\n            promise = new Promise$1(function (resolve) {\n              if (!options.storeName) {\n                resolve(options.name + '/');\n              } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n              }\n            }).then(function (keyPrefix) {\n              for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n                if (key.indexOf(keyPrefix) === 0) {\n                  localStorage.removeItem(key);\n                }\n              }\n            });\n          }\n          executeCallback(promise, callback);\n          return promise;\n        }\n        var localStorageWrapper = {\n          _driver: 'localStorageWrapper',\n          _initStorage: _initStorage$2,\n          _support: isLocalStorageValid(),\n          iterate: iterate$2,\n          getItem: getItem$2,\n          setItem: setItem$2,\n          removeItem: removeItem$2,\n          clear: clear$2,\n          length: length$2,\n          key: key$2,\n          keys: keys$2,\n          dropInstance: dropInstance$2\n        };\n        var sameValue = function sameValue(x, y) {\n          return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n        };\n        var includes = function includes(array, searchElement) {\n          var len = array.length;\n          var i = 0;\n          while (i < len) {\n            if (sameValue(array[i], searchElement)) {\n              return true;\n            }\n            i++;\n          }\n          return false;\n        };\n        var isArray = Array.isArray || function (arg) {\n          return Object.prototype.toString.call(arg) === '[object Array]';\n        };\n\n        // Drivers are stored here when `defineDriver()` is called.\n        // They are shared across all instances of localForage.\n        var DefinedDrivers = {};\n        var DriverSupport = {};\n        var DefaultDrivers = {\n          INDEXEDDB: asyncStorage,\n          WEBSQL: webSQLStorage,\n          LOCALSTORAGE: localStorageWrapper\n        };\n        var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n        var OptionalDriverMethods = ['dropInstance'];\n        var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n        var DefaultConfig = {\n          description: '',\n          driver: DefaultDriverOrder.slice(),\n          name: 'localforage',\n          // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n          // we can use without a prompt.\n          size: 4980736,\n          storeName: 'keyvaluepairs',\n          version: 1.0\n        };\n        function callWhenReady(localForageInstance, libraryMethod) {\n          localForageInstance[libraryMethod] = function () {\n            var _args = arguments;\n            return localForageInstance.ready().then(function () {\n              return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n            });\n          };\n        }\n        function extend() {\n          for (var i = 1; i < arguments.length; i++) {\n            var arg = arguments[i];\n            if (arg) {\n              for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                  if (isArray(arg[_key])) {\n                    arguments[0][_key] = arg[_key].slice();\n                  } else {\n                    arguments[0][_key] = arg[_key];\n                  }\n                }\n              }\n            }\n          }\n          return arguments[0];\n        }\n        var LocalForage = function () {\n          function LocalForage(options) {\n            _classCallCheck(this, LocalForage);\n            for (var driverTypeKey in DefaultDrivers) {\n              if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n                if (!DefinedDrivers[driverName]) {\n                  // we don't need to wait for the promise,\n                  // since the default drivers can be defined\n                  // in a blocking manner\n                  this.defineDriver(driver);\n                }\n              }\n            }\n            this._defaultConfig = extend({}, DefaultConfig);\n            this._config = extend({}, this._defaultConfig, options);\n            this._driverSet = null;\n            this._initDriver = null;\n            this._ready = false;\n            this._dbInfo = null;\n            this._wrapLibraryMethodsWithReady();\n            this.setDriver(this._config.driver)[\"catch\"](function () {});\n          }\n\n          // Set any config values for localForage; can be called anytime before\n          // the first API call (e.g. `getItem`, `setItem`).\n          // We loop through options so we don't overwrite existing config\n          // values.\n\n          LocalForage.prototype.config = function config(options) {\n            // If the options argument is an object, we use it to set values.\n            // Otherwise, we return either a specified config value or all\n            // config values.\n            if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n              // If localforage is ready and fully initialized, we can't set\n              // any new configuration values. Instead, we return an error.\n              if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n              }\n              for (var i in options) {\n                if (i === 'storeName') {\n                  options[i] = options[i].replace(/\\W/g, '_');\n                }\n                if (i === 'version' && typeof options[i] !== 'number') {\n                  return new Error('Database version must be a number.');\n                }\n                this._config[i] = options[i];\n              }\n\n              // after all config options are set and\n              // the driver option is used, try setting it\n              if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n              }\n              return true;\n            } else if (typeof options === 'string') {\n              return this._config[options];\n            } else {\n              return this._config;\n            }\n          };\n\n          // Used to define a custom driver, shared across all instances of\n          // localForage.\n\n          LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n            var promise = new Promise$1(function (resolve, reject) {\n              try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                  reject(complianceError);\n                  return;\n                }\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                  var driverMethodName = driverMethods[i];\n\n                  // when the property is there,\n                  // it should be a method even when optional\n                  var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                  if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                    reject(complianceError);\n                    return;\n                  }\n                }\n                var configureMissingMethods = function configureMissingMethods() {\n                  var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                    return function () {\n                      var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                      var promise = Promise$1.reject(error);\n                      executeCallback(promise, arguments[arguments.length - 1]);\n                      return promise;\n                    };\n                  };\n                  for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                    var optionalDriverMethod = OptionalDriverMethods[_i];\n                    if (!driverObject[optionalDriverMethod]) {\n                      driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                    }\n                  }\n                };\n                configureMissingMethods();\n                var setDriverSupport = function setDriverSupport(support) {\n                  if (DefinedDrivers[driverName]) {\n                    console.info('Redefining LocalForage driver: ' + driverName);\n                  }\n                  DefinedDrivers[driverName] = driverObject;\n                  DriverSupport[driverName] = support;\n                  // don't use a then, so that we can define\n                  // drivers that have simple _support methods\n                  // in a blocking manner\n                  resolve();\n                };\n                if ('_support' in driverObject) {\n                  if (driverObject._support && typeof driverObject._support === 'function') {\n                    driverObject._support().then(setDriverSupport, reject);\n                  } else {\n                    setDriverSupport(!!driverObject._support);\n                  }\n                } else {\n                  setDriverSupport(true);\n                }\n              } catch (e) {\n                reject(e);\n              }\n            });\n            executeTwoCallbacks(promise, callback, errorCallback);\n            return promise;\n          };\n          LocalForage.prototype.driver = function driver() {\n            return this._driver || null;\n          };\n          LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n            var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n            executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n            return getDriverPromise;\n          };\n          LocalForage.prototype.getSerializer = function getSerializer(callback) {\n            var serializerPromise = Promise$1.resolve(localforageSerializer);\n            executeTwoCallbacks(serializerPromise, callback);\n            return serializerPromise;\n          };\n          LocalForage.prototype.ready = function ready(callback) {\n            var self = this;\n            var promise = self._driverSet.then(function () {\n              if (self._ready === null) {\n                self._ready = self._initDriver();\n              }\n              return self._ready;\n            });\n            executeTwoCallbacks(promise, callback, callback);\n            return promise;\n          };\n          LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n            var self = this;\n            if (!isArray(drivers)) {\n              drivers = [drivers];\n            }\n            var supportedDrivers = this._getSupportedDrivers(drivers);\n            function setDriverToConfig() {\n              self._config.driver = self.driver();\n            }\n            function extendSelfWithDriver(driver) {\n              self._extend(driver);\n              setDriverToConfig();\n              self._ready = self._initStorage(self._config);\n              return self._ready;\n            }\n            function initDriver(supportedDrivers) {\n              return function () {\n                var currentDriverIndex = 0;\n                function driverPromiseLoop() {\n                  while (currentDriverIndex < supportedDrivers.length) {\n                    var driverName = supportedDrivers[currentDriverIndex];\n                    currentDriverIndex++;\n                    self._dbInfo = null;\n                    self._ready = null;\n                    return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                  }\n                  setDriverToConfig();\n                  var error = new Error('No available storage method found.');\n                  self._driverSet = Promise$1.reject(error);\n                  return self._driverSet;\n                }\n                return driverPromiseLoop();\n              };\n            }\n\n            // There might be a driver initialization in progress\n            // so wait for it to finish in order to avoid a possible\n            // race condition to set _dbInfo\n            var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n              return Promise$1.resolve();\n            }) : Promise$1.resolve();\n            this._driverSet = oldDriverSetDone.then(function () {\n              var driverName = supportedDrivers[0];\n              self._dbInfo = null;\n              self._ready = null;\n              return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n              });\n            })[\"catch\"](function () {\n              setDriverToConfig();\n              var error = new Error('No available storage method found.');\n              self._driverSet = Promise$1.reject(error);\n              return self._driverSet;\n            });\n            executeTwoCallbacks(this._driverSet, callback, errorCallback);\n            return this._driverSet;\n          };\n          LocalForage.prototype.supports = function supports(driverName) {\n            return !!DriverSupport[driverName];\n          };\n          LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n            extend(this, libraryMethodsAndProperties);\n          };\n          LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n            var supportedDrivers = [];\n            for (var i = 0, len = drivers.length; i < len; i++) {\n              var driverName = drivers[i];\n              if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n              }\n            }\n            return supportedDrivers;\n          };\n          LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n            // Add a stub for each driver API method that delays the call to the\n            // corresponding driver method until localForage is ready. These stubs\n            // will be replaced by the driver methods as soon as the driver is\n            // loaded, so there is no performance impact.\n            for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n              callWhenReady(this, LibraryMethods[i]);\n            }\n          };\n          LocalForage.prototype.createInstance = function createInstance(options) {\n            return new LocalForage(options);\n          };\n          return LocalForage;\n        }();\n\n        // The actual localForage object that we expose as a module or via a\n        // global. It's extended by pulling in one of our other libraries.\n\n        var localforage_js = new LocalForage();\n        module.exports = localforage_js;\n      }, {\n        \"3\": 3\n      }]\n    }, {}, [4])(4);\n  });\n});","lineCount":2553,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,2,7,0],[8,3,7,1],[8,13,7,10,"f"],[8,14,7,11],[8,16,7,12],[9,4,7,13],[9,8,7,16],[9,15,7,23,"exports"],[9,22,7,30],[9,27,7,33],[9,35,7,41],[9,39,7,43],[9,46,7,50,"module"],[9,52,7,56],[9,57,7,59],[9,68,7,70],[9,70,7,71],[10,6,7,72,"module"],[10,12,7,78],[10,13,7,79,"exports"],[10,20,7,86],[10,23,7,87,"f"],[10,24,7,88],[10,25,7,89],[10,26,7,90],[11,4,7,90],[11,5,7,91],[11,11,7,96],[11,15,7,99],[11,22,7,106,"define"],[11,28,7,112],[11,33,7,115],[11,43,7,125],[11,47,7,127,"define"],[11,53,7,133],[11,54,7,134,"amd"],[11,57,7,137],[11,59,7,138],[12,6,7,139,"define"],[12,12,7,145],[12,13,7,146],[12,15,7,148],[12,17,7,149,"f"],[12,18,7,150],[12,19,7,151],[13,4,7,151],[13,5,7,152],[13,11,7,156],[14,6,7,157],[14,10,7,161,"g"],[14,11,7,162],[15,6,7,163],[15,10,7,166],[15,17,7,173,"window"],[15,23,7,179],[15,28,7,182],[15,39,7,193],[15,41,7,194],[16,8,7,195,"g"],[16,9,7,196],[16,12,7,197,"window"],[16,18,7,203],[17,6,7,203],[17,7,7,204],[17,13,7,209],[17,17,7,212],[17,24,7,219,"global"],[17,30,7,225],[17,35,7,228],[17,46,7,239],[17,48,7,240],[18,8,7,241,"g"],[18,9,7,242],[18,12,7,243,"global"],[18,18,7,249],[19,6,7,249],[19,7,7,250],[19,13,7,255],[19,17,7,258],[19,24,7,265,"self"],[19,28,7,269],[19,33,7,272],[19,44,7,283],[19,46,7,284],[20,8,7,285,"g"],[20,9,7,286],[20,12,7,287,"self"],[20,16,7,291],[21,6,7,291],[21,7,7,292],[21,13,7,296],[22,8,7,297,"g"],[22,9,7,298],[22,12,7,299],[22,16,7,303],[23,6,7,303],[24,6,7,304,"g"],[24,7,7,305],[24,8,7,306,"localforage"],[24,19,7,317],[24,22,7,320,"f"],[24,23,7,321],[24,24,7,322],[24,25,7,323],[25,4,7,323],[26,2,7,324],[26,3,7,325],[26,5,7,327],[26,17,7,337],[27,4,7,338],[27,8,7,342,"define"],[27,14,7,348],[27,16,7,349,"module"],[27,22,7,355],[27,24,7,356,"exports"],[27,31,7,363],[28,4,7,364],[28,11,7,372],[28,20,7,381,"e"],[28,21,7,382,"e"],[28,22,7,383,"t"],[28,23,7,384],[28,25,7,385,"n"],[28,26,7,386],[28,28,7,387,"r"],[28,29,7,388],[28,31,7,389],[29,6,7,390],[29,15,7,399,"s"],[29,16,7,400,"s"],[29,17,7,401,"o"],[29,18,7,402],[29,20,7,403,"u"],[29,21,7,404],[29,23,7,405],[30,8,7,406],[30,12,7,409],[30,13,7,410,"n"],[30,14,7,411],[30,15,7,412,"o"],[30,16,7,413],[30,17,7,414],[30,19,7,415],[31,10,7,416],[31,14,7,419],[31,15,7,420,"t"],[31,16,7,421],[31,17,7,422,"o"],[31,18,7,423],[31,19,7,424],[31,21,7,425],[32,12,7,426],[32,16,7,430,"a"],[32,17,7,431],[32,20,7,432],[32,27,7,439,"require"],[32,34,7,446],[32,38,7,448],[32,48,7,458],[32,52,7,460,"require"],[32,59,7,467],[33,12,7,468],[33,16,7,471],[33,17,7,472,"u"],[33,18,7,473],[33,22,7,475,"a"],[33,23,7,476],[33,25,7,477],[33,32,7,484,"a"],[33,33,7,485],[33,34,7,486,"o"],[33,35,7,487],[33,37,7,488],[33,38,7,489],[33,39,7,490],[33,40,7,491],[34,12,7,492],[34,16,7,495,"i"],[34,17,7,496],[34,19,7,497],[34,26,7,504,"i"],[34,27,7,505],[34,28,7,506,"o"],[34,29,7,507],[34,31,7,508],[34,32,7,509],[34,33,7,510],[34,34,7,511],[35,12,7,512],[35,16,7,516,"f"],[35,17,7,517],[35,20,7,518],[35,24,7,522,"Error"],[35,29,7,527],[35,30,7,528],[35,52,7,550],[35,55,7,551,"o"],[35,56,7,552],[35,59,7,553],[35,62,7,556],[35,63,7,557],[36,12,7,558],[36,18,7,565,"f"],[36,19,7,566],[36,20,7,567,"code"],[36,24,7,571],[36,27,7,572],[36,45,7,590],[36,47,7,592,"f"],[36,48,7,593],[37,10,7,594],[38,10,7,595],[38,14,7,599,"l"],[38,15,7,600],[38,18,7,601,"n"],[38,19,7,602],[38,20,7,603,"o"],[38,21,7,604],[38,22,7,605],[38,25,7,606],[39,12,7,607,"exports"],[39,19,7,614],[39,21,7,615],[39,22,7,616],[40,10,7,617],[40,11,7,618],[41,10,7,619,"t"],[41,11,7,620],[41,12,7,621,"o"],[41,13,7,622],[41,14,7,623],[41,15,7,624],[41,16,7,625],[41,17,7,626],[41,18,7,627,"call"],[41,22,7,631],[41,23,7,632,"l"],[41,24,7,633],[41,25,7,634,"exports"],[41,32,7,641],[41,34,7,642],[41,44,7,651,"e"],[41,45,7,652],[41,47,7,653],[42,12,7,654],[42,16,7,658,"n"],[42,17,7,659],[42,20,7,660,"t"],[42,21,7,661],[42,22,7,662,"o"],[42,23,7,663],[42,24,7,664],[42,25,7,665],[42,26,7,666],[42,27,7,667],[42,28,7,668,"e"],[42,29,7,669],[42,30,7,670],[43,12,7,671],[43,19,7,678,"s"],[43,20,7,679],[43,21,7,680,"n"],[43,22,7,681],[43,25,7,682,"n"],[43,26,7,683],[43,29,7,684,"e"],[43,30,7,685],[43,31,7,686],[44,10,7,686],[44,11,7,687],[44,13,7,688,"l"],[44,14,7,689],[44,16,7,690,"l"],[44,17,7,691],[44,18,7,692,"exports"],[44,25,7,699],[44,27,7,700,"e"],[44,28,7,701],[44,30,7,702,"t"],[44,31,7,703],[44,33,7,704,"n"],[44,34,7,705],[44,36,7,706,"r"],[44,37,7,707],[44,38,7,708],[45,8,7,708],[46,8,7,709],[46,15,7,716,"n"],[46,16,7,717],[46,17,7,718,"o"],[46,18,7,719],[46,19,7,720],[46,20,7,721,"exports"],[46,27,7,728],[47,6,7,728],[48,6,7,729],[48,10,7,733,"i"],[48,11,7,734],[48,14,7,735],[48,21,7,742,"require"],[48,28,7,749],[48,32,7,751],[48,42,7,761],[48,46,7,763,"require"],[48,53,7,770],[49,6,7,771],[49,11,7,775],[49,15,7,779,"o"],[49,16,7,780],[49,19,7,781],[49,20,7,782],[49,22,7,783,"o"],[49,23,7,784],[49,26,7,785,"r"],[49,27,7,786],[49,28,7,787,"length"],[49,34,7,793],[49,36,7,794,"o"],[49,37,7,795],[49,39,7,797],[49,41,7,798,"s"],[49,42,7,799],[49,43,7,800,"r"],[49,44,7,801],[49,45,7,802,"o"],[49,46,7,803],[49,47,7,804],[49,48,7,805],[50,6,7,806],[50,13,7,813,"s"],[50,14,7,814],[51,4,7,814],[51,5,7,815],[51,6,7,817],[52,6,7,818],[52,7,7,819],[52,9,7,820],[52,10,7,821],[52,20,7,830,"_dereq_"],[52,27,7,837],[52,29,7,838,"module"],[52,35,7,844],[52,37,7,845,"exports"],[52,44,7,852],[52,46,7,853],[53,8,8,0],[53,9,8,1],[53,19,8,11,"global"],[53,25,8,17],[53,27,8,18],[54,10,9,0],[54,22,9,12],[56,10,10,0],[56,14,10,4,"Mutation"],[56,22,10,12],[56,25,10,15,"global"],[56,31,10,21],[56,32,10,22,"MutationObserver"],[56,48,10,38],[56,52,10,42,"global"],[56,58,10,48],[56,59,10,49,"WebKitMutationObserver"],[56,81,10,71],[57,10,12,0],[57,14,12,4,"scheduleDrain"],[57,27,12,17],[58,10,14,0],[59,12,15,2],[59,16,15,6,"Mutation"],[59,24,15,14],[59,26,15,16],[60,14,16,4],[60,18,16,8,"called"],[60,24,16,14],[60,27,16,17],[60,28,16,18],[61,14,17,4],[61,18,17,8,"observer"],[61,26,17,16],[61,29,17,19],[61,33,17,23,"Mutation"],[61,41,17,31],[61,42,17,32,"nextTick"],[61,50,17,40],[61,51,17,41],[62,14,18,4],[62,18,18,8,"element"],[62,25,18,15],[62,28,18,18,"global"],[62,34,18,24],[62,35,18,25,"document"],[62,43,18,33],[62,44,18,34,"createTextNode"],[62,58,18,48],[62,59,18,49],[62,61,18,51],[62,62,18,52],[63,14,19,4,"observer"],[63,22,19,12],[63,23,19,13,"observe"],[63,30,19,20],[63,31,19,21,"element"],[63,38,19,28],[63,40,19,30],[64,16,20,6,"characterData"],[64,29,20,19],[64,31,20,21],[65,14,21,4],[65,15,21,5],[65,16,21,6],[66,14,22,4,"scheduleDrain"],[66,27,22,17],[66,30,22,20],[66,39,22,20,"scheduleDrain"],[66,40,22,20],[66,42,22,32],[67,16,23,6,"element"],[67,23,23,13],[67,24,23,14,"data"],[67,28,23,18],[67,31,23,22,"called"],[67,37,23,28],[67,40,23,31],[67,42,23,33,"called"],[67,48,23,39],[67,51,23,42],[67,52,23,44],[68,14,24,4],[68,15,24,5],[69,12,25,2],[69,13,25,3],[69,19,25,9],[69,23,25,13],[69,24,25,14,"global"],[69,30,25,20],[69,31,25,21,"setImmediate"],[69,43,25,33],[69,47,25,37],[69,54,25,44,"global"],[69,60,25,50],[69,61,25,51,"MessageChannel"],[69,75,25,65],[69,80,25,70],[69,91,25,81],[69,93,25,83],[70,14,26,4],[70,18,26,8,"channel"],[70,25,26,15],[70,28,26,18],[70,32,26,22,"global"],[70,38,26,28],[70,39,26,29,"MessageChannel"],[70,53,26,43],[70,54,26,44],[70,55,26,45],[71,14,27,4,"channel"],[71,21,27,11],[71,22,27,12,"port1"],[71,27,27,17],[71,28,27,18,"onmessage"],[71,37,27,27],[71,40,27,30,"nextTick"],[71,48,27,38],[72,14,28,4,"scheduleDrain"],[72,27,28,17],[72,30,28,20],[72,39,28,20,"scheduleDrain"],[72,40,28,20],[72,42,28,32],[73,16,29,6,"channel"],[73,23,29,13],[73,24,29,14,"port2"],[73,29,29,19],[73,30,29,20,"postMessage"],[73,41,29,31],[73,42,29,32],[73,43,29,33],[73,44,29,34],[74,14,30,4],[74,15,30,5],[75,12,31,2],[75,13,31,3],[75,19,31,9],[75,23,31,13],[75,33,31,23],[75,37,31,27,"global"],[75,43,31,33],[75,47,31,37],[75,67,31,57],[75,71,31,61,"global"],[75,77,31,67],[75,78,31,68,"document"],[75,86,31,76],[75,87,31,77,"createElement"],[75,100,31,90],[75,101,31,91],[75,109,31,99],[75,110,31,100],[75,112,31,102],[76,14,32,4,"scheduleDrain"],[76,27,32,17],[76,30,32,20],[76,39,32,20,"scheduleDrain"],[76,40,32,20],[76,42,32,32],[77,16,34,6],[78,16,35,6],[79,16,36,6],[79,20,36,10,"scriptEl"],[79,28,36,18],[79,31,36,21,"global"],[79,37,36,27],[79,38,36,28,"document"],[79,46,36,36],[79,47,36,37,"createElement"],[79,60,36,50],[79,61,36,51],[79,69,36,59],[79,70,36,60],[80,16,37,6,"scriptEl"],[80,24,37,14],[80,25,37,15,"onreadystatechange"],[80,43,37,33],[80,46,37,36],[80,58,37,48],[81,18,38,8,"nextTick"],[81,26,38,16],[81,27,38,17],[81,28,38,18],[82,18,40,8,"scriptEl"],[82,26,40,16],[82,27,40,17,"onreadystatechange"],[82,45,40,35],[82,48,40,38],[82,52,40,42],[83,18,41,8,"scriptEl"],[83,26,41,16],[83,27,41,17,"parentNode"],[83,37,41,27],[83,38,41,28,"removeChild"],[83,49,41,39],[83,50,41,40,"scriptEl"],[83,58,41,48],[83,59,41,49],[84,18,42,8,"scriptEl"],[84,26,42,16],[84,29,42,19],[84,33,42,23],[85,16,43,6],[85,17,43,7],[86,16,44,6,"global"],[86,22,44,12],[86,23,44,13,"document"],[86,31,44,21],[86,32,44,22,"documentElement"],[86,47,44,37],[86,48,44,38,"appendChild"],[86,59,44,49],[86,60,44,50,"scriptEl"],[86,68,44,58],[86,69,44,59],[87,14,45,4],[87,15,45,5],[88,12,46,2],[88,13,46,3],[88,19,46,9],[89,14,47,4,"scheduleDrain"],[89,27,47,17],[89,30,47,20],[89,39,47,20,"scheduleDrain"],[89,40,47,20],[89,42,47,32],[90,16,48,6,"setTimeout"],[90,26,48,16],[90,27,48,17,"nextTick"],[90,35,48,25],[90,37,48,27],[90,38,48,28],[90,39,48,29],[91,14,49,4],[91,15,49,5],[92,12,50,2],[93,10,51,0],[94,10,53,0],[94,14,53,4,"draining"],[94,22,53,12],[95,10,54,0],[95,14,54,4,"queue"],[95,19,54,9],[95,22,54,12],[95,24,54,14],[96,10,55,0],[97,10,56,0],[97,19,56,9,"nextTick"],[97,27,56,17,"nextTick"],[97,28,56,17],[97,30,56,20],[98,12,57,2,"draining"],[98,20,57,10],[98,23,57,13],[98,27,57,17],[99,12,58,2],[99,16,58,6,"i"],[99,17,58,7],[99,19,58,9,"oldQueue"],[99,27,58,17],[100,12,59,2],[100,16,59,6,"len"],[100,19,59,9],[100,22,59,12,"queue"],[100,27,59,17],[100,28,59,18,"length"],[100,34,59,24],[101,12,60,2],[101,19,60,9,"len"],[101,22,60,12],[101,24,60,14],[102,14,61,4,"oldQueue"],[102,22,61,12],[102,25,61,15,"queue"],[102,30,61,20],[103,14,62,4,"queue"],[103,19,62,9],[103,22,62,12],[103,24,62,14],[104,14,63,4,"i"],[104,15,63,5],[104,18,63,8],[104,19,63,9],[104,20,63,10],[105,14,64,4],[105,21,64,11],[105,23,64,13,"i"],[105,24,64,14],[105,27,64,17,"len"],[105,30,64,20],[105,32,64,22],[106,16,65,6,"oldQueue"],[106,24,65,14],[106,25,65,15,"i"],[106,26,65,16],[106,27,65,17],[106,28,65,18],[106,29,65,19],[107,14,66,4],[108,14,67,4,"len"],[108,17,67,7],[108,20,67,10,"queue"],[108,25,67,15],[108,26,67,16,"length"],[108,32,67,22],[109,12,68,2],[110,12,69,2,"draining"],[110,20,69,10],[110,23,69,13],[110,28,69,18],[111,10,70,0],[112,10,72,0,"module"],[112,16,72,6],[112,17,72,7,"exports"],[112,24,72,14],[112,27,72,17,"immediate"],[112,36,72,26],[113,10,73,0],[113,19,73,9,"immediate"],[113,28,73,18,"immediate"],[113,29,73,19,"task"],[113,33,73,23],[113,35,73,25],[114,12,74,2],[114,16,74,6,"queue"],[114,21,74,11],[114,22,74,12,"push"],[114,26,74,16],[114,27,74,17,"task"],[114,31,74,21],[114,32,74,22],[114,37,74,27],[114,38,74,28],[114,42,74,32],[114,43,74,33,"draining"],[114,51,74,41],[114,53,74,43],[115,14,75,4,"scheduleDrain"],[115,27,75,17],[115,28,75,18],[115,29,75,19],[116,12,76,2],[117,10,77,0],[118,8,79,0],[118,9,79,1],[118,11,79,3,"call"],[118,15,79,7],[118,16,79,8],[118,20,79,12],[118,22,79,13],[118,29,79,20,"global"],[118,35,79,26],[118,40,79,31],[118,51,79,42],[118,54,79,45,"global"],[118,60,79,51],[118,63,79,54],[118,70,79,61,"self"],[118,74,79,65],[118,79,79,70],[118,90,79,81],[118,93,79,84,"self"],[118,97,79,88],[118,100,79,91],[118,107,79,98,"window"],[118,113,79,104],[118,118,79,109],[118,129,79,120],[118,132,79,123,"window"],[118,138,79,129],[118,141,79,132],[118,142,79,133],[118,143,79,134],[118,144,79,135],[119,6,80,0],[119,7,80,1],[119,9,80,2],[119,10,80,3],[119,11,80,4],[119,12,80,5],[120,6,80,6],[120,7,80,7],[120,9,80,8],[120,10,80,9],[120,20,80,18,"_dereq_"],[120,27,80,25],[120,29,80,26,"module"],[120,35,80,32],[120,37,80,33,"exports"],[120,44,80,40],[120,46,80,41],[121,8,81,0],[121,20,81,12],[123,8,82,0],[123,12,82,4,"immediate"],[123,21,82,13],[123,24,82,16,"_dereq_"],[123,31,82,23],[123,32,82,24],[123,33,82,25],[123,34,82,26],[125,8,84,0],[126,8,85,0],[126,17,85,9,"INTERNAL"],[126,25,85,17,"INTERNAL"],[126,26,85,17],[126,28,85,20],[126,29,85,21],[127,8,87,0],[127,12,87,4,"handlers"],[127,20,87,12],[127,23,87,15],[127,24,87,16],[127,25,87,17],[128,8,89,0],[128,12,89,4,"REJECTED"],[128,20,89,12],[128,23,89,15],[128,24,89,16],[128,34,89,26],[128,35,89,27],[129,8,90,0],[129,12,90,4,"FULFILLED"],[129,21,90,13],[129,24,90,16],[129,25,90,17],[129,36,90,28],[129,37,90,29],[130,8,91,0],[130,12,91,4,"PENDING"],[130,19,91,11],[130,22,91,14],[130,23,91,15],[130,32,91,24],[130,33,91,25],[131,8,93,0,"module"],[131,14,93,6],[131,15,93,7,"exports"],[131,22,93,14],[131,25,93,17,"Promise"],[131,32,93,24],[132,8,95,0],[132,17,95,9,"Promise"],[132,24,95,16,"Promise"],[132,25,95,17,"resolver"],[132,33,95,25],[132,35,95,27],[133,10,96,2],[133,14,96,6],[133,21,96,13,"resolver"],[133,29,96,21],[133,34,96,26],[133,44,96,36],[133,46,96,38],[134,12,97,4],[134,18,97,10],[134,22,97,14,"TypeError"],[134,31,97,23],[134,32,97,24],[134,61,97,53],[134,62,97,54],[135,10,98,2],[136,10,99,2],[136,14,99,6],[136,15,99,7,"state"],[136,20,99,12],[136,23,99,15,"PENDING"],[136,30,99,22],[137,10,100,2],[137,14,100,6],[137,15,100,7,"queue"],[137,20,100,12],[137,23,100,15],[137,25,100,17],[138,10,101,2],[138,14,101,6],[138,15,101,7,"outcome"],[138,22,101,14],[138,25,101,17],[138,30,101,22],[138,31,101,23],[139,10,102,2],[139,14,102,6,"resolver"],[139,22,102,14],[139,27,102,19,"INTERNAL"],[139,35,102,27],[139,37,102,29],[140,12,103,4,"safelyResolveThenable"],[140,33,103,25],[140,34,103,26],[140,38,103,30],[140,40,103,32,"resolver"],[140,48,103,40],[140,49,103,41],[141,10,104,2],[142,8,105,0],[143,8,107,0,"Promise"],[143,15,107,7],[143,16,107,8,"prototype"],[143,25,107,17],[143,26,107,18],[143,33,107,25],[143,34,107,26],[143,37,107,29],[143,47,107,39,"onRejected"],[143,57,107,49],[143,59,107,51],[144,10,108,2],[144,17,108,9],[144,21,108,13],[144,22,108,14,"then"],[144,26,108,18],[144,27,108,19],[144,31,108,23],[144,33,108,25,"onRejected"],[144,43,108,35],[144,44,108,36],[145,8,109,0],[145,9,109,1],[146,8,110,0,"Promise"],[146,15,110,7],[146,16,110,8,"prototype"],[146,25,110,17],[146,26,110,18,"then"],[146,30,110,22],[146,33,110,25],[146,43,110,35,"onFulfilled"],[146,54,110,46],[146,56,110,48,"onRejected"],[146,66,110,58],[146,68,110,60],[147,10,111,2],[147,14,111,6],[147,21,111,13,"onFulfilled"],[147,32,111,24],[147,37,111,29],[147,47,111,39],[147,51,111,43],[147,55,111,47],[147,56,111,48,"state"],[147,61,111,53],[147,66,111,58,"FULFILLED"],[147,75,111,67],[147,79,112,4],[147,86,112,11,"onRejected"],[147,96,112,21],[147,101,112,26],[147,111,112,36],[147,115,112,40],[147,119,112,44],[147,120,112,45,"state"],[147,125,112,50],[147,130,112,55,"REJECTED"],[147,138,112,63],[147,140,112,65],[148,12,113,4],[148,19,113,11],[148,23,113,15],[149,10,114,2],[150,10,115,2],[150,14,115,6,"promise"],[150,21,115,13],[150,24,115,16],[150,28,115,20],[150,32,115,24],[150,33,115,25,"constructor"],[150,44,115,36],[150,45,115,37,"INTERNAL"],[150,53,115,45],[150,54,115,46],[151,10,116,2],[151,14,116,6],[151,18,116,10],[151,19,116,11,"state"],[151,24,116,16],[151,29,116,21,"PENDING"],[151,36,116,28],[151,38,116,30],[152,12,117,4],[152,16,117,8,"resolver"],[152,24,117,16],[152,27,117,19],[152,31,117,23],[152,32,117,24,"state"],[152,37,117,29],[152,42,117,34,"FULFILLED"],[152,51,117,43],[152,54,117,46,"onFulfilled"],[152,65,117,57],[152,68,117,60,"onRejected"],[152,78,117,70],[153,12,118,4,"unwrap"],[153,18,118,10],[153,19,118,11,"promise"],[153,26,118,18],[153,28,118,20,"resolver"],[153,36,118,28],[153,38,118,30],[153,42,118,34],[153,43,118,35,"outcome"],[153,50,118,42],[153,51,118,43],[154,10,119,2],[154,11,119,3],[154,17,119,9],[155,12,120,4],[155,16,120,8],[155,17,120,9,"queue"],[155,22,120,14],[155,23,120,15,"push"],[155,27,120,19],[155,28,120,20],[155,32,120,24,"QueueItem"],[155,41,120,33],[155,42,120,34,"promise"],[155,49,120,41],[155,51,120,43,"onFulfilled"],[155,62,120,54],[155,64,120,56,"onRejected"],[155,74,120,66],[155,75,120,67],[155,76,120,68],[156,10,121,2],[157,10,123,2],[157,17,123,9,"promise"],[157,24,123,16],[158,8,124,0],[158,9,124,1],[159,8,125,0],[159,17,125,9,"QueueItem"],[159,26,125,18,"QueueItem"],[159,27,125,19,"promise"],[159,34,125,26],[159,36,125,28,"onFulfilled"],[159,47,125,39],[159,49,125,41,"onRejected"],[159,59,125,51],[159,61,125,53],[160,10,126,2],[160,14,126,6],[160,15,126,7,"promise"],[160,22,126,14],[160,25,126,17,"promise"],[160,32,126,24],[161,10,127,2],[161,14,127,6],[161,21,127,13,"onFulfilled"],[161,32,127,24],[161,37,127,29],[161,47,127,39],[161,49,127,41],[162,12,128,4],[162,16,128,8],[162,17,128,9,"onFulfilled"],[162,28,128,20],[162,31,128,23,"onFulfilled"],[162,42,128,34],[163,12,129,4],[163,16,129,8],[163,17,129,9,"callFulfilled"],[163,30,129,22],[163,33,129,25],[163,37,129,29],[163,38,129,30,"otherCallFulfilled"],[163,56,129,48],[164,10,130,2],[165,10,131,2],[165,14,131,6],[165,21,131,13,"onRejected"],[165,31,131,23],[165,36,131,28],[165,46,131,38],[165,48,131,40],[166,12,132,4],[166,16,132,8],[166,17,132,9,"onRejected"],[166,27,132,19],[166,30,132,22,"onRejected"],[166,40,132,32],[167,12,133,4],[167,16,133,8],[167,17,133,9,"callRejected"],[167,29,133,21],[167,32,133,24],[167,36,133,28],[167,37,133,29,"otherCallRejected"],[167,54,133,46],[168,10,134,2],[169,8,135,0],[170,8,136,0,"QueueItem"],[170,17,136,9],[170,18,136,10,"prototype"],[170,27,136,19],[170,28,136,20,"callFulfilled"],[170,41,136,33],[170,44,136,36],[170,54,136,46,"value"],[170,59,136,51],[170,61,136,53],[171,10,137,2,"handlers"],[171,18,137,10],[171,19,137,11,"resolve"],[171,26,137,18],[171,27,137,19],[171,31,137,23],[171,32,137,24,"promise"],[171,39,137,31],[171,41,137,33,"value"],[171,46,137,38],[171,47,137,39],[172,8,138,0],[172,9,138,1],[173,8,139,0,"QueueItem"],[173,17,139,9],[173,18,139,10,"prototype"],[173,27,139,19],[173,28,139,20,"otherCallFulfilled"],[173,46,139,38],[173,49,139,41],[173,59,139,51,"value"],[173,64,139,56],[173,66,139,58],[174,10,140,2,"unwrap"],[174,16,140,8],[174,17,140,9],[174,21,140,13],[174,22,140,14,"promise"],[174,29,140,21],[174,31,140,23],[174,35,140,27],[174,36,140,28,"onFulfilled"],[174,47,140,39],[174,49,140,41,"value"],[174,54,140,46],[174,55,140,47],[175,8,141,0],[175,9,141,1],[176,8,142,0,"QueueItem"],[176,17,142,9],[176,18,142,10,"prototype"],[176,27,142,19],[176,28,142,20,"callRejected"],[176,40,142,32],[176,43,142,35],[176,53,142,45,"value"],[176,58,142,50],[176,60,142,52],[177,10,143,2,"handlers"],[177,18,143,10],[177,19,143,11,"reject"],[177,25,143,17],[177,26,143,18],[177,30,143,22],[177,31,143,23,"promise"],[177,38,143,30],[177,40,143,32,"value"],[177,45,143,37],[177,46,143,38],[178,8,144,0],[178,9,144,1],[179,8,145,0,"QueueItem"],[179,17,145,9],[179,18,145,10,"prototype"],[179,27,145,19],[179,28,145,20,"otherCallRejected"],[179,45,145,37],[179,48,145,40],[179,58,145,50,"value"],[179,63,145,55],[179,65,145,57],[180,10,146,2,"unwrap"],[180,16,146,8],[180,17,146,9],[180,21,146,13],[180,22,146,14,"promise"],[180,29,146,21],[180,31,146,23],[180,35,146,27],[180,36,146,28,"onRejected"],[180,46,146,38],[180,48,146,40,"value"],[180,53,146,45],[180,54,146,46],[181,8,147,0],[181,9,147,1],[182,8,149,0],[182,17,149,9,"unwrap"],[182,23,149,15,"unwrap"],[182,24,149,16,"promise"],[182,31,149,23],[182,33,149,25,"func"],[182,37,149,29],[182,39,149,31,"value"],[182,44,149,36],[182,46,149,38],[183,10,150,2,"immediate"],[183,19,150,11],[183,20,150,12],[183,32,150,24],[184,12,151,4],[184,16,151,8,"returnValue"],[184,27,151,19],[185,12,152,4],[185,16,152,8],[186,14,153,6,"returnValue"],[186,25,153,17],[186,28,153,20,"func"],[186,32,153,24],[186,33,153,25,"value"],[186,38,153,30],[186,39,153,31],[187,12,154,4],[187,13,154,5],[187,14,154,6],[187,21,154,13,"e"],[187,22,154,14],[187,24,154,16],[188,14,155,6],[188,21,155,13,"handlers"],[188,29,155,21],[188,30,155,22,"reject"],[188,36,155,28],[188,37,155,29,"promise"],[188,44,155,36],[188,46,155,38,"e"],[188,47,155,39],[188,48,155,40],[189,12,156,4],[190,12,157,4],[190,16,157,8,"returnValue"],[190,27,157,19],[190,32,157,24,"promise"],[190,39,157,31],[190,41,157,33],[191,14,158,6,"handlers"],[191,22,158,14],[191,23,158,15,"reject"],[191,29,158,21],[191,30,158,22,"promise"],[191,37,158,29],[191,39,158,31],[191,43,158,35,"TypeError"],[191,52,158,44],[191,53,158,45],[191,89,158,81],[191,90,158,82],[191,91,158,83],[192,12,159,4],[192,13,159,5],[192,19,159,11],[193,14,160,6,"handlers"],[193,22,160,14],[193,23,160,15,"resolve"],[193,30,160,22],[193,31,160,23,"promise"],[193,38,160,30],[193,40,160,32,"returnValue"],[193,51,160,43],[193,52,160,44],[194,12,161,4],[195,10,162,2],[195,11,162,3],[195,12,162,4],[196,8,163,0],[197,8,165,0,"handlers"],[197,16,165,8],[197,17,165,9,"resolve"],[197,24,165,16],[197,27,165,19],[197,37,165,29,"self"],[197,41,165,33],[197,43,165,35,"value"],[197,48,165,40],[197,50,165,42],[198,10,166,2],[198,14,166,6,"result"],[198,20,166,12],[198,23,166,15,"tryCatch"],[198,31,166,23],[198,32,166,24,"getThen"],[198,39,166,31],[198,41,166,33,"value"],[198,46,166,38],[198,47,166,39],[199,10,167,2],[199,14,167,6,"result"],[199,20,167,12],[199,21,167,13,"status"],[199,27,167,19],[199,32,167,24],[199,39,167,31],[199,41,167,33],[200,12,168,4],[200,19,168,11,"handlers"],[200,27,168,19],[200,28,168,20,"reject"],[200,34,168,26],[200,35,168,27,"self"],[200,39,168,31],[200,41,168,33,"result"],[200,47,168,39],[200,48,168,40,"value"],[200,53,168,45],[200,54,168,46],[201,10,169,2],[202,10,170,2],[202,14,170,6,"thenable"],[202,22,170,14],[202,25,170,17,"result"],[202,31,170,23],[202,32,170,24,"value"],[202,37,170,29],[203,10,172,2],[203,14,172,6,"thenable"],[203,22,172,14],[203,24,172,16],[204,12,173,4,"safelyResolveThenable"],[204,33,173,25],[204,34,173,26,"self"],[204,38,173,30],[204,40,173,32,"thenable"],[204,48,173,40],[204,49,173,41],[205,10,174,2],[205,11,174,3],[205,17,174,9],[206,12,175,4,"self"],[206,16,175,8],[206,17,175,9,"state"],[206,22,175,14],[206,25,175,17,"FULFILLED"],[206,34,175,26],[207,12,176,4,"self"],[207,16,176,8],[207,17,176,9,"outcome"],[207,24,176,16],[207,27,176,19,"value"],[207,32,176,24],[208,12,177,4],[208,16,177,8,"i"],[208,17,177,9],[208,20,177,12],[208,21,177,13],[208,22,177,14],[209,12,178,4],[209,16,178,8,"len"],[209,19,178,11],[209,22,178,14,"self"],[209,26,178,18],[209,27,178,19,"queue"],[209,32,178,24],[209,33,178,25,"length"],[209,39,178,31],[210,12,179,4],[210,19,179,11],[210,21,179,13,"i"],[210,22,179,14],[210,25,179,17,"len"],[210,28,179,20],[210,30,179,22],[211,14,180,6,"self"],[211,18,180,10],[211,19,180,11,"queue"],[211,24,180,16],[211,25,180,17,"i"],[211,26,180,18],[211,27,180,19],[211,28,180,20,"callFulfilled"],[211,41,180,33],[211,42,180,34,"value"],[211,47,180,39],[211,48,180,40],[212,12,181,4],[213,10,182,2],[214,10,183,2],[214,17,183,9,"self"],[214,21,183,13],[215,8,184,0],[215,9,184,1],[216,8,185,0,"handlers"],[216,16,185,8],[216,17,185,9,"reject"],[216,23,185,15],[216,26,185,18],[216,36,185,28,"self"],[216,40,185,32],[216,42,185,34,"error"],[216,47,185,39],[216,49,185,41],[217,10,186,2,"self"],[217,14,186,6],[217,15,186,7,"state"],[217,20,186,12],[217,23,186,15,"REJECTED"],[217,31,186,23],[218,10,187,2,"self"],[218,14,187,6],[218,15,187,7,"outcome"],[218,22,187,14],[218,25,187,17,"error"],[218,30,187,22],[219,10,188,2],[219,14,188,6,"i"],[219,15,188,7],[219,18,188,10],[219,19,188,11],[219,20,188,12],[220,10,189,2],[220,14,189,6,"len"],[220,17,189,9],[220,20,189,12,"self"],[220,24,189,16],[220,25,189,17,"queue"],[220,30,189,22],[220,31,189,23,"length"],[220,37,189,29],[221,10,190,2],[221,17,190,9],[221,19,190,11,"i"],[221,20,190,12],[221,23,190,15,"len"],[221,26,190,18],[221,28,190,20],[222,12,191,4,"self"],[222,16,191,8],[222,17,191,9,"queue"],[222,22,191,14],[222,23,191,15,"i"],[222,24,191,16],[222,25,191,17],[222,26,191,18,"callRejected"],[222,38,191,30],[222,39,191,31,"error"],[222,44,191,36],[222,45,191,37],[223,10,192,2],[224,10,193,2],[224,17,193,9,"self"],[224,21,193,13],[225,8,194,0],[225,9,194,1],[226,8,196,0],[226,17,196,9,"getThen"],[226,24,196,16,"getThen"],[226,25,196,17,"obj"],[226,28,196,20],[226,30,196,22],[227,10,197,2],[228,10,198,2],[228,14,198,6,"then"],[228,18,198,10],[228,21,198,13,"obj"],[228,24,198,16],[228,28,198,20,"obj"],[228,31,198,23],[228,32,198,24,"then"],[228,36,198,28],[229,10,199,2],[229,14,199,6,"obj"],[229,17,199,9],[229,22,199,14],[229,29,199,21,"obj"],[229,32,199,24],[229,37,199,29],[229,45,199,37],[229,49,199,41],[229,56,199,48,"obj"],[229,59,199,51],[229,64,199,56],[229,74,199,66],[229,75,199,67],[229,79,199,71],[229,86,199,78,"then"],[229,90,199,82],[229,95,199,87],[229,105,199,97],[229,107,199,99],[230,12,200,4],[230,19,200,11],[230,28,200,20,"appyThen"],[230,36,200,28,"appyThen"],[230,37,200,28],[230,39,200,31],[231,14,201,6,"then"],[231,18,201,10],[231,19,201,11,"apply"],[231,24,201,16],[231,25,201,17,"obj"],[231,28,201,20],[231,30,201,22,"arguments"],[231,39,201,31],[231,40,201,32],[232,12,202,4],[232,13,202,5],[233,10,203,2],[234,8,204,0],[235,8,206,0],[235,17,206,9,"safelyResolveThenable"],[235,38,206,30,"safelyResolveThenable"],[235,39,206,31,"self"],[235,43,206,35],[235,45,206,37,"thenable"],[235,53,206,45],[235,55,206,47],[236,10,207,2],[237,10,208,2],[237,14,208,6,"called"],[237,20,208,12],[237,23,208,15],[237,28,208,20],[238,10,209,2],[238,19,209,11,"onError"],[238,26,209,18,"onError"],[238,27,209,19,"value"],[238,32,209,24],[238,34,209,26],[239,12,210,4],[239,16,210,8,"called"],[239,22,210,14],[239,24,210,16],[240,14,211,6],[241,12,212,4],[242,12,213,4,"called"],[242,18,213,10],[242,21,213,13],[242,25,213,17],[243,12,214,4,"handlers"],[243,20,214,12],[243,21,214,13,"reject"],[243,27,214,19],[243,28,214,20,"self"],[243,32,214,24],[243,34,214,26,"value"],[243,39,214,31],[243,40,214,32],[244,10,215,2],[245,10,217,2],[245,19,217,11,"onSuccess"],[245,28,217,20,"onSuccess"],[245,29,217,21,"value"],[245,34,217,26],[245,36,217,28],[246,12,218,4],[246,16,218,8,"called"],[246,22,218,14],[246,24,218,16],[247,14,219,6],[248,12,220,4],[249,12,221,4,"called"],[249,18,221,10],[249,21,221,13],[249,25,221,17],[250,12,222,4,"handlers"],[250,20,222,12],[250,21,222,13,"resolve"],[250,28,222,20],[250,29,222,21,"self"],[250,33,222,25],[250,35,222,27,"value"],[250,40,222,32],[250,41,222,33],[251,10,223,2],[252,10,225,2],[252,19,225,11,"tryToUnwrap"],[252,30,225,22,"tryToUnwrap"],[252,31,225,22],[252,33,225,25],[253,12,226,4,"thenable"],[253,20,226,12],[253,21,226,13,"onSuccess"],[253,30,226,22],[253,32,226,24,"onError"],[253,39,226,31],[253,40,226,32],[254,10,227,2],[255,10,229,2],[255,14,229,6,"result"],[255,20,229,12],[255,23,229,15,"tryCatch"],[255,31,229,23],[255,32,229,24,"tryToUnwrap"],[255,43,229,35],[255,44,229,36],[256,10,230,2],[256,14,230,6,"result"],[256,20,230,12],[256,21,230,13,"status"],[256,27,230,19],[256,32,230,24],[256,39,230,31],[256,41,230,33],[257,12,231,4,"onError"],[257,19,231,11],[257,20,231,12,"result"],[257,26,231,18],[257,27,231,19,"value"],[257,32,231,24],[257,33,231,25],[258,10,232,2],[259,8,233,0],[260,8,235,0],[260,17,235,9,"tryCatch"],[260,25,235,17,"tryCatch"],[260,26,235,18,"func"],[260,30,235,22],[260,32,235,24,"value"],[260,37,235,29],[260,39,235,31],[261,10,236,2],[261,14,236,6,"out"],[261,17,236,9],[261,20,236,12],[261,21,236,13],[261,22,236,14],[262,10,237,2],[262,14,237,6],[263,12,238,4,"out"],[263,15,238,7],[263,16,238,8,"value"],[263,21,238,13],[263,24,238,16,"func"],[263,28,238,20],[263,29,238,21,"value"],[263,34,238,26],[263,35,238,27],[264,12,239,4,"out"],[264,15,239,7],[264,16,239,8,"status"],[264,22,239,14],[264,25,239,17],[264,34,239,26],[265,10,240,2],[265,11,240,3],[265,12,240,4],[265,19,240,11,"e"],[265,20,240,12],[265,22,240,14],[266,12,241,4,"out"],[266,15,241,7],[266,16,241,8,"status"],[266,22,241,14],[266,25,241,17],[266,32,241,24],[267,12,242,4,"out"],[267,15,242,7],[267,16,242,8,"value"],[267,21,242,13],[267,24,242,16,"e"],[267,25,242,17],[268,10,243,2],[269,10,244,2],[269,17,244,9,"out"],[269,20,244,12],[270,8,245,0],[271,8,247,0,"Promise"],[271,15,247,7],[271,16,247,8,"resolve"],[271,23,247,15],[271,26,247,18,"resolve"],[271,33,247,25],[272,8,248,0],[272,17,248,9,"resolve"],[272,24,248,16,"resolve"],[272,25,248,17,"value"],[272,30,248,22],[272,32,248,24],[273,10,249,2],[273,14,249,6,"value"],[273,19,249,11],[273,31,249,23],[273,35,249,27],[273,37,249,29],[274,12,250,4],[274,19,250,11,"value"],[274,24,250,16],[275,10,251,2],[276,10,252,2],[276,17,252,9,"handlers"],[276,25,252,17],[276,26,252,18,"resolve"],[276,33,252,25],[276,34,252,26],[276,38,252,30],[276,42,252,34],[276,43,252,35,"INTERNAL"],[276,51,252,43],[276,52,252,44],[276,54,252,46,"value"],[276,59,252,51],[276,60,252,52],[277,8,253,0],[278,8,255,0,"Promise"],[278,15,255,7],[278,16,255,8,"reject"],[278,22,255,14],[278,25,255,17,"reject"],[278,31,255,23],[279,8,256,0],[279,17,256,9,"reject"],[279,23,256,15,"reject"],[279,24,256,16,"reason"],[279,30,256,22],[279,32,256,24],[280,10,257,2],[280,14,257,6,"promise"],[280,21,257,13],[280,24,257,16],[280,28,257,20],[280,32,257,24],[280,33,257,25,"INTERNAL"],[280,41,257,33],[280,42,257,34],[281,10,258,2],[281,17,258,9,"handlers"],[281,25,258,17],[281,26,258,18,"reject"],[281,32,258,24],[281,33,258,25,"promise"],[281,40,258,32],[281,42,258,34,"reason"],[281,48,258,40],[281,49,258,41],[282,8,259,0],[283,8,261,0,"Promise"],[283,15,261,7],[283,16,261,8,"all"],[283,19,261,11],[283,22,261,14,"all"],[283,25,261,17],[284,8,262,0],[284,17,262,9,"all"],[284,20,262,12,"all"],[284,21,262,13,"iterable"],[284,29,262,21],[284,31,262,23],[285,10,263,2],[285,14,263,6,"self"],[285,18,263,10],[285,21,263,13],[285,25,263,17],[286,10,264,2],[286,14,264,6,"Object"],[286,20,264,12],[286,21,264,13,"prototype"],[286,30,264,22],[286,31,264,23,"toString"],[286,39,264,31],[286,40,264,32,"call"],[286,44,264,36],[286,45,264,37,"iterable"],[286,53,264,45],[286,54,264,46],[286,59,264,51],[286,75,264,67],[286,77,264,69],[287,12,265,4],[287,19,265,11],[287,23,265,15],[287,24,265,16,"reject"],[287,30,265,22],[287,31,265,23],[287,35,265,27,"TypeError"],[287,44,265,36],[287,45,265,37],[287,63,265,55],[287,64,265,56],[287,65,265,57],[288,10,266,2],[289,10,268,2],[289,14,268,6,"len"],[289,17,268,9],[289,20,268,12,"iterable"],[289,28,268,20],[289,29,268,21,"length"],[289,35,268,27],[290,10,269,2],[290,14,269,6,"called"],[290,20,269,12],[290,23,269,15],[290,28,269,20],[291,10,270,2],[291,14,270,6],[291,15,270,7,"len"],[291,18,270,10],[291,20,270,12],[292,12,271,4],[292,19,271,11],[292,23,271,15],[292,24,271,16,"resolve"],[292,31,271,23],[292,32,271,24],[292,34,271,26],[292,35,271,27],[293,10,272,2],[294,10,274,2],[294,14,274,6,"values"],[294,20,274,12],[294,23,274,15],[294,27,274,19,"Array"],[294,32,274,24],[294,33,274,25,"len"],[294,36,274,28],[294,37,274,29],[295,10,275,2],[295,14,275,6,"resolved"],[295,22,275,14],[295,25,275,17],[295,26,275,18],[296,10,276,2],[296,14,276,6,"i"],[296,15,276,7],[296,18,276,10],[296,19,276,11],[296,20,276,12],[297,10,277,2],[297,14,277,6,"promise"],[297,21,277,13],[297,24,277,16],[297,28,277,20],[297,32,277,24],[297,33,277,25,"INTERNAL"],[297,41,277,33],[297,42,277,34],[298,10,279,2],[298,17,279,9],[298,19,279,11,"i"],[298,20,279,12],[298,23,279,15,"len"],[298,26,279,18],[298,28,279,20],[299,12,280,4,"allResolver"],[299,23,280,15],[299,24,280,16,"iterable"],[299,32,280,24],[299,33,280,25,"i"],[299,34,280,26],[299,35,280,27],[299,37,280,29,"i"],[299,38,280,30],[299,39,280,31],[300,10,281,2],[301,10,282,2],[301,17,282,9,"promise"],[301,24,282,16],[302,10,283,2],[302,19,283,11,"allResolver"],[302,30,283,22,"allResolver"],[302,31,283,23,"value"],[302,36,283,28],[302,38,283,30,"i"],[302,39,283,31],[302,41,283,33],[303,12,284,4,"self"],[303,16,284,8],[303,17,284,9,"resolve"],[303,24,284,16],[303,25,284,17,"value"],[303,30,284,22],[303,31,284,23],[303,32,284,24,"then"],[303,36,284,28],[303,37,284,29,"resolveFromAll"],[303,51,284,43],[303,53,284,45],[303,63,284,55,"error"],[303,68,284,60],[303,70,284,62],[304,14,285,6],[304,18,285,10],[304,19,285,11,"called"],[304,25,285,17],[304,27,285,19],[305,16,286,8,"called"],[305,22,286,14],[305,25,286,17],[305,29,286,21],[306,16,287,8,"handlers"],[306,24,287,16],[306,25,287,17,"reject"],[306,31,287,23],[306,32,287,24,"promise"],[306,39,287,31],[306,41,287,33,"error"],[306,46,287,38],[306,47,287,39],[307,14,288,6],[308,12,289,4],[308,13,289,5],[308,14,289,6],[309,12,290,4],[309,21,290,13,"resolveFromAll"],[309,35,290,27,"resolveFromAll"],[309,36,290,28,"outValue"],[309,44,290,36],[309,46,290,38],[310,14,291,6,"values"],[310,20,291,12],[310,21,291,13,"i"],[310,22,291,14],[310,23,291,15],[310,26,291,18,"outValue"],[310,34,291,26],[311,14,292,6],[311,18,292,10],[311,20,292,12,"resolved"],[311,28,292,20],[311,33,292,25,"len"],[311,36,292,28],[311,40,292,32],[311,41,292,33,"called"],[311,47,292,39],[311,49,292,41],[312,16,293,8,"called"],[312,22,293,14],[312,25,293,17],[312,29,293,21],[313,16,294,8,"handlers"],[313,24,294,16],[313,25,294,17,"resolve"],[313,32,294,24],[313,33,294,25,"promise"],[313,40,294,32],[313,42,294,34,"values"],[313,48,294,40],[313,49,294,41],[314,14,295,6],[315,12,296,4],[316,10,297,2],[317,8,298,0],[318,8,300,0,"Promise"],[318,15,300,7],[318,16,300,8,"race"],[318,20,300,12],[318,23,300,15,"race"],[318,27,300,19],[319,8,301,0],[319,17,301,9,"race"],[319,21,301,13,"race"],[319,22,301,14,"iterable"],[319,30,301,22],[319,32,301,24],[320,10,302,2],[320,14,302,6,"self"],[320,18,302,10],[320,21,302,13],[320,25,302,17],[321,10,303,2],[321,14,303,6,"Object"],[321,20,303,12],[321,21,303,13,"prototype"],[321,30,303,22],[321,31,303,23,"toString"],[321,39,303,31],[321,40,303,32,"call"],[321,44,303,36],[321,45,303,37,"iterable"],[321,53,303,45],[321,54,303,46],[321,59,303,51],[321,75,303,67],[321,77,303,69],[322,12,304,4],[322,19,304,11],[322,23,304,15],[322,24,304,16,"reject"],[322,30,304,22],[322,31,304,23],[322,35,304,27,"TypeError"],[322,44,304,36],[322,45,304,37],[322,63,304,55],[322,64,304,56],[322,65,304,57],[323,10,305,2],[324,10,307,2],[324,14,307,6,"len"],[324,17,307,9],[324,20,307,12,"iterable"],[324,28,307,20],[324,29,307,21,"length"],[324,35,307,27],[325,10,308,2],[325,14,308,6,"called"],[325,20,308,12],[325,23,308,15],[325,28,308,20],[326,10,309,2],[326,14,309,6],[326,15,309,7,"len"],[326,18,309,10],[326,20,309,12],[327,12,310,4],[327,19,310,11],[327,23,310,15],[327,24,310,16,"resolve"],[327,31,310,23],[327,32,310,24],[327,34,310,26],[327,35,310,27],[328,10,311,2],[329,10,313,2],[329,14,313,6,"i"],[329,15,313,7],[329,18,313,10],[329,19,313,11],[329,20,313,12],[330,10,314,2],[330,14,314,6,"promise"],[330,21,314,13],[330,24,314,16],[330,28,314,20],[330,32,314,24],[330,33,314,25,"INTERNAL"],[330,41,314,33],[330,42,314,34],[331,10,316,2],[331,17,316,9],[331,19,316,11,"i"],[331,20,316,12],[331,23,316,15,"len"],[331,26,316,18],[331,28,316,20],[332,12,317,4,"resolver"],[332,20,317,12],[332,21,317,13,"iterable"],[332,29,317,21],[332,30,317,22,"i"],[332,31,317,23],[332,32,317,24],[332,33,317,25],[333,10,318,2],[334,10,319,2],[334,17,319,9,"promise"],[334,24,319,16],[335,10,320,2],[335,19,320,11,"resolver"],[335,27,320,19,"resolver"],[335,28,320,20,"value"],[335,33,320,25],[335,35,320,27],[336,12,321,4,"self"],[336,16,321,8],[336,17,321,9,"resolve"],[336,24,321,16],[336,25,321,17,"value"],[336,30,321,22],[336,31,321,23],[336,32,321,24,"then"],[336,36,321,28],[336,37,321,29],[336,47,321,39,"response"],[336,55,321,47],[336,57,321,49],[337,14,322,6],[337,18,322,10],[337,19,322,11,"called"],[337,25,322,17],[337,27,322,19],[338,16,323,8,"called"],[338,22,323,14],[338,25,323,17],[338,29,323,21],[339,16,324,8,"handlers"],[339,24,324,16],[339,25,324,17,"resolve"],[339,32,324,24],[339,33,324,25,"promise"],[339,40,324,32],[339,42,324,34,"response"],[339,50,324,42],[339,51,324,43],[340,14,325,6],[341,12,326,4],[341,13,326,5],[341,15,326,7],[341,25,326,17,"error"],[341,30,326,22],[341,32,326,24],[342,14,327,6],[342,18,327,10],[342,19,327,11,"called"],[342,25,327,17],[342,27,327,19],[343,16,328,8,"called"],[343,22,328,14],[343,25,328,17],[343,29,328,21],[344,16,329,8,"handlers"],[344,24,329,16],[344,25,329,17,"reject"],[344,31,329,23],[344,32,329,24,"promise"],[344,39,329,31],[344,41,329,33,"error"],[344,46,329,38],[344,47,329,39],[345,14,330,6],[346,12,331,4],[346,13,331,5],[346,14,331,6],[347,10,332,2],[348,8,333,0],[349,6,335,0],[349,7,335,1],[349,9,335,2],[350,8,335,3],[350,11,335,6],[350,13,335,7],[351,6,335,8],[351,7,335,9],[351,8,335,10],[352,6,335,11],[352,7,335,12],[352,9,335,13],[352,10,335,14],[352,20,335,23,"_dereq_"],[352,27,335,30],[352,29,335,31,"module"],[352,35,335,37],[352,37,335,38,"exports"],[352,44,335,45],[352,46,335,46],[353,8,336,0],[353,9,336,1],[353,19,336,11,"global"],[353,25,336,17],[353,27,336,18],[354,10,337,0],[354,22,337,12],[356,10,338,0],[356,14,338,4],[356,21,338,11,"global"],[356,27,338,17],[356,28,338,18,"Promise"],[356,35,338,25],[356,40,338,30],[356,50,338,40],[356,52,338,42],[357,12,339,2,"global"],[357,18,339,8],[357,19,339,9,"Promise"],[357,26,339,16],[357,29,339,19,"_dereq_"],[357,36,339,26],[357,37,339,27],[357,38,339,28],[357,39,339,29],[358,10,340,0],[359,8,342,0],[359,9,342,1],[359,11,342,3,"call"],[359,15,342,7],[359,16,342,8],[359,20,342,12],[359,22,342,13],[359,29,342,20,"global"],[359,35,342,26],[359,40,342,31],[359,51,342,42],[359,54,342,45,"global"],[359,60,342,51],[359,63,342,54],[359,70,342,61,"self"],[359,74,342,65],[359,79,342,70],[359,90,342,81],[359,93,342,84,"self"],[359,97,342,88],[359,100,342,91],[359,107,342,98,"window"],[359,113,342,104],[359,118,342,109],[359,129,342,120],[359,132,342,123,"window"],[359,138,342,129],[359,141,342,132],[359,142,342,133],[359,143,342,134],[359,144,342,135],[360,6,343,0],[360,7,343,1],[360,9,343,2],[361,8,343,3],[361,11,343,6],[361,13,343,7],[362,6,343,8],[362,7,343,9],[362,8,343,10],[363,6,343,11],[363,7,343,12],[363,9,343,13],[363,10,343,14],[363,20,343,23,"_dereq_"],[363,27,343,30],[363,29,343,31,"module"],[363,35,343,37],[363,37,343,38,"exports"],[363,44,343,45],[363,46,343,46],[364,8,344,0],[364,20,344,12],[366,8,346,0],[366,12,346,4,"_typeof"],[366,19,346,11],[366,22,346,14],[366,29,346,21,"Symbol"],[366,35,346,27],[366,40,346,32],[366,50,346,42],[366,54,346,46],[366,61,346,53,"Symbol"],[366,67,346,59],[366,68,346,60,"iterator"],[366,76,346,68],[366,81,346,73],[366,89,346,81],[366,92,346,84],[366,102,346,94,"obj"],[366,105,346,97],[366,107,346,99],[367,10,346,101],[367,17,346,108],[367,24,346,115,"obj"],[367,27,346,118],[368,8,346,120],[368,9,346,121],[368,12,346,124],[368,22,346,134,"obj"],[368,25,346,137],[368,27,346,139],[369,10,346,141],[369,17,346,148,"obj"],[369,20,346,151],[369,24,346,155],[369,31,346,162,"Symbol"],[369,37,346,168],[369,42,346,173],[369,52,346,183],[369,56,346,187,"obj"],[369,59,346,190],[369,60,346,191,"constructor"],[369,71,346,202],[369,76,346,207,"Symbol"],[369,82,346,213],[369,86,346,217,"obj"],[369,89,346,220],[369,94,346,225,"Symbol"],[369,100,346,231],[369,101,346,232,"prototype"],[369,110,346,241],[369,113,346,244],[369,121,346,252],[369,124,346,255],[369,131,346,262,"obj"],[369,134,346,265],[370,8,346,267],[370,9,346,268],[371,8,348,0],[371,17,348,9,"_classCallCheck"],[371,32,348,24,"_classCallCheck"],[371,33,348,25,"instance"],[371,41,348,33],[371,43,348,35,"Constructor"],[371,54,348,46],[371,56,348,48],[372,10,348,50],[372,14,348,54],[372,16,348,56,"instance"],[372,24,348,64],[372,36,348,76,"Constructor"],[372,47,348,87],[372,48,348,88],[372,50,348,90],[373,12,348,92],[373,18,348,98],[373,22,348,102,"TypeError"],[373,31,348,111],[373,32,348,112],[373,67,348,147],[373,68,348,148],[374,10,348,150],[375,8,348,152],[376,8,350,0],[376,17,350,9,"getIDB"],[376,23,350,15,"getIDB"],[376,24,350,15],[376,26,350,18],[377,10,351,4],[378,10,352,4],[378,14,352,8],[379,12,353,8],[379,16,353,12],[379,23,353,19,"indexedDB"],[379,32,353,28],[379,37,353,33],[379,48,353,44],[379,50,353,46],[380,14,354,12],[380,21,354,19,"indexedDB"],[380,30,354,28],[381,12,355,8],[382,12,356,8],[382,16,356,12],[382,23,356,19,"webkitIndexedDB"],[382,38,356,34],[382,43,356,39],[382,54,356,50],[382,56,356,52],[383,14,357,12],[383,21,357,19,"webkitIndexedDB"],[383,36,357,34],[384,12,358,8],[385,12,359,8],[385,16,359,12],[385,23,359,19,"mozIndexedDB"],[385,35,359,31],[385,40,359,36],[385,51,359,47],[385,53,359,49],[386,14,360,12],[386,21,360,19,"mozIndexedDB"],[386,33,360,31],[387,12,361,8],[388,12,362,8],[388,16,362,12],[388,23,362,19,"OIndexedDB"],[388,33,362,29],[388,38,362,34],[388,49,362,45],[388,51,362,47],[389,14,363,12],[389,21,363,19,"OIndexedDB"],[389,31,363,29],[390,12,364,8],[391,12,365,8],[391,16,365,12],[391,23,365,19,"msIndexedDB"],[391,34,365,30],[391,39,365,35],[391,50,365,46],[391,52,365,48],[392,14,366,12],[392,21,366,19,"msIndexedDB"],[392,32,366,30],[393,12,367,8],[394,10,368,4],[394,11,368,5],[394,12,368,6],[394,19,368,13,"e"],[394,20,368,14],[394,22,368,16],[395,12,369,8],[396,10,370,4],[397,8,371,0],[398,8,373,0],[398,12,373,4,"idb"],[398,15,373,7],[398,18,373,10,"getIDB"],[398,24,373,16],[398,25,373,17],[398,26,373,18],[399,8,375,0],[399,17,375,9,"isIndexedDBValid"],[399,33,375,25,"isIndexedDBValid"],[399,34,375,25],[399,36,375,28],[400,10,376,4],[400,14,376,8],[401,12,377,8],[402,12,378,8],[403,12,379,8],[403,16,379,12],[403,17,379,13,"idb"],[403,20,379,16],[403,24,379,20],[403,25,379,21,"idb"],[403,28,379,24],[403,29,379,25,"open"],[403,33,379,29],[403,35,379,31],[404,14,380,12],[404,21,380,19],[404,26,380,24],[405,12,381,8],[406,12,382,8],[407,12,383,8],[408,12,384,8],[409,12,385,8],[410,12,386,8],[410,16,386,12,"isSafari"],[410,24,386,20],[410,27,386,23],[410,34,386,30,"openDatabase"],[410,46,386,42],[410,51,386,47],[410,62,386,58],[410,66,386,62],[410,93,386,89],[410,94,386,90,"test"],[410,98,386,94],[410,99,386,95,"navigator"],[410,108,386,104],[410,109,386,105,"userAgent"],[410,118,386,114],[410,119,386,115],[410,123,386,119],[410,124,386,120],[410,132,386,128],[410,133,386,129,"test"],[410,137,386,133],[410,138,386,134,"navigator"],[410,147,386,143],[410,148,386,144,"userAgent"],[410,157,386,153],[410,158,386,154],[410,162,386,158],[410,163,386,159],[410,175,386,171],[410,176,386,172,"test"],[410,180,386,176],[410,181,386,177,"navigator"],[410,190,386,186],[410,191,386,187,"platform"],[410,199,386,195],[410,200,386,196],[411,12,388,8],[411,16,388,12,"hasFetch"],[411,24,388,20],[411,27,388,23],[411,34,388,30,"fetch"],[411,39,388,35],[411,44,388,40],[411,54,388,50],[411,58,388,54,"fetch"],[411,63,388,59],[411,64,388,60,"toString"],[411,72,388,68],[411,73,388,69],[411,74,388,70],[411,75,388,71,"indexOf"],[411,82,388,78],[411,83,388,79],[411,97,388,93],[411,98,388,94],[411,103,388,99],[411,104,388,100],[411,105,388,101],[413,12,390,8],[414,12,391,8],[415,12,392,8],[416,12,393,8],[417,12,394,8],[418,12,395,8],[419,12,396,8],[419,19,396,15],[419,20,396,16],[419,21,396,17,"isSafari"],[419,29,396,25],[419,33,396,29,"hasFetch"],[419,41,396,37],[419,46,396,42],[419,53,396,49,"indexedDB"],[419,62,396,58],[419,67,396,63],[419,78,396,74],[420,12,397,8],[421,12,398,8],[422,12,399,8],[423,12,400,8],[424,12,401,8],[424,19,401,15,"IDBKeyRange"],[424,30,401,26],[424,35,401,31],[424,46,401,42],[425,10,402,4],[425,11,402,5],[425,12,402,6],[425,19,402,13,"e"],[425,20,402,14],[425,22,402,16],[426,12,403,8],[426,19,403,15],[426,24,403,20],[427,10,404,4],[428,8,405,0],[430,8,407,0],[431,8,408,0],[432,8,409,0],[433,8,410,0],[434,8,411,0],[435,8,412,0],[436,8,413,0],[436,17,413,9,"createBlob"],[436,27,413,19,"createBlob"],[436,28,413,20,"parts"],[436,33,413,25],[436,35,413,27,"properties"],[436,45,413,37],[436,47,413,39],[437,10,414,4],[438,10,415,4,"parts"],[438,15,415,9],[438,18,415,12,"parts"],[438,23,415,17],[438,27,415,21],[438,29,415,23],[439,10,416,4,"properties"],[439,20,416,14],[439,23,416,17,"properties"],[439,33,416,27],[439,37,416,31],[439,38,416,32],[439,39,416,33],[440,10,417,4],[440,14,417,8],[441,12,418,8],[441,19,418,15],[441,23,418,19,"Blob"],[441,27,418,23],[441,28,418,24,"parts"],[441,33,418,29],[441,35,418,31,"properties"],[441,45,418,41],[441,46,418,42],[442,10,419,4],[442,11,419,5],[442,12,419,6],[442,19,419,13,"e"],[442,20,419,14],[442,22,419,16],[443,12,420,8],[443,16,420,12,"e"],[443,17,420,13],[443,18,420,14,"name"],[443,22,420,18],[443,27,420,23],[443,38,420,34],[443,40,420,36],[444,14,421,12],[444,20,421,18,"e"],[444,21,421,19],[445,12,422,8],[446,12,423,8],[446,16,423,12,"Builder"],[446,23,423,19],[446,26,423,22],[446,33,423,29,"BlobBuilder"],[446,44,423,40],[446,49,423,45],[446,60,423,56],[446,63,423,59,"BlobBuilder"],[446,74,423,70],[446,77,423,73],[446,84,423,80,"MSBlobBuilder"],[446,97,423,93],[446,102,423,98],[446,113,423,109],[446,116,423,112,"MSBlobBuilder"],[446,129,423,125],[446,132,423,128],[446,139,423,135,"MozBlobBuilder"],[446,153,423,149],[446,158,423,154],[446,169,423,165],[446,172,423,168,"MozBlobBuilder"],[446,186,423,182],[446,189,423,185,"WebKitBlobBuilder"],[446,206,423,202],[447,12,424,8],[447,16,424,12,"builder"],[447,23,424,19],[447,26,424,22],[447,30,424,26,"Builder"],[447,37,424,33],[447,38,424,34],[447,39,424,35],[448,12,425,8],[448,17,425,13],[448,21,425,17,"i"],[448,22,425,18],[448,25,425,21],[448,26,425,22],[448,28,425,24,"i"],[448,29,425,25],[448,32,425,28,"parts"],[448,37,425,33],[448,38,425,34,"length"],[448,44,425,40],[448,46,425,42,"i"],[448,47,425,43],[448,51,425,47],[448,52,425,48],[448,54,425,50],[449,14,426,12,"builder"],[449,21,426,19],[449,22,426,20,"append"],[449,28,426,26],[449,29,426,27,"parts"],[449,34,426,32],[449,35,426,33,"i"],[449,36,426,34],[449,37,426,35],[449,38,426,36],[450,12,427,8],[451,12,428,8],[451,19,428,15,"builder"],[451,26,428,22],[451,27,428,23,"getBlob"],[451,34,428,30],[451,35,428,31,"properties"],[451,45,428,41],[451,46,428,42,"type"],[451,50,428,46],[451,51,428,47],[452,10,429,4],[453,8,430,0],[455,8,432,0],[456,8,433,0],[457,8,434,0],[457,12,434,4],[457,19,434,11,"Promise"],[457,26,434,18],[457,31,434,23],[457,42,434,34],[457,44,434,36],[458,10,435,4],[459,10,436,4],[460,10,437,4,"_dereq_"],[460,17,437,11],[460,18,437,12],[460,19,437,13],[460,20,437,14],[461,8,438,0],[462,8,439,0],[462,12,439,4,"Promise$1"],[462,21,439,13],[462,24,439,16,"Promise"],[462,31,439,23],[463,8,441,0],[463,17,441,9,"executeCallback"],[463,32,441,24,"executeCallback"],[463,33,441,25,"promise"],[463,40,441,32],[463,42,441,34,"callback"],[463,50,441,42],[463,52,441,44],[464,10,442,4],[464,14,442,8,"callback"],[464,22,442,16],[464,24,442,18],[465,12,443,8,"promise"],[465,19,443,15],[465,20,443,16,"then"],[465,24,443,20],[465,25,443,21],[465,35,443,31,"result"],[465,41,443,37],[465,43,443,39],[466,14,444,12,"callback"],[466,22,444,20],[466,23,444,21],[466,27,444,25],[466,29,444,27,"result"],[466,35,444,33],[466,36,444,34],[467,12,445,8],[467,13,445,9],[467,15,445,11],[467,25,445,21,"error"],[467,30,445,26],[467,32,445,28],[468,14,446,12,"callback"],[468,22,446,20],[468,23,446,21,"error"],[468,28,446,26],[468,29,446,27],[469,12,447,8],[469,13,447,9],[469,14,447,10],[470,10,448,4],[471,8,449,0],[472,8,451,0],[472,17,451,9,"executeTwoCallbacks"],[472,36,451,28,"executeTwoCallbacks"],[472,37,451,29,"promise"],[472,44,451,36],[472,46,451,38,"callback"],[472,54,451,46],[472,56,451,48,"errorCallback"],[472,69,451,61],[472,71,451,63],[473,10,452,4],[473,14,452,8],[473,21,452,15,"callback"],[473,29,452,23],[473,34,452,28],[473,44,452,38],[473,46,452,40],[474,12,453,8,"promise"],[474,19,453,15],[474,20,453,16,"then"],[474,24,453,20],[474,25,453,21,"callback"],[474,33,453,29],[474,34,453,30],[475,10,454,4],[476,10,456,4],[476,14,456,8],[476,21,456,15,"errorCallback"],[476,34,456,28],[476,39,456,33],[476,49,456,43],[476,51,456,45],[477,12,457,8,"promise"],[477,19,457,15],[477,20,457,16],[477,27,457,23],[477,28,457,24],[477,29,457,25,"errorCallback"],[477,42,457,38],[477,43,457,39],[478,10,458,4],[479,8,459,0],[480,8,461,0],[480,17,461,9,"normalizeKey"],[480,29,461,21,"normalizeKey"],[480,30,461,22,"key"],[480,33,461,25],[480,35,461,27],[481,10,462,4],[482,10,463,4],[482,14,463,8],[482,21,463,15,"key"],[482,24,463,18],[482,29,463,23],[482,37,463,31],[482,39,463,33],[483,12,464,8,"console"],[483,19,464,15],[483,20,464,16,"warn"],[483,24,464,20],[483,25,464,21,"key"],[483,28,464,24],[483,31,464,27],[483,72,464,68],[483,73,464,69],[484,12,465,8,"key"],[484,15,465,11],[484,18,465,14,"String"],[484,24,465,20],[484,25,465,21,"key"],[484,28,465,24],[484,29,465,25],[485,10,466,4],[486,10,468,4],[486,17,468,11,"key"],[486,20,468,14],[487,8,469,0],[488,8,471,0],[488,17,471,9,"getCallback"],[488,28,471,20,"getCallback"],[488,29,471,20],[488,31,471,23],[489,10,472,4],[489,14,472,8,"arguments"],[489,23,472,17],[489,24,472,18,"length"],[489,30,472,24],[489,34,472,28],[489,41,472,35,"arguments"],[489,50,472,44],[489,51,472,45,"arguments"],[489,60,472,54],[489,61,472,55,"length"],[489,67,472,61],[489,70,472,64],[489,71,472,65],[489,72,472,66],[489,77,472,71],[489,87,472,81],[489,89,472,83],[490,12,473,8],[490,19,473,15,"arguments"],[490,28,473,24],[490,29,473,25,"arguments"],[490,38,473,34],[490,39,473,35,"length"],[490,45,473,41],[490,48,473,44],[490,49,473,45],[490,50,473,46],[491,10,474,4],[492,8,475,0],[494,8,477,0],[495,8,478,0],[497,8,480,0],[497,12,480,4,"DETECT_BLOB_SUPPORT_STORE"],[497,37,480,29],[497,40,480,32],[497,74,480,66],[498,8,481,0],[498,12,481,4,"supportsBlobs"],[498,25,481,17],[498,28,481,20],[498,33,481,25],[498,34,481,26],[499,8,482,0],[499,12,482,4,"dbContexts"],[499,22,482,14],[499,25,482,17],[499,26,482,18],[499,27,482,19],[500,8,483,0],[500,12,483,4,"toString"],[500,20,483,12],[500,23,483,15,"Object"],[500,29,483,21],[500,30,483,22,"prototype"],[500,39,483,31],[500,40,483,32,"toString"],[500,48,483,40],[502,8,485,0],[503,8,486,0],[503,12,486,4,"READ_ONLY"],[503,21,486,13],[503,24,486,16],[503,34,486,26],[504,8,487,0],[504,12,487,4,"READ_WRITE"],[504,22,487,14],[504,25,487,17],[504,36,487,28],[506,8,489,0],[507,8,490,0],[508,8,491,0],[509,8,492,0],[510,8,493,0],[511,8,494,0],[511,17,494,9,"_binStringToArrayBuffer"],[511,40,494,32,"_binStringToArrayBuffer"],[511,41,494,33,"bin"],[511,44,494,36],[511,46,494,38],[512,10,495,4],[512,14,495,8,"length"],[512,20,495,14],[512,23,495,17,"bin"],[512,26,495,20],[512,27,495,21,"length"],[512,33,495,27],[513,10,496,4],[513,14,496,8,"buf"],[513,17,496,11],[513,20,496,14],[513,24,496,18,"ArrayBuffer"],[513,35,496,29],[513,36,496,30,"length"],[513,42,496,36],[513,43,496,37],[514,10,497,4],[514,14,497,8,"arr"],[514,17,497,11],[514,20,497,14],[514,24,497,18,"Uint8Array"],[514,34,497,28],[514,35,497,29,"buf"],[514,38,497,32],[514,39,497,33],[515,10,498,4],[515,15,498,9],[515,19,498,13,"i"],[515,20,498,14],[515,23,498,17],[515,24,498,18],[515,26,498,20,"i"],[515,27,498,21],[515,30,498,24,"length"],[515,36,498,30],[515,38,498,32,"i"],[515,39,498,33],[515,41,498,35],[515,43,498,37],[516,12,499,8,"arr"],[516,15,499,11],[516,16,499,12,"i"],[516,17,499,13],[516,18,499,14],[516,21,499,17,"bin"],[516,24,499,20],[516,25,499,21,"charCodeAt"],[516,35,499,31],[516,36,499,32,"i"],[516,37,499,33],[516,38,499,34],[517,10,500,4],[518,10,501,4],[518,17,501,11,"buf"],[518,20,501,14],[519,8,502,0],[521,8,504,0],[522,8,505,0],[523,8,506,0],[524,8,507,0],[525,8,508,0],[526,8,509,0],[527,8,510,0],[528,8,511,0],[529,8,512,0],[530,8,513,0],[531,8,514,0],[532,8,515,0],[533,8,516,0],[534,8,517,0],[535,8,518,0],[536,8,519,0],[536,17,519,9,"_checkBlobSupportWithoutCaching"],[536,48,519,40,"_checkBlobSupportWithoutCaching"],[536,49,519,41,"idb"],[536,52,519,44],[536,54,519,46],[537,10,520,4],[537,17,520,11],[537,21,520,15,"Promise$1"],[537,30,520,24],[537,31,520,25],[537,41,520,35,"resolve"],[537,48,520,42],[537,50,520,44],[538,12,521,8],[538,16,521,12,"txn"],[538,19,521,15],[538,22,521,18,"idb"],[538,25,521,21],[538,26,521,22,"transaction"],[538,37,521,33],[538,38,521,34,"DETECT_BLOB_SUPPORT_STORE"],[538,63,521,59],[538,65,521,61,"READ_WRITE"],[538,75,521,71],[538,76,521,72],[539,12,522,8],[539,16,522,12,"blob"],[539,20,522,16],[539,23,522,19,"createBlob"],[539,33,522,29],[539,34,522,30],[539,35,522,31],[539,37,522,33],[539,38,522,34],[539,39,522,35],[540,12,523,8,"txn"],[540,15,523,11],[540,16,523,12,"objectStore"],[540,27,523,23],[540,28,523,24,"DETECT_BLOB_SUPPORT_STORE"],[540,53,523,49],[540,54,523,50],[540,55,523,51,"put"],[540,58,523,54],[540,59,523,55,"blob"],[540,63,523,59],[540,65,523,61],[540,70,523,66],[540,71,523,67],[541,12,525,8,"txn"],[541,15,525,11],[541,16,525,12,"onabort"],[541,23,525,19],[541,26,525,22],[541,36,525,32,"e"],[541,37,525,33],[541,39,525,35],[542,14,526,12],[543,14,527,12],[544,14,528,12,"e"],[544,15,528,13],[544,16,528,14,"preventDefault"],[544,30,528,28],[544,31,528,29],[544,32,528,30],[545,14,529,12,"e"],[545,15,529,13],[545,16,529,14,"stopPropagation"],[545,31,529,29],[545,32,529,30],[545,33,529,31],[546,14,530,12,"resolve"],[546,21,530,19],[546,22,530,20],[546,27,530,25],[546,28,530,26],[547,12,531,8],[547,13,531,9],[548,12,533,8,"txn"],[548,15,533,11],[548,16,533,12,"oncomplete"],[548,26,533,22],[548,29,533,25],[548,41,533,37],[549,14,534,12],[549,18,534,16,"matchedChrome"],[549,31,534,29],[549,34,534,32,"navigator"],[549,43,534,41],[549,44,534,42,"userAgent"],[549,53,534,51],[549,54,534,52,"match"],[549,59,534,57],[549,60,534,58],[549,75,534,73],[549,76,534,74],[550,14,535,12],[550,18,535,16,"matchedEdge"],[550,29,535,27],[550,32,535,30,"navigator"],[550,41,535,39],[550,42,535,40,"userAgent"],[550,51,535,49],[550,52,535,50,"match"],[550,57,535,55],[550,58,535,56],[550,66,535,64],[550,67,535,65],[551,14,536,12],[552,14,537,12],[553,14,538,12,"resolve"],[553,21,538,19],[553,22,538,20,"matchedEdge"],[553,33,538,31],[553,37,538,35],[553,38,538,36,"matchedChrome"],[553,51,538,49],[553,55,538,53,"parseInt"],[553,63,538,61],[553,64,538,62,"matchedChrome"],[553,77,538,75],[553,78,538,76],[553,79,538,77],[553,80,538,78],[553,82,538,80],[553,84,538,82],[553,85,538,83],[553,89,538,87],[553,91,538,89],[553,92,538,90],[554,12,539,8],[554,13,539,9],[555,10,540,4],[555,11,540,5],[555,12,540,6],[555,13,540,7],[555,20,540,14],[555,21,540,15],[555,22,540,16],[555,34,540,28],[556,12,541,8],[556,19,541,15],[556,24,541,20],[556,25,541,21],[556,26,541,22],[557,10,542,4],[557,11,542,5],[557,12,542,6],[558,8,543,0],[559,8,545,0],[559,17,545,9,"_checkBlobSupport"],[559,34,545,26,"_checkBlobSupport"],[559,35,545,27,"idb"],[559,38,545,30],[559,40,545,32],[560,10,546,4],[560,14,546,8],[560,21,546,15,"supportsBlobs"],[560,34,546,28],[560,39,546,33],[560,48,546,42],[560,50,546,44],[561,12,547,8],[561,19,547,15,"Promise$1"],[561,28,547,24],[561,29,547,25,"resolve"],[561,36,547,32],[561,37,547,33,"supportsBlobs"],[561,50,547,46],[561,51,547,47],[562,10,548,4],[563,10,549,4],[563,17,549,11,"_checkBlobSupportWithoutCaching"],[563,48,549,42],[563,49,549,43,"idb"],[563,52,549,46],[563,53,549,47],[563,54,549,48,"then"],[563,58,549,52],[563,59,549,53],[563,69,549,63,"value"],[563,74,549,68],[563,76,549,70],[564,12,550,8,"supportsBlobs"],[564,25,550,21],[564,28,550,24,"value"],[564,33,550,29],[565,12,551,8],[565,19,551,15,"supportsBlobs"],[565,32,551,28],[566,10,552,4],[566,11,552,5],[566,12,552,6],[567,8,553,0],[568,8,555,0],[568,17,555,9,"_deferReadiness"],[568,32,555,24,"_deferReadiness"],[568,33,555,25,"dbInfo"],[568,39,555,31],[568,41,555,33],[569,10,556,4],[569,14,556,8,"dbContext"],[569,23,556,17],[569,26,556,20,"dbContexts"],[569,36,556,30],[569,37,556,31,"dbInfo"],[569,43,556,37],[569,44,556,38,"name"],[569,48,556,42],[569,49,556,43],[571,10,558,4],[572,10,559,4],[572,14,559,8,"deferredOperation"],[572,31,559,25],[572,34,559,28],[572,35,559,29],[572,36,559,30],[573,10,561,4,"deferredOperation"],[573,27,561,21],[573,28,561,22,"promise"],[573,35,561,29],[573,38,561,32],[573,42,561,36,"Promise$1"],[573,51,561,45],[573,52,561,46],[573,62,561,56,"resolve"],[573,69,561,63],[573,71,561,65,"reject"],[573,77,561,71],[573,79,561,73],[574,12,562,8,"deferredOperation"],[574,29,562,25],[574,30,562,26,"resolve"],[574,37,562,33],[574,40,562,36,"resolve"],[574,47,562,43],[575,12,563,8,"deferredOperation"],[575,29,563,25],[575,30,563,26,"reject"],[575,36,563,32],[575,39,563,35,"reject"],[575,45,563,41],[576,10,564,4],[576,11,564,5],[576,12,564,6],[578,10,566,4],[579,10,567,4,"dbContext"],[579,19,567,13],[579,20,567,14,"deferredOperations"],[579,38,567,32],[579,39,567,33,"push"],[579,43,567,37],[579,44,567,38,"deferredOperation"],[579,61,567,55],[579,62,567,56],[581,10,569,4],[582,10,570,4],[582,14,570,8],[582,15,570,9,"dbContext"],[582,24,570,18],[582,25,570,19,"dbReady"],[582,32,570,26],[582,34,570,28],[583,12,571,8,"dbContext"],[583,21,571,17],[583,22,571,18,"dbReady"],[583,29,571,25],[583,32,571,28,"deferredOperation"],[583,49,571,45],[583,50,571,46,"promise"],[583,57,571,53],[584,10,572,4],[584,11,572,5],[584,17,572,11],[585,12,573,8,"dbContext"],[585,21,573,17],[585,22,573,18,"dbReady"],[585,29,573,25],[585,32,573,28,"dbContext"],[585,41,573,37],[585,42,573,38,"dbReady"],[585,49,573,45],[585,50,573,46,"then"],[585,54,573,50],[585,55,573,51],[585,67,573,63],[586,14,574,12],[586,21,574,19,"deferredOperation"],[586,38,574,36],[586,39,574,37,"promise"],[586,46,574,44],[587,12,575,8],[587,13,575,9],[587,14,575,10],[588,10,576,4],[589,8,577,0],[590,8,579,0],[590,17,579,9,"_advanceReadiness"],[590,34,579,26,"_advanceReadiness"],[590,35,579,27,"dbInfo"],[590,41,579,33],[590,43,579,35],[591,10,580,4],[591,14,580,8,"dbContext"],[591,23,580,17],[591,26,580,20,"dbContexts"],[591,36,580,30],[591,37,580,31,"dbInfo"],[591,43,580,37],[591,44,580,38,"name"],[591,48,580,42],[591,49,580,43],[593,10,582,4],[594,10,583,4],[594,14,583,8,"deferredOperation"],[594,31,583,25],[594,34,583,28,"dbContext"],[594,43,583,37],[594,44,583,38,"deferredOperations"],[594,62,583,56],[594,63,583,57,"pop"],[594,66,583,60],[594,67,583,61],[594,68,583,62],[596,10,585,4],[597,10,586,4],[598,10,587,4],[598,14,587,8,"deferredOperation"],[598,31,587,25],[598,33,587,27],[599,12,588,8,"deferredOperation"],[599,29,588,25],[599,30,588,26,"resolve"],[599,37,588,33],[599,38,588,34],[599,39,588,35],[600,12,589,8],[600,19,589,15,"deferredOperation"],[600,36,589,32],[600,37,589,33,"promise"],[600,44,589,40],[601,10,590,4],[602,8,591,0],[603,8,593,0],[603,17,593,9,"_rejectReadiness"],[603,33,593,25,"_rejectReadiness"],[603,34,593,26,"dbInfo"],[603,40,593,32],[603,42,593,34,"err"],[603,45,593,37],[603,47,593,39],[604,10,594,4],[604,14,594,8,"dbContext"],[604,23,594,17],[604,26,594,20,"dbContexts"],[604,36,594,30],[604,37,594,31,"dbInfo"],[604,43,594,37],[604,44,594,38,"name"],[604,48,594,42],[604,49,594,43],[606,10,596,4],[607,10,597,4],[607,14,597,8,"deferredOperation"],[607,31,597,25],[607,34,597,28,"dbContext"],[607,43,597,37],[607,44,597,38,"deferredOperations"],[607,62,597,56],[607,63,597,57,"pop"],[607,66,597,60],[607,67,597,61],[607,68,597,62],[609,10,599,4],[610,10,600,4],[611,10,601,4],[611,14,601,8,"deferredOperation"],[611,31,601,25],[611,33,601,27],[612,12,602,8,"deferredOperation"],[612,29,602,25],[612,30,602,26,"reject"],[612,36,602,32],[612,37,602,33,"err"],[612,40,602,36],[612,41,602,37],[613,12,603,8],[613,19,603,15,"deferredOperation"],[613,36,603,32],[613,37,603,33,"promise"],[613,44,603,40],[614,10,604,4],[615,8,605,0],[616,8,607,0],[616,17,607,9,"_getConnection"],[616,31,607,23,"_getConnection"],[616,32,607,24,"dbInfo"],[616,38,607,30],[616,40,607,32,"upgradeNeeded"],[616,53,607,45],[616,55,607,47],[617,10,608,4],[617,17,608,11],[617,21,608,15,"Promise$1"],[617,30,608,24],[617,31,608,25],[617,41,608,35,"resolve"],[617,48,608,42],[617,50,608,44,"reject"],[617,56,608,50],[617,58,608,52],[618,12,609,8,"dbContexts"],[618,22,609,18],[618,23,609,19,"dbInfo"],[618,29,609,25],[618,30,609,26,"name"],[618,34,609,30],[618,35,609,31],[618,38,609,34,"dbContexts"],[618,48,609,44],[618,49,609,45,"dbInfo"],[618,55,609,51],[618,56,609,52,"name"],[618,60,609,56],[618,61,609,57],[618,65,609,61,"createDbContext"],[618,80,609,76],[618,81,609,77],[618,82,609,78],[619,12,611,8],[619,16,611,12,"dbInfo"],[619,22,611,18],[619,23,611,19,"db"],[619,25,611,21],[619,27,611,23],[620,14,612,12],[620,18,612,16,"upgradeNeeded"],[620,31,612,29],[620,33,612,31],[621,16,613,16,"_deferReadiness"],[621,31,613,31],[621,32,613,32,"dbInfo"],[621,38,613,38],[621,39,613,39],[622,16,614,16,"dbInfo"],[622,22,614,22],[622,23,614,23,"db"],[622,25,614,25],[622,26,614,26,"close"],[622,31,614,31],[622,32,614,32],[622,33,614,33],[623,14,615,12],[623,15,615,13],[623,21,615,19],[624,16,616,16],[624,23,616,23,"resolve"],[624,30,616,30],[624,31,616,31,"dbInfo"],[624,37,616,37],[624,38,616,38,"db"],[624,40,616,40],[624,41,616,41],[625,14,617,12],[626,12,618,8],[627,12,620,8],[627,16,620,12,"dbArgs"],[627,22,620,18],[627,25,620,21],[627,26,620,22,"dbInfo"],[627,32,620,28],[627,33,620,29,"name"],[627,37,620,33],[627,38,620,34],[628,12,622,8],[628,16,622,12,"upgradeNeeded"],[628,29,622,25],[628,31,622,27],[629,14,623,12,"dbArgs"],[629,20,623,18],[629,21,623,19,"push"],[629,25,623,23],[629,26,623,24,"dbInfo"],[629,32,623,30],[629,33,623,31,"version"],[629,40,623,38],[629,41,623,39],[630,12,624,8],[631,12,626,8],[631,16,626,12,"openreq"],[631,23,626,19],[631,26,626,22,"idb"],[631,29,626,25],[631,30,626,26,"open"],[631,34,626,30],[631,35,626,31,"apply"],[631,40,626,36],[631,41,626,37,"idb"],[631,44,626,40],[631,46,626,42,"dbArgs"],[631,52,626,48],[631,53,626,49],[632,12,628,8],[632,16,628,12,"upgradeNeeded"],[632,29,628,25],[632,31,628,27],[633,14,629,12,"openreq"],[633,21,629,19],[633,22,629,20,"onupgradeneeded"],[633,37,629,35],[633,40,629,38],[633,50,629,48,"e"],[633,51,629,49],[633,53,629,51],[634,16,630,16],[634,20,630,20,"db"],[634,22,630,22],[634,25,630,25,"openreq"],[634,32,630,32],[634,33,630,33,"result"],[634,39,630,39],[635,16,631,16],[635,20,631,20],[636,18,632,20,"db"],[636,20,632,22],[636,21,632,23,"createObjectStore"],[636,38,632,40],[636,39,632,41,"dbInfo"],[636,45,632,47],[636,46,632,48,"storeName"],[636,55,632,57],[636,56,632,58],[637,18,633,20],[637,22,633,24,"e"],[637,23,633,25],[637,24,633,26,"oldVersion"],[637,34,633,36],[637,38,633,40],[637,39,633,41],[637,41,633,43],[638,20,634,24],[639,20,635,24,"db"],[639,22,635,26],[639,23,635,27,"createObjectStore"],[639,40,635,44],[639,41,635,45,"DETECT_BLOB_SUPPORT_STORE"],[639,66,635,70],[639,67,635,71],[640,18,636,20],[641,16,637,16],[641,17,637,17],[641,18,637,18],[641,25,637,25,"ex"],[641,27,637,27],[641,29,637,29],[642,18,638,20],[642,22,638,24,"ex"],[642,24,638,26],[642,25,638,27,"name"],[642,29,638,31],[642,34,638,36],[642,51,638,53],[642,53,638,55],[643,20,639,24,"console"],[643,27,639,31],[643,28,639,32,"warn"],[643,32,639,36],[643,33,639,37],[643,49,639,53],[643,52,639,56,"dbInfo"],[643,58,639,62],[643,59,639,63,"name"],[643,63,639,67],[643,66,639,70],[643,69,639,73],[643,72,639,76],[643,106,639,110],[643,109,639,113,"e"],[643,110,639,114],[643,111,639,115,"oldVersion"],[643,121,639,125],[643,124,639,128],[643,138,639,142],[643,141,639,145,"e"],[643,142,639,146],[643,143,639,147,"newVersion"],[643,153,639,157],[643,156,639,160],[643,177,639,181],[643,180,639,184,"dbInfo"],[643,186,639,190],[643,187,639,191,"storeName"],[643,196,639,200],[643,199,639,203],[643,218,639,222],[643,219,639,223],[644,18,640,20],[644,19,640,21],[644,25,640,27],[645,20,641,24],[645,26,641,30,"ex"],[645,28,641,32],[646,18,642,20],[647,16,643,16],[648,14,644,12],[648,15,644,13],[649,12,645,8],[650,12,647,8,"openreq"],[650,19,647,15],[650,20,647,16,"onerror"],[650,27,647,23],[650,30,647,26],[650,40,647,36,"e"],[650,41,647,37],[650,43,647,39],[651,14,648,12,"e"],[651,15,648,13],[651,16,648,14,"preventDefault"],[651,30,648,28],[651,31,648,29],[651,32,648,30],[652,14,649,12,"reject"],[652,20,649,18],[652,21,649,19,"openreq"],[652,28,649,26],[652,29,649,27,"error"],[652,34,649,32],[652,35,649,33],[653,12,650,8],[653,13,650,9],[654,12,652,8,"openreq"],[654,19,652,15],[654,20,652,16,"onsuccess"],[654,29,652,25],[654,32,652,28],[654,44,652,40],[655,14,653,12],[655,18,653,16,"db"],[655,20,653,18],[655,23,653,21,"openreq"],[655,30,653,28],[655,31,653,29,"result"],[655,37,653,35],[656,14,654,12,"db"],[656,16,654,14],[656,17,654,15,"onversionchange"],[656,32,654,30],[656,35,654,33],[656,45,654,43,"e"],[656,46,654,44],[656,48,654,46],[657,16,655,16],[658,16,656,16],[659,16,657,16],[660,16,658,16],[661,16,659,16],[662,16,660,16,"e"],[662,17,660,17],[662,18,660,18,"target"],[662,24,660,24],[662,25,660,25,"close"],[662,30,660,30],[662,31,660,31],[662,32,660,32],[663,14,661,12],[663,15,661,13],[664,14,662,12,"resolve"],[664,21,662,19],[664,22,662,20,"db"],[664,24,662,22],[664,25,662,23],[665,14,663,12,"_advanceReadiness"],[665,31,663,29],[665,32,663,30,"dbInfo"],[665,38,663,36],[665,39,663,37],[666,12,664,8],[666,13,664,9],[667,10,665,4],[667,11,665,5],[667,12,665,6],[668,8,666,0],[669,8,668,0],[669,17,668,9,"_getOriginalConnection"],[669,39,668,31,"_getOriginalConnection"],[669,40,668,32,"dbInfo"],[669,46,668,38],[669,48,668,40],[670,10,669,4],[670,17,669,11,"_getConnection"],[670,31,669,25],[670,32,669,26,"dbInfo"],[670,38,669,32],[670,40,669,34],[670,45,669,39],[670,46,669,40],[671,8,670,0],[672,8,672,0],[672,17,672,9,"_getUpgradedConnection"],[672,39,672,31,"_getUpgradedConnection"],[672,40,672,32,"dbInfo"],[672,46,672,38],[672,48,672,40],[673,10,673,4],[673,17,673,11,"_getConnection"],[673,31,673,25],[673,32,673,26,"dbInfo"],[673,38,673,32],[673,40,673,34],[673,44,673,38],[673,45,673,39],[674,8,674,0],[675,8,676,0],[675,17,676,9,"_isUpgradeNeeded"],[675,33,676,25,"_isUpgradeNeeded"],[675,34,676,26,"dbInfo"],[675,40,676,32],[675,42,676,34,"defaultVersion"],[675,56,676,48],[675,58,676,50],[676,10,677,4],[676,14,677,8],[676,15,677,9,"dbInfo"],[676,21,677,15],[676,22,677,16,"db"],[676,24,677,18],[676,26,677,20],[677,12,678,8],[677,19,678,15],[677,23,678,19],[678,10,679,4],[679,10,681,4],[679,14,681,8,"isNewStore"],[679,24,681,18],[679,27,681,21],[679,28,681,22,"dbInfo"],[679,34,681,28],[679,35,681,29,"db"],[679,37,681,31],[679,38,681,32,"objectStoreNames"],[679,54,681,48],[679,55,681,49,"contains"],[679,63,681,57],[679,64,681,58,"dbInfo"],[679,70,681,64],[679,71,681,65,"storeName"],[679,80,681,74],[679,81,681,75],[680,10,682,4],[680,14,682,8,"isDowngrade"],[680,25,682,19],[680,28,682,22,"dbInfo"],[680,34,682,28],[680,35,682,29,"version"],[680,42,682,36],[680,45,682,39,"dbInfo"],[680,51,682,45],[680,52,682,46,"db"],[680,54,682,48],[680,55,682,49,"version"],[680,62,682,56],[681,10,683,4],[681,14,683,8,"isUpgrade"],[681,23,683,17],[681,26,683,20,"dbInfo"],[681,32,683,26],[681,33,683,27,"version"],[681,40,683,34],[681,43,683,37,"dbInfo"],[681,49,683,43],[681,50,683,44,"db"],[681,52,683,46],[681,53,683,47,"version"],[681,60,683,54],[682,10,685,4],[682,14,685,8,"isDowngrade"],[682,25,685,19],[682,27,685,21],[683,12,686,8],[684,12,687,8],[685,12,688,8],[685,16,688,12,"dbInfo"],[685,22,688,18],[685,23,688,19,"version"],[685,30,688,26],[685,35,688,31,"defaultVersion"],[685,49,688,45],[685,51,688,47],[686,14,689,12,"console"],[686,21,689,19],[686,22,689,20,"warn"],[686,26,689,24],[686,27,689,25],[686,43,689,41],[686,46,689,44,"dbInfo"],[686,52,689,50],[686,53,689,51,"name"],[686,57,689,55],[686,60,689,58],[686,63,689,61],[686,66,689,64],[686,102,689,100],[686,105,689,103,"dbInfo"],[686,111,689,109],[686,112,689,110,"db"],[686,114,689,112],[686,115,689,113,"version"],[686,122,689,120],[686,125,689,123],[686,139,689,137],[686,142,689,140,"dbInfo"],[686,148,689,146],[686,149,689,147,"version"],[686,156,689,154],[686,159,689,157],[686,162,689,160],[686,163,689,161],[687,12,690,8],[688,12,691,8],[689,12,692,8,"dbInfo"],[689,18,692,14],[689,19,692,15,"version"],[689,26,692,22],[689,29,692,25,"dbInfo"],[689,35,692,31],[689,36,692,32,"db"],[689,38,692,34],[689,39,692,35,"version"],[689,46,692,42],[690,10,693,4],[691,10,695,4],[691,14,695,8,"isUpgrade"],[691,23,695,17],[691,27,695,21,"isNewStore"],[691,37,695,31],[691,39,695,33],[692,12,696,8],[693,12,697,8],[694,12,698,8],[695,12,699,8],[695,16,699,12,"isNewStore"],[695,26,699,22],[695,28,699,24],[696,14,700,12],[696,18,700,16,"incVersion"],[696,28,700,26],[696,31,700,29,"dbInfo"],[696,37,700,35],[696,38,700,36,"db"],[696,40,700,38],[696,41,700,39,"version"],[696,48,700,46],[696,51,700,49],[696,52,700,50],[697,14,701,12],[697,18,701,16,"incVersion"],[697,28,701,26],[697,31,701,29,"dbInfo"],[697,37,701,35],[697,38,701,36,"version"],[697,45,701,43],[697,47,701,45],[698,16,702,16,"dbInfo"],[698,22,702,22],[698,23,702,23,"version"],[698,30,702,30],[698,33,702,33,"incVersion"],[698,43,702,43],[699,14,703,12],[700,12,704,8],[701,12,706,8],[701,19,706,15],[701,23,706,19],[702,10,707,4],[703,10,709,4],[703,17,709,11],[703,22,709,16],[704,8,710,0],[706,8,712,0],[707,8,713,0],[707,17,713,9,"_encodeBlob"],[707,28,713,20,"_encodeBlob"],[707,29,713,21,"blob"],[707,33,713,25],[707,35,713,27],[708,10,714,4],[708,17,714,11],[708,21,714,15,"Promise$1"],[708,30,714,24],[708,31,714,25],[708,41,714,35,"resolve"],[708,48,714,42],[708,50,714,44,"reject"],[708,56,714,50],[708,58,714,52],[709,12,715,8],[709,16,715,12,"reader"],[709,22,715,18],[709,25,715,21],[709,29,715,25,"FileReader"],[709,39,715,35],[709,40,715,36],[709,41,715,37],[710,12,716,8,"reader"],[710,18,716,14],[710,19,716,15,"onerror"],[710,26,716,22],[710,29,716,25,"reject"],[710,35,716,31],[711,12,717,8,"reader"],[711,18,717,14],[711,19,717,15,"onloadend"],[711,28,717,24],[711,31,717,27],[711,41,717,37,"e"],[711,42,717,38],[711,44,717,40],[712,14,718,12],[712,18,718,16,"base64"],[712,24,718,22],[712,27,718,25,"btoa"],[712,31,718,29],[712,32,718,30,"e"],[712,33,718,31],[712,34,718,32,"target"],[712,40,718,38],[712,41,718,39,"result"],[712,47,718,45],[712,51,718,49],[712,53,718,51],[712,54,718,52],[713,14,719,12,"resolve"],[713,21,719,19],[713,22,719,20],[714,16,720,16,"__local_forage_encoded_blob"],[714,43,720,43],[714,45,720,45],[714,49,720,49],[715,16,721,16,"data"],[715,20,721,20],[715,22,721,22,"base64"],[715,28,721,28],[716,16,722,16,"type"],[716,20,722,20],[716,22,722,22,"blob"],[716,26,722,26],[716,27,722,27,"type"],[717,14,723,12],[717,15,723,13],[717,16,723,14],[718,12,724,8],[718,13,724,9],[719,12,725,8,"reader"],[719,18,725,14],[719,19,725,15,"readAsBinaryString"],[719,37,725,33],[719,38,725,34,"blob"],[719,42,725,38],[719,43,725,39],[720,10,726,4],[720,11,726,5],[720,12,726,6],[721,8,727,0],[723,8,729,0],[724,8,730,0],[724,17,730,9,"_decodeBlob"],[724,28,730,20,"_decodeBlob"],[724,29,730,21,"encodedBlob"],[724,40,730,32],[724,42,730,34],[725,10,731,4],[725,14,731,8,"arrayBuff"],[725,23,731,17],[725,26,731,20,"_binStringToArrayBuffer"],[725,49,731,43],[725,50,731,44,"atob"],[725,54,731,48],[725,55,731,49,"encodedBlob"],[725,66,731,60],[725,67,731,61,"data"],[725,71,731,65],[725,72,731,66],[725,73,731,67],[726,10,732,4],[726,17,732,11,"createBlob"],[726,27,732,21],[726,28,732,22],[726,29,732,23,"arrayBuff"],[726,38,732,32],[726,39,732,33],[726,41,732,35],[727,12,732,37,"type"],[727,16,732,41],[727,18,732,43,"encodedBlob"],[727,29,732,54],[727,30,732,55,"type"],[728,10,732,60],[728,11,732,61],[728,12,732,62],[729,8,733,0],[731,8,735,0],[732,8,736,0],[732,17,736,9,"_isEncodedBlob"],[732,31,736,23,"_isEncodedBlob"],[732,32,736,24,"value"],[732,37,736,29],[732,39,736,31],[733,10,737,4],[733,17,737,11,"value"],[733,22,737,16],[733,26,737,20,"value"],[733,31,737,25],[733,32,737,26,"__local_forage_encoded_blob"],[733,59,737,53],[734,8,738,0],[736,8,740,0],[737,8,741,0],[738,8,742,0],[739,8,743,0],[740,8,744,0],[740,17,744,9,"_fullyReady"],[740,28,744,20,"_fullyReady"],[740,29,744,21,"callback"],[740,37,744,29],[740,39,744,31],[741,10,745,4],[741,14,745,8,"self"],[741,18,745,12],[741,21,745,15],[741,25,745,19],[742,10,747,4],[742,14,747,8,"promise"],[742,21,747,15],[742,24,747,18,"self"],[742,28,747,22],[742,29,747,23,"_initReady"],[742,39,747,33],[742,40,747,34],[742,41,747,35],[742,42,747,36,"then"],[742,46,747,40],[742,47,747,41],[742,59,747,53],[743,12,748,8],[743,16,748,12,"dbContext"],[743,25,748,21],[743,28,748,24,"dbContexts"],[743,38,748,34],[743,39,748,35,"self"],[743,43,748,39],[743,44,748,40,"_dbInfo"],[743,51,748,47],[743,52,748,48,"name"],[743,56,748,52],[743,57,748,53],[744,12,750,8],[744,16,750,12,"dbContext"],[744,25,750,21],[744,29,750,25,"dbContext"],[744,38,750,34],[744,39,750,35,"dbReady"],[744,46,750,42],[744,48,750,44],[745,14,751,12],[745,21,751,19,"dbContext"],[745,30,751,28],[745,31,751,29,"dbReady"],[745,38,751,36],[746,12,752,8],[747,10,753,4],[747,11,753,5],[747,12,753,6],[748,10,755,4,"executeTwoCallbacks"],[748,29,755,23],[748,30,755,24,"promise"],[748,37,755,31],[748,39,755,33,"callback"],[748,47,755,41],[748,49,755,43,"callback"],[748,57,755,51],[748,58,755,52],[749,10,756,4],[749,17,756,11,"promise"],[749,24,756,18],[750,8,757,0],[752,8,759,0],[753,8,760,0],[754,8,761,0],[755,8,762,0],[755,17,762,9,"_tryReconnect"],[755,30,762,22,"_tryReconnect"],[755,31,762,23,"dbInfo"],[755,37,762,29],[755,39,762,31],[756,10,763,4,"_deferReadiness"],[756,25,763,19],[756,26,763,20,"dbInfo"],[756,32,763,26],[756,33,763,27],[757,10,765,4],[757,14,765,8,"dbContext"],[757,23,765,17],[757,26,765,20,"dbContexts"],[757,36,765,30],[757,37,765,31,"dbInfo"],[757,43,765,37],[757,44,765,38,"name"],[757,48,765,42],[757,49,765,43],[758,10,766,4],[758,14,766,8,"forages"],[758,21,766,15],[758,24,766,18,"dbContext"],[758,33,766,27],[758,34,766,28,"forages"],[758,41,766,35],[759,10,768,4],[759,15,768,9],[759,19,768,13,"i"],[759,20,768,14],[759,23,768,17],[759,24,768,18],[759,26,768,20,"i"],[759,27,768,21],[759,30,768,24,"forages"],[759,37,768,31],[759,38,768,32,"length"],[759,44,768,38],[759,46,768,40,"i"],[759,47,768,41],[759,49,768,43],[759,51,768,45],[760,12,769,8],[760,16,769,12,"forage"],[760,22,769,18],[760,25,769,21,"forages"],[760,32,769,28],[760,33,769,29,"i"],[760,34,769,30],[760,35,769,31],[761,12,770,8],[761,16,770,12,"forage"],[761,22,770,18],[761,23,770,19,"_dbInfo"],[761,30,770,26],[761,31,770,27,"db"],[761,33,770,29],[761,35,770,31],[762,14,771,12,"forage"],[762,20,771,18],[762,21,771,19,"_dbInfo"],[762,28,771,26],[762,29,771,27,"db"],[762,31,771,29],[762,32,771,30,"close"],[762,37,771,35],[762,38,771,36],[762,39,771,37],[763,14,772,12,"forage"],[763,20,772,18],[763,21,772,19,"_dbInfo"],[763,28,772,26],[763,29,772,27,"db"],[763,31,772,29],[763,34,772,32],[763,38,772,36],[764,12,773,8],[765,10,774,4],[766,10,775,4,"dbInfo"],[766,16,775,10],[766,17,775,11,"db"],[766,19,775,13],[766,22,775,16],[766,26,775,20],[767,10,777,4],[767,17,777,11,"_getOriginalConnection"],[767,39,777,33],[767,40,777,34,"dbInfo"],[767,46,777,40],[767,47,777,41],[767,48,777,42,"then"],[767,52,777,46],[767,53,777,47],[767,63,777,57,"db"],[767,65,777,59],[767,67,777,61],[768,12,778,8,"dbInfo"],[768,18,778,14],[768,19,778,15,"db"],[768,21,778,17],[768,24,778,20,"db"],[768,26,778,22],[769,12,779,8],[769,16,779,12,"_isUpgradeNeeded"],[769,32,779,28],[769,33,779,29,"dbInfo"],[769,39,779,35],[769,40,779,36],[769,42,779,38],[770,14,780,12],[771,14,781,12],[771,21,781,19,"_getUpgradedConnection"],[771,43,781,41],[771,44,781,42,"dbInfo"],[771,50,781,48],[771,51,781,49],[772,12,782,8],[773,12,783,8],[773,19,783,15,"db"],[773,21,783,17],[774,10,784,4],[774,11,784,5],[774,12,784,6],[774,13,784,7,"then"],[774,17,784,11],[774,18,784,12],[774,28,784,22,"db"],[774,30,784,24],[774,32,784,26],[775,12,785,8],[776,12,786,8],[777,12,787,8,"dbInfo"],[777,18,787,14],[777,19,787,15,"db"],[777,21,787,17],[777,24,787,20,"dbContext"],[777,33,787,29],[777,34,787,30,"db"],[777,36,787,32],[777,39,787,35,"db"],[777,41,787,37],[778,12,788,8],[778,17,788,13],[778,21,788,17,"i"],[778,22,788,18],[778,25,788,21],[778,26,788,22],[778,28,788,24,"i"],[778,29,788,25],[778,32,788,28,"forages"],[778,39,788,35],[778,40,788,36,"length"],[778,46,788,42],[778,48,788,44,"i"],[778,49,788,45],[778,51,788,47],[778,53,788,49],[779,14,789,12,"forages"],[779,21,789,19],[779,22,789,20,"i"],[779,23,789,21],[779,24,789,22],[779,25,789,23,"_dbInfo"],[779,32,789,30],[779,33,789,31,"db"],[779,35,789,33],[779,38,789,36,"db"],[779,40,789,38],[780,12,790,8],[781,10,791,4],[781,11,791,5],[781,12,791,6],[781,13,791,7],[781,20,791,14],[781,21,791,15],[781,22,791,16],[781,32,791,26,"err"],[781,35,791,29],[781,37,791,31],[782,12,792,8,"_rejectReadiness"],[782,28,792,24],[782,29,792,25,"dbInfo"],[782,35,792,31],[782,37,792,33,"err"],[782,40,792,36],[782,41,792,37],[783,12,793,8],[783,18,793,14,"err"],[783,21,793,17],[784,10,794,4],[784,11,794,5],[784,12,794,6],[785,8,795,0],[787,8,797,0],[788,8,798,0],[789,8,799,0],[789,17,799,9,"createTransaction"],[789,34,799,26,"createTransaction"],[789,35,799,27,"dbInfo"],[789,41,799,33],[789,43,799,35,"mode"],[789,47,799,39],[789,49,799,41,"callback"],[789,57,799,49],[789,59,799,51,"retries"],[789,66,799,58],[789,68,799,60],[790,10,800,4],[790,14,800,8,"retries"],[790,21,800,15],[790,26,800,20,"undefined"],[790,35,800,29],[790,37,800,31],[791,12,801,8,"retries"],[791,19,801,15],[791,22,801,18],[791,23,801,19],[792,10,802,4],[793,10,804,4],[793,14,804,8],[794,12,805,8],[794,16,805,12,"tx"],[794,18,805,14],[794,21,805,17,"dbInfo"],[794,27,805,23],[794,28,805,24,"db"],[794,30,805,26],[794,31,805,27,"transaction"],[794,42,805,38],[794,43,805,39,"dbInfo"],[794,49,805,45],[794,50,805,46,"storeName"],[794,59,805,55],[794,61,805,57,"mode"],[794,65,805,61],[794,66,805,62],[795,12,806,8,"callback"],[795,20,806,16],[795,21,806,17],[795,25,806,21],[795,27,806,23,"tx"],[795,29,806,25],[795,30,806,26],[796,10,807,4],[796,11,807,5],[796,12,807,6],[796,19,807,13,"err"],[796,22,807,16],[796,24,807,18],[797,12,808,8],[797,16,808,12,"retries"],[797,23,808,19],[797,26,808,22],[797,27,808,23],[797,32,808,28],[797,33,808,29,"dbInfo"],[797,39,808,35],[797,40,808,36,"db"],[797,42,808,38],[797,46,808,42,"err"],[797,49,808,45],[797,50,808,46,"name"],[797,54,808,50],[797,59,808,55],[797,78,808,74],[797,82,808,78,"err"],[797,85,808,81],[797,86,808,82,"name"],[797,90,808,86],[797,95,808,91],[797,110,808,106],[797,111,808,107],[797,113,808,109],[798,14,809,12],[798,21,809,19,"Promise$1"],[798,30,809,28],[798,31,809,29,"resolve"],[798,38,809,36],[798,39,809,37],[798,40,809,38],[798,41,809,39,"then"],[798,45,809,43],[798,46,809,44],[798,58,809,56],[799,16,810,16],[799,20,810,20],[799,21,810,21,"dbInfo"],[799,27,810,27],[799,28,810,28,"db"],[799,30,810,30],[799,34,810,34,"err"],[799,37,810,37],[799,38,810,38,"name"],[799,42,810,42],[799,47,810,47],[799,62,810,62],[799,66,810,66],[799,67,810,67,"dbInfo"],[799,73,810,73],[799,74,810,74,"db"],[799,76,810,76],[799,77,810,77,"objectStoreNames"],[799,93,810,93],[799,94,810,94,"contains"],[799,102,810,102],[799,103,810,103,"dbInfo"],[799,109,810,109],[799,110,810,110,"storeName"],[799,119,810,119],[799,120,810,120],[799,124,810,124,"dbInfo"],[799,130,810,130],[799,131,810,131,"version"],[799,138,810,138],[799,142,810,142,"dbInfo"],[799,148,810,148],[799,149,810,149,"db"],[799,151,810,151],[799,152,810,152,"version"],[799,159,810,159],[799,161,810,161],[800,18,811,20],[801,18,812,20],[801,22,812,24,"dbInfo"],[801,28,812,30],[801,29,812,31,"db"],[801,31,812,33],[801,33,812,35],[802,20,813,24,"dbInfo"],[802,26,813,30],[802,27,813,31,"version"],[802,34,813,38],[802,37,813,41,"dbInfo"],[802,43,813,47],[802,44,813,48,"db"],[802,46,813,50],[802,47,813,51,"version"],[802,54,813,58],[802,57,813,61],[802,58,813,62],[803,18,814,20],[804,18,815,20],[805,18,816,20],[805,25,816,27,"_getUpgradedConnection"],[805,47,816,49],[805,48,816,50,"dbInfo"],[805,54,816,56],[805,55,816,57],[806,16,817,16],[807,14,818,12],[807,15,818,13],[807,16,818,14],[807,17,818,15,"then"],[807,21,818,19],[807,22,818,20],[807,34,818,32],[808,16,819,16],[808,23,819,23,"_tryReconnect"],[808,36,819,36],[808,37,819,37,"dbInfo"],[808,43,819,43],[808,44,819,44],[808,45,819,45,"then"],[808,49,819,49],[808,50,819,50],[808,62,819,62],[809,18,820,20,"createTransaction"],[809,35,820,37],[809,36,820,38,"dbInfo"],[809,42,820,44],[809,44,820,46,"mode"],[809,48,820,50],[809,50,820,52,"callback"],[809,58,820,60],[809,60,820,62,"retries"],[809,67,820,69],[809,70,820,72],[809,71,820,73],[809,72,820,74],[810,16,821,16],[810,17,821,17],[810,18,821,18],[811,14,822,12],[811,15,822,13],[811,16,822,14],[811,17,822,15],[811,24,822,22],[811,25,822,23],[811,26,822,24,"callback"],[811,34,822,32],[811,35,822,33],[812,12,823,8],[813,12,825,8,"callback"],[813,20,825,16],[813,21,825,17,"err"],[813,24,825,20],[813,25,825,21],[814,10,826,4],[815,8,827,0],[816,8,829,0],[816,17,829,9,"createDbContext"],[816,32,829,24,"createDbContext"],[816,33,829,24],[816,35,829,27],[817,10,830,4],[817,17,830,11],[818,12,831,8],[819,12,832,8,"forages"],[819,19,832,15],[819,21,832,17],[819,23,832,19],[820,12,833,8],[821,12,834,8,"db"],[821,14,834,10],[821,16,834,12],[821,20,834,16],[822,12,835,8],[823,12,836,8,"dbReady"],[823,19,836,15],[823,21,836,17],[823,25,836,21],[824,12,837,8],[825,12,838,8,"deferredOperations"],[825,30,838,26],[825,32,838,28],[826,10,839,4],[826,11,839,5],[827,8,840,0],[829,8,842,0],[830,8,843,0],[831,8,844,0],[831,17,844,9,"_initStorage"],[831,29,844,21,"_initStorage"],[831,30,844,22,"options"],[831,37,844,29],[831,39,844,31],[832,10,845,4],[832,14,845,8,"self"],[832,18,845,12],[832,21,845,15],[832,25,845,19],[833,10,846,4],[833,14,846,8,"dbInfo"],[833,20,846,14],[833,23,846,17],[834,12,847,8,"db"],[834,14,847,10],[834,16,847,12],[835,10,848,4],[835,11,848,5],[836,10,850,4],[836,14,850,8,"options"],[836,21,850,15],[836,23,850,17],[837,12,851,8],[837,17,851,13],[837,21,851,17,"i"],[837,22,851,18],[837,26,851,22,"options"],[837,33,851,29],[837,35,851,31],[838,14,852,12,"dbInfo"],[838,20,852,18],[838,21,852,19,"i"],[838,22,852,20],[838,23,852,21],[838,26,852,24,"options"],[838,33,852,31],[838,34,852,32,"i"],[838,35,852,33],[838,36,852,34],[839,12,853,8],[840,10,854,4],[842,10,856,4],[843,10,857,4],[843,14,857,8,"dbContext"],[843,23,857,17],[843,26,857,20,"dbContexts"],[843,36,857,30],[843,37,857,31,"dbInfo"],[843,43,857,37],[843,44,857,38,"name"],[843,48,857,42],[843,49,857,43],[845,10,859,4],[846,10,860,4],[846,14,860,8],[846,15,860,9,"dbContext"],[846,24,860,18],[846,26,860,20],[847,12,861,8,"dbContext"],[847,21,861,17],[847,24,861,20,"createDbContext"],[847,39,861,35],[847,40,861,36],[847,41,861,37],[848,12,862,8],[849,12,863,8,"dbContexts"],[849,22,863,18],[849,23,863,19,"dbInfo"],[849,29,863,25],[849,30,863,26,"name"],[849,34,863,30],[849,35,863,31],[849,38,863,34,"dbContext"],[849,47,863,43],[850,10,864,4],[852,10,866,4],[853,10,867,4,"dbContext"],[853,19,867,13],[853,20,867,14,"forages"],[853,27,867,21],[853,28,867,22,"push"],[853,32,867,26],[853,33,867,27,"self"],[853,37,867,31],[853,38,867,32],[855,10,869,4],[856,10,870,4],[856,14,870,8],[856,15,870,9,"self"],[856,19,870,13],[856,20,870,14,"_initReady"],[856,30,870,24],[856,32,870,26],[857,12,871,8,"self"],[857,16,871,12],[857,17,871,13,"_initReady"],[857,27,871,23],[857,30,871,26,"self"],[857,34,871,30],[857,35,871,31,"ready"],[857,40,871,36],[858,12,872,8,"self"],[858,16,872,12],[858,17,872,13,"ready"],[858,22,872,18],[858,25,872,21,"_fullyReady"],[858,36,872,32],[859,10,873,4],[861,10,875,4],[862,10,876,4],[862,14,876,8,"initPromises"],[862,26,876,20],[862,29,876,23],[862,31,876,25],[863,10,878,4],[863,19,878,13,"ignoreErrors"],[863,31,878,25,"ignoreErrors"],[863,32,878,25],[863,34,878,28],[864,12,879,8],[865,12,880,8],[866,12,881,8],[866,19,881,15,"Promise$1"],[866,28,881,24],[866,29,881,25,"resolve"],[866,36,881,32],[866,37,881,33],[866,38,881,34],[867,10,882,4],[868,10,884,4],[868,15,884,9],[868,19,884,13,"j"],[868,20,884,14],[868,23,884,17],[868,24,884,18],[868,26,884,20,"j"],[868,27,884,21],[868,30,884,24,"dbContext"],[868,39,884,33],[868,40,884,34,"forages"],[868,47,884,41],[868,48,884,42,"length"],[868,54,884,48],[868,56,884,50,"j"],[868,57,884,51],[868,59,884,53],[868,61,884,55],[869,12,885,8],[869,16,885,12,"forage"],[869,22,885,18],[869,25,885,21,"dbContext"],[869,34,885,30],[869,35,885,31,"forages"],[869,42,885,38],[869,43,885,39,"j"],[869,44,885,40],[869,45,885,41],[870,12,886,8],[870,16,886,12,"forage"],[870,22,886,18],[870,27,886,23,"self"],[870,31,886,27],[870,33,886,29],[871,14,887,12],[872,14,888,12,"initPromises"],[872,26,888,24],[872,27,888,25,"push"],[872,31,888,29],[872,32,888,30,"forage"],[872,38,888,36],[872,39,888,37,"_initReady"],[872,49,888,47],[872,50,888,48],[872,51,888,49],[872,52,888,50],[872,59,888,57],[872,60,888,58],[872,61,888,59,"ignoreErrors"],[872,73,888,71],[872,74,888,72],[872,75,888,73],[873,12,889,8],[874,10,890,4],[876,10,892,4],[877,10,893,4],[877,14,893,8,"forages"],[877,21,893,15],[877,24,893,18,"dbContext"],[877,33,893,27],[877,34,893,28,"forages"],[877,41,893,35],[877,42,893,36,"slice"],[877,47,893,41],[877,48,893,42],[877,49,893,43],[877,50,893,44],[879,10,895,4],[880,10,896,4],[881,10,897,4],[881,17,897,11,"Promise$1"],[881,26,897,20],[881,27,897,21,"all"],[881,30,897,24],[881,31,897,25,"initPromises"],[881,43,897,37],[881,44,897,38],[881,45,897,39,"then"],[881,49,897,43],[881,50,897,44],[881,62,897,56],[882,12,898,8,"dbInfo"],[882,18,898,14],[882,19,898,15,"db"],[882,21,898,17],[882,24,898,20,"dbContext"],[882,33,898,29],[882,34,898,30,"db"],[882,36,898,32],[883,12,899,8],[884,12,900,8],[884,19,900,15,"_getOriginalConnection"],[884,41,900,37],[884,42,900,38,"dbInfo"],[884,48,900,44],[884,49,900,45],[885,10,901,4],[885,11,901,5],[885,12,901,6],[885,13,901,7,"then"],[885,17,901,11],[885,18,901,12],[885,28,901,22,"db"],[885,30,901,24],[885,32,901,26],[886,12,902,8,"dbInfo"],[886,18,902,14],[886,19,902,15,"db"],[886,21,902,17],[886,24,902,20,"db"],[886,26,902,22],[887,12,903,8],[887,16,903,12,"_isUpgradeNeeded"],[887,32,903,28],[887,33,903,29,"dbInfo"],[887,39,903,35],[887,41,903,37,"self"],[887,45,903,41],[887,46,903,42,"_defaultConfig"],[887,60,903,56],[887,61,903,57,"version"],[887,68,903,64],[887,69,903,65],[887,71,903,67],[888,14,904,12],[889,14,905,12],[889,21,905,19,"_getUpgradedConnection"],[889,43,905,41],[889,44,905,42,"dbInfo"],[889,50,905,48],[889,51,905,49],[890,12,906,8],[891,12,907,8],[891,19,907,15,"db"],[891,21,907,17],[892,10,908,4],[892,11,908,5],[892,12,908,6],[892,13,908,7,"then"],[892,17,908,11],[892,18,908,12],[892,28,908,22,"db"],[892,30,908,24],[892,32,908,26],[893,12,909,8,"dbInfo"],[893,18,909,14],[893,19,909,15,"db"],[893,21,909,17],[893,24,909,20,"dbContext"],[893,33,909,29],[893,34,909,30,"db"],[893,36,909,32],[893,39,909,35,"db"],[893,41,909,37],[894,12,910,8,"self"],[894,16,910,12],[894,17,910,13,"_dbInfo"],[894,24,910,20],[894,27,910,23,"dbInfo"],[894,33,910,29],[895,12,911,8],[896,12,912,8],[896,17,912,13],[896,21,912,17,"k"],[896,22,912,18],[896,25,912,21],[896,26,912,22],[896,28,912,24,"k"],[896,29,912,25],[896,32,912,28,"forages"],[896,39,912,35],[896,40,912,36,"length"],[896,46,912,42],[896,48,912,44,"k"],[896,49,912,45],[896,51,912,47],[896,53,912,49],[897,14,913,12],[897,18,913,16,"forage"],[897,24,913,22],[897,27,913,25,"forages"],[897,34,913,32],[897,35,913,33,"k"],[897,36,913,34],[897,37,913,35],[898,14,914,12],[898,18,914,16,"forage"],[898,24,914,22],[898,29,914,27,"self"],[898,33,914,31],[898,35,914,33],[899,16,915,16],[900,16,916,16,"forage"],[900,22,916,22],[900,23,916,23,"_dbInfo"],[900,30,916,30],[900,31,916,31,"db"],[900,33,916,33],[900,36,916,36,"dbInfo"],[900,42,916,42],[900,43,916,43,"db"],[900,45,916,45],[901,16,917,16,"forage"],[901,22,917,22],[901,23,917,23,"_dbInfo"],[901,30,917,30],[901,31,917,31,"version"],[901,38,917,38],[901,41,917,41,"dbInfo"],[901,47,917,47],[901,48,917,48,"version"],[901,55,917,55],[902,14,918,12],[903,12,919,8],[904,10,920,4],[904,11,920,5],[904,12,920,6],[905,8,921,0],[906,8,923,0],[906,17,923,9,"getItem"],[906,24,923,16,"getItem"],[906,25,923,17,"key"],[906,28,923,20],[906,30,923,22,"callback"],[906,38,923,30],[906,40,923,32],[907,10,924,4],[907,14,924,8,"self"],[907,18,924,12],[907,21,924,15],[907,25,924,19],[908,10,926,4,"key"],[908,13,926,7],[908,16,926,10,"normalizeKey"],[908,28,926,22],[908,29,926,23,"key"],[908,32,926,26],[908,33,926,27],[909,10,928,4],[909,14,928,8,"promise"],[909,21,928,15],[909,24,928,18],[909,28,928,22,"Promise$1"],[909,37,928,31],[909,38,928,32],[909,48,928,42,"resolve"],[909,55,928,49],[909,57,928,51,"reject"],[909,63,928,57],[909,65,928,59],[910,12,929,8,"self"],[910,16,929,12],[910,17,929,13,"ready"],[910,22,929,18],[910,23,929,19],[910,24,929,20],[910,25,929,21,"then"],[910,29,929,25],[910,30,929,26],[910,42,929,38],[911,14,930,12,"createTransaction"],[911,31,930,29],[911,32,930,30,"self"],[911,36,930,34],[911,37,930,35,"_dbInfo"],[911,44,930,42],[911,46,930,44,"READ_ONLY"],[911,55,930,53],[911,57,930,55],[911,67,930,65,"err"],[911,70,930,68],[911,72,930,70,"transaction"],[911,83,930,81],[911,85,930,83],[912,16,931,16],[912,20,931,20,"err"],[912,23,931,23],[912,25,931,25],[913,18,932,20],[913,25,932,27,"reject"],[913,31,932,33],[913,32,932,34,"err"],[913,35,932,37],[913,36,932,38],[914,16,933,16],[915,16,935,16],[915,20,935,20],[916,18,936,20],[916,22,936,24,"store"],[916,27,936,29],[916,30,936,32,"transaction"],[916,41,936,43],[916,42,936,44,"objectStore"],[916,53,936,55],[916,54,936,56,"self"],[916,58,936,60],[916,59,936,61,"_dbInfo"],[916,66,936,68],[916,67,936,69,"storeName"],[916,76,936,78],[916,77,936,79],[917,18,937,20],[917,22,937,24,"req"],[917,25,937,27],[917,28,937,30,"store"],[917,33,937,35],[917,34,937,36,"get"],[917,37,937,39],[917,38,937,40,"key"],[917,41,937,43],[917,42,937,44],[918,18,939,20,"req"],[918,21,939,23],[918,22,939,24,"onsuccess"],[918,31,939,33],[918,34,939,36],[918,46,939,48],[919,20,940,24],[919,24,940,28,"value"],[919,29,940,33],[919,32,940,36,"req"],[919,35,940,39],[919,36,940,40,"result"],[919,42,940,46],[920,20,941,24],[920,24,941,28,"value"],[920,29,941,33],[920,34,941,38,"undefined"],[920,43,941,47],[920,45,941,49],[921,22,942,28,"value"],[921,27,942,33],[921,30,942,36],[921,34,942,40],[922,20,943,24],[923,20,944,24],[923,24,944,28,"_isEncodedBlob"],[923,38,944,42],[923,39,944,43,"value"],[923,44,944,48],[923,45,944,49],[923,47,944,51],[924,22,945,28,"value"],[924,27,945,33],[924,30,945,36,"_decodeBlob"],[924,41,945,47],[924,42,945,48,"value"],[924,47,945,53],[924,48,945,54],[925,20,946,24],[926,20,947,24,"resolve"],[926,27,947,31],[926,28,947,32,"value"],[926,33,947,37],[926,34,947,38],[927,18,948,20],[927,19,948,21],[928,18,950,20,"req"],[928,21,950,23],[928,22,950,24,"onerror"],[928,29,950,31],[928,32,950,34],[928,44,950,46],[929,20,951,24,"reject"],[929,26,951,30],[929,27,951,31,"req"],[929,30,951,34],[929,31,951,35,"error"],[929,36,951,40],[929,37,951,41],[930,18,952,20],[930,19,952,21],[931,16,953,16],[931,17,953,17],[931,18,953,18],[931,25,953,25,"e"],[931,26,953,26],[931,28,953,28],[932,18,954,20,"reject"],[932,24,954,26],[932,25,954,27,"e"],[932,26,954,28],[932,27,954,29],[933,16,955,16],[934,14,956,12],[934,15,956,13],[934,16,956,14],[935,12,957,8],[935,13,957,9],[935,14,957,10],[935,15,957,11],[935,22,957,18],[935,23,957,19],[935,24,957,20,"reject"],[935,30,957,26],[935,31,957,27],[936,10,958,4],[936,11,958,5],[936,12,958,6],[937,10,960,4,"executeCallback"],[937,25,960,19],[937,26,960,20,"promise"],[937,33,960,27],[937,35,960,29,"callback"],[937,43,960,37],[937,44,960,38],[938,10,961,4],[938,17,961,11,"promise"],[938,24,961,18],[939,8,962,0],[941,8,964,0],[942,8,965,0],[942,17,965,9,"iterate"],[942,24,965,16,"iterate"],[942,25,965,17,"iterator"],[942,33,965,25],[942,35,965,27,"callback"],[942,43,965,35],[942,45,965,37],[943,10,966,4],[943,14,966,8,"self"],[943,18,966,12],[943,21,966,15],[943,25,966,19],[944,10,968,4],[944,14,968,8,"promise"],[944,21,968,15],[944,24,968,18],[944,28,968,22,"Promise$1"],[944,37,968,31],[944,38,968,32],[944,48,968,42,"resolve"],[944,55,968,49],[944,57,968,51,"reject"],[944,63,968,57],[944,65,968,59],[945,12,969,8,"self"],[945,16,969,12],[945,17,969,13,"ready"],[945,22,969,18],[945,23,969,19],[945,24,969,20],[945,25,969,21,"then"],[945,29,969,25],[945,30,969,26],[945,42,969,38],[946,14,970,12,"createTransaction"],[946,31,970,29],[946,32,970,30,"self"],[946,36,970,34],[946,37,970,35,"_dbInfo"],[946,44,970,42],[946,46,970,44,"READ_ONLY"],[946,55,970,53],[946,57,970,55],[946,67,970,65,"err"],[946,70,970,68],[946,72,970,70,"transaction"],[946,83,970,81],[946,85,970,83],[947,16,971,16],[947,20,971,20,"err"],[947,23,971,23],[947,25,971,25],[948,18,972,20],[948,25,972,27,"reject"],[948,31,972,33],[948,32,972,34,"err"],[948,35,972,37],[948,36,972,38],[949,16,973,16],[950,16,975,16],[950,20,975,20],[951,18,976,20],[951,22,976,24,"store"],[951,27,976,29],[951,30,976,32,"transaction"],[951,41,976,43],[951,42,976,44,"objectStore"],[951,53,976,55],[951,54,976,56,"self"],[951,58,976,60],[951,59,976,61,"_dbInfo"],[951,66,976,68],[951,67,976,69,"storeName"],[951,76,976,78],[951,77,976,79],[952,18,977,20],[952,22,977,24,"req"],[952,25,977,27],[952,28,977,30,"store"],[952,33,977,35],[952,34,977,36,"openCursor"],[952,44,977,46],[952,45,977,47],[952,46,977,48],[953,18,978,20],[953,22,978,24,"iterationNumber"],[953,37,978,39],[953,40,978,42],[953,41,978,43],[954,18,980,20,"req"],[954,21,980,23],[954,22,980,24,"onsuccess"],[954,31,980,33],[954,34,980,36],[954,46,980,48],[955,20,981,24],[955,24,981,28,"cursor"],[955,30,981,34],[955,33,981,37,"req"],[955,36,981,40],[955,37,981,41,"result"],[955,43,981,47],[956,20,983,24],[956,24,983,28,"cursor"],[956,30,983,34],[956,32,983,36],[957,22,984,28],[957,26,984,32,"value"],[957,31,984,37],[957,34,984,40,"cursor"],[957,40,984,46],[957,41,984,47,"value"],[957,46,984,52],[958,22,985,28],[958,26,985,32,"_isEncodedBlob"],[958,40,985,46],[958,41,985,47,"value"],[958,46,985,52],[958,47,985,53],[958,49,985,55],[959,24,986,32,"value"],[959,29,986,37],[959,32,986,40,"_decodeBlob"],[959,43,986,51],[959,44,986,52,"value"],[959,49,986,57],[959,50,986,58],[960,22,987,28],[961,22,988,28],[961,26,988,32,"result"],[961,32,988,38],[961,35,988,41,"iterator"],[961,43,988,49],[961,44,988,50,"value"],[961,49,988,55],[961,51,988,57,"cursor"],[961,57,988,63],[961,58,988,64,"key"],[961,61,988,67],[961,63,988,69,"iterationNumber"],[961,78,988,84],[961,80,988,86],[961,81,988,87],[963,22,990,28],[964,22,991,28],[965,22,992,28],[966,22,993,28],[966,26,993,32,"result"],[966,32,993,38],[966,37,993,43],[966,42,993,48],[966,43,993,49],[966,45,993,51],[967,24,994,32,"resolve"],[967,31,994,39],[967,32,994,40,"result"],[967,38,994,46],[967,39,994,47],[968,22,995,28],[968,23,995,29],[968,29,995,35],[969,24,996,32,"cursor"],[969,30,996,38],[969,31,996,39],[969,41,996,49],[969,42,996,50],[969,43,996,51],[969,44,996,52],[970,22,997,28],[971,20,998,24],[971,21,998,25],[971,27,998,31],[972,22,999,28,"resolve"],[972,29,999,35],[972,30,999,36],[972,31,999,37],[973,20,1000,24],[974,18,1001,20],[974,19,1001,21],[975,18,1003,20,"req"],[975,21,1003,23],[975,22,1003,24,"onerror"],[975,29,1003,31],[975,32,1003,34],[975,44,1003,46],[976,20,1004,24,"reject"],[976,26,1004,30],[976,27,1004,31,"req"],[976,30,1004,34],[976,31,1004,35,"error"],[976,36,1004,40],[976,37,1004,41],[977,18,1005,20],[977,19,1005,21],[978,16,1006,16],[978,17,1006,17],[978,18,1006,18],[978,25,1006,25,"e"],[978,26,1006,26],[978,28,1006,28],[979,18,1007,20,"reject"],[979,24,1007,26],[979,25,1007,27,"e"],[979,26,1007,28],[979,27,1007,29],[980,16,1008,16],[981,14,1009,12],[981,15,1009,13],[981,16,1009,14],[982,12,1010,8],[982,13,1010,9],[982,14,1010,10],[982,15,1010,11],[982,22,1010,18],[982,23,1010,19],[982,24,1010,20,"reject"],[982,30,1010,26],[982,31,1010,27],[983,10,1011,4],[983,11,1011,5],[983,12,1011,6],[984,10,1013,4,"executeCallback"],[984,25,1013,19],[984,26,1013,20,"promise"],[984,33,1013,27],[984,35,1013,29,"callback"],[984,43,1013,37],[984,44,1013,38],[985,10,1015,4],[985,17,1015,11,"promise"],[985,24,1015,18],[986,8,1016,0],[987,8,1018,0],[987,17,1018,9,"setItem"],[987,24,1018,16,"setItem"],[987,25,1018,17,"key"],[987,28,1018,20],[987,30,1018,22,"value"],[987,35,1018,27],[987,37,1018,29,"callback"],[987,45,1018,37],[987,47,1018,39],[988,10,1019,4],[988,14,1019,8,"self"],[988,18,1019,12],[988,21,1019,15],[988,25,1019,19],[989,10,1021,4,"key"],[989,13,1021,7],[989,16,1021,10,"normalizeKey"],[989,28,1021,22],[989,29,1021,23,"key"],[989,32,1021,26],[989,33,1021,27],[990,10,1023,4],[990,14,1023,8,"promise"],[990,21,1023,15],[990,24,1023,18],[990,28,1023,22,"Promise$1"],[990,37,1023,31],[990,38,1023,32],[990,48,1023,42,"resolve"],[990,55,1023,49],[990,57,1023,51,"reject"],[990,63,1023,57],[990,65,1023,59],[991,12,1024,8],[991,16,1024,12,"dbInfo"],[991,22,1024,18],[992,12,1025,8,"self"],[992,16,1025,12],[992,17,1025,13,"ready"],[992,22,1025,18],[992,23,1025,19],[992,24,1025,20],[992,25,1025,21,"then"],[992,29,1025,25],[992,30,1025,26],[992,42,1025,38],[993,14,1026,12,"dbInfo"],[993,20,1026,18],[993,23,1026,21,"self"],[993,27,1026,25],[993,28,1026,26,"_dbInfo"],[993,35,1026,33],[994,14,1027,12],[994,18,1027,16,"toString"],[994,26,1027,24],[994,27,1027,25,"call"],[994,31,1027,29],[994,32,1027,30,"value"],[994,37,1027,35],[994,38,1027,36],[994,43,1027,41],[994,58,1027,56],[994,60,1027,58],[995,16,1028,16],[995,23,1028,23,"_checkBlobSupport"],[995,40,1028,40],[995,41,1028,41,"dbInfo"],[995,47,1028,47],[995,48,1028,48,"db"],[995,50,1028,50],[995,51,1028,51],[995,52,1028,52,"then"],[995,56,1028,56],[995,57,1028,57],[995,67,1028,67,"blobSupport"],[995,78,1028,78],[995,80,1028,80],[996,18,1029,20],[996,22,1029,24,"blobSupport"],[996,33,1029,35],[996,35,1029,37],[997,20,1030,24],[997,27,1030,31,"value"],[997,32,1030,36],[998,18,1031,20],[999,18,1032,20],[999,25,1032,27,"_encodeBlob"],[999,36,1032,38],[999,37,1032,39,"value"],[999,42,1032,44],[999,43,1032,45],[1000,16,1033,16],[1000,17,1033,17],[1000,18,1033,18],[1001,14,1034,12],[1002,14,1035,12],[1002,21,1035,19,"value"],[1002,26,1035,24],[1003,12,1036,8],[1003,13,1036,9],[1003,14,1036,10],[1003,15,1036,11,"then"],[1003,19,1036,15],[1003,20,1036,16],[1003,30,1036,26,"value"],[1003,35,1036,31],[1003,37,1036,33],[1004,14,1037,12,"createTransaction"],[1004,31,1037,29],[1004,32,1037,30,"self"],[1004,36,1037,34],[1004,37,1037,35,"_dbInfo"],[1004,44,1037,42],[1004,46,1037,44,"READ_WRITE"],[1004,56,1037,54],[1004,58,1037,56],[1004,68,1037,66,"err"],[1004,71,1037,69],[1004,73,1037,71,"transaction"],[1004,84,1037,82],[1004,86,1037,84],[1005,16,1038,16],[1005,20,1038,20,"err"],[1005,23,1038,23],[1005,25,1038,25],[1006,18,1039,20],[1006,25,1039,27,"reject"],[1006,31,1039,33],[1006,32,1039,34,"err"],[1006,35,1039,37],[1006,36,1039,38],[1007,16,1040,16],[1008,16,1042,16],[1008,20,1042,20],[1009,18,1043,20],[1009,22,1043,24,"store"],[1009,27,1043,29],[1009,30,1043,32,"transaction"],[1009,41,1043,43],[1009,42,1043,44,"objectStore"],[1009,53,1043,55],[1009,54,1043,56,"self"],[1009,58,1043,60],[1009,59,1043,61,"_dbInfo"],[1009,66,1043,68],[1009,67,1043,69,"storeName"],[1009,76,1043,78],[1009,77,1043,79],[1011,18,1045,20],[1012,18,1046,20],[1013,18,1047,20],[1014,18,1048,20],[1015,18,1049,20],[1015,22,1049,24,"value"],[1015,27,1049,29],[1015,32,1049,34],[1015,36,1049,38],[1015,38,1049,40],[1016,20,1050,24,"value"],[1016,25,1050,29],[1016,28,1050,32,"undefined"],[1016,37,1050,41],[1017,18,1051,20],[1018,18,1053,20],[1018,22,1053,24,"req"],[1018,25,1053,27],[1018,28,1053,30,"store"],[1018,33,1053,35],[1018,34,1053,36,"put"],[1018,37,1053,39],[1018,38,1053,40,"value"],[1018,43,1053,45],[1018,45,1053,47,"key"],[1018,48,1053,50],[1018,49,1053,51],[1019,18,1055,20,"transaction"],[1019,29,1055,31],[1019,30,1055,32,"oncomplete"],[1019,40,1055,42],[1019,43,1055,45],[1019,55,1055,57],[1020,20,1056,24],[1021,20,1057,24],[1022,20,1058,24],[1023,20,1059,24],[1024,20,1060,24],[1025,20,1061,24],[1026,20,1062,24],[1026,24,1062,28,"value"],[1026,29,1062,33],[1026,34,1062,38,"undefined"],[1026,43,1062,47],[1026,45,1062,49],[1027,22,1063,28,"value"],[1027,27,1063,33],[1027,30,1063,36],[1027,34,1063,40],[1028,20,1064,24],[1029,20,1066,24,"resolve"],[1029,27,1066,31],[1029,28,1066,32,"value"],[1029,33,1066,37],[1029,34,1066,38],[1030,18,1067,20],[1030,19,1067,21],[1031,18,1068,20,"transaction"],[1031,29,1068,31],[1031,30,1068,32,"onabort"],[1031,37,1068,39],[1031,40,1068,42,"transaction"],[1031,51,1068,53],[1031,52,1068,54,"onerror"],[1031,59,1068,61],[1031,62,1068,64],[1031,74,1068,76],[1032,20,1069,24],[1032,24,1069,28,"err"],[1032,27,1069,31],[1032,30,1069,34,"req"],[1032,33,1069,37],[1032,34,1069,38,"error"],[1032,39,1069,43],[1032,42,1069,46,"req"],[1032,45,1069,49],[1032,46,1069,50,"error"],[1032,51,1069,55],[1032,54,1069,58,"req"],[1032,57,1069,61],[1032,58,1069,62,"transaction"],[1032,69,1069,73],[1032,70,1069,74,"error"],[1032,75,1069,79],[1033,20,1070,24,"reject"],[1033,26,1070,30],[1033,27,1070,31,"err"],[1033,30,1070,34],[1033,31,1070,35],[1034,18,1071,20],[1034,19,1071,21],[1035,16,1072,16],[1035,17,1072,17],[1035,18,1072,18],[1035,25,1072,25,"e"],[1035,26,1072,26],[1035,28,1072,28],[1036,18,1073,20,"reject"],[1036,24,1073,26],[1036,25,1073,27,"e"],[1036,26,1073,28],[1036,27,1073,29],[1037,16,1074,16],[1038,14,1075,12],[1038,15,1075,13],[1038,16,1075,14],[1039,12,1076,8],[1039,13,1076,9],[1039,14,1076,10],[1039,15,1076,11],[1039,22,1076,18],[1039,23,1076,19],[1039,24,1076,20,"reject"],[1039,30,1076,26],[1039,31,1076,27],[1040,10,1077,4],[1040,11,1077,5],[1040,12,1077,6],[1041,10,1079,4,"executeCallback"],[1041,25,1079,19],[1041,26,1079,20,"promise"],[1041,33,1079,27],[1041,35,1079,29,"callback"],[1041,43,1079,37],[1041,44,1079,38],[1042,10,1080,4],[1042,17,1080,11,"promise"],[1042,24,1080,18],[1043,8,1081,0],[1044,8,1083,0],[1044,17,1083,9,"removeItem"],[1044,27,1083,19,"removeItem"],[1044,28,1083,20,"key"],[1044,31,1083,23],[1044,33,1083,25,"callback"],[1044,41,1083,33],[1044,43,1083,35],[1045,10,1084,4],[1045,14,1084,8,"self"],[1045,18,1084,12],[1045,21,1084,15],[1045,25,1084,19],[1046,10,1086,4,"key"],[1046,13,1086,7],[1046,16,1086,10,"normalizeKey"],[1046,28,1086,22],[1046,29,1086,23,"key"],[1046,32,1086,26],[1046,33,1086,27],[1047,10,1088,4],[1047,14,1088,8,"promise"],[1047,21,1088,15],[1047,24,1088,18],[1047,28,1088,22,"Promise$1"],[1047,37,1088,31],[1047,38,1088,32],[1047,48,1088,42,"resolve"],[1047,55,1088,49],[1047,57,1088,51,"reject"],[1047,63,1088,57],[1047,65,1088,59],[1048,12,1089,8,"self"],[1048,16,1089,12],[1048,17,1089,13,"ready"],[1048,22,1089,18],[1048,23,1089,19],[1048,24,1089,20],[1048,25,1089,21,"then"],[1048,29,1089,25],[1048,30,1089,26],[1048,42,1089,38],[1049,14,1090,12,"createTransaction"],[1049,31,1090,29],[1049,32,1090,30,"self"],[1049,36,1090,34],[1049,37,1090,35,"_dbInfo"],[1049,44,1090,42],[1049,46,1090,44,"READ_WRITE"],[1049,56,1090,54],[1049,58,1090,56],[1049,68,1090,66,"err"],[1049,71,1090,69],[1049,73,1090,71,"transaction"],[1049,84,1090,82],[1049,86,1090,84],[1050,16,1091,16],[1050,20,1091,20,"err"],[1050,23,1091,23],[1050,25,1091,25],[1051,18,1092,20],[1051,25,1092,27,"reject"],[1051,31,1092,33],[1051,32,1092,34,"err"],[1051,35,1092,37],[1051,36,1092,38],[1052,16,1093,16],[1053,16,1095,16],[1053,20,1095,20],[1054,18,1096,20],[1054,22,1096,24,"store"],[1054,27,1096,29],[1054,30,1096,32,"transaction"],[1054,41,1096,43],[1054,42,1096,44,"objectStore"],[1054,53,1096,55],[1054,54,1096,56,"self"],[1054,58,1096,60],[1054,59,1096,61,"_dbInfo"],[1054,66,1096,68],[1054,67,1096,69,"storeName"],[1054,76,1096,78],[1054,77,1096,79],[1055,18,1097,20],[1056,18,1098,20],[1057,18,1099,20],[1058,18,1100,20],[1059,18,1101,20],[1060,18,1102,20],[1060,22,1102,24,"req"],[1060,25,1102,27],[1060,28,1102,30,"store"],[1060,33,1102,35],[1060,34,1102,36],[1060,42,1102,44],[1060,43,1102,45],[1060,44,1102,46,"key"],[1060,47,1102,49],[1060,48,1102,50],[1061,18,1103,20,"transaction"],[1061,29,1103,31],[1061,30,1103,32,"oncomplete"],[1061,40,1103,42],[1061,43,1103,45],[1061,55,1103,57],[1062,20,1104,24,"resolve"],[1062,27,1104,31],[1062,28,1104,32],[1062,29,1104,33],[1063,18,1105,20],[1063,19,1105,21],[1064,18,1107,20,"transaction"],[1064,29,1107,31],[1064,30,1107,32,"onerror"],[1064,37,1107,39],[1064,40,1107,42],[1064,52,1107,54],[1065,20,1108,24,"reject"],[1065,26,1108,30],[1065,27,1108,31,"req"],[1065,30,1108,34],[1065,31,1108,35,"error"],[1065,36,1108,40],[1065,37,1108,41],[1066,18,1109,20],[1066,19,1109,21],[1068,18,1111,20],[1069,18,1112,20],[1070,18,1113,20,"transaction"],[1070,29,1113,31],[1070,30,1113,32,"onabort"],[1070,37,1113,39],[1070,40,1113,42],[1070,52,1113,54],[1071,20,1114,24],[1071,24,1114,28,"err"],[1071,27,1114,31],[1071,30,1114,34,"req"],[1071,33,1114,37],[1071,34,1114,38,"error"],[1071,39,1114,43],[1071,42,1114,46,"req"],[1071,45,1114,49],[1071,46,1114,50,"error"],[1071,51,1114,55],[1071,54,1114,58,"req"],[1071,57,1114,61],[1071,58,1114,62,"transaction"],[1071,69,1114,73],[1071,70,1114,74,"error"],[1071,75,1114,79],[1072,20,1115,24,"reject"],[1072,26,1115,30],[1072,27,1115,31,"err"],[1072,30,1115,34],[1072,31,1115,35],[1073,18,1116,20],[1073,19,1116,21],[1074,16,1117,16],[1074,17,1117,17],[1074,18,1117,18],[1074,25,1117,25,"e"],[1074,26,1117,26],[1074,28,1117,28],[1075,18,1118,20,"reject"],[1075,24,1118,26],[1075,25,1118,27,"e"],[1075,26,1118,28],[1075,27,1118,29],[1076,16,1119,16],[1077,14,1120,12],[1077,15,1120,13],[1077,16,1120,14],[1078,12,1121,8],[1078,13,1121,9],[1078,14,1121,10],[1078,15,1121,11],[1078,22,1121,18],[1078,23,1121,19],[1078,24,1121,20,"reject"],[1078,30,1121,26],[1078,31,1121,27],[1079,10,1122,4],[1079,11,1122,5],[1079,12,1122,6],[1080,10,1124,4,"executeCallback"],[1080,25,1124,19],[1080,26,1124,20,"promise"],[1080,33,1124,27],[1080,35,1124,29,"callback"],[1080,43,1124,37],[1080,44,1124,38],[1081,10,1125,4],[1081,17,1125,11,"promise"],[1081,24,1125,18],[1082,8,1126,0],[1083,8,1128,0],[1083,17,1128,9,"clear"],[1083,22,1128,14,"clear"],[1083,23,1128,15,"callback"],[1083,31,1128,23],[1083,33,1128,25],[1084,10,1129,4],[1084,14,1129,8,"self"],[1084,18,1129,12],[1084,21,1129,15],[1084,25,1129,19],[1085,10,1131,4],[1085,14,1131,8,"promise"],[1085,21,1131,15],[1085,24,1131,18],[1085,28,1131,22,"Promise$1"],[1085,37,1131,31],[1085,38,1131,32],[1085,48,1131,42,"resolve"],[1085,55,1131,49],[1085,57,1131,51,"reject"],[1085,63,1131,57],[1085,65,1131,59],[1086,12,1132,8,"self"],[1086,16,1132,12],[1086,17,1132,13,"ready"],[1086,22,1132,18],[1086,23,1132,19],[1086,24,1132,20],[1086,25,1132,21,"then"],[1086,29,1132,25],[1086,30,1132,26],[1086,42,1132,38],[1087,14,1133,12,"createTransaction"],[1087,31,1133,29],[1087,32,1133,30,"self"],[1087,36,1133,34],[1087,37,1133,35,"_dbInfo"],[1087,44,1133,42],[1087,46,1133,44,"READ_WRITE"],[1087,56,1133,54],[1087,58,1133,56],[1087,68,1133,66,"err"],[1087,71,1133,69],[1087,73,1133,71,"transaction"],[1087,84,1133,82],[1087,86,1133,84],[1088,16,1134,16],[1088,20,1134,20,"err"],[1088,23,1134,23],[1088,25,1134,25],[1089,18,1135,20],[1089,25,1135,27,"reject"],[1089,31,1135,33],[1089,32,1135,34,"err"],[1089,35,1135,37],[1089,36,1135,38],[1090,16,1136,16],[1091,16,1138,16],[1091,20,1138,20],[1092,18,1139,20],[1092,22,1139,24,"store"],[1092,27,1139,29],[1092,30,1139,32,"transaction"],[1092,41,1139,43],[1092,42,1139,44,"objectStore"],[1092,53,1139,55],[1092,54,1139,56,"self"],[1092,58,1139,60],[1092,59,1139,61,"_dbInfo"],[1092,66,1139,68],[1092,67,1139,69,"storeName"],[1092,76,1139,78],[1092,77,1139,79],[1093,18,1140,20],[1093,22,1140,24,"req"],[1093,25,1140,27],[1093,28,1140,30,"store"],[1093,33,1140,35],[1093,34,1140,36,"clear"],[1093,39,1140,41],[1093,40,1140,42],[1093,41,1140,43],[1094,18,1142,20,"transaction"],[1094,29,1142,31],[1094,30,1142,32,"oncomplete"],[1094,40,1142,42],[1094,43,1142,45],[1094,55,1142,57],[1095,20,1143,24,"resolve"],[1095,27,1143,31],[1095,28,1143,32],[1095,29,1143,33],[1096,18,1144,20],[1096,19,1144,21],[1097,18,1146,20,"transaction"],[1097,29,1146,31],[1097,30,1146,32,"onabort"],[1097,37,1146,39],[1097,40,1146,42,"transaction"],[1097,51,1146,53],[1097,52,1146,54,"onerror"],[1097,59,1146,61],[1097,62,1146,64],[1097,74,1146,76],[1098,20,1147,24],[1098,24,1147,28,"err"],[1098,27,1147,31],[1098,30,1147,34,"req"],[1098,33,1147,37],[1098,34,1147,38,"error"],[1098,39,1147,43],[1098,42,1147,46,"req"],[1098,45,1147,49],[1098,46,1147,50,"error"],[1098,51,1147,55],[1098,54,1147,58,"req"],[1098,57,1147,61],[1098,58,1147,62,"transaction"],[1098,69,1147,73],[1098,70,1147,74,"error"],[1098,75,1147,79],[1099,20,1148,24,"reject"],[1099,26,1148,30],[1099,27,1148,31,"err"],[1099,30,1148,34],[1099,31,1148,35],[1100,18,1149,20],[1100,19,1149,21],[1101,16,1150,16],[1101,17,1150,17],[1101,18,1150,18],[1101,25,1150,25,"e"],[1101,26,1150,26],[1101,28,1150,28],[1102,18,1151,20,"reject"],[1102,24,1151,26],[1102,25,1151,27,"e"],[1102,26,1151,28],[1102,27,1151,29],[1103,16,1152,16],[1104,14,1153,12],[1104,15,1153,13],[1104,16,1153,14],[1105,12,1154,8],[1105,13,1154,9],[1105,14,1154,10],[1105,15,1154,11],[1105,22,1154,18],[1105,23,1154,19],[1105,24,1154,20,"reject"],[1105,30,1154,26],[1105,31,1154,27],[1106,10,1155,4],[1106,11,1155,5],[1106,12,1155,6],[1107,10,1157,4,"executeCallback"],[1107,25,1157,19],[1107,26,1157,20,"promise"],[1107,33,1157,27],[1107,35,1157,29,"callback"],[1107,43,1157,37],[1107,44,1157,38],[1108,10,1158,4],[1108,17,1158,11,"promise"],[1108,24,1158,18],[1109,8,1159,0],[1110,8,1161,0],[1110,17,1161,9,"length"],[1110,23,1161,15,"length"],[1110,24,1161,16,"callback"],[1110,32,1161,24],[1110,34,1161,26],[1111,10,1162,4],[1111,14,1162,8,"self"],[1111,18,1162,12],[1111,21,1162,15],[1111,25,1162,19],[1112,10,1164,4],[1112,14,1164,8,"promise"],[1112,21,1164,15],[1112,24,1164,18],[1112,28,1164,22,"Promise$1"],[1112,37,1164,31],[1112,38,1164,32],[1112,48,1164,42,"resolve"],[1112,55,1164,49],[1112,57,1164,51,"reject"],[1112,63,1164,57],[1112,65,1164,59],[1113,12,1165,8,"self"],[1113,16,1165,12],[1113,17,1165,13,"ready"],[1113,22,1165,18],[1113,23,1165,19],[1113,24,1165,20],[1113,25,1165,21,"then"],[1113,29,1165,25],[1113,30,1165,26],[1113,42,1165,38],[1114,14,1166,12,"createTransaction"],[1114,31,1166,29],[1114,32,1166,30,"self"],[1114,36,1166,34],[1114,37,1166,35,"_dbInfo"],[1114,44,1166,42],[1114,46,1166,44,"READ_ONLY"],[1114,55,1166,53],[1114,57,1166,55],[1114,67,1166,65,"err"],[1114,70,1166,68],[1114,72,1166,70,"transaction"],[1114,83,1166,81],[1114,85,1166,83],[1115,16,1167,16],[1115,20,1167,20,"err"],[1115,23,1167,23],[1115,25,1167,25],[1116,18,1168,20],[1116,25,1168,27,"reject"],[1116,31,1168,33],[1116,32,1168,34,"err"],[1116,35,1168,37],[1116,36,1168,38],[1117,16,1169,16],[1118,16,1171,16],[1118,20,1171,20],[1119,18,1172,20],[1119,22,1172,24,"store"],[1119,27,1172,29],[1119,30,1172,32,"transaction"],[1119,41,1172,43],[1119,42,1172,44,"objectStore"],[1119,53,1172,55],[1119,54,1172,56,"self"],[1119,58,1172,60],[1119,59,1172,61,"_dbInfo"],[1119,66,1172,68],[1119,67,1172,69,"storeName"],[1119,76,1172,78],[1119,77,1172,79],[1120,18,1173,20],[1120,22,1173,24,"req"],[1120,25,1173,27],[1120,28,1173,30,"store"],[1120,33,1173,35],[1120,34,1173,36,"count"],[1120,39,1173,41],[1120,40,1173,42],[1120,41,1173,43],[1121,18,1175,20,"req"],[1121,21,1175,23],[1121,22,1175,24,"onsuccess"],[1121,31,1175,33],[1121,34,1175,36],[1121,46,1175,48],[1122,20,1176,24,"resolve"],[1122,27,1176,31],[1122,28,1176,32,"req"],[1122,31,1176,35],[1122,32,1176,36,"result"],[1122,38,1176,42],[1122,39,1176,43],[1123,18,1177,20],[1123,19,1177,21],[1124,18,1179,20,"req"],[1124,21,1179,23],[1124,22,1179,24,"onerror"],[1124,29,1179,31],[1124,32,1179,34],[1124,44,1179,46],[1125,20,1180,24,"reject"],[1125,26,1180,30],[1125,27,1180,31,"req"],[1125,30,1180,34],[1125,31,1180,35,"error"],[1125,36,1180,40],[1125,37,1180,41],[1126,18,1181,20],[1126,19,1181,21],[1127,16,1182,16],[1127,17,1182,17],[1127,18,1182,18],[1127,25,1182,25,"e"],[1127,26,1182,26],[1127,28,1182,28],[1128,18,1183,20,"reject"],[1128,24,1183,26],[1128,25,1183,27,"e"],[1128,26,1183,28],[1128,27,1183,29],[1129,16,1184,16],[1130,14,1185,12],[1130,15,1185,13],[1130,16,1185,14],[1131,12,1186,8],[1131,13,1186,9],[1131,14,1186,10],[1131,15,1186,11],[1131,22,1186,18],[1131,23,1186,19],[1131,24,1186,20,"reject"],[1131,30,1186,26],[1131,31,1186,27],[1132,10,1187,4],[1132,11,1187,5],[1132,12,1187,6],[1133,10,1189,4,"executeCallback"],[1133,25,1189,19],[1133,26,1189,20,"promise"],[1133,33,1189,27],[1133,35,1189,29,"callback"],[1133,43,1189,37],[1133,44,1189,38],[1134,10,1190,4],[1134,17,1190,11,"promise"],[1134,24,1190,18],[1135,8,1191,0],[1136,8,1193,0],[1136,17,1193,9,"key"],[1136,20,1193,12,"key"],[1136,21,1193,13,"n"],[1136,22,1193,14],[1136,24,1193,16,"callback"],[1136,32,1193,24],[1136,34,1193,26],[1137,10,1194,4],[1137,14,1194,8,"self"],[1137,18,1194,12],[1137,21,1194,15],[1137,25,1194,19],[1138,10,1196,4],[1138,14,1196,8,"promise"],[1138,21,1196,15],[1138,24,1196,18],[1138,28,1196,22,"Promise$1"],[1138,37,1196,31],[1138,38,1196,32],[1138,48,1196,42,"resolve"],[1138,55,1196,49],[1138,57,1196,51,"reject"],[1138,63,1196,57],[1138,65,1196,59],[1139,12,1197,8],[1139,16,1197,12,"n"],[1139,17,1197,13],[1139,20,1197,16],[1139,21,1197,17],[1139,23,1197,19],[1140,14,1198,12,"resolve"],[1140,21,1198,19],[1140,22,1198,20],[1140,26,1198,24],[1140,27,1198,25],[1141,14,1200,12],[1142,12,1201,8],[1143,12,1203,8,"self"],[1143,16,1203,12],[1143,17,1203,13,"ready"],[1143,22,1203,18],[1143,23,1203,19],[1143,24,1203,20],[1143,25,1203,21,"then"],[1143,29,1203,25],[1143,30,1203,26],[1143,42,1203,38],[1144,14,1204,12,"createTransaction"],[1144,31,1204,29],[1144,32,1204,30,"self"],[1144,36,1204,34],[1144,37,1204,35,"_dbInfo"],[1144,44,1204,42],[1144,46,1204,44,"READ_ONLY"],[1144,55,1204,53],[1144,57,1204,55],[1144,67,1204,65,"err"],[1144,70,1204,68],[1144,72,1204,70,"transaction"],[1144,83,1204,81],[1144,85,1204,83],[1145,16,1205,16],[1145,20,1205,20,"err"],[1145,23,1205,23],[1145,25,1205,25],[1146,18,1206,20],[1146,25,1206,27,"reject"],[1146,31,1206,33],[1146,32,1206,34,"err"],[1146,35,1206,37],[1146,36,1206,38],[1147,16,1207,16],[1148,16,1209,16],[1148,20,1209,20],[1149,18,1210,20],[1149,22,1210,24,"store"],[1149,27,1210,29],[1149,30,1210,32,"transaction"],[1149,41,1210,43],[1149,42,1210,44,"objectStore"],[1149,53,1210,55],[1149,54,1210,56,"self"],[1149,58,1210,60],[1149,59,1210,61,"_dbInfo"],[1149,66,1210,68],[1149,67,1210,69,"storeName"],[1149,76,1210,78],[1149,77,1210,79],[1150,18,1211,20],[1150,22,1211,24,"advanced"],[1150,30,1211,32],[1150,33,1211,35],[1150,38,1211,40],[1151,18,1212,20],[1151,22,1212,24,"req"],[1151,25,1212,27],[1151,28,1212,30,"store"],[1151,33,1212,35],[1151,34,1212,36,"openKeyCursor"],[1151,47,1212,49],[1151,48,1212,50],[1151,49,1212,51],[1152,18,1214,20,"req"],[1152,21,1214,23],[1152,22,1214,24,"onsuccess"],[1152,31,1214,33],[1152,34,1214,36],[1152,46,1214,48],[1153,20,1215,24],[1153,24,1215,28,"cursor"],[1153,30,1215,34],[1153,33,1215,37,"req"],[1153,36,1215,40],[1153,37,1215,41,"result"],[1153,43,1215,47],[1154,20,1216,24],[1154,24,1216,28],[1154,25,1216,29,"cursor"],[1154,31,1216,35],[1154,33,1216,37],[1155,22,1217,28],[1156,22,1218,28,"resolve"],[1156,29,1218,35],[1156,30,1218,36],[1156,34,1218,40],[1156,35,1218,41],[1157,22,1220,28],[1158,20,1221,24],[1159,20,1223,24],[1159,24,1223,28,"n"],[1159,25,1223,29],[1159,30,1223,34],[1159,31,1223,35],[1159,33,1223,37],[1160,22,1224,28],[1161,22,1225,28],[1162,22,1226,28,"resolve"],[1162,29,1226,35],[1162,30,1226,36,"cursor"],[1162,36,1226,42],[1162,37,1226,43,"key"],[1162,40,1226,46],[1162,41,1226,47],[1163,20,1227,24],[1163,21,1227,25],[1163,27,1227,31],[1164,22,1228,28],[1164,26,1228,32],[1164,27,1228,33,"advanced"],[1164,35,1228,41],[1164,37,1228,43],[1165,24,1229,32],[1166,24,1230,32],[1167,24,1231,32,"advanced"],[1167,32,1231,40],[1167,35,1231,43],[1167,39,1231,47],[1168,24,1232,32,"cursor"],[1168,30,1232,38],[1168,31,1232,39,"advance"],[1168,38,1232,46],[1168,39,1232,47,"n"],[1168,40,1232,48],[1168,41,1232,49],[1169,22,1233,28],[1169,23,1233,29],[1169,29,1233,35],[1170,24,1234,32],[1171,24,1235,32,"resolve"],[1171,31,1235,39],[1171,32,1235,40,"cursor"],[1171,38,1235,46],[1171,39,1235,47,"key"],[1171,42,1235,50],[1171,43,1235,51],[1172,22,1236,28],[1173,20,1237,24],[1174,18,1238,20],[1174,19,1238,21],[1175,18,1240,20,"req"],[1175,21,1240,23],[1175,22,1240,24,"onerror"],[1175,29,1240,31],[1175,32,1240,34],[1175,44,1240,46],[1176,20,1241,24,"reject"],[1176,26,1241,30],[1176,27,1241,31,"req"],[1176,30,1241,34],[1176,31,1241,35,"error"],[1176,36,1241,40],[1176,37,1241,41],[1177,18,1242,20],[1177,19,1242,21],[1178,16,1243,16],[1178,17,1243,17],[1178,18,1243,18],[1178,25,1243,25,"e"],[1178,26,1243,26],[1178,28,1243,28],[1179,18,1244,20,"reject"],[1179,24,1244,26],[1179,25,1244,27,"e"],[1179,26,1244,28],[1179,27,1244,29],[1180,16,1245,16],[1181,14,1246,12],[1181,15,1246,13],[1181,16,1246,14],[1182,12,1247,8],[1182,13,1247,9],[1182,14,1247,10],[1182,15,1247,11],[1182,22,1247,18],[1182,23,1247,19],[1182,24,1247,20,"reject"],[1182,30,1247,26],[1182,31,1247,27],[1183,10,1248,4],[1183,11,1248,5],[1183,12,1248,6],[1184,10,1250,4,"executeCallback"],[1184,25,1250,19],[1184,26,1250,20,"promise"],[1184,33,1250,27],[1184,35,1250,29,"callback"],[1184,43,1250,37],[1184,44,1250,38],[1185,10,1251,4],[1185,17,1251,11,"promise"],[1185,24,1251,18],[1186,8,1252,0],[1187,8,1254,0],[1187,17,1254,9,"keys"],[1187,21,1254,13,"keys"],[1187,22,1254,14,"callback"],[1187,30,1254,22],[1187,32,1254,24],[1188,10,1255,4],[1188,14,1255,8,"self"],[1188,18,1255,12],[1188,21,1255,15],[1188,25,1255,19],[1189,10,1257,4],[1189,14,1257,8,"promise"],[1189,21,1257,15],[1189,24,1257,18],[1189,28,1257,22,"Promise$1"],[1189,37,1257,31],[1189,38,1257,32],[1189,48,1257,42,"resolve"],[1189,55,1257,49],[1189,57,1257,51,"reject"],[1189,63,1257,57],[1189,65,1257,59],[1190,12,1258,8,"self"],[1190,16,1258,12],[1190,17,1258,13,"ready"],[1190,22,1258,18],[1190,23,1258,19],[1190,24,1258,20],[1190,25,1258,21,"then"],[1190,29,1258,25],[1190,30,1258,26],[1190,42,1258,38],[1191,14,1259,12,"createTransaction"],[1191,31,1259,29],[1191,32,1259,30,"self"],[1191,36,1259,34],[1191,37,1259,35,"_dbInfo"],[1191,44,1259,42],[1191,46,1259,44,"READ_ONLY"],[1191,55,1259,53],[1191,57,1259,55],[1191,67,1259,65,"err"],[1191,70,1259,68],[1191,72,1259,70,"transaction"],[1191,83,1259,81],[1191,85,1259,83],[1192,16,1260,16],[1192,20,1260,20,"err"],[1192,23,1260,23],[1192,25,1260,25],[1193,18,1261,20],[1193,25,1261,27,"reject"],[1193,31,1261,33],[1193,32,1261,34,"err"],[1193,35,1261,37],[1193,36,1261,38],[1194,16,1262,16],[1195,16,1264,16],[1195,20,1264,20],[1196,18,1265,20],[1196,22,1265,24,"store"],[1196,27,1265,29],[1196,30,1265,32,"transaction"],[1196,41,1265,43],[1196,42,1265,44,"objectStore"],[1196,53,1265,55],[1196,54,1265,56,"self"],[1196,58,1265,60],[1196,59,1265,61,"_dbInfo"],[1196,66,1265,68],[1196,67,1265,69,"storeName"],[1196,76,1265,78],[1196,77,1265,79],[1197,18,1266,20],[1197,22,1266,24,"req"],[1197,25,1266,27],[1197,28,1266,30,"store"],[1197,33,1266,35],[1197,34,1266,36,"openKeyCursor"],[1197,47,1266,49],[1197,48,1266,50],[1197,49,1266,51],[1198,18,1267,20],[1198,22,1267,24,"keys"],[1198,26,1267,28],[1198,29,1267,31],[1198,31,1267,33],[1199,18,1269,20,"req"],[1199,21,1269,23],[1199,22,1269,24,"onsuccess"],[1199,31,1269,33],[1199,34,1269,36],[1199,46,1269,48],[1200,20,1270,24],[1200,24,1270,28,"cursor"],[1200,30,1270,34],[1200,33,1270,37,"req"],[1200,36,1270,40],[1200,37,1270,41,"result"],[1200,43,1270,47],[1201,20,1272,24],[1201,24,1272,28],[1201,25,1272,29,"cursor"],[1201,31,1272,35],[1201,33,1272,37],[1202,22,1273,28,"resolve"],[1202,29,1273,35],[1202,30,1273,36,"keys"],[1202,34,1273,40],[1202,35,1273,41],[1203,22,1274,28],[1204,20,1275,24],[1205,20,1277,24,"keys"],[1205,24,1277,28],[1205,25,1277,29,"push"],[1205,29,1277,33],[1205,30,1277,34,"cursor"],[1205,36,1277,40],[1205,37,1277,41,"key"],[1205,40,1277,44],[1205,41,1277,45],[1206,20,1278,24,"cursor"],[1206,26,1278,30],[1206,27,1278,31],[1206,37,1278,41],[1206,38,1278,42],[1206,39,1278,43],[1206,40,1278,44],[1207,18,1279,20],[1207,19,1279,21],[1208,18,1281,20,"req"],[1208,21,1281,23],[1208,22,1281,24,"onerror"],[1208,29,1281,31],[1208,32,1281,34],[1208,44,1281,46],[1209,20,1282,24,"reject"],[1209,26,1282,30],[1209,27,1282,31,"req"],[1209,30,1282,34],[1209,31,1282,35,"error"],[1209,36,1282,40],[1209,37,1282,41],[1210,18,1283,20],[1210,19,1283,21],[1211,16,1284,16],[1211,17,1284,17],[1211,18,1284,18],[1211,25,1284,25,"e"],[1211,26,1284,26],[1211,28,1284,28],[1212,18,1285,20,"reject"],[1212,24,1285,26],[1212,25,1285,27,"e"],[1212,26,1285,28],[1212,27,1285,29],[1213,16,1286,16],[1214,14,1287,12],[1214,15,1287,13],[1214,16,1287,14],[1215,12,1288,8],[1215,13,1288,9],[1215,14,1288,10],[1215,15,1288,11],[1215,22,1288,18],[1215,23,1288,19],[1215,24,1288,20,"reject"],[1215,30,1288,26],[1215,31,1288,27],[1216,10,1289,4],[1216,11,1289,5],[1216,12,1289,6],[1217,10,1291,4,"executeCallback"],[1217,25,1291,19],[1217,26,1291,20,"promise"],[1217,33,1291,27],[1217,35,1291,29,"callback"],[1217,43,1291,37],[1217,44,1291,38],[1218,10,1292,4],[1218,17,1292,11,"promise"],[1218,24,1292,18],[1219,8,1293,0],[1220,8,1295,0],[1220,17,1295,9,"dropInstance"],[1220,29,1295,21,"dropInstance"],[1220,30,1295,22,"options"],[1220,37,1295,29],[1220,39,1295,31,"callback"],[1220,47,1295,39],[1220,49,1295,41],[1221,10,1296,4,"callback"],[1221,18,1296,12],[1221,21,1296,15,"getCallback"],[1221,32,1296,26],[1221,33,1296,27,"apply"],[1221,38,1296,32],[1221,39,1296,33],[1221,43,1296,37],[1221,45,1296,39,"arguments"],[1221,54,1296,48],[1221,55,1296,49],[1222,10,1298,4],[1222,14,1298,8,"currentConfig"],[1222,27,1298,21],[1222,30,1298,24],[1222,34,1298,28],[1222,35,1298,29,"config"],[1222,41,1298,35],[1222,42,1298,36],[1222,43,1298,37],[1223,10,1299,4,"options"],[1223,17,1299,11],[1223,20,1299,14],[1223,27,1299,21,"options"],[1223,34,1299,28],[1223,39,1299,33],[1223,49,1299,43],[1223,53,1299,47,"options"],[1223,60,1299,54],[1223,64,1299,58],[1223,65,1299,59],[1223,66,1299,60],[1224,10,1300,4],[1224,14,1300,8],[1224,15,1300,9,"options"],[1224,22,1300,16],[1224,23,1300,17,"name"],[1224,27,1300,21],[1224,29,1300,23],[1225,12,1301,8,"options"],[1225,19,1301,15],[1225,20,1301,16,"name"],[1225,24,1301,20],[1225,27,1301,23,"options"],[1225,34,1301,30],[1225,35,1301,31,"name"],[1225,39,1301,35],[1225,43,1301,39,"currentConfig"],[1225,56,1301,52],[1225,57,1301,53,"name"],[1225,61,1301,57],[1226,12,1302,8,"options"],[1226,19,1302,15],[1226,20,1302,16,"storeName"],[1226,29,1302,25],[1226,32,1302,28,"options"],[1226,39,1302,35],[1226,40,1302,36,"storeName"],[1226,49,1302,45],[1226,53,1302,49,"currentConfig"],[1226,66,1302,62],[1226,67,1302,63,"storeName"],[1226,76,1302,72],[1227,10,1303,4],[1228,10,1305,4],[1228,14,1305,8,"self"],[1228,18,1305,12],[1228,21,1305,15],[1228,25,1305,19],[1229,10,1306,4],[1229,14,1306,8,"promise"],[1229,21,1306,15],[1230,10,1307,4],[1230,14,1307,8],[1230,15,1307,9,"options"],[1230,22,1307,16],[1230,23,1307,17,"name"],[1230,27,1307,21],[1230,29,1307,23],[1231,12,1308,8,"promise"],[1231,19,1308,15],[1231,22,1308,18,"Promise$1"],[1231,31,1308,27],[1231,32,1308,28,"reject"],[1231,38,1308,34],[1231,39,1308,35],[1231,58,1308,54],[1231,59,1308,55],[1232,10,1309,4],[1232,11,1309,5],[1232,17,1309,11],[1233,12,1310,8],[1233,16,1310,12,"isCurrentDb"],[1233,27,1310,23],[1233,30,1310,26,"options"],[1233,37,1310,33],[1233,38,1310,34,"name"],[1233,42,1310,38],[1233,47,1310,43,"currentConfig"],[1233,60,1310,56],[1233,61,1310,57,"name"],[1233,65,1310,61],[1233,69,1310,65,"self"],[1233,73,1310,69],[1233,74,1310,70,"_dbInfo"],[1233,81,1310,77],[1233,82,1310,78,"db"],[1233,84,1310,80],[1234,12,1312,8],[1234,16,1312,12,"dbPromise"],[1234,25,1312,21],[1234,28,1312,24,"isCurrentDb"],[1234,39,1312,35],[1234,42,1312,38,"Promise$1"],[1234,51,1312,47],[1234,52,1312,48,"resolve"],[1234,59,1312,55],[1234,60,1312,56,"self"],[1234,64,1312,60],[1234,65,1312,61,"_dbInfo"],[1234,72,1312,68],[1234,73,1312,69,"db"],[1234,75,1312,71],[1234,76,1312,72],[1234,79,1312,75,"_getOriginalConnection"],[1234,101,1312,97],[1234,102,1312,98,"options"],[1234,109,1312,105],[1234,110,1312,106],[1234,111,1312,107,"then"],[1234,115,1312,111],[1234,116,1312,112],[1234,126,1312,122,"db"],[1234,128,1312,124],[1234,130,1312,126],[1235,14,1313,12],[1235,18,1313,16,"dbContext"],[1235,27,1313,25],[1235,30,1313,28,"dbContexts"],[1235,40,1313,38],[1235,41,1313,39,"options"],[1235,48,1313,46],[1235,49,1313,47,"name"],[1235,53,1313,51],[1235,54,1313,52],[1236,14,1314,12],[1236,18,1314,16,"forages"],[1236,25,1314,23],[1236,28,1314,26,"dbContext"],[1236,37,1314,35],[1236,38,1314,36,"forages"],[1236,45,1314,43],[1237,14,1315,12,"dbContext"],[1237,23,1315,21],[1237,24,1315,22,"db"],[1237,26,1315,24],[1237,29,1315,27,"db"],[1237,31,1315,29],[1238,14,1316,12],[1238,19,1316,17],[1238,23,1316,21,"i"],[1238,24,1316,22],[1238,27,1316,25],[1238,28,1316,26],[1238,30,1316,28,"i"],[1238,31,1316,29],[1238,34,1316,32,"forages"],[1238,41,1316,39],[1238,42,1316,40,"length"],[1238,48,1316,46],[1238,50,1316,48,"i"],[1238,51,1316,49],[1238,53,1316,51],[1238,55,1316,53],[1239,16,1317,16,"forages"],[1239,23,1317,23],[1239,24,1317,24,"i"],[1239,25,1317,25],[1239,26,1317,26],[1239,27,1317,27,"_dbInfo"],[1239,34,1317,34],[1239,35,1317,35,"db"],[1239,37,1317,37],[1239,40,1317,40,"db"],[1239,42,1317,42],[1240,14,1318,12],[1241,14,1319,12],[1241,21,1319,19,"db"],[1241,23,1319,21],[1242,12,1320,8],[1242,13,1320,9],[1242,14,1320,10],[1243,12,1322,8],[1243,16,1322,12],[1243,17,1322,13,"options"],[1243,24,1322,20],[1243,25,1322,21,"storeName"],[1243,34,1322,30],[1243,36,1322,32],[1244,14,1323,12,"promise"],[1244,21,1323,19],[1244,24,1323,22,"dbPromise"],[1244,33,1323,31],[1244,34,1323,32,"then"],[1244,38,1323,36],[1244,39,1323,37],[1244,49,1323,47,"db"],[1244,51,1323,49],[1244,53,1323,51],[1245,16,1324,16,"_deferReadiness"],[1245,31,1324,31],[1245,32,1324,32,"options"],[1245,39,1324,39],[1245,40,1324,40],[1246,16,1326,16],[1246,20,1326,20,"dbContext"],[1246,29,1326,29],[1246,32,1326,32,"dbContexts"],[1246,42,1326,42],[1246,43,1326,43,"options"],[1246,50,1326,50],[1246,51,1326,51,"name"],[1246,55,1326,55],[1246,56,1326,56],[1247,16,1327,16],[1247,20,1327,20,"forages"],[1247,27,1327,27],[1247,30,1327,30,"dbContext"],[1247,39,1327,39],[1247,40,1327,40,"forages"],[1247,47,1327,47],[1248,16,1329,16,"db"],[1248,18,1329,18],[1248,19,1329,19,"close"],[1248,24,1329,24],[1248,25,1329,25],[1248,26,1329,26],[1249,16,1330,16],[1249,21,1330,21],[1249,25,1330,25,"i"],[1249,26,1330,26],[1249,29,1330,29],[1249,30,1330,30],[1249,32,1330,32,"i"],[1249,33,1330,33],[1249,36,1330,36,"forages"],[1249,43,1330,43],[1249,44,1330,44,"length"],[1249,50,1330,50],[1249,52,1330,52,"i"],[1249,53,1330,53],[1249,55,1330,55],[1249,57,1330,57],[1250,18,1331,20],[1250,22,1331,24,"forage"],[1250,28,1331,30],[1250,31,1331,33,"forages"],[1250,38,1331,40],[1250,39,1331,41,"i"],[1250,40,1331,42],[1250,41,1331,43],[1251,18,1332,20,"forage"],[1251,24,1332,26],[1251,25,1332,27,"_dbInfo"],[1251,32,1332,34],[1251,33,1332,35,"db"],[1251,35,1332,37],[1251,38,1332,40],[1251,42,1332,44],[1252,16,1333,16],[1253,16,1335,16],[1253,20,1335,20,"dropDBPromise"],[1253,33,1335,33],[1253,36,1335,36],[1253,40,1335,40,"Promise$1"],[1253,49,1335,49],[1253,50,1335,50],[1253,60,1335,60,"resolve"],[1253,67,1335,67],[1253,69,1335,69,"reject"],[1253,75,1335,75],[1253,77,1335,77],[1254,18,1336,20],[1254,22,1336,24,"req"],[1254,25,1336,27],[1254,28,1336,30,"idb"],[1254,31,1336,33],[1254,32,1336,34,"deleteDatabase"],[1254,46,1336,48],[1254,47,1336,49,"options"],[1254,54,1336,56],[1254,55,1336,57,"name"],[1254,59,1336,61],[1254,60,1336,62],[1255,18,1338,20,"req"],[1255,21,1338,23],[1255,22,1338,24,"onerror"],[1255,29,1338,31],[1255,32,1338,34],[1255,44,1338,46],[1256,20,1339,24],[1256,24,1339,28,"db"],[1256,26,1339,30],[1256,29,1339,33,"req"],[1256,32,1339,36],[1256,33,1339,37,"result"],[1256,39,1339,43],[1257,20,1340,24],[1257,24,1340,28,"db"],[1257,26,1340,30],[1257,28,1340,32],[1258,22,1341,28,"db"],[1258,24,1341,30],[1258,25,1341,31,"close"],[1258,30,1341,36],[1258,31,1341,37],[1258,32,1341,38],[1259,20,1342,24],[1260,20,1343,24,"reject"],[1260,26,1343,30],[1260,27,1343,31,"req"],[1260,30,1343,34],[1260,31,1343,35,"error"],[1260,36,1343,40],[1260,37,1343,41],[1261,18,1344,20],[1261,19,1344,21],[1262,18,1346,20,"req"],[1262,21,1346,23],[1262,22,1346,24,"onblocked"],[1262,31,1346,33],[1262,34,1346,36],[1262,46,1346,48],[1263,20,1347,24],[1264,20,1348,24],[1265,20,1349,24,"console"],[1265,27,1349,31],[1265,28,1349,32,"warn"],[1265,32,1349,36],[1265,33,1349,37],[1265,70,1349,74],[1265,73,1349,77,"options"],[1265,80,1349,84],[1265,81,1349,85,"name"],[1265,85,1349,89],[1265,88,1349,92],[1265,129,1349,133],[1265,130,1349,134],[1266,18,1350,20],[1266,19,1350,21],[1267,18,1352,20,"req"],[1267,21,1352,23],[1267,22,1352,24,"onsuccess"],[1267,31,1352,33],[1267,34,1352,36],[1267,46,1352,48],[1268,20,1353,24],[1268,24,1353,28,"db"],[1268,26,1353,30],[1268,29,1353,33,"req"],[1268,32,1353,36],[1268,33,1353,37,"result"],[1268,39,1353,43],[1269,20,1354,24],[1269,24,1354,28,"db"],[1269,26,1354,30],[1269,28,1354,32],[1270,22,1355,28,"db"],[1270,24,1355,30],[1270,25,1355,31,"close"],[1270,30,1355,36],[1270,31,1355,37],[1270,32,1355,38],[1271,20,1356,24],[1272,20,1357,24,"resolve"],[1272,27,1357,31],[1272,28,1357,32,"db"],[1272,30,1357,34],[1272,31,1357,35],[1273,18,1358,20],[1273,19,1358,21],[1274,16,1359,16],[1274,17,1359,17],[1274,18,1359,18],[1275,16,1361,16],[1275,23,1361,23,"dropDBPromise"],[1275,36,1361,36],[1275,37,1361,37,"then"],[1275,41,1361,41],[1275,42,1361,42],[1275,52,1361,52,"db"],[1275,54,1361,54],[1275,56,1361,56],[1276,18,1362,20,"dbContext"],[1276,27,1362,29],[1276,28,1362,30,"db"],[1276,30,1362,32],[1276,33,1362,35,"db"],[1276,35,1362,37],[1277,18,1363,20],[1277,23,1363,25],[1277,27,1363,29,"i"],[1277,28,1363,30],[1277,31,1363,33],[1277,32,1363,34],[1277,34,1363,36,"i"],[1277,35,1363,37],[1277,38,1363,40,"forages"],[1277,45,1363,47],[1277,46,1363,48,"length"],[1277,52,1363,54],[1277,54,1363,56,"i"],[1277,55,1363,57],[1277,57,1363,59],[1277,59,1363,61],[1278,20,1364,24],[1278,24,1364,28,"_forage"],[1278,31,1364,35],[1278,34,1364,38,"forages"],[1278,41,1364,45],[1278,42,1364,46,"i"],[1278,43,1364,47],[1278,44,1364,48],[1279,20,1365,24,"_advanceReadiness"],[1279,37,1365,41],[1279,38,1365,42,"_forage"],[1279,45,1365,49],[1279,46,1365,50,"_dbInfo"],[1279,53,1365,57],[1279,54,1365,58],[1280,18,1366,20],[1281,16,1367,16],[1281,17,1367,17],[1281,18,1367,18],[1281,19,1367,19],[1281,26,1367,26],[1281,27,1367,27],[1281,28,1367,28],[1281,38,1367,38,"err"],[1281,41,1367,41],[1281,43,1367,43],[1282,18,1368,20],[1282,19,1368,21,"_rejectReadiness"],[1282,35,1368,37],[1282,36,1368,38,"options"],[1282,43,1368,45],[1282,45,1368,47,"err"],[1282,48,1368,50],[1282,49,1368,51],[1282,53,1368,55,"Promise$1"],[1282,62,1368,64],[1282,63,1368,65,"resolve"],[1282,70,1368,72],[1282,71,1368,73],[1282,72,1368,74],[1282,74,1368,76],[1282,81,1368,83],[1282,82,1368,84],[1282,83,1368,85],[1282,95,1368,97],[1282,96,1368,98],[1282,97,1368,99],[1282,98,1368,100],[1283,18,1369,20],[1283,24,1369,26,"err"],[1283,27,1369,29],[1284,16,1370,16],[1284,17,1370,17],[1284,18,1370,18],[1285,14,1371,12],[1285,15,1371,13],[1285,16,1371,14],[1286,12,1372,8],[1286,13,1372,9],[1286,19,1372,15],[1287,14,1373,12,"promise"],[1287,21,1373,19],[1287,24,1373,22,"dbPromise"],[1287,33,1373,31],[1287,34,1373,32,"then"],[1287,38,1373,36],[1287,39,1373,37],[1287,49,1373,47,"db"],[1287,51,1373,49],[1287,53,1373,51],[1288,16,1374,16],[1288,20,1374,20],[1288,21,1374,21,"db"],[1288,23,1374,23],[1288,24,1374,24,"objectStoreNames"],[1288,40,1374,40],[1288,41,1374,41,"contains"],[1288,49,1374,49],[1288,50,1374,50,"options"],[1288,57,1374,57],[1288,58,1374,58,"storeName"],[1288,67,1374,67],[1288,68,1374,68],[1288,70,1374,70],[1289,18,1375,20],[1290,16,1376,16],[1291,16,1378,16],[1291,20,1378,20,"newVersion"],[1291,30,1378,30],[1291,33,1378,33,"db"],[1291,35,1378,35],[1291,36,1378,36,"version"],[1291,43,1378,43],[1291,46,1378,46],[1291,47,1378,47],[1292,16,1380,16,"_deferReadiness"],[1292,31,1380,31],[1292,32,1380,32,"options"],[1292,39,1380,39],[1292,40,1380,40],[1293,16,1382,16],[1293,20,1382,20,"dbContext"],[1293,29,1382,29],[1293,32,1382,32,"dbContexts"],[1293,42,1382,42],[1293,43,1382,43,"options"],[1293,50,1382,50],[1293,51,1382,51,"name"],[1293,55,1382,55],[1293,56,1382,56],[1294,16,1383,16],[1294,20,1383,20,"forages"],[1294,27,1383,27],[1294,30,1383,30,"dbContext"],[1294,39,1383,39],[1294,40,1383,40,"forages"],[1294,47,1383,47],[1295,16,1385,16,"db"],[1295,18,1385,18],[1295,19,1385,19,"close"],[1295,24,1385,24],[1295,25,1385,25],[1295,26,1385,26],[1296,16,1386,16],[1296,21,1386,21],[1296,25,1386,25,"i"],[1296,26,1386,26],[1296,29,1386,29],[1296,30,1386,30],[1296,32,1386,32,"i"],[1296,33,1386,33],[1296,36,1386,36,"forages"],[1296,43,1386,43],[1296,44,1386,44,"length"],[1296,50,1386,50],[1296,52,1386,52,"i"],[1296,53,1386,53],[1296,55,1386,55],[1296,57,1386,57],[1297,18,1387,20],[1297,22,1387,24,"forage"],[1297,28,1387,30],[1297,31,1387,33,"forages"],[1297,38,1387,40],[1297,39,1387,41,"i"],[1297,40,1387,42],[1297,41,1387,43],[1298,18,1388,20,"forage"],[1298,24,1388,26],[1298,25,1388,27,"_dbInfo"],[1298,32,1388,34],[1298,33,1388,35,"db"],[1298,35,1388,37],[1298,38,1388,40],[1298,42,1388,44],[1299,18,1389,20,"forage"],[1299,24,1389,26],[1299,25,1389,27,"_dbInfo"],[1299,32,1389,34],[1299,33,1389,35,"version"],[1299,40,1389,42],[1299,43,1389,45,"newVersion"],[1299,53,1389,55],[1300,16,1390,16],[1301,16,1392,16],[1301,20,1392,20,"dropObjectPromise"],[1301,37,1392,37],[1301,40,1392,40],[1301,44,1392,44,"Promise$1"],[1301,53,1392,53],[1301,54,1392,54],[1301,64,1392,64,"resolve"],[1301,71,1392,71],[1301,73,1392,73,"reject"],[1301,79,1392,79],[1301,81,1392,81],[1302,18,1393,20],[1302,22,1393,24,"req"],[1302,25,1393,27],[1302,28,1393,30,"idb"],[1302,31,1393,33],[1302,32,1393,34,"open"],[1302,36,1393,38],[1302,37,1393,39,"options"],[1302,44,1393,46],[1302,45,1393,47,"name"],[1302,49,1393,51],[1302,51,1393,53,"newVersion"],[1302,61,1393,63],[1302,62,1393,64],[1303,18,1395,20,"req"],[1303,21,1395,23],[1303,22,1395,24,"onerror"],[1303,29,1395,31],[1303,32,1395,34],[1303,42,1395,44,"err"],[1303,45,1395,47],[1303,47,1395,49],[1304,20,1396,24],[1304,24,1396,28,"db"],[1304,26,1396,30],[1304,29,1396,33,"req"],[1304,32,1396,36],[1304,33,1396,37,"result"],[1304,39,1396,43],[1305,20,1397,24,"db"],[1305,22,1397,26],[1305,23,1397,27,"close"],[1305,28,1397,32],[1305,29,1397,33],[1305,30,1397,34],[1306,20,1398,24,"reject"],[1306,26,1398,30],[1306,27,1398,31,"err"],[1306,30,1398,34],[1306,31,1398,35],[1307,18,1399,20],[1307,19,1399,21],[1308,18,1401,20,"req"],[1308,21,1401,23],[1308,22,1401,24,"onupgradeneeded"],[1308,37,1401,39],[1308,40,1401,42],[1308,52,1401,54],[1309,20,1402,24],[1309,24,1402,28,"db"],[1309,26,1402,30],[1309,29,1402,33,"req"],[1309,32,1402,36],[1309,33,1402,37,"result"],[1309,39,1402,43],[1310,20,1403,24,"db"],[1310,22,1403,26],[1310,23,1403,27,"deleteObjectStore"],[1310,40,1403,44],[1310,41,1403,45,"options"],[1310,48,1403,52],[1310,49,1403,53,"storeName"],[1310,58,1403,62],[1310,59,1403,63],[1311,18,1404,20],[1311,19,1404,21],[1312,18,1406,20,"req"],[1312,21,1406,23],[1312,22,1406,24,"onsuccess"],[1312,31,1406,33],[1312,34,1406,36],[1312,46,1406,48],[1313,20,1407,24],[1313,24,1407,28,"db"],[1313,26,1407,30],[1313,29,1407,33,"req"],[1313,32,1407,36],[1313,33,1407,37,"result"],[1313,39,1407,43],[1314,20,1408,24,"db"],[1314,22,1408,26],[1314,23,1408,27,"close"],[1314,28,1408,32],[1314,29,1408,33],[1314,30,1408,34],[1315,20,1409,24,"resolve"],[1315,27,1409,31],[1315,28,1409,32,"db"],[1315,30,1409,34],[1315,31,1409,35],[1316,18,1410,20],[1316,19,1410,21],[1317,16,1411,16],[1317,17,1411,17],[1317,18,1411,18],[1318,16,1413,16],[1318,23,1413,23,"dropObjectPromise"],[1318,40,1413,40],[1318,41,1413,41,"then"],[1318,45,1413,45],[1318,46,1413,46],[1318,56,1413,56,"db"],[1318,58,1413,58],[1318,60,1413,60],[1319,18,1414,20,"dbContext"],[1319,27,1414,29],[1319,28,1414,30,"db"],[1319,30,1414,32],[1319,33,1414,35,"db"],[1319,35,1414,37],[1320,18,1415,20],[1320,23,1415,25],[1320,27,1415,29,"j"],[1320,28,1415,30],[1320,31,1415,33],[1320,32,1415,34],[1320,34,1415,36,"j"],[1320,35,1415,37],[1320,38,1415,40,"forages"],[1320,45,1415,47],[1320,46,1415,48,"length"],[1320,52,1415,54],[1320,54,1415,56,"j"],[1320,55,1415,57],[1320,57,1415,59],[1320,59,1415,61],[1321,20,1416,24],[1321,24,1416,28,"_forage2"],[1321,32,1416,36],[1321,35,1416,39,"forages"],[1321,42,1416,46],[1321,43,1416,47,"j"],[1321,44,1416,48],[1321,45,1416,49],[1322,20,1417,24,"_forage2"],[1322,28,1417,32],[1322,29,1417,33,"_dbInfo"],[1322,36,1417,40],[1322,37,1417,41,"db"],[1322,39,1417,43],[1322,42,1417,46,"db"],[1322,44,1417,48],[1323,20,1418,24,"_advanceReadiness"],[1323,37,1418,41],[1323,38,1418,42,"_forage2"],[1323,46,1418,50],[1323,47,1418,51,"_dbInfo"],[1323,54,1418,58],[1323,55,1418,59],[1324,18,1419,20],[1325,16,1420,16],[1325,17,1420,17],[1325,18,1420,18],[1325,19,1420,19],[1325,26,1420,26],[1325,27,1420,27],[1325,28,1420,28],[1325,38,1420,38,"err"],[1325,41,1420,41],[1325,43,1420,43],[1326,18,1421,20],[1326,19,1421,21,"_rejectReadiness"],[1326,35,1421,37],[1326,36,1421,38,"options"],[1326,43,1421,45],[1326,45,1421,47,"err"],[1326,48,1421,50],[1326,49,1421,51],[1326,53,1421,55,"Promise$1"],[1326,62,1421,64],[1326,63,1421,65,"resolve"],[1326,70,1421,72],[1326,71,1421,73],[1326,72,1421,74],[1326,74,1421,76],[1326,81,1421,83],[1326,82,1421,84],[1326,83,1421,85],[1326,95,1421,97],[1326,96,1421,98],[1326,97,1421,99],[1326,98,1421,100],[1327,18,1422,20],[1327,24,1422,26,"err"],[1327,27,1422,29],[1328,16,1423,16],[1328,17,1423,17],[1328,18,1423,18],[1329,14,1424,12],[1329,15,1424,13],[1329,16,1424,14],[1330,12,1425,8],[1331,10,1426,4],[1332,10,1428,4,"executeCallback"],[1332,25,1428,19],[1332,26,1428,20,"promise"],[1332,33,1428,27],[1332,35,1428,29,"callback"],[1332,43,1428,37],[1332,44,1428,38],[1333,10,1429,4],[1333,17,1429,11,"promise"],[1333,24,1429,18],[1334,8,1430,0],[1335,8,1432,0],[1335,12,1432,4,"asyncStorage"],[1335,24,1432,16],[1335,27,1432,19],[1336,10,1433,4,"_driver"],[1336,17,1433,11],[1336,19,1433,13],[1336,33,1433,27],[1337,10,1434,4,"_initStorage"],[1337,22,1434,16],[1337,24,1434,18,"_initStorage"],[1337,36,1434,30],[1338,10,1435,4,"_support"],[1338,18,1435,12],[1338,20,1435,14,"isIndexedDBValid"],[1338,36,1435,30],[1338,37,1435,31],[1338,38,1435,32],[1339,10,1436,4,"iterate"],[1339,17,1436,11],[1339,19,1436,13,"iterate"],[1339,26,1436,20],[1340,10,1437,4,"getItem"],[1340,17,1437,11],[1340,19,1437,13,"getItem"],[1340,26,1437,20],[1341,10,1438,4,"setItem"],[1341,17,1438,11],[1341,19,1438,13,"setItem"],[1341,26,1438,20],[1342,10,1439,4,"removeItem"],[1342,20,1439,14],[1342,22,1439,16,"removeItem"],[1342,32,1439,26],[1343,10,1440,4,"clear"],[1343,15,1440,9],[1343,17,1440,11,"clear"],[1343,22,1440,16],[1344,10,1441,4,"length"],[1344,16,1441,10],[1344,18,1441,12,"length"],[1344,24,1441,18],[1345,10,1442,4,"key"],[1345,13,1442,7],[1345,15,1442,9,"key"],[1345,18,1442,12],[1346,10,1443,4,"keys"],[1346,14,1443,8],[1346,16,1443,10,"keys"],[1346,20,1443,14],[1347,10,1444,4,"dropInstance"],[1347,22,1444,16],[1347,24,1444,18,"dropInstance"],[1348,8,1445,0],[1348,9,1445,1],[1349,8,1447,0],[1349,17,1447,9,"isWebSQLValid"],[1349,30,1447,22,"isWebSQLValid"],[1349,31,1447,22],[1349,33,1447,25],[1350,10,1448,4],[1350,17,1448,11],[1350,24,1448,18,"openDatabase"],[1350,36,1448,30],[1350,41,1448,35],[1350,51,1448,45],[1351,8,1449,0],[1353,8,1451,0],[1354,8,1452,0],[1355,8,1453,0],[1356,8,1454,0],[1356,12,1454,4,"BASE_CHARS"],[1356,22,1454,14],[1356,25,1454,17],[1356,91,1454,83],[1357,8,1456,0],[1357,12,1456,4,"BLOB_TYPE_PREFIX"],[1357,28,1456,20],[1357,31,1456,23],[1357,53,1456,45],[1358,8,1457,0],[1358,12,1457,4,"BLOB_TYPE_PREFIX_REGEX"],[1358,34,1457,26],[1358,37,1457,29],[1358,68,1457,60],[1359,8,1459,0],[1359,12,1459,4,"SERIALIZED_MARKER"],[1359,29,1459,21],[1359,32,1459,24],[1359,43,1459,35],[1360,8,1460,0],[1360,12,1460,4,"SERIALIZED_MARKER_LENGTH"],[1360,36,1460,28],[1360,39,1460,31,"SERIALIZED_MARKER"],[1360,56,1460,48],[1360,57,1460,49,"length"],[1360,63,1460,55],[1362,8,1462,0],[1363,8,1463,0],[1363,12,1463,4,"TYPE_ARRAYBUFFER"],[1363,28,1463,20],[1363,31,1463,23],[1363,37,1463,29],[1364,8,1464,0],[1364,12,1464,4,"TYPE_BLOB"],[1364,21,1464,13],[1364,24,1464,16],[1364,30,1464,22],[1365,8,1465,0],[1365,12,1465,4,"TYPE_INT8ARRAY"],[1365,26,1465,18],[1365,29,1465,21],[1365,35,1465,27],[1366,8,1466,0],[1366,12,1466,4,"TYPE_UINT8ARRAY"],[1366,27,1466,19],[1366,30,1466,22],[1366,36,1466,28],[1367,8,1467,0],[1367,12,1467,4,"TYPE_UINT8CLAMPEDARRAY"],[1367,34,1467,26],[1367,37,1467,29],[1367,43,1467,35],[1368,8,1468,0],[1368,12,1468,4,"TYPE_INT16ARRAY"],[1368,27,1468,19],[1368,30,1468,22],[1368,36,1468,28],[1369,8,1469,0],[1369,12,1469,4,"TYPE_INT32ARRAY"],[1369,27,1469,19],[1369,30,1469,22],[1369,36,1469,28],[1370,8,1470,0],[1370,12,1470,4,"TYPE_UINT16ARRAY"],[1370,28,1470,20],[1370,31,1470,23],[1370,37,1470,29],[1371,8,1471,0],[1371,12,1471,4,"TYPE_UINT32ARRAY"],[1371,28,1471,20],[1371,31,1471,23],[1371,37,1471,29],[1372,8,1472,0],[1372,12,1472,4,"TYPE_FLOAT32ARRAY"],[1372,29,1472,21],[1372,32,1472,24],[1372,38,1472,30],[1373,8,1473,0],[1373,12,1473,4,"TYPE_FLOAT64ARRAY"],[1373,29,1473,21],[1373,32,1473,24],[1373,38,1473,30],[1374,8,1474,0],[1374,12,1474,4,"TYPE_SERIALIZED_MARKER_LENGTH"],[1374,41,1474,33],[1374,44,1474,36,"SERIALIZED_MARKER_LENGTH"],[1374,68,1474,60],[1374,71,1474,63,"TYPE_ARRAYBUFFER"],[1374,87,1474,79],[1374,88,1474,80,"length"],[1374,94,1474,86],[1375,8,1476,0],[1375,12,1476,4,"toString$1"],[1375,22,1476,14],[1375,25,1476,17,"Object"],[1375,31,1476,23],[1375,32,1476,24,"prototype"],[1375,41,1476,33],[1375,42,1476,34,"toString"],[1375,50,1476,42],[1376,8,1478,0],[1376,17,1478,9,"stringToBuffer"],[1376,31,1478,23,"stringToBuffer"],[1376,32,1478,24,"serializedString"],[1376,48,1478,40],[1376,50,1478,42],[1377,10,1479,4],[1378,10,1480,4],[1378,14,1480,8,"bufferLength"],[1378,26,1480,20],[1378,29,1480,23,"serializedString"],[1378,45,1480,39],[1378,46,1480,40,"length"],[1378,52,1480,46],[1378,55,1480,49],[1378,59,1480,53],[1379,10,1481,4],[1379,14,1481,8,"len"],[1379,17,1481,11],[1379,20,1481,14,"serializedString"],[1379,36,1481,30],[1379,37,1481,31,"length"],[1379,43,1481,37],[1380,10,1482,4],[1380,14,1482,8,"i"],[1380,15,1482,9],[1381,10,1483,4],[1381,14,1483,8,"p"],[1381,15,1483,9],[1381,18,1483,12],[1381,19,1483,13],[1382,10,1484,4],[1382,14,1484,8,"encoded1"],[1382,22,1484,16],[1382,24,1484,18,"encoded2"],[1382,32,1484,26],[1382,34,1484,28,"encoded3"],[1382,42,1484,36],[1382,44,1484,38,"encoded4"],[1382,52,1484,46],[1383,10,1486,4],[1383,14,1486,8,"serializedString"],[1383,30,1486,24],[1383,31,1486,25,"serializedString"],[1383,47,1486,41],[1383,48,1486,42,"length"],[1383,54,1486,48],[1383,57,1486,51],[1383,58,1486,52],[1383,59,1486,53],[1383,64,1486,58],[1383,67,1486,61],[1383,69,1486,63],[1384,12,1487,8,"bufferLength"],[1384,24,1487,20],[1384,26,1487,22],[1385,12,1488,8],[1385,16,1488,12,"serializedString"],[1385,32,1488,28],[1385,33,1488,29,"serializedString"],[1385,49,1488,45],[1385,50,1488,46,"length"],[1385,56,1488,52],[1385,59,1488,55],[1385,60,1488,56],[1385,61,1488,57],[1385,66,1488,62],[1385,69,1488,65],[1385,71,1488,67],[1386,14,1489,12,"bufferLength"],[1386,26,1489,24],[1386,28,1489,26],[1387,12,1490,8],[1388,10,1491,4],[1389,10,1493,4],[1389,14,1493,8,"buffer"],[1389,20,1493,14],[1389,23,1493,17],[1389,27,1493,21,"ArrayBuffer"],[1389,38,1493,32],[1389,39,1493,33,"bufferLength"],[1389,51,1493,45],[1389,52,1493,46],[1390,10,1494,4],[1390,14,1494,8,"bytes"],[1390,19,1494,13],[1390,22,1494,16],[1390,26,1494,20,"Uint8Array"],[1390,36,1494,30],[1390,37,1494,31,"buffer"],[1390,43,1494,37],[1390,44,1494,38],[1391,10,1496,4],[1391,15,1496,9,"i"],[1391,16,1496,10],[1391,19,1496,13],[1391,20,1496,14],[1391,22,1496,16,"i"],[1391,23,1496,17],[1391,26,1496,20,"len"],[1391,29,1496,23],[1391,31,1496,25,"i"],[1391,32,1496,26],[1391,36,1496,30],[1391,37,1496,31],[1391,39,1496,33],[1392,12,1497,8,"encoded1"],[1392,20,1497,16],[1392,23,1497,19,"BASE_CHARS"],[1392,33,1497,29],[1392,34,1497,30,"indexOf"],[1392,41,1497,37],[1392,42,1497,38,"serializedString"],[1392,58,1497,54],[1392,59,1497,55,"i"],[1392,60,1497,56],[1392,61,1497,57],[1392,62,1497,58],[1393,12,1498,8,"encoded2"],[1393,20,1498,16],[1393,23,1498,19,"BASE_CHARS"],[1393,33,1498,29],[1393,34,1498,30,"indexOf"],[1393,41,1498,37],[1393,42,1498,38,"serializedString"],[1393,58,1498,54],[1393,59,1498,55,"i"],[1393,60,1498,56],[1393,63,1498,59],[1393,64,1498,60],[1393,65,1498,61],[1393,66,1498,62],[1394,12,1499,8,"encoded3"],[1394,20,1499,16],[1394,23,1499,19,"BASE_CHARS"],[1394,33,1499,29],[1394,34,1499,30,"indexOf"],[1394,41,1499,37],[1394,42,1499,38,"serializedString"],[1394,58,1499,54],[1394,59,1499,55,"i"],[1394,60,1499,56],[1394,63,1499,59],[1394,64,1499,60],[1394,65,1499,61],[1394,66,1499,62],[1395,12,1500,8,"encoded4"],[1395,20,1500,16],[1395,23,1500,19,"BASE_CHARS"],[1395,33,1500,29],[1395,34,1500,30,"indexOf"],[1395,41,1500,37],[1395,42,1500,38,"serializedString"],[1395,58,1500,54],[1395,59,1500,55,"i"],[1395,60,1500,56],[1395,63,1500,59],[1395,64,1500,60],[1395,65,1500,61],[1395,66,1500,62],[1397,12,1502,8],[1398,12,1503,8,"bytes"],[1398,17,1503,13],[1398,18,1503,14,"p"],[1398,19,1503,15],[1398,21,1503,17],[1398,22,1503,18],[1398,25,1503,21,"encoded1"],[1398,33,1503,29],[1398,37,1503,33],[1398,38,1503,34],[1398,41,1503,37,"encoded2"],[1398,49,1503,45],[1398,53,1503,49],[1398,54,1503,50],[1399,12,1504,8,"bytes"],[1399,17,1504,13],[1399,18,1504,14,"p"],[1399,19,1504,15],[1399,21,1504,17],[1399,22,1504,18],[1399,25,1504,21],[1399,26,1504,22,"encoded2"],[1399,34,1504,30],[1399,37,1504,33],[1399,39,1504,35],[1399,44,1504,40],[1399,45,1504,41],[1399,48,1504,44,"encoded3"],[1399,56,1504,52],[1399,60,1504,56],[1399,61,1504,57],[1400,12,1505,8,"bytes"],[1400,17,1505,13],[1400,18,1505,14,"p"],[1400,19,1505,15],[1400,21,1505,17],[1400,22,1505,18],[1400,25,1505,21],[1400,26,1505,22,"encoded3"],[1400,34,1505,30],[1400,37,1505,33],[1400,38,1505,34],[1400,43,1505,39],[1400,44,1505,40],[1400,47,1505,43,"encoded4"],[1400,55,1505,51],[1400,58,1505,54],[1400,60,1505,56],[1401,10,1506,4],[1402,10,1507,4],[1402,17,1507,11,"buffer"],[1402,23,1507,17],[1403,8,1508,0],[1405,8,1510,0],[1406,8,1511,0],[1407,8,1512,0],[1407,17,1512,9,"bufferToString"],[1407,31,1512,23,"bufferToString"],[1407,32,1512,24,"buffer"],[1407,38,1512,30],[1407,40,1512,32],[1408,10,1513,4],[1409,10,1514,4],[1409,14,1514,8,"bytes"],[1409,19,1514,13],[1409,22,1514,16],[1409,26,1514,20,"Uint8Array"],[1409,36,1514,30],[1409,37,1514,31,"buffer"],[1409,43,1514,37],[1409,44,1514,38],[1410,10,1515,4],[1410,14,1515,8,"base64String"],[1410,26,1515,20],[1410,29,1515,23],[1410,31,1515,25],[1411,10,1516,4],[1411,14,1516,8,"i"],[1411,15,1516,9],[1412,10,1518,4],[1412,15,1518,9,"i"],[1412,16,1518,10],[1412,19,1518,13],[1412,20,1518,14],[1412,22,1518,16,"i"],[1412,23,1518,17],[1412,26,1518,20,"bytes"],[1412,31,1518,25],[1412,32,1518,26,"length"],[1412,38,1518,32],[1412,40,1518,34,"i"],[1412,41,1518,35],[1412,45,1518,39],[1412,46,1518,40],[1412,48,1518,42],[1413,12,1519,8],[1414,12,1520,8,"base64String"],[1414,24,1520,20],[1414,28,1520,24,"BASE_CHARS"],[1414,38,1520,34],[1414,39,1520,35,"bytes"],[1414,44,1520,40],[1414,45,1520,41,"i"],[1414,46,1520,42],[1414,47,1520,43],[1414,51,1520,47],[1414,52,1520,48],[1414,53,1520,49],[1415,12,1521,8,"base64String"],[1415,24,1521,20],[1415,28,1521,24,"BASE_CHARS"],[1415,38,1521,34],[1415,39,1521,35],[1415,40,1521,36,"bytes"],[1415,45,1521,41],[1415,46,1521,42,"i"],[1415,47,1521,43],[1415,48,1521,44],[1415,51,1521,47],[1415,52,1521,48],[1415,57,1521,53],[1415,58,1521,54],[1415,61,1521,57,"bytes"],[1415,66,1521,62],[1415,67,1521,63,"i"],[1415,68,1521,64],[1415,71,1521,67],[1415,72,1521,68],[1415,73,1521,69],[1415,77,1521,73],[1415,78,1521,74],[1415,79,1521,75],[1416,12,1522,8,"base64String"],[1416,24,1522,20],[1416,28,1522,24,"BASE_CHARS"],[1416,38,1522,34],[1416,39,1522,35],[1416,40,1522,36,"bytes"],[1416,45,1522,41],[1416,46,1522,42,"i"],[1416,47,1522,43],[1416,50,1522,46],[1416,51,1522,47],[1416,52,1522,48],[1416,55,1522,51],[1416,57,1522,53],[1416,62,1522,58],[1416,63,1522,59],[1416,66,1522,62,"bytes"],[1416,71,1522,67],[1416,72,1522,68,"i"],[1416,73,1522,69],[1416,76,1522,72],[1416,77,1522,73],[1416,78,1522,74],[1416,82,1522,78],[1416,83,1522,79],[1416,84,1522,80],[1417,12,1523,8,"base64String"],[1417,24,1523,20],[1417,28,1523,24,"BASE_CHARS"],[1417,38,1523,34],[1417,39,1523,35,"bytes"],[1417,44,1523,40],[1417,45,1523,41,"i"],[1417,46,1523,42],[1417,49,1523,45],[1417,50,1523,46],[1417,51,1523,47],[1417,54,1523,50],[1417,56,1523,52],[1417,57,1523,53],[1418,10,1524,4],[1419,10,1526,4],[1419,14,1526,8,"bytes"],[1419,19,1526,13],[1419,20,1526,14,"length"],[1419,26,1526,20],[1419,29,1526,23],[1419,30,1526,24],[1419,35,1526,29],[1419,36,1526,30],[1419,38,1526,32],[1420,12,1527,8,"base64String"],[1420,24,1527,20],[1420,27,1527,23,"base64String"],[1420,39,1527,35],[1420,40,1527,36,"substring"],[1420,49,1527,45],[1420,50,1527,46],[1420,51,1527,47],[1420,53,1527,49,"base64String"],[1420,65,1527,61],[1420,66,1527,62,"length"],[1420,72,1527,68],[1420,75,1527,71],[1420,76,1527,72],[1420,77,1527,73],[1420,80,1527,76],[1420,83,1527,79],[1421,10,1528,4],[1421,11,1528,5],[1421,17,1528,11],[1421,21,1528,15,"bytes"],[1421,26,1528,20],[1421,27,1528,21,"length"],[1421,33,1528,27],[1421,36,1528,30],[1421,37,1528,31],[1421,42,1528,36],[1421,43,1528,37],[1421,45,1528,39],[1422,12,1529,8,"base64String"],[1422,24,1529,20],[1422,27,1529,23,"base64String"],[1422,39,1529,35],[1422,40,1529,36,"substring"],[1422,49,1529,45],[1422,50,1529,46],[1422,51,1529,47],[1422,53,1529,49,"base64String"],[1422,65,1529,61],[1422,66,1529,62,"length"],[1422,72,1529,68],[1422,75,1529,71],[1422,76,1529,72],[1422,77,1529,73],[1422,80,1529,76],[1422,84,1529,80],[1423,10,1530,4],[1424,10,1532,4],[1424,17,1532,11,"base64String"],[1424,29,1532,23],[1425,8,1533,0],[1427,8,1535,0],[1428,8,1536,0],[1429,8,1537,0],[1430,8,1538,0],[1430,17,1538,9,"serialize"],[1430,26,1538,18,"serialize"],[1430,27,1538,19,"value"],[1430,32,1538,24],[1430,34,1538,26,"callback"],[1430,42,1538,34],[1430,44,1538,36],[1431,10,1539,4],[1431,14,1539,8,"valueType"],[1431,23,1539,17],[1431,26,1539,20],[1431,28,1539,22],[1432,10,1540,4],[1432,14,1540,8,"value"],[1432,19,1540,13],[1432,21,1540,15],[1433,12,1541,8,"valueType"],[1433,21,1541,17],[1433,24,1541,20,"toString$1"],[1433,34,1541,30],[1433,35,1541,31,"call"],[1433,39,1541,35],[1433,40,1541,36,"value"],[1433,45,1541,41],[1433,46,1541,42],[1434,10,1542,4],[1436,10,1544,4],[1437,10,1545,4],[1438,10,1546,4],[1439,10,1547,4],[1440,10,1548,4],[1440,14,1548,8,"value"],[1440,19,1548,13],[1440,24,1548,18,"valueType"],[1440,33,1548,27],[1440,38,1548,32],[1440,60,1548,54],[1440,64,1548,58,"value"],[1440,69,1548,63],[1440,70,1548,64,"buffer"],[1440,76,1548,70],[1440,80,1548,74,"toString$1"],[1440,90,1548,84],[1440,91,1548,85,"call"],[1440,95,1548,89],[1440,96,1548,90,"value"],[1440,101,1548,95],[1440,102,1548,96,"buffer"],[1440,108,1548,102],[1440,109,1548,103],[1440,114,1548,108],[1440,136,1548,130],[1440,137,1548,131],[1440,139,1548,133],[1441,12,1549,8],[1442,12,1550,8],[1443,12,1551,8],[1443,16,1551,12,"buffer"],[1443,22,1551,18],[1444,12,1552,8],[1444,16,1552,12,"marker"],[1444,22,1552,18],[1444,25,1552,21,"SERIALIZED_MARKER"],[1444,42,1552,38],[1445,12,1554,8],[1445,16,1554,12,"value"],[1445,21,1554,17],[1445,33,1554,29,"ArrayBuffer"],[1445,44,1554,40],[1445,46,1554,42],[1446,14,1555,12,"buffer"],[1446,20,1555,18],[1446,23,1555,21,"value"],[1446,28,1555,26],[1447,14,1556,12,"marker"],[1447,20,1556,18],[1447,24,1556,22,"TYPE_ARRAYBUFFER"],[1447,40,1556,38],[1448,12,1557,8],[1448,13,1557,9],[1448,19,1557,15],[1449,14,1558,12,"buffer"],[1449,20,1558,18],[1449,23,1558,21,"value"],[1449,28,1558,26],[1449,29,1558,27,"buffer"],[1449,35,1558,33],[1450,14,1560,12],[1450,18,1560,16,"valueType"],[1450,27,1560,25],[1450,32,1560,30],[1450,52,1560,50],[1450,54,1560,52],[1451,16,1561,16,"marker"],[1451,22,1561,22],[1451,26,1561,26,"TYPE_INT8ARRAY"],[1451,40,1561,40],[1452,14,1562,12],[1452,15,1562,13],[1452,21,1562,19],[1452,25,1562,23,"valueType"],[1452,34,1562,32],[1452,39,1562,37],[1452,60,1562,58],[1452,62,1562,60],[1453,16,1563,16,"marker"],[1453,22,1563,22],[1453,26,1563,26,"TYPE_UINT8ARRAY"],[1453,41,1563,41],[1454,14,1564,12],[1454,15,1564,13],[1454,21,1564,19],[1454,25,1564,23,"valueType"],[1454,34,1564,32],[1454,39,1564,37],[1454,67,1564,65],[1454,69,1564,67],[1455,16,1565,16,"marker"],[1455,22,1565,22],[1455,26,1565,26,"TYPE_UINT8CLAMPEDARRAY"],[1455,48,1565,48],[1456,14,1566,12],[1456,15,1566,13],[1456,21,1566,19],[1456,25,1566,23,"valueType"],[1456,34,1566,32],[1456,39,1566,37],[1456,60,1566,58],[1456,62,1566,60],[1457,16,1567,16,"marker"],[1457,22,1567,22],[1457,26,1567,26,"TYPE_INT16ARRAY"],[1457,41,1567,41],[1458,14,1568,12],[1458,15,1568,13],[1458,21,1568,19],[1458,25,1568,23,"valueType"],[1458,34,1568,32],[1458,39,1568,37],[1458,61,1568,59],[1458,63,1568,61],[1459,16,1569,16,"marker"],[1459,22,1569,22],[1459,26,1569,26,"TYPE_UINT16ARRAY"],[1459,42,1569,42],[1460,14,1570,12],[1460,15,1570,13],[1460,21,1570,19],[1460,25,1570,23,"valueType"],[1460,34,1570,32],[1460,39,1570,37],[1460,60,1570,58],[1460,62,1570,60],[1461,16,1571,16,"marker"],[1461,22,1571,22],[1461,26,1571,26,"TYPE_INT32ARRAY"],[1461,41,1571,41],[1462,14,1572,12],[1462,15,1572,13],[1462,21,1572,19],[1462,25,1572,23,"valueType"],[1462,34,1572,32],[1462,39,1572,37],[1462,61,1572,59],[1462,63,1572,61],[1463,16,1573,16,"marker"],[1463,22,1573,22],[1463,26,1573,26,"TYPE_UINT32ARRAY"],[1463,42,1573,42],[1464,14,1574,12],[1464,15,1574,13],[1464,21,1574,19],[1464,25,1574,23,"valueType"],[1464,34,1574,32],[1464,39,1574,37],[1464,62,1574,60],[1464,64,1574,62],[1465,16,1575,16,"marker"],[1465,22,1575,22],[1465,26,1575,26,"TYPE_FLOAT32ARRAY"],[1465,43,1575,43],[1466,14,1576,12],[1466,15,1576,13],[1466,21,1576,19],[1466,25,1576,23,"valueType"],[1466,34,1576,32],[1466,39,1576,37],[1466,62,1576,60],[1466,64,1576,62],[1467,16,1577,16,"marker"],[1467,22,1577,22],[1467,26,1577,26,"TYPE_FLOAT64ARRAY"],[1467,43,1577,43],[1468,14,1578,12],[1468,15,1578,13],[1468,21,1578,19],[1469,16,1579,16,"callback"],[1469,24,1579,24],[1469,25,1579,25],[1469,29,1579,29,"Error"],[1469,34,1579,34],[1469,35,1579,35],[1469,71,1579,71],[1469,72,1579,72],[1469,73,1579,73],[1470,14,1580,12],[1471,12,1581,8],[1472,12,1583,8,"callback"],[1472,20,1583,16],[1472,21,1583,17,"marker"],[1472,27,1583,23],[1472,30,1583,26,"bufferToString"],[1472,44,1583,40],[1472,45,1583,41,"buffer"],[1472,51,1583,47],[1472,52,1583,48],[1472,53,1583,49],[1473,10,1584,4],[1473,11,1584,5],[1473,17,1584,11],[1473,21,1584,15,"valueType"],[1473,30,1584,24],[1473,35,1584,29],[1473,50,1584,44],[1473,52,1584,46],[1474,12,1585,8],[1475,12,1586,8],[1475,16,1586,12,"fileReader"],[1475,26,1586,22],[1475,29,1586,25],[1475,33,1586,29,"FileReader"],[1475,43,1586,39],[1475,44,1586,40],[1475,45,1586,41],[1476,12,1588,8,"fileReader"],[1476,22,1588,18],[1476,23,1588,19,"onload"],[1476,29,1588,25],[1476,32,1588,28],[1476,44,1588,40],[1477,14,1589,12],[1478,14,1590,12],[1478,18,1590,16,"str"],[1478,21,1590,19],[1478,24,1590,22,"BLOB_TYPE_PREFIX"],[1478,40,1590,38],[1478,43,1590,41,"value"],[1478,48,1590,46],[1478,49,1590,47,"type"],[1478,53,1590,51],[1478,56,1590,54],[1478,59,1590,57],[1478,62,1590,60,"bufferToString"],[1478,76,1590,74],[1478,77,1590,75],[1478,81,1590,79],[1478,82,1590,80,"result"],[1478,88,1590,86],[1478,89,1590,87],[1479,14,1592,12,"callback"],[1479,22,1592,20],[1479,23,1592,21,"SERIALIZED_MARKER"],[1479,40,1592,38],[1479,43,1592,41,"TYPE_BLOB"],[1479,52,1592,50],[1479,55,1592,53,"str"],[1479,58,1592,56],[1479,59,1592,57],[1480,12,1593,8],[1480,13,1593,9],[1481,12,1595,8,"fileReader"],[1481,22,1595,18],[1481,23,1595,19,"readAsArrayBuffer"],[1481,40,1595,36],[1481,41,1595,37,"value"],[1481,46,1595,42],[1481,47,1595,43],[1482,10,1596,4],[1482,11,1596,5],[1482,17,1596,11],[1483,12,1597,8],[1483,16,1597,12],[1484,14,1598,12,"callback"],[1484,22,1598,20],[1484,23,1598,21,"JSON"],[1484,27,1598,25],[1484,28,1598,26,"stringify"],[1484,37,1598,35],[1484,38,1598,36,"value"],[1484,43,1598,41],[1484,44,1598,42],[1484,45,1598,43],[1485,12,1599,8],[1485,13,1599,9],[1485,14,1599,10],[1485,21,1599,17,"e"],[1485,22,1599,18],[1485,24,1599,20],[1486,14,1600,12,"console"],[1486,21,1600,19],[1486,22,1600,20,"error"],[1486,27,1600,25],[1486,28,1600,26],[1486,73,1600,71],[1486,75,1600,73,"value"],[1486,80,1600,78],[1486,81,1600,79],[1487,14,1602,12,"callback"],[1487,22,1602,20],[1487,23,1602,21],[1487,27,1602,25],[1487,29,1602,27,"e"],[1487,30,1602,28],[1487,31,1602,29],[1488,12,1603,8],[1489,10,1604,4],[1490,8,1605,0],[1492,8,1607,0],[1493,8,1608,0],[1494,8,1609,0],[1495,8,1610,0],[1496,8,1611,0],[1497,8,1612,0],[1498,8,1613,0],[1499,8,1614,0],[1500,8,1615,0],[1500,17,1615,9,"deserialize"],[1500,28,1615,20,"deserialize"],[1500,29,1615,21,"value"],[1500,34,1615,26],[1500,36,1615,28],[1501,10,1616,4],[1502,10,1617,4],[1503,10,1618,4],[1504,10,1619,4],[1504,14,1619,8,"value"],[1504,19,1619,13],[1504,20,1619,14,"substring"],[1504,29,1619,23],[1504,30,1619,24],[1504,31,1619,25],[1504,33,1619,27,"SERIALIZED_MARKER_LENGTH"],[1504,57,1619,51],[1504,58,1619,52],[1504,63,1619,57,"SERIALIZED_MARKER"],[1504,80,1619,74],[1504,82,1619,76],[1505,12,1620,8],[1505,19,1620,15,"JSON"],[1505,23,1620,19],[1505,24,1620,20,"parse"],[1505,29,1620,25],[1505,30,1620,26,"value"],[1505,35,1620,31],[1505,36,1620,32],[1506,10,1621,4],[1508,10,1623,4],[1509,10,1624,4],[1510,10,1625,4],[1511,10,1626,4],[1511,14,1626,8,"serializedString"],[1511,30,1626,24],[1511,33,1626,27,"value"],[1511,38,1626,32],[1511,39,1626,33,"substring"],[1511,48,1626,42],[1511,49,1626,43,"TYPE_SERIALIZED_MARKER_LENGTH"],[1511,78,1626,72],[1511,79,1626,73],[1512,10,1627,4],[1512,14,1627,8,"type"],[1512,18,1627,12],[1512,21,1627,15,"value"],[1512,26,1627,20],[1512,27,1627,21,"substring"],[1512,36,1627,30],[1512,37,1627,31,"SERIALIZED_MARKER_LENGTH"],[1512,61,1627,55],[1512,63,1627,57,"TYPE_SERIALIZED_MARKER_LENGTH"],[1512,92,1627,86],[1512,93,1627,87],[1513,10,1629,4],[1513,14,1629,8,"blobType"],[1513,22,1629,16],[1514,10,1630,4],[1515,10,1631,4],[1516,10,1632,4],[1516,14,1632,8,"type"],[1516,18,1632,12],[1516,23,1632,17,"TYPE_BLOB"],[1516,32,1632,26],[1516,36,1632,30,"BLOB_TYPE_PREFIX_REGEX"],[1516,58,1632,52],[1516,59,1632,53,"test"],[1516,63,1632,57],[1516,64,1632,58,"serializedString"],[1516,80,1632,74],[1516,81,1632,75],[1516,83,1632,77],[1517,12,1633,8],[1517,16,1633,12,"matcher"],[1517,23,1633,19],[1517,26,1633,22,"serializedString"],[1517,42,1633,38],[1517,43,1633,39,"match"],[1517,48,1633,44],[1517,49,1633,45,"BLOB_TYPE_PREFIX_REGEX"],[1517,71,1633,67],[1517,72,1633,68],[1518,12,1634,8,"blobType"],[1518,20,1634,16],[1518,23,1634,19,"matcher"],[1518,30,1634,26],[1518,31,1634,27],[1518,32,1634,28],[1518,33,1634,29],[1519,12,1635,8,"serializedString"],[1519,28,1635,24],[1519,31,1635,27,"serializedString"],[1519,47,1635,43],[1519,48,1635,44,"substring"],[1519,57,1635,53],[1519,58,1635,54,"matcher"],[1519,65,1635,61],[1519,66,1635,62],[1519,67,1635,63],[1519,68,1635,64],[1519,69,1635,65,"length"],[1519,75,1635,71],[1519,76,1635,72],[1520,10,1636,4],[1521,10,1637,4],[1521,14,1637,8,"buffer"],[1521,20,1637,14],[1521,23,1637,17,"stringToBuffer"],[1521,37,1637,31],[1521,38,1637,32,"serializedString"],[1521,54,1637,48],[1521,55,1637,49],[1523,10,1639,4],[1524,10,1640,4],[1525,10,1641,4],[1525,18,1641,12,"type"],[1525,22,1641,16],[1526,12,1642,8],[1526,17,1642,13,"TYPE_ARRAYBUFFER"],[1526,33,1642,29],[1527,14,1643,12],[1527,21,1643,19,"buffer"],[1527,27,1643,25],[1528,12,1644,8],[1528,17,1644,13,"TYPE_BLOB"],[1528,26,1644,22],[1529,14,1645,12],[1529,21,1645,19,"createBlob"],[1529,31,1645,29],[1529,32,1645,30],[1529,33,1645,31,"buffer"],[1529,39,1645,37],[1529,40,1645,38],[1529,42,1645,40],[1530,16,1645,42,"type"],[1530,20,1645,46],[1530,22,1645,48,"blobType"],[1531,14,1645,57],[1531,15,1645,58],[1531,16,1645,59],[1532,12,1646,8],[1532,17,1646,13,"TYPE_INT8ARRAY"],[1532,31,1646,27],[1533,14,1647,12],[1533,21,1647,19],[1533,25,1647,23,"Int8Array"],[1533,34,1647,32],[1533,35,1647,33,"buffer"],[1533,41,1647,39],[1533,42,1647,40],[1534,12,1648,8],[1534,17,1648,13,"TYPE_UINT8ARRAY"],[1534,32,1648,28],[1535,14,1649,12],[1535,21,1649,19],[1535,25,1649,23,"Uint8Array"],[1535,35,1649,33],[1535,36,1649,34,"buffer"],[1535,42,1649,40],[1535,43,1649,41],[1536,12,1650,8],[1536,17,1650,13,"TYPE_UINT8CLAMPEDARRAY"],[1536,39,1650,35],[1537,14,1651,12],[1537,21,1651,19],[1537,25,1651,23,"Uint8ClampedArray"],[1537,42,1651,40],[1537,43,1651,41,"buffer"],[1537,49,1651,47],[1537,50,1651,48],[1538,12,1652,8],[1538,17,1652,13,"TYPE_INT16ARRAY"],[1538,32,1652,28],[1539,14,1653,12],[1539,21,1653,19],[1539,25,1653,23,"Int16Array"],[1539,35,1653,33],[1539,36,1653,34,"buffer"],[1539,42,1653,40],[1539,43,1653,41],[1540,12,1654,8],[1540,17,1654,13,"TYPE_UINT16ARRAY"],[1540,33,1654,29],[1541,14,1655,12],[1541,21,1655,19],[1541,25,1655,23,"Uint16Array"],[1541,36,1655,34],[1541,37,1655,35,"buffer"],[1541,43,1655,41],[1541,44,1655,42],[1542,12,1656,8],[1542,17,1656,13,"TYPE_INT32ARRAY"],[1542,32,1656,28],[1543,14,1657,12],[1543,21,1657,19],[1543,25,1657,23,"Int32Array"],[1543,35,1657,33],[1543,36,1657,34,"buffer"],[1543,42,1657,40],[1543,43,1657,41],[1544,12,1658,8],[1544,17,1658,13,"TYPE_UINT32ARRAY"],[1544,33,1658,29],[1545,14,1659,12],[1545,21,1659,19],[1545,25,1659,23,"Uint32Array"],[1545,36,1659,34],[1545,37,1659,35,"buffer"],[1545,43,1659,41],[1545,44,1659,42],[1546,12,1660,8],[1546,17,1660,13,"TYPE_FLOAT32ARRAY"],[1546,34,1660,30],[1547,14,1661,12],[1547,21,1661,19],[1547,25,1661,23,"Float32Array"],[1547,37,1661,35],[1547,38,1661,36,"buffer"],[1547,44,1661,42],[1547,45,1661,43],[1548,12,1662,8],[1548,17,1662,13,"TYPE_FLOAT64ARRAY"],[1548,34,1662,30],[1549,14,1663,12],[1549,21,1663,19],[1549,25,1663,23,"Float64Array"],[1549,37,1663,35],[1549,38,1663,36,"buffer"],[1549,44,1663,42],[1549,45,1663,43],[1550,12,1664,8],[1551,14,1665,12],[1551,20,1665,18],[1551,24,1665,22,"Error"],[1551,29,1665,27],[1551,30,1665,28],[1551,45,1665,43],[1551,48,1665,46,"type"],[1551,52,1665,50],[1551,53,1665,51],[1552,10,1666,4],[1553,8,1667,0],[1554,8,1669,0],[1554,12,1669,4,"localforageSerializer"],[1554,33,1669,25],[1554,36,1669,28],[1555,10,1670,4,"serialize"],[1555,19,1670,13],[1555,21,1670,15,"serialize"],[1555,30,1670,24],[1556,10,1671,4,"deserialize"],[1556,21,1671,15],[1556,23,1671,17,"deserialize"],[1556,34,1671,28],[1557,10,1672,4,"stringToBuffer"],[1557,24,1672,18],[1557,26,1672,20,"stringToBuffer"],[1557,40,1672,34],[1558,10,1673,4,"bufferToString"],[1558,24,1673,18],[1558,26,1673,20,"bufferToString"],[1559,8,1674,0],[1559,9,1674,1],[1561,8,1676,0],[1562,0,1677,0],[1563,0,1678,0],[1564,0,1679,0],[1565,0,1680,0],[1566,0,1681,0],[1567,0,1682,0],[1568,0,1683,0],[1569,0,1684,0],[1571,8,1686,0],[1571,17,1686,9,"createDbTable"],[1571,30,1686,22,"createDbTable"],[1571,31,1686,23,"t"],[1571,32,1686,24],[1571,34,1686,26,"dbInfo"],[1571,40,1686,32],[1571,42,1686,34,"callback"],[1571,50,1686,42],[1571,52,1686,44,"errorCallback"],[1571,65,1686,57],[1571,67,1686,59],[1572,10,1687,4,"t"],[1572,11,1687,5],[1572,12,1687,6,"executeSql"],[1572,22,1687,16],[1572,23,1687,17],[1572,52,1687,46],[1572,55,1687,49,"dbInfo"],[1572,61,1687,55],[1572,62,1687,56,"storeName"],[1572,71,1687,65],[1572,74,1687,68],[1572,77,1687,71],[1572,80,1687,74],[1572,125,1687,119],[1572,127,1687,121],[1572,129,1687,123],[1572,131,1687,125,"callback"],[1572,139,1687,133],[1572,141,1687,135,"errorCallback"],[1572,154,1687,148],[1572,155,1687,149],[1573,8,1688,0],[1575,8,1690,0],[1576,8,1691,0],[1577,8,1692,0],[1577,17,1692,9,"_initStorage$1"],[1577,31,1692,23,"_initStorage$1"],[1577,32,1692,24,"options"],[1577,39,1692,31],[1577,41,1692,33],[1578,10,1693,4],[1578,14,1693,8,"self"],[1578,18,1693,12],[1578,21,1693,15],[1578,25,1693,19],[1579,10,1694,4],[1579,14,1694,8,"dbInfo"],[1579,20,1694,14],[1579,23,1694,17],[1580,12,1695,8,"db"],[1580,14,1695,10],[1580,16,1695,12],[1581,10,1696,4],[1581,11,1696,5],[1582,10,1698,4],[1582,14,1698,8,"options"],[1582,21,1698,15],[1582,23,1698,17],[1583,12,1699,8],[1583,17,1699,13],[1583,21,1699,17,"i"],[1583,22,1699,18],[1583,26,1699,22,"options"],[1583,33,1699,29],[1583,35,1699,31],[1584,14,1700,12,"dbInfo"],[1584,20,1700,18],[1584,21,1700,19,"i"],[1584,22,1700,20],[1584,23,1700,21],[1584,26,1700,24],[1584,33,1700,31,"options"],[1584,40,1700,38],[1584,41,1700,39,"i"],[1584,42,1700,40],[1584,43,1700,41],[1584,48,1700,46],[1584,56,1700,54],[1584,59,1700,57,"options"],[1584,66,1700,64],[1584,67,1700,65,"i"],[1584,68,1700,66],[1584,69,1700,67],[1584,70,1700,68,"toString"],[1584,78,1700,76],[1584,79,1700,77],[1584,80,1700,78],[1584,83,1700,81,"options"],[1584,90,1700,88],[1584,91,1700,89,"i"],[1584,92,1700,90],[1584,93,1700,91],[1585,12,1701,8],[1586,10,1702,4],[1587,10,1704,4],[1587,14,1704,8,"dbInfoPromise"],[1587,27,1704,21],[1587,30,1704,24],[1587,34,1704,28,"Promise$1"],[1587,43,1704,37],[1587,44,1704,38],[1587,54,1704,48,"resolve"],[1587,61,1704,55],[1587,63,1704,57,"reject"],[1587,69,1704,63],[1587,71,1704,65],[1588,12,1705,8],[1589,12,1706,8],[1590,12,1707,8],[1590,16,1707,12],[1591,14,1708,12,"dbInfo"],[1591,20,1708,18],[1591,21,1708,19,"db"],[1591,23,1708,21],[1591,26,1708,24,"openDatabase"],[1591,38,1708,36],[1591,39,1708,37,"dbInfo"],[1591,45,1708,43],[1591,46,1708,44,"name"],[1591,50,1708,48],[1591,52,1708,50,"String"],[1591,58,1708,56],[1591,59,1708,57,"dbInfo"],[1591,65,1708,63],[1591,66,1708,64,"version"],[1591,73,1708,71],[1591,74,1708,72],[1591,76,1708,74,"dbInfo"],[1591,82,1708,80],[1591,83,1708,81,"description"],[1591,94,1708,92],[1591,96,1708,94,"dbInfo"],[1591,102,1708,100],[1591,103,1708,101,"size"],[1591,107,1708,105],[1591,108,1708,106],[1592,12,1709,8],[1592,13,1709,9],[1592,14,1709,10],[1592,21,1709,17,"e"],[1592,22,1709,18],[1592,24,1709,20],[1593,14,1710,12],[1593,21,1710,19,"reject"],[1593,27,1710,25],[1593,28,1710,26,"e"],[1593,29,1710,27],[1593,30,1710,28],[1594,12,1711,8],[1596,12,1713,8],[1597,12,1714,8,"dbInfo"],[1597,18,1714,14],[1597,19,1714,15,"db"],[1597,21,1714,17],[1597,22,1714,18,"transaction"],[1597,33,1714,29],[1597,34,1714,30],[1597,44,1714,40,"t"],[1597,45,1714,41],[1597,47,1714,43],[1598,14,1715,12,"createDbTable"],[1598,27,1715,25],[1598,28,1715,26,"t"],[1598,29,1715,27],[1598,31,1715,29,"dbInfo"],[1598,37,1715,35],[1598,39,1715,37],[1598,51,1715,49],[1599,16,1716,16,"self"],[1599,20,1716,20],[1599,21,1716,21,"_dbInfo"],[1599,28,1716,28],[1599,31,1716,31,"dbInfo"],[1599,37,1716,37],[1600,16,1717,16,"resolve"],[1600,23,1717,23],[1600,24,1717,24],[1600,25,1717,25],[1601,14,1718,12],[1601,15,1718,13],[1601,17,1718,15],[1601,27,1718,25,"t"],[1601,28,1718,26],[1601,30,1718,28,"error"],[1601,35,1718,33],[1601,37,1718,35],[1602,16,1719,16,"reject"],[1602,22,1719,22],[1602,23,1719,23,"error"],[1602,28,1719,28],[1602,29,1719,29],[1603,14,1720,12],[1603,15,1720,13],[1603,16,1720,14],[1604,12,1721,8],[1604,13,1721,9],[1604,15,1721,11,"reject"],[1604,21,1721,17],[1604,22,1721,18],[1605,10,1722,4],[1605,11,1722,5],[1605,12,1722,6],[1606,10,1724,4,"dbInfo"],[1606,16,1724,10],[1606,17,1724,11,"serializer"],[1606,27,1724,21],[1606,30,1724,24,"localforageSerializer"],[1606,51,1724,45],[1607,10,1725,4],[1607,17,1725,11,"dbInfoPromise"],[1607,30,1725,24],[1608,8,1726,0],[1609,8,1728,0],[1609,17,1728,9,"tryExecuteSql"],[1609,30,1728,22,"tryExecuteSql"],[1609,31,1728,23,"t"],[1609,32,1728,24],[1609,34,1728,26,"dbInfo"],[1609,40,1728,32],[1609,42,1728,34,"sqlStatement"],[1609,54,1728,46],[1609,56,1728,48,"args"],[1609,60,1728,52],[1609,62,1728,54,"callback"],[1609,70,1728,62],[1609,72,1728,64,"errorCallback"],[1609,85,1728,77],[1609,87,1728,79],[1610,10,1729,4,"t"],[1610,11,1729,5],[1610,12,1729,6,"executeSql"],[1610,22,1729,16],[1610,23,1729,17,"sqlStatement"],[1610,35,1729,29],[1610,37,1729,31,"args"],[1610,41,1729,35],[1610,43,1729,37,"callback"],[1610,51,1729,45],[1610,53,1729,47],[1610,63,1729,57,"t"],[1610,64,1729,58],[1610,66,1729,60,"error"],[1610,71,1729,65],[1610,73,1729,67],[1611,12,1730,8],[1611,16,1730,12,"error"],[1611,21,1730,17],[1611,22,1730,18,"code"],[1611,26,1730,22],[1611,31,1730,27,"error"],[1611,36,1730,32],[1611,37,1730,33,"SYNTAX_ERR"],[1611,47,1730,43],[1611,49,1730,45],[1612,14,1731,12,"t"],[1612,15,1731,13],[1612,16,1731,14,"executeSql"],[1612,26,1731,24],[1612,27,1731,25],[1612,60,1731,58],[1612,63,1731,61],[1612,96,1731,94],[1612,98,1731,96],[1612,99,1731,97,"dbInfo"],[1612,105,1731,103],[1612,106,1731,104,"storeName"],[1612,115,1731,113],[1612,116,1731,114],[1612,118,1731,116],[1612,128,1731,126,"t"],[1612,129,1731,127],[1612,131,1731,129,"results"],[1612,138,1731,136],[1612,140,1731,138],[1613,16,1732,16],[1613,20,1732,20],[1613,21,1732,21,"results"],[1613,28,1732,28],[1613,29,1732,29,"rows"],[1613,33,1732,33],[1613,34,1732,34,"length"],[1613,40,1732,40],[1613,42,1732,42],[1614,18,1733,20],[1615,18,1734,20],[1616,18,1735,20,"createDbTable"],[1616,31,1735,33],[1616,32,1735,34,"t"],[1616,33,1735,35],[1616,35,1735,37,"dbInfo"],[1616,41,1735,43],[1616,43,1735,45],[1616,55,1735,57],[1617,20,1736,24,"t"],[1617,21,1736,25],[1617,22,1736,26,"executeSql"],[1617,32,1736,36],[1617,33,1736,37,"sqlStatement"],[1617,45,1736,49],[1617,47,1736,51,"args"],[1617,51,1736,55],[1617,53,1736,57,"callback"],[1617,61,1736,65],[1617,63,1736,67,"errorCallback"],[1617,76,1736,80],[1617,77,1736,81],[1618,18,1737,20],[1618,19,1737,21],[1618,21,1737,23,"errorCallback"],[1618,34,1737,36],[1618,35,1737,37],[1619,16,1738,16],[1619,17,1738,17],[1619,23,1738,23],[1620,18,1739,20,"errorCallback"],[1620,31,1739,33],[1620,32,1739,34,"t"],[1620,33,1739,35],[1620,35,1739,37,"error"],[1620,40,1739,42],[1620,41,1739,43],[1621,16,1740,16],[1622,14,1741,12],[1622,15,1741,13],[1622,17,1741,15,"errorCallback"],[1622,30,1741,28],[1622,31,1741,29],[1623,12,1742,8],[1623,13,1742,9],[1623,19,1742,15],[1624,14,1743,12,"errorCallback"],[1624,27,1743,25],[1624,28,1743,26,"t"],[1624,29,1743,27],[1624,31,1743,29,"error"],[1624,36,1743,34],[1624,37,1743,35],[1625,12,1744,8],[1626,10,1745,4],[1626,11,1745,5],[1626,13,1745,7,"errorCallback"],[1626,26,1745,20],[1626,27,1745,21],[1627,8,1746,0],[1628,8,1748,0],[1628,17,1748,9,"getItem$1"],[1628,26,1748,18,"getItem$1"],[1628,27,1748,19,"key"],[1628,30,1748,22],[1628,32,1748,24,"callback"],[1628,40,1748,32],[1628,42,1748,34],[1629,10,1749,4],[1629,14,1749,8,"self"],[1629,18,1749,12],[1629,21,1749,15],[1629,25,1749,19],[1630,10,1751,4,"key"],[1630,13,1751,7],[1630,16,1751,10,"normalizeKey"],[1630,28,1751,22],[1630,29,1751,23,"key"],[1630,32,1751,26],[1630,33,1751,27],[1631,10,1753,4],[1631,14,1753,8,"promise"],[1631,21,1753,15],[1631,24,1753,18],[1631,28,1753,22,"Promise$1"],[1631,37,1753,31],[1631,38,1753,32],[1631,48,1753,42,"resolve"],[1631,55,1753,49],[1631,57,1753,51,"reject"],[1631,63,1753,57],[1631,65,1753,59],[1632,12,1754,8,"self"],[1632,16,1754,12],[1632,17,1754,13,"ready"],[1632,22,1754,18],[1632,23,1754,19],[1632,24,1754,20],[1632,25,1754,21,"then"],[1632,29,1754,25],[1632,30,1754,26],[1632,42,1754,38],[1633,14,1755,12],[1633,18,1755,16,"dbInfo"],[1633,24,1755,22],[1633,27,1755,25,"self"],[1633,31,1755,29],[1633,32,1755,30,"_dbInfo"],[1633,39,1755,37],[1634,14,1756,12,"dbInfo"],[1634,20,1756,18],[1634,21,1756,19,"db"],[1634,23,1756,21],[1634,24,1756,22,"transaction"],[1634,35,1756,33],[1634,36,1756,34],[1634,46,1756,44,"t"],[1634,47,1756,45],[1634,49,1756,47],[1635,16,1757,16,"tryExecuteSql"],[1635,29,1757,29],[1635,30,1757,30,"t"],[1635,31,1757,31],[1635,33,1757,33,"dbInfo"],[1635,39,1757,39],[1635,41,1757,41],[1635,57,1757,57],[1635,60,1757,60,"dbInfo"],[1635,66,1757,66],[1635,67,1757,67,"storeName"],[1635,76,1757,76],[1635,79,1757,79],[1635,103,1757,103],[1635,105,1757,105],[1635,106,1757,106,"key"],[1635,109,1757,109],[1635,110,1757,110],[1635,112,1757,112],[1635,122,1757,122,"t"],[1635,123,1757,123],[1635,125,1757,125,"results"],[1635,132,1757,132],[1635,134,1757,134],[1636,18,1758,20],[1636,22,1758,24,"result"],[1636,28,1758,30],[1636,31,1758,33,"results"],[1636,38,1758,40],[1636,39,1758,41,"rows"],[1636,43,1758,45],[1636,44,1758,46,"length"],[1636,50,1758,52],[1636,53,1758,55,"results"],[1636,60,1758,62],[1636,61,1758,63,"rows"],[1636,65,1758,67],[1636,66,1758,68,"item"],[1636,70,1758,72],[1636,71,1758,73],[1636,72,1758,74],[1636,73,1758,75],[1636,74,1758,76,"value"],[1636,79,1758,81],[1636,82,1758,84],[1636,86,1758,88],[1638,18,1760,20],[1639,18,1761,20],[1640,18,1762,20],[1640,22,1762,24,"result"],[1640,28,1762,30],[1640,30,1762,32],[1641,20,1763,24,"result"],[1641,26,1763,30],[1641,29,1763,33,"dbInfo"],[1641,35,1763,39],[1641,36,1763,40,"serializer"],[1641,46,1763,50],[1641,47,1763,51,"deserialize"],[1641,58,1763,62],[1641,59,1763,63,"result"],[1641,65,1763,69],[1641,66,1763,70],[1642,18,1764,20],[1643,18,1766,20,"resolve"],[1643,25,1766,27],[1643,26,1766,28,"result"],[1643,32,1766,34],[1643,33,1766,35],[1644,16,1767,16],[1644,17,1767,17],[1644,19,1767,19],[1644,29,1767,29,"t"],[1644,30,1767,30],[1644,32,1767,32,"error"],[1644,37,1767,37],[1644,39,1767,39],[1645,18,1768,20,"reject"],[1645,24,1768,26],[1645,25,1768,27,"error"],[1645,30,1768,32],[1645,31,1768,33],[1646,16,1769,16],[1646,17,1769,17],[1646,18,1769,18],[1647,14,1770,12],[1647,15,1770,13],[1647,16,1770,14],[1648,12,1771,8],[1648,13,1771,9],[1648,14,1771,10],[1648,15,1771,11],[1648,22,1771,18],[1648,23,1771,19],[1648,24,1771,20,"reject"],[1648,30,1771,26],[1648,31,1771,27],[1649,10,1772,4],[1649,11,1772,5],[1649,12,1772,6],[1650,10,1774,4,"executeCallback"],[1650,25,1774,19],[1650,26,1774,20,"promise"],[1650,33,1774,27],[1650,35,1774,29,"callback"],[1650,43,1774,37],[1650,44,1774,38],[1651,10,1775,4],[1651,17,1775,11,"promise"],[1651,24,1775,18],[1652,8,1776,0],[1653,8,1778,0],[1653,17,1778,9,"iterate$1"],[1653,26,1778,18,"iterate$1"],[1653,27,1778,19,"iterator"],[1653,35,1778,27],[1653,37,1778,29,"callback"],[1653,45,1778,37],[1653,47,1778,39],[1654,10,1779,4],[1654,14,1779,8,"self"],[1654,18,1779,12],[1654,21,1779,15],[1654,25,1779,19],[1655,10,1781,4],[1655,14,1781,8,"promise"],[1655,21,1781,15],[1655,24,1781,18],[1655,28,1781,22,"Promise$1"],[1655,37,1781,31],[1655,38,1781,32],[1655,48,1781,42,"resolve"],[1655,55,1781,49],[1655,57,1781,51,"reject"],[1655,63,1781,57],[1655,65,1781,59],[1656,12,1782,8,"self"],[1656,16,1782,12],[1656,17,1782,13,"ready"],[1656,22,1782,18],[1656,23,1782,19],[1656,24,1782,20],[1656,25,1782,21,"then"],[1656,29,1782,25],[1656,30,1782,26],[1656,42,1782,38],[1657,14,1783,12],[1657,18,1783,16,"dbInfo"],[1657,24,1783,22],[1657,27,1783,25,"self"],[1657,31,1783,29],[1657,32,1783,30,"_dbInfo"],[1657,39,1783,37],[1658,14,1785,12,"dbInfo"],[1658,20,1785,18],[1658,21,1785,19,"db"],[1658,23,1785,21],[1658,24,1785,22,"transaction"],[1658,35,1785,33],[1658,36,1785,34],[1658,46,1785,44,"t"],[1658,47,1785,45],[1658,49,1785,47],[1659,16,1786,16,"tryExecuteSql"],[1659,29,1786,29],[1659,30,1786,30,"t"],[1659,31,1786,31],[1659,33,1786,33,"dbInfo"],[1659,39,1786,39],[1659,41,1786,41],[1659,57,1786,57],[1659,60,1786,60,"dbInfo"],[1659,66,1786,66],[1659,67,1786,67,"storeName"],[1659,76,1786,76],[1659,78,1786,78],[1659,80,1786,80],[1659,82,1786,82],[1659,92,1786,92,"t"],[1659,93,1786,93],[1659,95,1786,95,"results"],[1659,102,1786,102],[1659,104,1786,104],[1660,18,1787,20],[1660,22,1787,24,"rows"],[1660,26,1787,28],[1660,29,1787,31,"results"],[1660,36,1787,38],[1660,37,1787,39,"rows"],[1660,41,1787,43],[1661,18,1788,20],[1661,22,1788,24,"length"],[1661,28,1788,30],[1661,31,1788,33,"rows"],[1661,35,1788,37],[1661,36,1788,38,"length"],[1661,42,1788,44],[1662,18,1790,20],[1662,23,1790,25],[1662,27,1790,29,"i"],[1662,28,1790,30],[1662,31,1790,33],[1662,32,1790,34],[1662,34,1790,36,"i"],[1662,35,1790,37],[1662,38,1790,40,"length"],[1662,44,1790,46],[1662,46,1790,48,"i"],[1662,47,1790,49],[1662,49,1790,51],[1662,51,1790,53],[1663,20,1791,24],[1663,24,1791,28,"item"],[1663,28,1791,32],[1663,31,1791,35,"rows"],[1663,35,1791,39],[1663,36,1791,40,"item"],[1663,40,1791,44],[1663,41,1791,45,"i"],[1663,42,1791,46],[1663,43,1791,47],[1664,20,1792,24],[1664,24,1792,28,"result"],[1664,30,1792,34],[1664,33,1792,37,"item"],[1664,37,1792,41],[1664,38,1792,42,"value"],[1664,43,1792,47],[1666,20,1794,24],[1667,20,1795,24],[1668,20,1796,24],[1668,24,1796,28,"result"],[1668,30,1796,34],[1668,32,1796,36],[1669,22,1797,28,"result"],[1669,28,1797,34],[1669,31,1797,37,"dbInfo"],[1669,37,1797,43],[1669,38,1797,44,"serializer"],[1669,48,1797,54],[1669,49,1797,55,"deserialize"],[1669,60,1797,66],[1669,61,1797,67,"result"],[1669,67,1797,73],[1669,68,1797,74],[1670,20,1798,24],[1671,20,1800,24,"result"],[1671,26,1800,30],[1671,29,1800,33,"iterator"],[1671,37,1800,41],[1671,38,1800,42,"result"],[1671,44,1800,48],[1671,46,1800,50,"item"],[1671,50,1800,54],[1671,51,1800,55,"key"],[1671,54,1800,58],[1671,56,1800,60,"i"],[1671,57,1800,61],[1671,60,1800,64],[1671,61,1800,65],[1671,62,1800,66],[1673,20,1802,24],[1674,20,1803,24],[1675,20,1804,24],[1675,24,1804,28,"result"],[1675,30,1804,34],[1675,35,1804,39],[1675,40,1804,44],[1675,41,1804,45],[1675,43,1804,47],[1676,22,1805,28,"resolve"],[1676,29,1805,35],[1676,30,1805,36,"result"],[1676,36,1805,42],[1676,37,1805,43],[1677,22,1806,28],[1678,20,1807,24],[1679,18,1808,20],[1680,18,1810,20,"resolve"],[1680,25,1810,27],[1680,26,1810,28],[1680,27,1810,29],[1681,16,1811,16],[1681,17,1811,17],[1681,19,1811,19],[1681,29,1811,29,"t"],[1681,30,1811,30],[1681,32,1811,32,"error"],[1681,37,1811,37],[1681,39,1811,39],[1682,18,1812,20,"reject"],[1682,24,1812,26],[1682,25,1812,27,"error"],[1682,30,1812,32],[1682,31,1812,33],[1683,16,1813,16],[1683,17,1813,17],[1683,18,1813,18],[1684,14,1814,12],[1684,15,1814,13],[1684,16,1814,14],[1685,12,1815,8],[1685,13,1815,9],[1685,14,1815,10],[1685,15,1815,11],[1685,22,1815,18],[1685,23,1815,19],[1685,24,1815,20,"reject"],[1685,30,1815,26],[1685,31,1815,27],[1686,10,1816,4],[1686,11,1816,5],[1686,12,1816,6],[1687,10,1818,4,"executeCallback"],[1687,25,1818,19],[1687,26,1818,20,"promise"],[1687,33,1818,27],[1687,35,1818,29,"callback"],[1687,43,1818,37],[1687,44,1818,38],[1688,10,1819,4],[1688,17,1819,11,"promise"],[1688,24,1819,18],[1689,8,1820,0],[1690,8,1822,0],[1690,17,1822,9,"_setItem"],[1690,25,1822,17,"_setItem"],[1690,26,1822,18,"key"],[1690,29,1822,21],[1690,31,1822,23,"value"],[1690,36,1822,28],[1690,38,1822,30,"callback"],[1690,46,1822,38],[1690,48,1822,40,"retriesLeft"],[1690,59,1822,51],[1690,61,1822,53],[1691,10,1823,4],[1691,14,1823,8,"self"],[1691,18,1823,12],[1691,21,1823,15],[1691,25,1823,19],[1692,10,1825,4,"key"],[1692,13,1825,7],[1692,16,1825,10,"normalizeKey"],[1692,28,1825,22],[1692,29,1825,23,"key"],[1692,32,1825,26],[1692,33,1825,27],[1693,10,1827,4],[1693,14,1827,8,"promise"],[1693,21,1827,15],[1693,24,1827,18],[1693,28,1827,22,"Promise$1"],[1693,37,1827,31],[1693,38,1827,32],[1693,48,1827,42,"resolve"],[1693,55,1827,49],[1693,57,1827,51,"reject"],[1693,63,1827,57],[1693,65,1827,59],[1694,12,1828,8,"self"],[1694,16,1828,12],[1694,17,1828,13,"ready"],[1694,22,1828,18],[1694,23,1828,19],[1694,24,1828,20],[1694,25,1828,21,"then"],[1694,29,1828,25],[1694,30,1828,26],[1694,42,1828,38],[1695,14,1829,12],[1696,14,1830,12],[1697,14,1831,12],[1698,14,1832,12],[1698,18,1832,16,"value"],[1698,23,1832,21],[1698,28,1832,26,"undefined"],[1698,37,1832,35],[1698,39,1832,37],[1699,16,1833,16,"value"],[1699,21,1833,21],[1699,24,1833,24],[1699,28,1833,28],[1700,14,1834,12],[1702,14,1836,12],[1703,14,1837,12],[1703,18,1837,16,"originalValue"],[1703,31,1837,29],[1703,34,1837,32,"value"],[1703,39,1837,37],[1704,14,1839,12],[1704,18,1839,16,"dbInfo"],[1704,24,1839,22],[1704,27,1839,25,"self"],[1704,31,1839,29],[1704,32,1839,30,"_dbInfo"],[1704,39,1839,37],[1705,14,1840,12,"dbInfo"],[1705,20,1840,18],[1705,21,1840,19,"serializer"],[1705,31,1840,29],[1705,32,1840,30,"serialize"],[1705,41,1840,39],[1705,42,1840,40,"value"],[1705,47,1840,45],[1705,49,1840,47],[1705,59,1840,57,"value"],[1705,64,1840,62],[1705,66,1840,64,"error"],[1705,71,1840,69],[1705,73,1840,71],[1706,16,1841,16],[1706,20,1841,20,"error"],[1706,25,1841,25],[1706,27,1841,27],[1707,18,1842,20,"reject"],[1707,24,1842,26],[1707,25,1842,27,"error"],[1707,30,1842,32],[1707,31,1842,33],[1708,16,1843,16],[1708,17,1843,17],[1708,23,1843,23],[1709,18,1844,20,"dbInfo"],[1709,24,1844,26],[1709,25,1844,27,"db"],[1709,27,1844,29],[1709,28,1844,30,"transaction"],[1709,39,1844,41],[1709,40,1844,42],[1709,50,1844,52,"t"],[1709,51,1844,53],[1709,53,1844,55],[1710,20,1845,24,"tryExecuteSql"],[1710,33,1845,37],[1710,34,1845,38,"t"],[1710,35,1845,39],[1710,37,1845,41,"dbInfo"],[1710,43,1845,47],[1710,45,1845,49],[1710,70,1845,74],[1710,73,1845,77,"dbInfo"],[1710,79,1845,83],[1710,80,1845,84,"storeName"],[1710,89,1845,93],[1710,92,1845,96],[1710,95,1845,99],[1710,98,1845,102],[1710,126,1845,130],[1710,128,1845,132],[1710,129,1845,133,"key"],[1710,132,1845,136],[1710,134,1845,138,"value"],[1710,139,1845,143],[1710,140,1845,144],[1710,142,1845,146],[1710,154,1845,158],[1711,22,1846,28,"resolve"],[1711,29,1846,35],[1711,30,1846,36,"originalValue"],[1711,43,1846,49],[1711,44,1846,50],[1712,20,1847,24],[1712,21,1847,25],[1712,23,1847,27],[1712,33,1847,37,"t"],[1712,34,1847,38],[1712,36,1847,40,"error"],[1712,41,1847,45],[1712,43,1847,47],[1713,22,1848,28,"reject"],[1713,28,1848,34],[1713,29,1848,35,"error"],[1713,34,1848,40],[1713,35,1848,41],[1714,20,1849,24],[1714,21,1849,25],[1714,22,1849,26],[1715,18,1850,20],[1715,19,1850,21],[1715,21,1850,23],[1715,31,1850,33,"sqlError"],[1715,39,1850,41],[1715,41,1850,43],[1716,20,1851,24],[1717,20,1852,24],[1718,20,1853,24],[1718,24,1853,28,"sqlError"],[1718,32,1853,36],[1718,33,1853,37,"code"],[1718,37,1853,41],[1718,42,1853,46,"sqlError"],[1718,50,1853,54],[1718,51,1853,55,"QUOTA_ERR"],[1718,60,1853,64],[1718,62,1853,66],[1719,22,1854,28],[1720,22,1855,28],[1721,22,1856,28],[1722,22,1857,28],[1723,22,1858,28],[1724,22,1859,28],[1725,22,1860,28],[1726,22,1861,28],[1726,26,1861,32,"retriesLeft"],[1726,37,1861,43],[1726,40,1861,46],[1726,41,1861,47],[1726,43,1861,49],[1727,24,1862,32,"resolve"],[1727,31,1862,39],[1727,32,1862,40,"_setItem"],[1727,40,1862,48],[1727,41,1862,49,"apply"],[1727,46,1862,54],[1727,47,1862,55,"self"],[1727,51,1862,59],[1727,53,1862,61],[1727,54,1862,62,"key"],[1727,57,1862,65],[1727,59,1862,67,"originalValue"],[1727,72,1862,80],[1727,74,1862,82,"callback"],[1727,82,1862,90],[1727,84,1862,92,"retriesLeft"],[1727,95,1862,103],[1727,98,1862,106],[1727,99,1862,107],[1727,100,1862,108],[1727,101,1862,109],[1727,102,1862,110],[1728,24,1863,32],[1729,22,1864,28],[1730,22,1865,28,"reject"],[1730,28,1865,34],[1730,29,1865,35,"sqlError"],[1730,37,1865,43],[1730,38,1865,44],[1731,20,1866,24],[1732,18,1867,20],[1732,19,1867,21],[1732,20,1867,22],[1733,16,1868,16],[1734,14,1869,12],[1734,15,1869,13],[1734,16,1869,14],[1735,12,1870,8],[1735,13,1870,9],[1735,14,1870,10],[1735,15,1870,11],[1735,22,1870,18],[1735,23,1870,19],[1735,24,1870,20,"reject"],[1735,30,1870,26],[1735,31,1870,27],[1736,10,1871,4],[1736,11,1871,5],[1736,12,1871,6],[1737,10,1873,4,"executeCallback"],[1737,25,1873,19],[1737,26,1873,20,"promise"],[1737,33,1873,27],[1737,35,1873,29,"callback"],[1737,43,1873,37],[1737,44,1873,38],[1738,10,1874,4],[1738,17,1874,11,"promise"],[1738,24,1874,18],[1739,8,1875,0],[1740,8,1877,0],[1740,17,1877,9,"setItem$1"],[1740,26,1877,18,"setItem$1"],[1740,27,1877,19,"key"],[1740,30,1877,22],[1740,32,1877,24,"value"],[1740,37,1877,29],[1740,39,1877,31,"callback"],[1740,47,1877,39],[1740,49,1877,41],[1741,10,1878,4],[1741,17,1878,11,"_setItem"],[1741,25,1878,19],[1741,26,1878,20,"apply"],[1741,31,1878,25],[1741,32,1878,26],[1741,36,1878,30],[1741,38,1878,32],[1741,39,1878,33,"key"],[1741,42,1878,36],[1741,44,1878,38,"value"],[1741,49,1878,43],[1741,51,1878,45,"callback"],[1741,59,1878,53],[1741,61,1878,55],[1741,62,1878,56],[1741,63,1878,57],[1741,64,1878,58],[1742,8,1879,0],[1743,8,1881,0],[1743,17,1881,9,"removeItem$1"],[1743,29,1881,21,"removeItem$1"],[1743,30,1881,22,"key"],[1743,33,1881,25],[1743,35,1881,27,"callback"],[1743,43,1881,35],[1743,45,1881,37],[1744,10,1882,4],[1744,14,1882,8,"self"],[1744,18,1882,12],[1744,21,1882,15],[1744,25,1882,19],[1745,10,1884,4,"key"],[1745,13,1884,7],[1745,16,1884,10,"normalizeKey"],[1745,28,1884,22],[1745,29,1884,23,"key"],[1745,32,1884,26],[1745,33,1884,27],[1746,10,1886,4],[1746,14,1886,8,"promise"],[1746,21,1886,15],[1746,24,1886,18],[1746,28,1886,22,"Promise$1"],[1746,37,1886,31],[1746,38,1886,32],[1746,48,1886,42,"resolve"],[1746,55,1886,49],[1746,57,1886,51,"reject"],[1746,63,1886,57],[1746,65,1886,59],[1747,12,1887,8,"self"],[1747,16,1887,12],[1747,17,1887,13,"ready"],[1747,22,1887,18],[1747,23,1887,19],[1747,24,1887,20],[1747,25,1887,21,"then"],[1747,29,1887,25],[1747,30,1887,26],[1747,42,1887,38],[1748,14,1888,12],[1748,18,1888,16,"dbInfo"],[1748,24,1888,22],[1748,27,1888,25,"self"],[1748,31,1888,29],[1748,32,1888,30,"_dbInfo"],[1748,39,1888,37],[1749,14,1889,12,"dbInfo"],[1749,20,1889,18],[1749,21,1889,19,"db"],[1749,23,1889,21],[1749,24,1889,22,"transaction"],[1749,35,1889,33],[1749,36,1889,34],[1749,46,1889,44,"t"],[1749,47,1889,45],[1749,49,1889,47],[1750,16,1890,16,"tryExecuteSql"],[1750,29,1890,29],[1750,30,1890,30,"t"],[1750,31,1890,31],[1750,33,1890,33,"dbInfo"],[1750,39,1890,39],[1750,41,1890,41],[1750,55,1890,55],[1750,58,1890,58,"dbInfo"],[1750,64,1890,64],[1750,65,1890,65,"storeName"],[1750,74,1890,74],[1750,77,1890,77],[1750,93,1890,93],[1750,95,1890,95],[1750,96,1890,96,"key"],[1750,99,1890,99],[1750,100,1890,100],[1750,102,1890,102],[1750,114,1890,114],[1751,18,1891,20,"resolve"],[1751,25,1891,27],[1751,26,1891,28],[1751,27,1891,29],[1752,16,1892,16],[1752,17,1892,17],[1752,19,1892,19],[1752,29,1892,29,"t"],[1752,30,1892,30],[1752,32,1892,32,"error"],[1752,37,1892,37],[1752,39,1892,39],[1753,18,1893,20,"reject"],[1753,24,1893,26],[1753,25,1893,27,"error"],[1753,30,1893,32],[1753,31,1893,33],[1754,16,1894,16],[1754,17,1894,17],[1754,18,1894,18],[1755,14,1895,12],[1755,15,1895,13],[1755,16,1895,14],[1756,12,1896,8],[1756,13,1896,9],[1756,14,1896,10],[1756,15,1896,11],[1756,22,1896,18],[1756,23,1896,19],[1756,24,1896,20,"reject"],[1756,30,1896,26],[1756,31,1896,27],[1757,10,1897,4],[1757,11,1897,5],[1757,12,1897,6],[1758,10,1899,4,"executeCallback"],[1758,25,1899,19],[1758,26,1899,20,"promise"],[1758,33,1899,27],[1758,35,1899,29,"callback"],[1758,43,1899,37],[1758,44,1899,38],[1759,10,1900,4],[1759,17,1900,11,"promise"],[1759,24,1900,18],[1760,8,1901,0],[1762,8,1903,0],[1763,8,1904,0],[1764,8,1905,0],[1764,17,1905,9,"clear$1"],[1764,24,1905,16,"clear$1"],[1764,25,1905,17,"callback"],[1764,33,1905,25],[1764,35,1905,27],[1765,10,1906,4],[1765,14,1906,8,"self"],[1765,18,1906,12],[1765,21,1906,15],[1765,25,1906,19],[1766,10,1908,4],[1766,14,1908,8,"promise"],[1766,21,1908,15],[1766,24,1908,18],[1766,28,1908,22,"Promise$1"],[1766,37,1908,31],[1766,38,1908,32],[1766,48,1908,42,"resolve"],[1766,55,1908,49],[1766,57,1908,51,"reject"],[1766,63,1908,57],[1766,65,1908,59],[1767,12,1909,8,"self"],[1767,16,1909,12],[1767,17,1909,13,"ready"],[1767,22,1909,18],[1767,23,1909,19],[1767,24,1909,20],[1767,25,1909,21,"then"],[1767,29,1909,25],[1767,30,1909,26],[1767,42,1909,38],[1768,14,1910,12],[1768,18,1910,16,"dbInfo"],[1768,24,1910,22],[1768,27,1910,25,"self"],[1768,31,1910,29],[1768,32,1910,30,"_dbInfo"],[1768,39,1910,37],[1769,14,1911,12,"dbInfo"],[1769,20,1911,18],[1769,21,1911,19,"db"],[1769,23,1911,21],[1769,24,1911,22,"transaction"],[1769,35,1911,33],[1769,36,1911,34],[1769,46,1911,44,"t"],[1769,47,1911,45],[1769,49,1911,47],[1770,16,1912,16,"tryExecuteSql"],[1770,29,1912,29],[1770,30,1912,30,"t"],[1770,31,1912,31],[1770,33,1912,33,"dbInfo"],[1770,39,1912,39],[1770,41,1912,41],[1770,55,1912,55],[1770,58,1912,58,"dbInfo"],[1770,64,1912,64],[1770,65,1912,65,"storeName"],[1770,74,1912,74],[1770,76,1912,76],[1770,78,1912,78],[1770,80,1912,80],[1770,92,1912,92],[1771,18,1913,20,"resolve"],[1771,25,1913,27],[1771,26,1913,28],[1771,27,1913,29],[1772,16,1914,16],[1772,17,1914,17],[1772,19,1914,19],[1772,29,1914,29,"t"],[1772,30,1914,30],[1772,32,1914,32,"error"],[1772,37,1914,37],[1772,39,1914,39],[1773,18,1915,20,"reject"],[1773,24,1915,26],[1773,25,1915,27,"error"],[1773,30,1915,32],[1773,31,1915,33],[1774,16,1916,16],[1774,17,1916,17],[1774,18,1916,18],[1775,14,1917,12],[1775,15,1917,13],[1775,16,1917,14],[1776,12,1918,8],[1776,13,1918,9],[1776,14,1918,10],[1776,15,1918,11],[1776,22,1918,18],[1776,23,1918,19],[1776,24,1918,20,"reject"],[1776,30,1918,26],[1776,31,1918,27],[1777,10,1919,4],[1777,11,1919,5],[1777,12,1919,6],[1778,10,1921,4,"executeCallback"],[1778,25,1921,19],[1778,26,1921,20,"promise"],[1778,33,1921,27],[1778,35,1921,29,"callback"],[1778,43,1921,37],[1778,44,1921,38],[1779,10,1922,4],[1779,17,1922,11,"promise"],[1779,24,1922,18],[1780,8,1923,0],[1782,8,1925,0],[1783,8,1926,0],[1784,8,1927,0],[1784,17,1927,9,"length$1"],[1784,25,1927,17,"length$1"],[1784,26,1927,18,"callback"],[1784,34,1927,26],[1784,36,1927,28],[1785,10,1928,4],[1785,14,1928,8,"self"],[1785,18,1928,12],[1785,21,1928,15],[1785,25,1928,19],[1786,10,1930,4],[1786,14,1930,8,"promise"],[1786,21,1930,15],[1786,24,1930,18],[1786,28,1930,22,"Promise$1"],[1786,37,1930,31],[1786,38,1930,32],[1786,48,1930,42,"resolve"],[1786,55,1930,49],[1786,57,1930,51,"reject"],[1786,63,1930,57],[1786,65,1930,59],[1787,12,1931,8,"self"],[1787,16,1931,12],[1787,17,1931,13,"ready"],[1787,22,1931,18],[1787,23,1931,19],[1787,24,1931,20],[1787,25,1931,21,"then"],[1787,29,1931,25],[1787,30,1931,26],[1787,42,1931,38],[1788,14,1932,12],[1788,18,1932,16,"dbInfo"],[1788,24,1932,22],[1788,27,1932,25,"self"],[1788,31,1932,29],[1788,32,1932,30,"_dbInfo"],[1788,39,1932,37],[1789,14,1933,12,"dbInfo"],[1789,20,1933,18],[1789,21,1933,19,"db"],[1789,23,1933,21],[1789,24,1933,22,"transaction"],[1789,35,1933,33],[1789,36,1933,34],[1789,46,1933,44,"t"],[1789,47,1933,45],[1789,49,1933,47],[1790,16,1934,16],[1791,16,1935,16,"tryExecuteSql"],[1791,29,1935,29],[1791,30,1935,30,"t"],[1791,31,1935,31],[1791,33,1935,33,"dbInfo"],[1791,39,1935,39],[1791,41,1935,41],[1791,71,1935,71],[1791,74,1935,74,"dbInfo"],[1791,80,1935,80],[1791,81,1935,81,"storeName"],[1791,90,1935,90],[1791,92,1935,92],[1791,94,1935,94],[1791,96,1935,96],[1791,106,1935,106,"t"],[1791,107,1935,107],[1791,109,1935,109,"results"],[1791,116,1935,116],[1791,118,1935,118],[1792,18,1936,20],[1792,22,1936,24,"result"],[1792,28,1936,30],[1792,31,1936,33,"results"],[1792,38,1936,40],[1792,39,1936,41,"rows"],[1792,43,1936,45],[1792,44,1936,46,"item"],[1792,48,1936,50],[1792,49,1936,51],[1792,50,1936,52],[1792,51,1936,53],[1792,52,1936,54,"c"],[1792,53,1936,55],[1793,18,1937,20,"resolve"],[1793,25,1937,27],[1793,26,1937,28,"result"],[1793,32,1937,34],[1793,33,1937,35],[1794,16,1938,16],[1794,17,1938,17],[1794,19,1938,19],[1794,29,1938,29,"t"],[1794,30,1938,30],[1794,32,1938,32,"error"],[1794,37,1938,37],[1794,39,1938,39],[1795,18,1939,20,"reject"],[1795,24,1939,26],[1795,25,1939,27,"error"],[1795,30,1939,32],[1795,31,1939,33],[1796,16,1940,16],[1796,17,1940,17],[1796,18,1940,18],[1797,14,1941,12],[1797,15,1941,13],[1797,16,1941,14],[1798,12,1942,8],[1798,13,1942,9],[1798,14,1942,10],[1798,15,1942,11],[1798,22,1942,18],[1798,23,1942,19],[1798,24,1942,20,"reject"],[1798,30,1942,26],[1798,31,1942,27],[1799,10,1943,4],[1799,11,1943,5],[1799,12,1943,6],[1800,10,1945,4,"executeCallback"],[1800,25,1945,19],[1800,26,1945,20,"promise"],[1800,33,1945,27],[1800,35,1945,29,"callback"],[1800,43,1945,37],[1800,44,1945,38],[1801,10,1946,4],[1801,17,1946,11,"promise"],[1801,24,1946,18],[1802,8,1947,0],[1804,8,1949,0],[1805,8,1950,0],[1806,8,1951,0],[1807,8,1952,0],[1808,8,1953,0],[1809,8,1954,0],[1810,8,1955,0],[1811,8,1956,0],[1811,17,1956,9,"key$1"],[1811,22,1956,14,"key$1"],[1811,23,1956,15,"n"],[1811,24,1956,16],[1811,26,1956,18,"callback"],[1811,34,1956,26],[1811,36,1956,28],[1812,10,1957,4],[1812,14,1957,8,"self"],[1812,18,1957,12],[1812,21,1957,15],[1812,25,1957,19],[1813,10,1959,4],[1813,14,1959,8,"promise"],[1813,21,1959,15],[1813,24,1959,18],[1813,28,1959,22,"Promise$1"],[1813,37,1959,31],[1813,38,1959,32],[1813,48,1959,42,"resolve"],[1813,55,1959,49],[1813,57,1959,51,"reject"],[1813,63,1959,57],[1813,65,1959,59],[1814,12,1960,8,"self"],[1814,16,1960,12],[1814,17,1960,13,"ready"],[1814,22,1960,18],[1814,23,1960,19],[1814,24,1960,20],[1814,25,1960,21,"then"],[1814,29,1960,25],[1814,30,1960,26],[1814,42,1960,38],[1815,14,1961,12],[1815,18,1961,16,"dbInfo"],[1815,24,1961,22],[1815,27,1961,25,"self"],[1815,31,1961,29],[1815,32,1961,30,"_dbInfo"],[1815,39,1961,37],[1816,14,1962,12,"dbInfo"],[1816,20,1962,18],[1816,21,1962,19,"db"],[1816,23,1962,21],[1816,24,1962,22,"transaction"],[1816,35,1962,33],[1816,36,1962,34],[1816,46,1962,44,"t"],[1816,47,1962,45],[1816,49,1962,47],[1817,16,1963,16,"tryExecuteSql"],[1817,29,1963,29],[1817,30,1963,30,"t"],[1817,31,1963,31],[1817,33,1963,33,"dbInfo"],[1817,39,1963,39],[1817,41,1963,41],[1817,59,1963,59],[1817,62,1963,62,"dbInfo"],[1817,68,1963,68],[1817,69,1963,69,"storeName"],[1817,78,1963,78],[1817,81,1963,81],[1817,104,1963,104],[1817,106,1963,106],[1817,107,1963,107,"n"],[1817,108,1963,108],[1817,111,1963,111],[1817,112,1963,112],[1817,113,1963,113],[1817,115,1963,115],[1817,125,1963,125,"t"],[1817,126,1963,126],[1817,128,1963,128,"results"],[1817,135,1963,135],[1817,137,1963,137],[1818,18,1964,20],[1818,22,1964,24,"result"],[1818,28,1964,30],[1818,31,1964,33,"results"],[1818,38,1964,40],[1818,39,1964,41,"rows"],[1818,43,1964,45],[1818,44,1964,46,"length"],[1818,50,1964,52],[1818,53,1964,55,"results"],[1818,60,1964,62],[1818,61,1964,63,"rows"],[1818,65,1964,67],[1818,66,1964,68,"item"],[1818,70,1964,72],[1818,71,1964,73],[1818,72,1964,74],[1818,73,1964,75],[1818,74,1964,76,"key"],[1818,77,1964,79],[1818,80,1964,82],[1818,84,1964,86],[1819,18,1965,20,"resolve"],[1819,25,1965,27],[1819,26,1965,28,"result"],[1819,32,1965,34],[1819,33,1965,35],[1820,16,1966,16],[1820,17,1966,17],[1820,19,1966,19],[1820,29,1966,29,"t"],[1820,30,1966,30],[1820,32,1966,32,"error"],[1820,37,1966,37],[1820,39,1966,39],[1821,18,1967,20,"reject"],[1821,24,1967,26],[1821,25,1967,27,"error"],[1821,30,1967,32],[1821,31,1967,33],[1822,16,1968,16],[1822,17,1968,17],[1822,18,1968,18],[1823,14,1969,12],[1823,15,1969,13],[1823,16,1969,14],[1824,12,1970,8],[1824,13,1970,9],[1824,14,1970,10],[1824,15,1970,11],[1824,22,1970,18],[1824,23,1970,19],[1824,24,1970,20,"reject"],[1824,30,1970,26],[1824,31,1970,27],[1825,10,1971,4],[1825,11,1971,5],[1825,12,1971,6],[1826,10,1973,4,"executeCallback"],[1826,25,1973,19],[1826,26,1973,20,"promise"],[1826,33,1973,27],[1826,35,1973,29,"callback"],[1826,43,1973,37],[1826,44,1973,38],[1827,10,1974,4],[1827,17,1974,11,"promise"],[1827,24,1974,18],[1828,8,1975,0],[1829,8,1977,0],[1829,17,1977,9,"keys$1"],[1829,23,1977,15,"keys$1"],[1829,24,1977,16,"callback"],[1829,32,1977,24],[1829,34,1977,26],[1830,10,1978,4],[1830,14,1978,8,"self"],[1830,18,1978,12],[1830,21,1978,15],[1830,25,1978,19],[1831,10,1980,4],[1831,14,1980,8,"promise"],[1831,21,1980,15],[1831,24,1980,18],[1831,28,1980,22,"Promise$1"],[1831,37,1980,31],[1831,38,1980,32],[1831,48,1980,42,"resolve"],[1831,55,1980,49],[1831,57,1980,51,"reject"],[1831,63,1980,57],[1831,65,1980,59],[1832,12,1981,8,"self"],[1832,16,1981,12],[1832,17,1981,13,"ready"],[1832,22,1981,18],[1832,23,1981,19],[1832,24,1981,20],[1832,25,1981,21,"then"],[1832,29,1981,25],[1832,30,1981,26],[1832,42,1981,38],[1833,14,1982,12],[1833,18,1982,16,"dbInfo"],[1833,24,1982,22],[1833,27,1982,25,"self"],[1833,31,1982,29],[1833,32,1982,30,"_dbInfo"],[1833,39,1982,37],[1834,14,1983,12,"dbInfo"],[1834,20,1983,18],[1834,21,1983,19,"db"],[1834,23,1983,21],[1834,24,1983,22,"transaction"],[1834,35,1983,33],[1834,36,1983,34],[1834,46,1983,44,"t"],[1834,47,1983,45],[1834,49,1983,47],[1835,16,1984,16,"tryExecuteSql"],[1835,29,1984,29],[1835,30,1984,30,"t"],[1835,31,1984,31],[1835,33,1984,33,"dbInfo"],[1835,39,1984,39],[1835,41,1984,41],[1835,59,1984,59],[1835,62,1984,62,"dbInfo"],[1835,68,1984,68],[1835,69,1984,69,"storeName"],[1835,78,1984,78],[1835,80,1984,80],[1835,82,1984,82],[1835,84,1984,84],[1835,94,1984,94,"t"],[1835,95,1984,95],[1835,97,1984,97,"results"],[1835,104,1984,104],[1835,106,1984,106],[1836,18,1985,20],[1836,22,1985,24,"keys"],[1836,26,1985,28],[1836,29,1985,31],[1836,31,1985,33],[1837,18,1987,20],[1837,23,1987,25],[1837,27,1987,29,"i"],[1837,28,1987,30],[1837,31,1987,33],[1837,32,1987,34],[1837,34,1987,36,"i"],[1837,35,1987,37],[1837,38,1987,40,"results"],[1837,45,1987,47],[1837,46,1987,48,"rows"],[1837,50,1987,52],[1837,51,1987,53,"length"],[1837,57,1987,59],[1837,59,1987,61,"i"],[1837,60,1987,62],[1837,62,1987,64],[1837,64,1987,66],[1838,20,1988,24,"keys"],[1838,24,1988,28],[1838,25,1988,29,"push"],[1838,29,1988,33],[1838,30,1988,34,"results"],[1838,37,1988,41],[1838,38,1988,42,"rows"],[1838,42,1988,46],[1838,43,1988,47,"item"],[1838,47,1988,51],[1838,48,1988,52,"i"],[1838,49,1988,53],[1838,50,1988,54],[1838,51,1988,55,"key"],[1838,54,1988,58],[1838,55,1988,59],[1839,18,1989,20],[1840,18,1991,20,"resolve"],[1840,25,1991,27],[1840,26,1991,28,"keys"],[1840,30,1991,32],[1840,31,1991,33],[1841,16,1992,16],[1841,17,1992,17],[1841,19,1992,19],[1841,29,1992,29,"t"],[1841,30,1992,30],[1841,32,1992,32,"error"],[1841,37,1992,37],[1841,39,1992,39],[1842,18,1993,20,"reject"],[1842,24,1993,26],[1842,25,1993,27,"error"],[1842,30,1993,32],[1842,31,1993,33],[1843,16,1994,16],[1843,17,1994,17],[1843,18,1994,18],[1844,14,1995,12],[1844,15,1995,13],[1844,16,1995,14],[1845,12,1996,8],[1845,13,1996,9],[1845,14,1996,10],[1845,15,1996,11],[1845,22,1996,18],[1845,23,1996,19],[1845,24,1996,20,"reject"],[1845,30,1996,26],[1845,31,1996,27],[1846,10,1997,4],[1846,11,1997,5],[1846,12,1997,6],[1847,10,1999,4,"executeCallback"],[1847,25,1999,19],[1847,26,1999,20,"promise"],[1847,33,1999,27],[1847,35,1999,29,"callback"],[1847,43,1999,37],[1847,44,1999,38],[1848,10,2000,4],[1848,17,2000,11,"promise"],[1848,24,2000,18],[1849,8,2001,0],[1851,8,2003,0],[1852,8,2004,0],[1853,8,2005,0],[1853,17,2005,9,"getAllStoreNames"],[1853,33,2005,25,"getAllStoreNames"],[1853,34,2005,26,"db"],[1853,36,2005,28],[1853,38,2005,30],[1854,10,2006,4],[1854,17,2006,11],[1854,21,2006,15,"Promise$1"],[1854,30,2006,24],[1854,31,2006,25],[1854,41,2006,35,"resolve"],[1854,48,2006,42],[1854,50,2006,44,"reject"],[1854,56,2006,50],[1854,58,2006,52],[1855,12,2007,8,"db"],[1855,14,2007,10],[1855,15,2007,11,"transaction"],[1855,26,2007,22],[1855,27,2007,23],[1855,37,2007,33,"t"],[1855,38,2007,34],[1855,40,2007,36],[1856,14,2008,12,"t"],[1856,15,2008,13],[1856,16,2008,14,"executeSql"],[1856,26,2008,24],[1856,27,2008,25],[1856,60,2008,58],[1856,63,2008,61],[1856,125,2008,123],[1856,127,2008,125],[1856,129,2008,127],[1856,131,2008,129],[1856,141,2008,139,"t"],[1856,142,2008,140],[1856,144,2008,142,"results"],[1856,151,2008,149],[1856,153,2008,151],[1857,16,2009,16],[1857,20,2009,20,"storeNames"],[1857,30,2009,30],[1857,33,2009,33],[1857,35,2009,35],[1858,16,2011,16],[1858,21,2011,21],[1858,25,2011,25,"i"],[1858,26,2011,26],[1858,29,2011,29],[1858,30,2011,30],[1858,32,2011,32,"i"],[1858,33,2011,33],[1858,36,2011,36,"results"],[1858,43,2011,43],[1858,44,2011,44,"rows"],[1858,48,2011,48],[1858,49,2011,49,"length"],[1858,55,2011,55],[1858,57,2011,57,"i"],[1858,58,2011,58],[1858,60,2011,60],[1858,62,2011,62],[1859,18,2012,20,"storeNames"],[1859,28,2012,30],[1859,29,2012,31,"push"],[1859,33,2012,35],[1859,34,2012,36,"results"],[1859,41,2012,43],[1859,42,2012,44,"rows"],[1859,46,2012,48],[1859,47,2012,49,"item"],[1859,51,2012,53],[1859,52,2012,54,"i"],[1859,53,2012,55],[1859,54,2012,56],[1859,55,2012,57,"name"],[1859,59,2012,61],[1859,60,2012,62],[1860,16,2013,16],[1861,16,2015,16,"resolve"],[1861,23,2015,23],[1861,24,2015,24],[1862,18,2016,20,"db"],[1862,20,2016,22],[1862,22,2016,24,"db"],[1862,24,2016,26],[1863,18,2017,20,"storeNames"],[1863,28,2017,30],[1863,30,2017,32,"storeNames"],[1864,16,2018,16],[1864,17,2018,17],[1864,18,2018,18],[1865,14,2019,12],[1865,15,2019,13],[1865,17,2019,15],[1865,27,2019,25,"t"],[1865,28,2019,26],[1865,30,2019,28,"error"],[1865,35,2019,33],[1865,37,2019,35],[1866,16,2020,16,"reject"],[1866,22,2020,22],[1866,23,2020,23,"error"],[1866,28,2020,28],[1866,29,2020,29],[1867,14,2021,12],[1867,15,2021,13],[1867,16,2021,14],[1868,12,2022,8],[1868,13,2022,9],[1868,15,2022,11],[1868,25,2022,21,"sqlError"],[1868,33,2022,29],[1868,35,2022,31],[1869,14,2023,12,"reject"],[1869,20,2023,18],[1869,21,2023,19,"sqlError"],[1869,29,2023,27],[1869,30,2023,28],[1870,12,2024,8],[1870,13,2024,9],[1870,14,2024,10],[1871,10,2025,4],[1871,11,2025,5],[1871,12,2025,6],[1872,8,2026,0],[1873,8,2028,0],[1873,17,2028,9,"dropInstance$1"],[1873,31,2028,23,"dropInstance$1"],[1873,32,2028,24,"options"],[1873,39,2028,31],[1873,41,2028,33,"callback"],[1873,49,2028,41],[1873,51,2028,43],[1874,10,2029,4,"callback"],[1874,18,2029,12],[1874,21,2029,15,"getCallback"],[1874,32,2029,26],[1874,33,2029,27,"apply"],[1874,38,2029,32],[1874,39,2029,33],[1874,43,2029,37],[1874,45,2029,39,"arguments"],[1874,54,2029,48],[1874,55,2029,49],[1875,10,2031,4],[1875,14,2031,8,"currentConfig"],[1875,27,2031,21],[1875,30,2031,24],[1875,34,2031,28],[1875,35,2031,29,"config"],[1875,41,2031,35],[1875,42,2031,36],[1875,43,2031,37],[1876,10,2032,4,"options"],[1876,17,2032,11],[1876,20,2032,14],[1876,27,2032,21,"options"],[1876,34,2032,28],[1876,39,2032,33],[1876,49,2032,43],[1876,53,2032,47,"options"],[1876,60,2032,54],[1876,64,2032,58],[1876,65,2032,59],[1876,66,2032,60],[1877,10,2033,4],[1877,14,2033,8],[1877,15,2033,9,"options"],[1877,22,2033,16],[1877,23,2033,17,"name"],[1877,27,2033,21],[1877,29,2033,23],[1878,12,2034,8,"options"],[1878,19,2034,15],[1878,20,2034,16,"name"],[1878,24,2034,20],[1878,27,2034,23,"options"],[1878,34,2034,30],[1878,35,2034,31,"name"],[1878,39,2034,35],[1878,43,2034,39,"currentConfig"],[1878,56,2034,52],[1878,57,2034,53,"name"],[1878,61,2034,57],[1879,12,2035,8,"options"],[1879,19,2035,15],[1879,20,2035,16,"storeName"],[1879,29,2035,25],[1879,32,2035,28,"options"],[1879,39,2035,35],[1879,40,2035,36,"storeName"],[1879,49,2035,45],[1879,53,2035,49,"currentConfig"],[1879,66,2035,62],[1879,67,2035,63,"storeName"],[1879,76,2035,72],[1880,10,2036,4],[1881,10,2038,4],[1881,14,2038,8,"self"],[1881,18,2038,12],[1881,21,2038,15],[1881,25,2038,19],[1882,10,2039,4],[1882,14,2039,8,"promise"],[1882,21,2039,15],[1883,10,2040,4],[1883,14,2040,8],[1883,15,2040,9,"options"],[1883,22,2040,16],[1883,23,2040,17,"name"],[1883,27,2040,21],[1883,29,2040,23],[1884,12,2041,8,"promise"],[1884,19,2041,15],[1884,22,2041,18,"Promise$1"],[1884,31,2041,27],[1884,32,2041,28,"reject"],[1884,38,2041,34],[1884,39,2041,35],[1884,58,2041,54],[1884,59,2041,55],[1885,10,2042,4],[1885,11,2042,5],[1885,17,2042,11],[1886,12,2043,8,"promise"],[1886,19,2043,15],[1886,22,2043,18],[1886,26,2043,22,"Promise$1"],[1886,35,2043,31],[1886,36,2043,32],[1886,46,2043,42,"resolve"],[1886,53,2043,49],[1886,55,2043,51],[1887,14,2044,12],[1887,18,2044,16,"db"],[1887,20,2044,18],[1888,14,2045,12],[1888,18,2045,16,"options"],[1888,25,2045,23],[1888,26,2045,24,"name"],[1888,30,2045,28],[1888,35,2045,33,"currentConfig"],[1888,48,2045,46],[1888,49,2045,47,"name"],[1888,53,2045,51],[1888,55,2045,53],[1889,16,2046,16],[1890,16,2047,16,"db"],[1890,18,2047,18],[1890,21,2047,21,"self"],[1890,25,2047,25],[1890,26,2047,26,"_dbInfo"],[1890,33,2047,33],[1890,34,2047,34,"db"],[1890,36,2047,36],[1891,14,2048,12],[1891,15,2048,13],[1891,21,2048,19],[1892,16,2049,16,"db"],[1892,18,2049,18],[1892,21,2049,21,"openDatabase"],[1892,33,2049,33],[1892,34,2049,34,"options"],[1892,41,2049,41],[1892,42,2049,42,"name"],[1892,46,2049,46],[1892,48,2049,48],[1892,50,2049,50],[1892,52,2049,52],[1892,54,2049,54],[1892,56,2049,56],[1892,57,2049,57],[1892,58,2049,58],[1893,14,2050,12],[1894,14,2052,12],[1894,18,2052,16],[1894,19,2052,17,"options"],[1894,26,2052,24],[1894,27,2052,25,"storeName"],[1894,36,2052,34],[1894,38,2052,36],[1895,16,2053,16],[1896,16,2054,16,"resolve"],[1896,23,2054,23],[1896,24,2054,24,"getAllStoreNames"],[1896,40,2054,40],[1896,41,2054,41,"db"],[1896,43,2054,43],[1896,44,2054,44],[1896,45,2054,45],[1897,14,2055,12],[1897,15,2055,13],[1897,21,2055,19],[1898,16,2056,16,"resolve"],[1898,23,2056,23],[1898,24,2056,24],[1899,18,2057,20,"db"],[1899,20,2057,22],[1899,22,2057,24,"db"],[1899,24,2057,26],[1900,18,2058,20,"storeNames"],[1900,28,2058,30],[1900,30,2058,32],[1900,31,2058,33,"options"],[1900,38,2058,40],[1900,39,2058,41,"storeName"],[1900,48,2058,50],[1901,16,2059,16],[1901,17,2059,17],[1901,18,2059,18],[1902,14,2060,12],[1903,12,2061,8],[1903,13,2061,9],[1903,14,2061,10],[1903,15,2061,11,"then"],[1903,19,2061,15],[1903,20,2061,16],[1903,30,2061,26,"operationInfo"],[1903,43,2061,39],[1903,45,2061,41],[1904,14,2062,12],[1904,21,2062,19],[1904,25,2062,23,"Promise$1"],[1904,34,2062,32],[1904,35,2062,33],[1904,45,2062,43,"resolve"],[1904,52,2062,50],[1904,54,2062,52,"reject"],[1904,60,2062,58],[1904,62,2062,60],[1905,16,2063,16,"operationInfo"],[1905,29,2063,29],[1905,30,2063,30,"db"],[1905,32,2063,32],[1905,33,2063,33,"transaction"],[1905,44,2063,44],[1905,45,2063,45],[1905,55,2063,55,"t"],[1905,56,2063,56],[1905,58,2063,58],[1906,18,2064,20],[1906,27,2064,29,"dropTable"],[1906,36,2064,38,"dropTable"],[1906,37,2064,39,"storeName"],[1906,46,2064,48],[1906,48,2064,50],[1907,20,2065,24],[1907,27,2065,31],[1907,31,2065,35,"Promise$1"],[1907,40,2065,44],[1907,41,2065,45],[1907,51,2065,55,"resolve"],[1907,58,2065,62],[1907,60,2065,64,"reject"],[1907,66,2065,70],[1907,68,2065,72],[1908,22,2066,28,"t"],[1908,23,2066,29],[1908,24,2066,30,"executeSql"],[1908,34,2066,40],[1908,35,2066,41],[1908,58,2066,64],[1908,61,2066,67,"storeName"],[1908,70,2066,76],[1908,72,2066,78],[1908,74,2066,80],[1908,76,2066,82],[1908,88,2066,94],[1909,24,2067,32,"resolve"],[1909,31,2067,39],[1909,32,2067,40],[1909,33,2067,41],[1910,22,2068,28],[1910,23,2068,29],[1910,25,2068,31],[1910,35,2068,41,"t"],[1910,36,2068,42],[1910,38,2068,44,"error"],[1910,43,2068,49],[1910,45,2068,51],[1911,24,2069,32,"reject"],[1911,30,2069,38],[1911,31,2069,39,"error"],[1911,36,2069,44],[1911,37,2069,45],[1912,22,2070,28],[1912,23,2070,29],[1912,24,2070,30],[1913,20,2071,24],[1913,21,2071,25],[1913,22,2071,26],[1914,18,2072,20],[1915,18,2074,20],[1915,22,2074,24,"operations"],[1915,32,2074,34],[1915,35,2074,37],[1915,37,2074,39],[1916,18,2075,20],[1916,23,2075,25],[1916,27,2075,29,"i"],[1916,28,2075,30],[1916,31,2075,33],[1916,32,2075,34],[1916,34,2075,36,"len"],[1916,37,2075,39],[1916,40,2075,42,"operationInfo"],[1916,53,2075,55],[1916,54,2075,56,"storeNames"],[1916,64,2075,66],[1916,65,2075,67,"length"],[1916,71,2075,73],[1916,73,2075,75,"i"],[1916,74,2075,76],[1916,77,2075,79,"len"],[1916,80,2075,82],[1916,82,2075,84,"i"],[1916,83,2075,85],[1916,85,2075,87],[1916,87,2075,89],[1917,20,2076,24,"operations"],[1917,30,2076,34],[1917,31,2076,35,"push"],[1917,35,2076,39],[1917,36,2076,40,"dropTable"],[1917,45,2076,49],[1917,46,2076,50,"operationInfo"],[1917,59,2076,63],[1917,60,2076,64,"storeNames"],[1917,70,2076,74],[1917,71,2076,75,"i"],[1917,72,2076,76],[1917,73,2076,77],[1917,74,2076,78],[1917,75,2076,79],[1918,18,2077,20],[1919,18,2079,20,"Promise$1"],[1919,27,2079,29],[1919,28,2079,30,"all"],[1919,31,2079,33],[1919,32,2079,34,"operations"],[1919,42,2079,44],[1919,43,2079,45],[1919,44,2079,46,"then"],[1919,48,2079,50],[1919,49,2079,51],[1919,61,2079,63],[1920,20,2080,24,"resolve"],[1920,27,2080,31],[1920,28,2080,32],[1920,29,2080,33],[1921,18,2081,20],[1921,19,2081,21],[1921,20,2081,22],[1921,21,2081,23],[1921,28,2081,30],[1921,29,2081,31],[1921,30,2081,32],[1921,40,2081,42,"e"],[1921,41,2081,43],[1921,43,2081,45],[1922,20,2082,24,"reject"],[1922,26,2082,30],[1922,27,2082,31,"e"],[1922,28,2082,32],[1922,29,2082,33],[1923,18,2083,20],[1923,19,2083,21],[1923,20,2083,22],[1924,16,2084,16],[1924,17,2084,17],[1924,19,2084,19],[1924,29,2084,29,"sqlError"],[1924,37,2084,37],[1924,39,2084,39],[1925,18,2085,20,"reject"],[1925,24,2085,26],[1925,25,2085,27,"sqlError"],[1925,33,2085,35],[1925,34,2085,36],[1926,16,2086,16],[1926,17,2086,17],[1926,18,2086,18],[1927,14,2087,12],[1927,15,2087,13],[1927,16,2087,14],[1928,12,2088,8],[1928,13,2088,9],[1928,14,2088,10],[1929,10,2089,4],[1930,10,2091,4,"executeCallback"],[1930,25,2091,19],[1930,26,2091,20,"promise"],[1930,33,2091,27],[1930,35,2091,29,"callback"],[1930,43,2091,37],[1930,44,2091,38],[1931,10,2092,4],[1931,17,2092,11,"promise"],[1931,24,2092,18],[1932,8,2093,0],[1933,8,2095,0],[1933,12,2095,4,"webSQLStorage"],[1933,25,2095,17],[1933,28,2095,20],[1934,10,2096,4,"_driver"],[1934,17,2096,11],[1934,19,2096,13],[1934,34,2096,28],[1935,10,2097,4,"_initStorage"],[1935,22,2097,16],[1935,24,2097,18,"_initStorage$1"],[1935,38,2097,32],[1936,10,2098,4,"_support"],[1936,18,2098,12],[1936,20,2098,14,"isWebSQLValid"],[1936,33,2098,27],[1936,34,2098,28],[1936,35,2098,29],[1937,10,2099,4,"iterate"],[1937,17,2099,11],[1937,19,2099,13,"iterate$1"],[1937,28,2099,22],[1938,10,2100,4,"getItem"],[1938,17,2100,11],[1938,19,2100,13,"getItem$1"],[1938,28,2100,22],[1939,10,2101,4,"setItem"],[1939,17,2101,11],[1939,19,2101,13,"setItem$1"],[1939,28,2101,22],[1940,10,2102,4,"removeItem"],[1940,20,2102,14],[1940,22,2102,16,"removeItem$1"],[1940,34,2102,28],[1941,10,2103,4,"clear"],[1941,15,2103,9],[1941,17,2103,11,"clear$1"],[1941,24,2103,18],[1942,10,2104,4,"length"],[1942,16,2104,10],[1942,18,2104,12,"length$1"],[1942,26,2104,20],[1943,10,2105,4,"key"],[1943,13,2105,7],[1943,15,2105,9,"key$1"],[1943,20,2105,14],[1944,10,2106,4,"keys"],[1944,14,2106,8],[1944,16,2106,10,"keys$1"],[1944,22,2106,16],[1945,10,2107,4,"dropInstance"],[1945,22,2107,16],[1945,24,2107,18,"dropInstance$1"],[1946,8,2108,0],[1946,9,2108,1],[1947,8,2110,0],[1947,17,2110,9,"isLocalStorageValid"],[1947,36,2110,28,"isLocalStorageValid"],[1947,37,2110,28],[1947,39,2110,31],[1948,10,2111,4],[1948,14,2111,8],[1949,12,2112,8],[1949,19,2112,15],[1949,26,2112,22,"localStorage"],[1949,38,2112,34],[1949,43,2112,39],[1949,54,2112,50],[1949,58,2112,54],[1949,67,2112,63],[1949,71,2112,67,"localStorage"],[1949,83,2112,79],[1950,12,2113,8],[1951,12,2114,8],[1951,13,2114,9],[1951,14,2114,10,"localStorage"],[1951,26,2114,22],[1951,27,2114,23,"setItem"],[1951,34,2114,30],[1952,10,2115,4],[1952,11,2115,5],[1952,12,2115,6],[1952,19,2115,13,"e"],[1952,20,2115,14],[1952,22,2115,16],[1953,12,2116,8],[1953,19,2116,15],[1953,24,2116,20],[1954,10,2117,4],[1955,8,2118,0],[1956,8,2120,0],[1956,17,2120,9,"_getKeyPrefix"],[1956,30,2120,22,"_getKeyPrefix"],[1956,31,2120,23,"options"],[1956,38,2120,30],[1956,40,2120,32,"defaultConfig"],[1956,53,2120,45],[1956,55,2120,47],[1957,10,2121,4],[1957,14,2121,8,"keyPrefix"],[1957,23,2121,17],[1957,26,2121,20,"options"],[1957,33,2121,27],[1957,34,2121,28,"name"],[1957,38,2121,32],[1957,41,2121,35],[1957,44,2121,38],[1958,10,2123,4],[1958,14,2123,8,"options"],[1958,21,2123,15],[1958,22,2123,16,"storeName"],[1958,31,2123,25],[1958,36,2123,30,"defaultConfig"],[1958,49,2123,43],[1958,50,2123,44,"storeName"],[1958,59,2123,53],[1958,61,2123,55],[1959,12,2124,8,"keyPrefix"],[1959,21,2124,17],[1959,25,2124,21,"options"],[1959,32,2124,28],[1959,33,2124,29,"storeName"],[1959,42,2124,38],[1959,45,2124,41],[1959,48,2124,44],[1960,10,2125,4],[1961,10,2126,4],[1961,17,2126,11,"keyPrefix"],[1961,26,2126,20],[1962,8,2127,0],[1964,8,2129,0],[1965,8,2130,0],[1965,17,2130,9,"checkIfLocalStorageThrows"],[1965,42,2130,34,"checkIfLocalStorageThrows"],[1965,43,2130,34],[1965,45,2130,37],[1966,10,2131,4],[1966,14,2131,8,"localStorageTestKey"],[1966,33,2131,27],[1966,36,2131,30],[1966,63,2131,57],[1967,10,2133,4],[1967,14,2133,8],[1968,12,2134,8,"localStorage"],[1968,24,2134,20],[1968,25,2134,21,"setItem"],[1968,32,2134,28],[1968,33,2134,29,"localStorageTestKey"],[1968,52,2134,48],[1968,54,2134,50],[1968,58,2134,54],[1968,59,2134,55],[1969,12,2135,8,"localStorage"],[1969,24,2135,20],[1969,25,2135,21,"removeItem"],[1969,35,2135,31],[1969,36,2135,32,"localStorageTestKey"],[1969,55,2135,51],[1969,56,2135,52],[1970,12,2137,8],[1970,19,2137,15],[1970,24,2137,20],[1971,10,2138,4],[1971,11,2138,5],[1971,12,2138,6],[1971,19,2138,13,"e"],[1971,20,2138,14],[1971,22,2138,16],[1972,12,2139,8],[1972,19,2139,15],[1972,23,2139,19],[1973,10,2140,4],[1974,8,2141,0],[1976,8,2143,0],[1977,8,2144,0],[1978,8,2145,0],[1979,8,2146,0],[1980,8,2147,0],[1980,17,2147,9,"_isLocalStorageUsable"],[1980,38,2147,30,"_isLocalStorageUsable"],[1980,39,2147,30],[1980,41,2147,33],[1981,10,2148,4],[1981,17,2148,11],[1981,18,2148,12,"checkIfLocalStorageThrows"],[1981,43,2148,37],[1981,44,2148,38],[1981,45,2148,39],[1981,49,2148,43,"localStorage"],[1981,61,2148,55],[1981,62,2148,56,"length"],[1981,68,2148,62],[1981,71,2148,65],[1981,72,2148,66],[1982,8,2149,0],[1984,8,2151,0],[1985,8,2152,0],[1985,17,2152,9,"_initStorage$2"],[1985,31,2152,23,"_initStorage$2"],[1985,32,2152,24,"options"],[1985,39,2152,31],[1985,41,2152,33],[1986,10,2153,4],[1986,14,2153,8,"self"],[1986,18,2153,12],[1986,21,2153,15],[1986,25,2153,19],[1987,10,2154,4],[1987,14,2154,8,"dbInfo"],[1987,20,2154,14],[1987,23,2154,17],[1987,24,2154,18],[1987,25,2154,19],[1988,10,2155,4],[1988,14,2155,8,"options"],[1988,21,2155,15],[1988,23,2155,17],[1989,12,2156,8],[1989,17,2156,13],[1989,21,2156,17,"i"],[1989,22,2156,18],[1989,26,2156,22,"options"],[1989,33,2156,29],[1989,35,2156,31],[1990,14,2157,12,"dbInfo"],[1990,20,2157,18],[1990,21,2157,19,"i"],[1990,22,2157,20],[1990,23,2157,21],[1990,26,2157,24,"options"],[1990,33,2157,31],[1990,34,2157,32,"i"],[1990,35,2157,33],[1990,36,2157,34],[1991,12,2158,8],[1992,10,2159,4],[1993,10,2161,4,"dbInfo"],[1993,16,2161,10],[1993,17,2161,11,"keyPrefix"],[1993,26,2161,20],[1993,29,2161,23,"_getKeyPrefix"],[1993,42,2161,36],[1993,43,2161,37,"options"],[1993,50,2161,44],[1993,52,2161,46,"self"],[1993,56,2161,50],[1993,57,2161,51,"_defaultConfig"],[1993,71,2161,65],[1993,72,2161,66],[1994,10,2163,4],[1994,14,2163,8],[1994,15,2163,9,"_isLocalStorageUsable"],[1994,36,2163,30],[1994,37,2163,31],[1994,38,2163,32],[1994,40,2163,34],[1995,12,2164,8],[1995,19,2164,15,"Promise$1"],[1995,28,2164,24],[1995,29,2164,25,"reject"],[1995,35,2164,31],[1995,36,2164,32],[1995,37,2164,33],[1996,10,2165,4],[1997,10,2167,4,"self"],[1997,14,2167,8],[1997,15,2167,9,"_dbInfo"],[1997,22,2167,16],[1997,25,2167,19,"dbInfo"],[1997,31,2167,25],[1998,10,2168,4,"dbInfo"],[1998,16,2168,10],[1998,17,2168,11,"serializer"],[1998,27,2168,21],[1998,30,2168,24,"localforageSerializer"],[1998,51,2168,45],[1999,10,2170,4],[1999,17,2170,11,"Promise$1"],[1999,26,2170,20],[1999,27,2170,21,"resolve"],[1999,34,2170,28],[1999,35,2170,29],[1999,36,2170,30],[2000,8,2171,0],[2002,8,2173,0],[2003,8,2174,0],[2004,8,2175,0],[2004,17,2175,9,"clear$2"],[2004,24,2175,16,"clear$2"],[2004,25,2175,17,"callback"],[2004,33,2175,25],[2004,35,2175,27],[2005,10,2176,4],[2005,14,2176,8,"self"],[2005,18,2176,12],[2005,21,2176,15],[2005,25,2176,19],[2006,10,2177,4],[2006,14,2177,8,"promise"],[2006,21,2177,15],[2006,24,2177,18,"self"],[2006,28,2177,22],[2006,29,2177,23,"ready"],[2006,34,2177,28],[2006,35,2177,29],[2006,36,2177,30],[2006,37,2177,31,"then"],[2006,41,2177,35],[2006,42,2177,36],[2006,54,2177,48],[2007,12,2178,8],[2007,16,2178,12,"keyPrefix"],[2007,25,2178,21],[2007,28,2178,24,"self"],[2007,32,2178,28],[2007,33,2178,29,"_dbInfo"],[2007,40,2178,36],[2007,41,2178,37,"keyPrefix"],[2007,50,2178,46],[2008,12,2180,8],[2008,17,2180,13],[2008,21,2180,17,"i"],[2008,22,2180,18],[2008,25,2180,21,"localStorage"],[2008,37,2180,33],[2008,38,2180,34,"length"],[2008,44,2180,40],[2008,47,2180,43],[2008,48,2180,44],[2008,50,2180,46,"i"],[2008,51,2180,47],[2008,55,2180,51],[2008,56,2180,52],[2008,58,2180,54,"i"],[2008,59,2180,55],[2008,61,2180,57],[2008,63,2180,59],[2009,14,2181,12],[2009,18,2181,16,"key"],[2009,21,2181,19],[2009,24,2181,22,"localStorage"],[2009,36,2181,34],[2009,37,2181,35,"key"],[2009,40,2181,38],[2009,41,2181,39,"i"],[2009,42,2181,40],[2009,43,2181,41],[2010,14,2183,12],[2010,18,2183,16,"key"],[2010,21,2183,19],[2010,22,2183,20,"indexOf"],[2010,29,2183,27],[2010,30,2183,28,"keyPrefix"],[2010,39,2183,37],[2010,40,2183,38],[2010,45,2183,43],[2010,46,2183,44],[2010,48,2183,46],[2011,16,2184,16,"localStorage"],[2011,28,2184,28],[2011,29,2184,29,"removeItem"],[2011,39,2184,39],[2011,40,2184,40,"key"],[2011,43,2184,43],[2011,44,2184,44],[2012,14,2185,12],[2013,12,2186,8],[2014,10,2187,4],[2014,11,2187,5],[2014,12,2187,6],[2015,10,2189,4,"executeCallback"],[2015,25,2189,19],[2015,26,2189,20,"promise"],[2015,33,2189,27],[2015,35,2189,29,"callback"],[2015,43,2189,37],[2015,44,2189,38],[2016,10,2190,4],[2016,17,2190,11,"promise"],[2016,24,2190,18],[2017,8,2191,0],[2019,8,2193,0],[2020,8,2194,0],[2021,8,2195,0],[2022,8,2196,0],[2022,17,2196,9,"getItem$2"],[2022,26,2196,18,"getItem$2"],[2022,27,2196,19,"key"],[2022,30,2196,22],[2022,32,2196,24,"callback"],[2022,40,2196,32],[2022,42,2196,34],[2023,10,2197,4],[2023,14,2197,8,"self"],[2023,18,2197,12],[2023,21,2197,15],[2023,25,2197,19],[2024,10,2199,4,"key"],[2024,13,2199,7],[2024,16,2199,10,"normalizeKey"],[2024,28,2199,22],[2024,29,2199,23,"key"],[2024,32,2199,26],[2024,33,2199,27],[2025,10,2201,4],[2025,14,2201,8,"promise"],[2025,21,2201,15],[2025,24,2201,18,"self"],[2025,28,2201,22],[2025,29,2201,23,"ready"],[2025,34,2201,28],[2025,35,2201,29],[2025,36,2201,30],[2025,37,2201,31,"then"],[2025,41,2201,35],[2025,42,2201,36],[2025,54,2201,48],[2026,12,2202,8],[2026,16,2202,12,"dbInfo"],[2026,22,2202,18],[2026,25,2202,21,"self"],[2026,29,2202,25],[2026,30,2202,26,"_dbInfo"],[2026,37,2202,33],[2027,12,2203,8],[2027,16,2203,12,"result"],[2027,22,2203,18],[2027,25,2203,21,"localStorage"],[2027,37,2203,33],[2027,38,2203,34,"getItem"],[2027,45,2203,41],[2027,46,2203,42,"dbInfo"],[2027,52,2203,48],[2027,53,2203,49,"keyPrefix"],[2027,62,2203,58],[2027,65,2203,61,"key"],[2027,68,2203,64],[2027,69,2203,65],[2029,12,2205,8],[2030,12,2206,8],[2031,12,2207,8],[2032,12,2208,8],[2033,12,2209,8],[2033,16,2209,12,"result"],[2033,22,2209,18],[2033,24,2209,20],[2034,14,2210,12,"result"],[2034,20,2210,18],[2034,23,2210,21,"dbInfo"],[2034,29,2210,27],[2034,30,2210,28,"serializer"],[2034,40,2210,38],[2034,41,2210,39,"deserialize"],[2034,52,2210,50],[2034,53,2210,51,"result"],[2034,59,2210,57],[2034,60,2210,58],[2035,12,2211,8],[2036,12,2213,8],[2036,19,2213,15,"result"],[2036,25,2213,21],[2037,10,2214,4],[2037,11,2214,5],[2037,12,2214,6],[2038,10,2216,4,"executeCallback"],[2038,25,2216,19],[2038,26,2216,20,"promise"],[2038,33,2216,27],[2038,35,2216,29,"callback"],[2038,43,2216,37],[2038,44,2216,38],[2039,10,2217,4],[2039,17,2217,11,"promise"],[2039,24,2217,18],[2040,8,2218,0],[2042,8,2220,0],[2043,8,2221,0],[2043,17,2221,9,"iterate$2"],[2043,26,2221,18,"iterate$2"],[2043,27,2221,19,"iterator"],[2043,35,2221,27],[2043,37,2221,29,"callback"],[2043,45,2221,37],[2043,47,2221,39],[2044,10,2222,4],[2044,14,2222,8,"self"],[2044,18,2222,12],[2044,21,2222,15],[2044,25,2222,19],[2045,10,2224,4],[2045,14,2224,8,"promise"],[2045,21,2224,15],[2045,24,2224,18,"self"],[2045,28,2224,22],[2045,29,2224,23,"ready"],[2045,34,2224,28],[2045,35,2224,29],[2045,36,2224,30],[2045,37,2224,31,"then"],[2045,41,2224,35],[2045,42,2224,36],[2045,54,2224,48],[2046,12,2225,8],[2046,16,2225,12,"dbInfo"],[2046,22,2225,18],[2046,25,2225,21,"self"],[2046,29,2225,25],[2046,30,2225,26,"_dbInfo"],[2046,37,2225,33],[2047,12,2226,8],[2047,16,2226,12,"keyPrefix"],[2047,25,2226,21],[2047,28,2226,24,"dbInfo"],[2047,34,2226,30],[2047,35,2226,31,"keyPrefix"],[2047,44,2226,40],[2048,12,2227,8],[2048,16,2227,12,"keyPrefixLength"],[2048,31,2227,27],[2048,34,2227,30,"keyPrefix"],[2048,43,2227,39],[2048,44,2227,40,"length"],[2048,50,2227,46],[2049,12,2228,8],[2049,16,2228,12,"length"],[2049,22,2228,18],[2049,25,2228,21,"localStorage"],[2049,37,2228,33],[2049,38,2228,34,"length"],[2049,44,2228,40],[2051,12,2230,8],[2052,12,2231,8],[2053,12,2232,8],[2054,12,2233,8],[2055,12,2234,8],[2056,12,2235,8],[2057,12,2236,8],[2057,16,2236,12,"iterationNumber"],[2057,31,2236,27],[2057,34,2236,30],[2057,35,2236,31],[2058,12,2238,8],[2058,17,2238,13],[2058,21,2238,17,"i"],[2058,22,2238,18],[2058,25,2238,21],[2058,26,2238,22],[2058,28,2238,24,"i"],[2058,29,2238,25],[2058,32,2238,28,"length"],[2058,38,2238,34],[2058,40,2238,36,"i"],[2058,41,2238,37],[2058,43,2238,39],[2058,45,2238,41],[2059,14,2239,12],[2059,18,2239,16,"key"],[2059,21,2239,19],[2059,24,2239,22,"localStorage"],[2059,36,2239,34],[2059,37,2239,35,"key"],[2059,40,2239,38],[2059,41,2239,39,"i"],[2059,42,2239,40],[2059,43,2239,41],[2060,14,2240,12],[2060,18,2240,16,"key"],[2060,21,2240,19],[2060,22,2240,20,"indexOf"],[2060,29,2240,27],[2060,30,2240,28,"keyPrefix"],[2060,39,2240,37],[2060,40,2240,38],[2060,45,2240,43],[2060,46,2240,44],[2060,48,2240,46],[2061,16,2241,16],[2062,14,2242,12],[2063,14,2243,12],[2063,18,2243,16,"value"],[2063,23,2243,21],[2063,26,2243,24,"localStorage"],[2063,38,2243,36],[2063,39,2243,37,"getItem"],[2063,46,2243,44],[2063,47,2243,45,"key"],[2063,50,2243,48],[2063,51,2243,49],[2065,14,2245,12],[2066,14,2246,12],[2067,14,2247,12],[2068,14,2248,12],[2069,14,2249,12],[2069,18,2249,16,"value"],[2069,23,2249,21],[2069,25,2249,23],[2070,16,2250,16,"value"],[2070,21,2250,21],[2070,24,2250,24,"dbInfo"],[2070,30,2250,30],[2070,31,2250,31,"serializer"],[2070,41,2250,41],[2070,42,2250,42,"deserialize"],[2070,53,2250,53],[2070,54,2250,54,"value"],[2070,59,2250,59],[2070,60,2250,60],[2071,14,2251,12],[2072,14,2253,12,"value"],[2072,19,2253,17],[2072,22,2253,20,"iterator"],[2072,30,2253,28],[2072,31,2253,29,"value"],[2072,36,2253,34],[2072,38,2253,36,"key"],[2072,41,2253,39],[2072,42,2253,40,"substring"],[2072,51,2253,49],[2072,52,2253,50,"keyPrefixLength"],[2072,67,2253,65],[2072,68,2253,66],[2072,70,2253,68,"iterationNumber"],[2072,85,2253,83],[2072,87,2253,85],[2072,88,2253,86],[2073,14,2255,12],[2073,18,2255,16,"value"],[2073,23,2255,21],[2073,28,2255,26],[2073,33,2255,31],[2073,34,2255,32],[2073,36,2255,34],[2074,16,2256,16],[2074,23,2256,23,"value"],[2074,28,2256,28],[2075,14,2257,12],[2076,12,2258,8],[2077,10,2259,4],[2077,11,2259,5],[2077,12,2259,6],[2078,10,2261,4,"executeCallback"],[2078,25,2261,19],[2078,26,2261,20,"promise"],[2078,33,2261,27],[2078,35,2261,29,"callback"],[2078,43,2261,37],[2078,44,2261,38],[2079,10,2262,4],[2079,17,2262,11,"promise"],[2079,24,2262,18],[2080,8,2263,0],[2082,8,2265,0],[2083,8,2266,0],[2083,17,2266,9,"key$2"],[2083,22,2266,14,"key$2"],[2083,23,2266,15,"n"],[2083,24,2266,16],[2083,26,2266,18,"callback"],[2083,34,2266,26],[2083,36,2266,28],[2084,10,2267,4],[2084,14,2267,8,"self"],[2084,18,2267,12],[2084,21,2267,15],[2084,25,2267,19],[2085,10,2268,4],[2085,14,2268,8,"promise"],[2085,21,2268,15],[2085,24,2268,18,"self"],[2085,28,2268,22],[2085,29,2268,23,"ready"],[2085,34,2268,28],[2085,35,2268,29],[2085,36,2268,30],[2085,37,2268,31,"then"],[2085,41,2268,35],[2085,42,2268,36],[2085,54,2268,48],[2086,12,2269,8],[2086,16,2269,12,"dbInfo"],[2086,22,2269,18],[2086,25,2269,21,"self"],[2086,29,2269,25],[2086,30,2269,26,"_dbInfo"],[2086,37,2269,33],[2087,12,2270,8],[2087,16,2270,12,"result"],[2087,22,2270,18],[2088,12,2271,8],[2088,16,2271,12],[2089,14,2272,12,"result"],[2089,20,2272,18],[2089,23,2272,21,"localStorage"],[2089,35,2272,33],[2089,36,2272,34,"key"],[2089,39,2272,37],[2089,40,2272,38,"n"],[2089,41,2272,39],[2089,42,2272,40],[2090,12,2273,8],[2090,13,2273,9],[2090,14,2273,10],[2090,21,2273,17,"error"],[2090,26,2273,22],[2090,28,2273,24],[2091,14,2274,12,"result"],[2091,20,2274,18],[2091,23,2274,21],[2091,27,2274,25],[2092,12,2275,8],[2094,12,2277,8],[2095,12,2278,8],[2095,16,2278,12,"result"],[2095,22,2278,18],[2095,24,2278,20],[2096,14,2279,12,"result"],[2096,20,2279,18],[2096,23,2279,21,"result"],[2096,29,2279,27],[2096,30,2279,28,"substring"],[2096,39,2279,37],[2096,40,2279,38,"dbInfo"],[2096,46,2279,44],[2096,47,2279,45,"keyPrefix"],[2096,56,2279,54],[2096,57,2279,55,"length"],[2096,63,2279,61],[2096,64,2279,62],[2097,12,2280,8],[2098,12,2282,8],[2098,19,2282,15,"result"],[2098,25,2282,21],[2099,10,2283,4],[2099,11,2283,5],[2099,12,2283,6],[2100,10,2285,4,"executeCallback"],[2100,25,2285,19],[2100,26,2285,20,"promise"],[2100,33,2285,27],[2100,35,2285,29,"callback"],[2100,43,2285,37],[2100,44,2285,38],[2101,10,2286,4],[2101,17,2286,11,"promise"],[2101,24,2286,18],[2102,8,2287,0],[2103,8,2289,0],[2103,17,2289,9,"keys$2"],[2103,23,2289,15,"keys$2"],[2103,24,2289,16,"callback"],[2103,32,2289,24],[2103,34,2289,26],[2104,10,2290,4],[2104,14,2290,8,"self"],[2104,18,2290,12],[2104,21,2290,15],[2104,25,2290,19],[2105,10,2291,4],[2105,14,2291,8,"promise"],[2105,21,2291,15],[2105,24,2291,18,"self"],[2105,28,2291,22],[2105,29,2291,23,"ready"],[2105,34,2291,28],[2105,35,2291,29],[2105,36,2291,30],[2105,37,2291,31,"then"],[2105,41,2291,35],[2105,42,2291,36],[2105,54,2291,48],[2106,12,2292,8],[2106,16,2292,12,"dbInfo"],[2106,22,2292,18],[2106,25,2292,21,"self"],[2106,29,2292,25],[2106,30,2292,26,"_dbInfo"],[2106,37,2292,33],[2107,12,2293,8],[2107,16,2293,12,"length"],[2107,22,2293,18],[2107,25,2293,21,"localStorage"],[2107,37,2293,33],[2107,38,2293,34,"length"],[2107,44,2293,40],[2108,12,2294,8],[2108,16,2294,12,"keys"],[2108,20,2294,16],[2108,23,2294,19],[2108,25,2294,21],[2109,12,2296,8],[2109,17,2296,13],[2109,21,2296,17,"i"],[2109,22,2296,18],[2109,25,2296,21],[2109,26,2296,22],[2109,28,2296,24,"i"],[2109,29,2296,25],[2109,32,2296,28,"length"],[2109,38,2296,34],[2109,40,2296,36,"i"],[2109,41,2296,37],[2109,43,2296,39],[2109,45,2296,41],[2110,14,2297,12],[2110,18,2297,16,"itemKey"],[2110,25,2297,23],[2110,28,2297,26,"localStorage"],[2110,40,2297,38],[2110,41,2297,39,"key"],[2110,44,2297,42],[2110,45,2297,43,"i"],[2110,46,2297,44],[2110,47,2297,45],[2111,14,2298,12],[2111,18,2298,16,"itemKey"],[2111,25,2298,23],[2111,26,2298,24,"indexOf"],[2111,33,2298,31],[2111,34,2298,32,"dbInfo"],[2111,40,2298,38],[2111,41,2298,39,"keyPrefix"],[2111,50,2298,48],[2111,51,2298,49],[2111,56,2298,54],[2111,57,2298,55],[2111,59,2298,57],[2112,16,2299,16,"keys"],[2112,20,2299,20],[2112,21,2299,21,"push"],[2112,25,2299,25],[2112,26,2299,26,"itemKey"],[2112,33,2299,33],[2112,34,2299,34,"substring"],[2112,43,2299,43],[2112,44,2299,44,"dbInfo"],[2112,50,2299,50],[2112,51,2299,51,"keyPrefix"],[2112,60,2299,60],[2112,61,2299,61,"length"],[2112,67,2299,67],[2112,68,2299,68],[2112,69,2299,69],[2113,14,2300,12],[2114,12,2301,8],[2115,12,2303,8],[2115,19,2303,15,"keys"],[2115,23,2303,19],[2116,10,2304,4],[2116,11,2304,5],[2116,12,2304,6],[2117,10,2306,4,"executeCallback"],[2117,25,2306,19],[2117,26,2306,20,"promise"],[2117,33,2306,27],[2117,35,2306,29,"callback"],[2117,43,2306,37],[2117,44,2306,38],[2118,10,2307,4],[2118,17,2307,11,"promise"],[2118,24,2307,18],[2119,8,2308,0],[2121,8,2310,0],[2122,8,2311,0],[2122,17,2311,9,"length$2"],[2122,25,2311,17,"length$2"],[2122,26,2311,18,"callback"],[2122,34,2311,26],[2122,36,2311,28],[2123,10,2312,4],[2123,14,2312,8,"self"],[2123,18,2312,12],[2123,21,2312,15],[2123,25,2312,19],[2124,10,2313,4],[2124,14,2313,8,"promise"],[2124,21,2313,15],[2124,24,2313,18,"self"],[2124,28,2313,22],[2124,29,2313,23,"keys"],[2124,33,2313,27],[2124,34,2313,28],[2124,35,2313,29],[2124,36,2313,30,"then"],[2124,40,2313,34],[2124,41,2313,35],[2124,51,2313,45,"keys"],[2124,55,2313,49],[2124,57,2313,51],[2125,12,2314,8],[2125,19,2314,15,"keys"],[2125,23,2314,19],[2125,24,2314,20,"length"],[2125,30,2314,26],[2126,10,2315,4],[2126,11,2315,5],[2126,12,2315,6],[2127,10,2317,4,"executeCallback"],[2127,25,2317,19],[2127,26,2317,20,"promise"],[2127,33,2317,27],[2127,35,2317,29,"callback"],[2127,43,2317,37],[2127,44,2317,38],[2128,10,2318,4],[2128,17,2318,11,"promise"],[2128,24,2318,18],[2129,8,2319,0],[2131,8,2321,0],[2132,8,2322,0],[2132,17,2322,9,"removeItem$2"],[2132,29,2322,21,"removeItem$2"],[2132,30,2322,22,"key"],[2132,33,2322,25],[2132,35,2322,27,"callback"],[2132,43,2322,35],[2132,45,2322,37],[2133,10,2323,4],[2133,14,2323,8,"self"],[2133,18,2323,12],[2133,21,2323,15],[2133,25,2323,19],[2134,10,2325,4,"key"],[2134,13,2325,7],[2134,16,2325,10,"normalizeKey"],[2134,28,2325,22],[2134,29,2325,23,"key"],[2134,32,2325,26],[2134,33,2325,27],[2135,10,2327,4],[2135,14,2327,8,"promise"],[2135,21,2327,15],[2135,24,2327,18,"self"],[2135,28,2327,22],[2135,29,2327,23,"ready"],[2135,34,2327,28],[2135,35,2327,29],[2135,36,2327,30],[2135,37,2327,31,"then"],[2135,41,2327,35],[2135,42,2327,36],[2135,54,2327,48],[2136,12,2328,8],[2136,16,2328,12,"dbInfo"],[2136,22,2328,18],[2136,25,2328,21,"self"],[2136,29,2328,25],[2136,30,2328,26,"_dbInfo"],[2136,37,2328,33],[2137,12,2329,8,"localStorage"],[2137,24,2329,20],[2137,25,2329,21,"removeItem"],[2137,35,2329,31],[2137,36,2329,32,"dbInfo"],[2137,42,2329,38],[2137,43,2329,39,"keyPrefix"],[2137,52,2329,48],[2137,55,2329,51,"key"],[2137,58,2329,54],[2137,59,2329,55],[2138,10,2330,4],[2138,11,2330,5],[2138,12,2330,6],[2139,10,2332,4,"executeCallback"],[2139,25,2332,19],[2139,26,2332,20,"promise"],[2139,33,2332,27],[2139,35,2332,29,"callback"],[2139,43,2332,37],[2139,44,2332,38],[2140,10,2333,4],[2140,17,2333,11,"promise"],[2140,24,2333,18],[2141,8,2334,0],[2143,8,2336,0],[2144,8,2337,0],[2145,8,2338,0],[2146,8,2339,0],[2147,8,2340,0],[2147,17,2340,9,"setItem$2"],[2147,26,2340,18,"setItem$2"],[2147,27,2340,19,"key"],[2147,30,2340,22],[2147,32,2340,24,"value"],[2147,37,2340,29],[2147,39,2340,31,"callback"],[2147,47,2340,39],[2147,49,2340,41],[2148,10,2341,4],[2148,14,2341,8,"self"],[2148,18,2341,12],[2148,21,2341,15],[2148,25,2341,19],[2149,10,2343,4,"key"],[2149,13,2343,7],[2149,16,2343,10,"normalizeKey"],[2149,28,2343,22],[2149,29,2343,23,"key"],[2149,32,2343,26],[2149,33,2343,27],[2150,10,2345,4],[2150,14,2345,8,"promise"],[2150,21,2345,15],[2150,24,2345,18,"self"],[2150,28,2345,22],[2150,29,2345,23,"ready"],[2150,34,2345,28],[2150,35,2345,29],[2150,36,2345,30],[2150,37,2345,31,"then"],[2150,41,2345,35],[2150,42,2345,36],[2150,54,2345,48],[2151,12,2346,8],[2152,12,2347,8],[2153,12,2348,8],[2153,16,2348,12,"value"],[2153,21,2348,17],[2153,26,2348,22,"undefined"],[2153,35,2348,31],[2153,37,2348,33],[2154,14,2349,12,"value"],[2154,19,2349,17],[2154,22,2349,20],[2154,26,2349,24],[2155,12,2350,8],[2157,12,2352,8],[2158,12,2353,8],[2158,16,2353,12,"originalValue"],[2158,29,2353,25],[2158,32,2353,28,"value"],[2158,37,2353,33],[2159,12,2355,8],[2159,19,2355,15],[2159,23,2355,19,"Promise$1"],[2159,32,2355,28],[2159,33,2355,29],[2159,43,2355,39,"resolve"],[2159,50,2355,46],[2159,52,2355,48,"reject"],[2159,58,2355,54],[2159,60,2355,56],[2160,14,2356,12],[2160,18,2356,16,"dbInfo"],[2160,24,2356,22],[2160,27,2356,25,"self"],[2160,31,2356,29],[2160,32,2356,30,"_dbInfo"],[2160,39,2356,37],[2161,14,2357,12,"dbInfo"],[2161,20,2357,18],[2161,21,2357,19,"serializer"],[2161,31,2357,29],[2161,32,2357,30,"serialize"],[2161,41,2357,39],[2161,42,2357,40,"value"],[2161,47,2357,45],[2161,49,2357,47],[2161,59,2357,57,"value"],[2161,64,2357,62],[2161,66,2357,64,"error"],[2161,71,2357,69],[2161,73,2357,71],[2162,16,2358,16],[2162,20,2358,20,"error"],[2162,25,2358,25],[2162,27,2358,27],[2163,18,2359,20,"reject"],[2163,24,2359,26],[2163,25,2359,27,"error"],[2163,30,2359,32],[2163,31,2359,33],[2164,16,2360,16],[2164,17,2360,17],[2164,23,2360,23],[2165,18,2361,20],[2165,22,2361,24],[2166,20,2362,24,"localStorage"],[2166,32,2362,36],[2166,33,2362,37,"setItem"],[2166,40,2362,44],[2166,41,2362,45,"dbInfo"],[2166,47,2362,51],[2166,48,2362,52,"keyPrefix"],[2166,57,2362,61],[2166,60,2362,64,"key"],[2166,63,2362,67],[2166,65,2362,69,"value"],[2166,70,2362,74],[2166,71,2362,75],[2167,20,2363,24,"resolve"],[2167,27,2363,31],[2167,28,2363,32,"originalValue"],[2167,41,2363,45],[2167,42,2363,46],[2168,18,2364,20],[2168,19,2364,21],[2168,20,2364,22],[2168,27,2364,29,"e"],[2168,28,2364,30],[2168,30,2364,32],[2169,20,2365,24],[2170,20,2366,24],[2171,20,2367,24],[2171,24,2367,28,"e"],[2171,25,2367,29],[2171,26,2367,30,"name"],[2171,30,2367,34],[2171,35,2367,39],[2171,55,2367,59],[2171,59,2367,63,"e"],[2171,60,2367,64],[2171,61,2367,65,"name"],[2171,65,2367,69],[2171,70,2367,74],[2171,98,2367,102],[2171,100,2367,104],[2172,22,2368,28,"reject"],[2172,28,2368,34],[2172,29,2368,35,"e"],[2172,30,2368,36],[2172,31,2368,37],[2173,20,2369,24],[2174,20,2370,24,"reject"],[2174,26,2370,30],[2174,27,2370,31,"e"],[2174,28,2370,32],[2174,29,2370,33],[2175,18,2371,20],[2176,16,2372,16],[2177,14,2373,12],[2177,15,2373,13],[2177,16,2373,14],[2178,12,2374,8],[2178,13,2374,9],[2178,14,2374,10],[2179,10,2375,4],[2179,11,2375,5],[2179,12,2375,6],[2180,10,2377,4,"executeCallback"],[2180,25,2377,19],[2180,26,2377,20,"promise"],[2180,33,2377,27],[2180,35,2377,29,"callback"],[2180,43,2377,37],[2180,44,2377,38],[2181,10,2378,4],[2181,17,2378,11,"promise"],[2181,24,2378,18],[2182,8,2379,0],[2183,8,2381,0],[2183,17,2381,9,"dropInstance$2"],[2183,31,2381,23,"dropInstance$2"],[2183,32,2381,24,"options"],[2183,39,2381,31],[2183,41,2381,33,"callback"],[2183,49,2381,41],[2183,51,2381,43],[2184,10,2382,4,"callback"],[2184,18,2382,12],[2184,21,2382,15,"getCallback"],[2184,32,2382,26],[2184,33,2382,27,"apply"],[2184,38,2382,32],[2184,39,2382,33],[2184,43,2382,37],[2184,45,2382,39,"arguments"],[2184,54,2382,48],[2184,55,2382,49],[2185,10,2384,4,"options"],[2185,17,2384,11],[2185,20,2384,14],[2185,27,2384,21,"options"],[2185,34,2384,28],[2185,39,2384,33],[2185,49,2384,43],[2185,53,2384,47,"options"],[2185,60,2384,54],[2185,64,2384,58],[2185,65,2384,59],[2185,66,2384,60],[2186,10,2385,4],[2186,14,2385,8],[2186,15,2385,9,"options"],[2186,22,2385,16],[2186,23,2385,17,"name"],[2186,27,2385,21],[2186,29,2385,23],[2187,12,2386,8],[2187,16,2386,12,"currentConfig"],[2187,29,2386,25],[2187,32,2386,28],[2187,36,2386,32],[2187,37,2386,33,"config"],[2187,43,2386,39],[2187,44,2386,40],[2187,45,2386,41],[2188,12,2387,8,"options"],[2188,19,2387,15],[2188,20,2387,16,"name"],[2188,24,2387,20],[2188,27,2387,23,"options"],[2188,34,2387,30],[2188,35,2387,31,"name"],[2188,39,2387,35],[2188,43,2387,39,"currentConfig"],[2188,56,2387,52],[2188,57,2387,53,"name"],[2188,61,2387,57],[2189,12,2388,8,"options"],[2189,19,2388,15],[2189,20,2388,16,"storeName"],[2189,29,2388,25],[2189,32,2388,28,"options"],[2189,39,2388,35],[2189,40,2388,36,"storeName"],[2189,49,2388,45],[2189,53,2388,49,"currentConfig"],[2189,66,2388,62],[2189,67,2388,63,"storeName"],[2189,76,2388,72],[2190,10,2389,4],[2191,10,2391,4],[2191,14,2391,8,"self"],[2191,18,2391,12],[2191,21,2391,15],[2191,25,2391,19],[2192,10,2392,4],[2192,14,2392,8,"promise"],[2192,21,2392,15],[2193,10,2393,4],[2193,14,2393,8],[2193,15,2393,9,"options"],[2193,22,2393,16],[2193,23,2393,17,"name"],[2193,27,2393,21],[2193,29,2393,23],[2194,12,2394,8,"promise"],[2194,19,2394,15],[2194,22,2394,18,"Promise$1"],[2194,31,2394,27],[2194,32,2394,28,"reject"],[2194,38,2394,34],[2194,39,2394,35],[2194,58,2394,54],[2194,59,2394,55],[2195,10,2395,4],[2195,11,2395,5],[2195,17,2395,11],[2196,12,2396,8,"promise"],[2196,19,2396,15],[2196,22,2396,18],[2196,26,2396,22,"Promise$1"],[2196,35,2396,31],[2196,36,2396,32],[2196,46,2396,42,"resolve"],[2196,53,2396,49],[2196,55,2396,51],[2197,14,2397,12],[2197,18,2397,16],[2197,19,2397,17,"options"],[2197,26,2397,24],[2197,27,2397,25,"storeName"],[2197,36,2397,34],[2197,38,2397,36],[2198,16,2398,16,"resolve"],[2198,23,2398,23],[2198,24,2398,24,"options"],[2198,31,2398,31],[2198,32,2398,32,"name"],[2198,36,2398,36],[2198,39,2398,39],[2198,42,2398,42],[2198,43,2398,43],[2199,14,2399,12],[2199,15,2399,13],[2199,21,2399,19],[2200,16,2400,16,"resolve"],[2200,23,2400,23],[2200,24,2400,24,"_getKeyPrefix"],[2200,37,2400,37],[2200,38,2400,38,"options"],[2200,45,2400,45],[2200,47,2400,47,"self"],[2200,51,2400,51],[2200,52,2400,52,"_defaultConfig"],[2200,66,2400,66],[2200,67,2400,67],[2200,68,2400,68],[2201,14,2401,12],[2202,12,2402,8],[2202,13,2402,9],[2202,14,2402,10],[2202,15,2402,11,"then"],[2202,19,2402,15],[2202,20,2402,16],[2202,30,2402,26,"keyPrefix"],[2202,39,2402,35],[2202,41,2402,37],[2203,14,2403,12],[2203,19,2403,17],[2203,23,2403,21,"i"],[2203,24,2403,22],[2203,27,2403,25,"localStorage"],[2203,39,2403,37],[2203,40,2403,38,"length"],[2203,46,2403,44],[2203,49,2403,47],[2203,50,2403,48],[2203,52,2403,50,"i"],[2203,53,2403,51],[2203,57,2403,55],[2203,58,2403,56],[2203,60,2403,58,"i"],[2203,61,2403,59],[2203,63,2403,61],[2203,65,2403,63],[2204,16,2404,16],[2204,20,2404,20,"key"],[2204,23,2404,23],[2204,26,2404,26,"localStorage"],[2204,38,2404,38],[2204,39,2404,39,"key"],[2204,42,2404,42],[2204,43,2404,43,"i"],[2204,44,2404,44],[2204,45,2404,45],[2205,16,2406,16],[2205,20,2406,20,"key"],[2205,23,2406,23],[2205,24,2406,24,"indexOf"],[2205,31,2406,31],[2205,32,2406,32,"keyPrefix"],[2205,41,2406,41],[2205,42,2406,42],[2205,47,2406,47],[2205,48,2406,48],[2205,50,2406,50],[2206,18,2407,20,"localStorage"],[2206,30,2407,32],[2206,31,2407,33,"removeItem"],[2206,41,2407,43],[2206,42,2407,44,"key"],[2206,45,2407,47],[2206,46,2407,48],[2207,16,2408,16],[2208,14,2409,12],[2209,12,2410,8],[2209,13,2410,9],[2209,14,2410,10],[2210,10,2411,4],[2211,10,2413,4,"executeCallback"],[2211,25,2413,19],[2211,26,2413,20,"promise"],[2211,33,2413,27],[2211,35,2413,29,"callback"],[2211,43,2413,37],[2211,44,2413,38],[2212,10,2414,4],[2212,17,2414,11,"promise"],[2212,24,2414,18],[2213,8,2415,0],[2214,8,2417,0],[2214,12,2417,4,"localStorageWrapper"],[2214,31,2417,23],[2214,34,2417,26],[2215,10,2418,4,"_driver"],[2215,17,2418,11],[2215,19,2418,13],[2215,40,2418,34],[2216,10,2419,4,"_initStorage"],[2216,22,2419,16],[2216,24,2419,18,"_initStorage$2"],[2216,38,2419,32],[2217,10,2420,4,"_support"],[2217,18,2420,12],[2217,20,2420,14,"isLocalStorageValid"],[2217,39,2420,33],[2217,40,2420,34],[2217,41,2420,35],[2218,10,2421,4,"iterate"],[2218,17,2421,11],[2218,19,2421,13,"iterate$2"],[2218,28,2421,22],[2219,10,2422,4,"getItem"],[2219,17,2422,11],[2219,19,2422,13,"getItem$2"],[2219,28,2422,22],[2220,10,2423,4,"setItem"],[2220,17,2423,11],[2220,19,2423,13,"setItem$2"],[2220,28,2423,22],[2221,10,2424,4,"removeItem"],[2221,20,2424,14],[2221,22,2424,16,"removeItem$2"],[2221,34,2424,28],[2222,10,2425,4,"clear"],[2222,15,2425,9],[2222,17,2425,11,"clear$2"],[2222,24,2425,18],[2223,10,2426,4,"length"],[2223,16,2426,10],[2223,18,2426,12,"length$2"],[2223,26,2426,20],[2224,10,2427,4,"key"],[2224,13,2427,7],[2224,15,2427,9,"key$2"],[2224,20,2427,14],[2225,10,2428,4,"keys"],[2225,14,2428,8],[2225,16,2428,10,"keys$2"],[2225,22,2428,16],[2226,10,2429,4,"dropInstance"],[2226,22,2429,16],[2226,24,2429,18,"dropInstance$2"],[2227,8,2430,0],[2227,9,2430,1],[2228,8,2432,0],[2228,12,2432,4,"sameValue"],[2228,21,2432,13],[2228,24,2432,16],[2228,33,2432,25,"sameValue"],[2228,42,2432,34,"sameValue"],[2228,43,2432,35,"x"],[2228,44,2432,36],[2228,46,2432,38,"y"],[2228,47,2432,39],[2228,49,2432,41],[2229,10,2433,4],[2229,17,2433,11,"x"],[2229,18,2433,12],[2229,23,2433,17,"y"],[2229,24,2433,18],[2229,28,2433,22],[2229,35,2433,29,"x"],[2229,36,2433,30],[2229,41,2433,35],[2229,49,2433,43],[2229,53,2433,47],[2229,60,2433,54,"y"],[2229,61,2433,55],[2229,66,2433,60],[2229,74,2433,68],[2229,78,2433,72,"isNaN"],[2229,83,2433,77],[2229,84,2433,78,"x"],[2229,85,2433,79],[2229,86,2433,80],[2229,90,2433,84,"isNaN"],[2229,95,2433,89],[2229,96,2433,90,"y"],[2229,97,2433,91],[2229,98,2433,92],[2230,8,2434,0],[2230,9,2434,1],[2231,8,2436,0],[2231,12,2436,4,"includes"],[2231,20,2436,12],[2231,23,2436,15],[2231,32,2436,24,"includes"],[2231,40,2436,32,"includes"],[2231,41,2436,33,"array"],[2231,46,2436,38],[2231,48,2436,40,"searchElement"],[2231,61,2436,53],[2231,63,2436,55],[2232,10,2437,4],[2232,14,2437,8,"len"],[2232,17,2437,11],[2232,20,2437,14,"array"],[2232,25,2437,19],[2232,26,2437,20,"length"],[2232,32,2437,26],[2233,10,2438,4],[2233,14,2438,8,"i"],[2233,15,2438,9],[2233,18,2438,12],[2233,19,2438,13],[2234,10,2439,4],[2234,17,2439,11,"i"],[2234,18,2439,12],[2234,21,2439,15,"len"],[2234,24,2439,18],[2234,26,2439,20],[2235,12,2440,8],[2235,16,2440,12,"sameValue"],[2235,25,2440,21],[2235,26,2440,22,"array"],[2235,31,2440,27],[2235,32,2440,28,"i"],[2235,33,2440,29],[2235,34,2440,30],[2235,36,2440,32,"searchElement"],[2235,49,2440,45],[2235,50,2440,46],[2235,52,2440,48],[2236,14,2441,12],[2236,21,2441,19],[2236,25,2441,23],[2237,12,2442,8],[2238,12,2443,8,"i"],[2238,13,2443,9],[2238,15,2443,11],[2239,10,2444,4],[2240,10,2446,4],[2240,17,2446,11],[2240,22,2446,16],[2241,8,2447,0],[2241,9,2447,1],[2242,8,2449,0],[2242,12,2449,4,"isArray"],[2242,19,2449,11],[2242,22,2449,14,"Array"],[2242,27,2449,19],[2242,28,2449,20,"isArray"],[2242,35,2449,27],[2242,39,2449,31],[2242,49,2449,41,"arg"],[2242,52,2449,44],[2242,54,2449,46],[2243,10,2450,4],[2243,17,2450,11,"Object"],[2243,23,2450,17],[2243,24,2450,18,"prototype"],[2243,33,2450,27],[2243,34,2450,28,"toString"],[2243,42,2450,36],[2243,43,2450,37,"call"],[2243,47,2450,41],[2243,48,2450,42,"arg"],[2243,51,2450,45],[2243,52,2450,46],[2243,57,2450,51],[2243,73,2450,67],[2244,8,2451,0],[2244,9,2451,1],[2246,8,2453,0],[2247,8,2454,0],[2248,8,2455,0],[2248,12,2455,4,"DefinedDrivers"],[2248,26,2455,18],[2248,29,2455,21],[2248,30,2455,22],[2248,31,2455,23],[2249,8,2457,0],[2249,12,2457,4,"DriverSupport"],[2249,25,2457,17],[2249,28,2457,20],[2249,29,2457,21],[2249,30,2457,22],[2250,8,2459,0],[2250,12,2459,4,"DefaultDrivers"],[2250,26,2459,18],[2250,29,2459,21],[2251,10,2460,4,"INDEXEDDB"],[2251,19,2460,13],[2251,21,2460,15,"asyncStorage"],[2251,33,2460,27],[2252,10,2461,4,"WEBSQL"],[2252,16,2461,10],[2252,18,2461,12,"webSQLStorage"],[2252,31,2461,25],[2253,10,2462,4,"LOCALSTORAGE"],[2253,22,2462,16],[2253,24,2462,18,"localStorageWrapper"],[2254,8,2463,0],[2254,9,2463,1],[2255,8,2465,0],[2255,12,2465,4,"DefaultDriverOrder"],[2255,30,2465,22],[2255,33,2465,25],[2255,34,2465,26,"DefaultDrivers"],[2255,48,2465,40],[2255,49,2465,41,"INDEXEDDB"],[2255,58,2465,50],[2255,59,2465,51,"_driver"],[2255,66,2465,58],[2255,68,2465,60,"DefaultDrivers"],[2255,82,2465,74],[2255,83,2465,75,"WEBSQL"],[2255,89,2465,81],[2255,90,2465,82,"_driver"],[2255,97,2465,89],[2255,99,2465,91,"DefaultDrivers"],[2255,113,2465,105],[2255,114,2465,106,"LOCALSTORAGE"],[2255,126,2465,118],[2255,127,2465,119,"_driver"],[2255,134,2465,126],[2255,135,2465,127],[2256,8,2467,0],[2256,12,2467,4,"OptionalDriverMethods"],[2256,33,2467,25],[2256,36,2467,28],[2256,37,2467,29],[2256,51,2467,43],[2256,52,2467,44],[2257,8,2469,0],[2257,12,2469,4,"LibraryMethods"],[2257,26,2469,18],[2257,29,2469,21],[2257,30,2469,22],[2257,37,2469,29],[2257,39,2469,31],[2257,48,2469,40],[2257,50,2469,42],[2257,59,2469,51],[2257,61,2469,53],[2257,66,2469,58],[2257,68,2469,60],[2257,74,2469,66],[2257,76,2469,68],[2257,84,2469,76],[2257,86,2469,78],[2257,98,2469,90],[2257,100,2469,92],[2257,109,2469,101],[2257,110,2469,102],[2257,111,2469,103,"concat"],[2257,117,2469,109],[2257,118,2469,110,"OptionalDriverMethods"],[2257,139,2469,131],[2257,140,2469,132],[2258,8,2471,0],[2258,12,2471,4,"DefaultConfig"],[2258,25,2471,17],[2258,28,2471,20],[2259,10,2472,4,"description"],[2259,21,2472,15],[2259,23,2472,17],[2259,25,2472,19],[2260,10,2473,4,"driver"],[2260,16,2473,10],[2260,18,2473,12,"DefaultDriverOrder"],[2260,36,2473,30],[2260,37,2473,31,"slice"],[2260,42,2473,36],[2260,43,2473,37],[2260,44,2473,38],[2261,10,2474,4,"name"],[2261,14,2474,8],[2261,16,2474,10],[2261,29,2474,23],[2262,10,2475,4],[2263,10,2476,4],[2264,10,2477,4,"size"],[2264,14,2477,8],[2264,16,2477,10],[2264,23,2477,17],[2265,10,2478,4,"storeName"],[2265,19,2478,13],[2265,21,2478,15],[2265,36,2478,30],[2266,10,2479,4,"version"],[2266,17,2479,11],[2266,19,2479,13],[2267,8,2480,0],[2267,9,2480,1],[2268,8,2482,0],[2268,17,2482,9,"callWhenReady"],[2268,30,2482,22,"callWhenReady"],[2268,31,2482,23,"localForageInstance"],[2268,50,2482,42],[2268,52,2482,44,"libraryMethod"],[2268,65,2482,57],[2268,67,2482,59],[2269,10,2483,4,"localForageInstance"],[2269,29,2483,23],[2269,30,2483,24,"libraryMethod"],[2269,43,2483,37],[2269,44,2483,38],[2269,47,2483,41],[2269,59,2483,53],[2270,12,2484,8],[2270,16,2484,12,"_args"],[2270,21,2484,17],[2270,24,2484,20,"arguments"],[2270,33,2484,29],[2271,12,2485,8],[2271,19,2485,15,"localForageInstance"],[2271,38,2485,34],[2271,39,2485,35,"ready"],[2271,44,2485,40],[2271,45,2485,41],[2271,46,2485,42],[2271,47,2485,43,"then"],[2271,51,2485,47],[2271,52,2485,48],[2271,64,2485,60],[2272,14,2486,12],[2272,21,2486,19,"localForageInstance"],[2272,40,2486,38],[2272,41,2486,39,"libraryMethod"],[2272,54,2486,52],[2272,55,2486,53],[2272,56,2486,54,"apply"],[2272,61,2486,59],[2272,62,2486,60,"localForageInstance"],[2272,81,2486,79],[2272,83,2486,81,"_args"],[2272,88,2486,86],[2272,89,2486,87],[2273,12,2487,8],[2273,13,2487,9],[2273,14,2487,10],[2274,10,2488,4],[2274,11,2488,5],[2275,8,2489,0],[2276,8,2491,0],[2276,17,2491,9,"extend"],[2276,23,2491,15,"extend"],[2276,24,2491,15],[2276,26,2491,18],[2277,10,2492,4],[2277,15,2492,9],[2277,19,2492,13,"i"],[2277,20,2492,14],[2277,23,2492,17],[2277,24,2492,18],[2277,26,2492,20,"i"],[2277,27,2492,21],[2277,30,2492,24,"arguments"],[2277,39,2492,33],[2277,40,2492,34,"length"],[2277,46,2492,40],[2277,48,2492,42,"i"],[2277,49,2492,43],[2277,51,2492,45],[2277,53,2492,47],[2278,12,2493,8],[2278,16,2493,12,"arg"],[2278,19,2493,15],[2278,22,2493,18,"arguments"],[2278,31,2493,27],[2278,32,2493,28,"i"],[2278,33,2493,29],[2278,34,2493,30],[2279,12,2495,8],[2279,16,2495,12,"arg"],[2279,19,2495,15],[2279,21,2495,17],[2280,14,2496,12],[2280,19,2496,17],[2280,23,2496,21,"_key"],[2280,27,2496,25],[2280,31,2496,29,"arg"],[2280,34,2496,32],[2280,36,2496,34],[2281,16,2497,16],[2281,20,2497,20,"arg"],[2281,23,2497,23],[2281,24,2497,24,"hasOwnProperty"],[2281,38,2497,38],[2281,39,2497,39,"_key"],[2281,43,2497,43],[2281,44,2497,44],[2281,46,2497,46],[2282,18,2498,20],[2282,22,2498,24,"isArray"],[2282,29,2498,31],[2282,30,2498,32,"arg"],[2282,33,2498,35],[2282,34,2498,36,"_key"],[2282,38,2498,40],[2282,39,2498,41],[2282,40,2498,42],[2282,42,2498,44],[2283,20,2499,24,"arguments"],[2283,29,2499,33],[2283,30,2499,34],[2283,31,2499,35],[2283,32,2499,36],[2283,33,2499,37,"_key"],[2283,37,2499,41],[2283,38,2499,42],[2283,41,2499,45,"arg"],[2283,44,2499,48],[2283,45,2499,49,"_key"],[2283,49,2499,53],[2283,50,2499,54],[2283,51,2499,55,"slice"],[2283,56,2499,60],[2283,57,2499,61],[2283,58,2499,62],[2284,18,2500,20],[2284,19,2500,21],[2284,25,2500,27],[2285,20,2501,24,"arguments"],[2285,29,2501,33],[2285,30,2501,34],[2285,31,2501,35],[2285,32,2501,36],[2285,33,2501,37,"_key"],[2285,37,2501,41],[2285,38,2501,42],[2285,41,2501,45,"arg"],[2285,44,2501,48],[2285,45,2501,49,"_key"],[2285,49,2501,53],[2285,50,2501,54],[2286,18,2502,20],[2287,16,2503,16],[2288,14,2504,12],[2289,12,2505,8],[2290,10,2506,4],[2291,10,2508,4],[2291,17,2508,11,"arguments"],[2291,26,2508,20],[2291,27,2508,21],[2291,28,2508,22],[2291,29,2508,23],[2292,8,2509,0],[2293,8,2511,0],[2293,12,2511,4,"LocalForage"],[2293,23,2511,15],[2293,26,2511,18],[2293,38,2511,30],[2294,10,2512,4],[2294,19,2512,13,"LocalForage"],[2294,30,2512,24,"LocalForage"],[2294,31,2512,25,"options"],[2294,38,2512,32],[2294,40,2512,34],[2295,12,2513,8,"_classCallCheck"],[2295,27,2513,23],[2295,28,2513,24],[2295,32,2513,28],[2295,34,2513,30,"LocalForage"],[2295,45,2513,41],[2295,46,2513,42],[2296,12,2515,8],[2296,17,2515,13],[2296,21,2515,17,"driverTypeKey"],[2296,34,2515,30],[2296,38,2515,34,"DefaultDrivers"],[2296,52,2515,48],[2296,54,2515,50],[2297,14,2516,12],[2297,18,2516,16,"DefaultDrivers"],[2297,32,2516,30],[2297,33,2516,31,"hasOwnProperty"],[2297,47,2516,45],[2297,48,2516,46,"driverTypeKey"],[2297,61,2516,59],[2297,62,2516,60],[2297,64,2516,62],[2298,16,2517,16],[2298,20,2517,20,"driver"],[2298,26,2517,26],[2298,29,2517,29,"DefaultDrivers"],[2298,43,2517,43],[2298,44,2517,44,"driverTypeKey"],[2298,57,2517,57],[2298,58,2517,58],[2299,16,2518,16],[2299,20,2518,20,"driverName"],[2299,30,2518,30],[2299,33,2518,33,"driver"],[2299,39,2518,39],[2299,40,2518,40,"_driver"],[2299,47,2518,47],[2300,16,2519,16],[2300,20,2519,20],[2300,21,2519,21,"driverTypeKey"],[2300,34,2519,34],[2300,35,2519,35],[2300,38,2519,38,"driverName"],[2300,48,2519,48],[2301,16,2521,16],[2301,20,2521,20],[2301,21,2521,21,"DefinedDrivers"],[2301,35,2521,35],[2301,36,2521,36,"driverName"],[2301,46,2521,46],[2301,47,2521,47],[2301,49,2521,49],[2302,18,2522,20],[2303,18,2523,20],[2304,18,2524,20],[2305,18,2525,20],[2305,22,2525,24],[2305,23,2525,25,"defineDriver"],[2305,35,2525,37],[2305,36,2525,38,"driver"],[2305,42,2525,44],[2305,43,2525,45],[2306,16,2526,16],[2307,14,2527,12],[2308,12,2528,8],[2309,12,2530,8],[2309,16,2530,12],[2309,17,2530,13,"_defaultConfig"],[2309,31,2530,27],[2309,34,2530,30,"extend"],[2309,40,2530,36],[2309,41,2530,37],[2309,42,2530,38],[2309,43,2530,39],[2309,45,2530,41,"DefaultConfig"],[2309,58,2530,54],[2309,59,2530,55],[2310,12,2531,8],[2310,16,2531,12],[2310,17,2531,13,"_config"],[2310,24,2531,20],[2310,27,2531,23,"extend"],[2310,33,2531,29],[2310,34,2531,30],[2310,35,2531,31],[2310,36,2531,32],[2310,38,2531,34],[2310,42,2531,38],[2310,43,2531,39,"_defaultConfig"],[2310,57,2531,53],[2310,59,2531,55,"options"],[2310,66,2531,62],[2310,67,2531,63],[2311,12,2532,8],[2311,16,2532,12],[2311,17,2532,13,"_driverSet"],[2311,27,2532,23],[2311,30,2532,26],[2311,34,2532,30],[2312,12,2533,8],[2312,16,2533,12],[2312,17,2533,13,"_initDriver"],[2312,28,2533,24],[2312,31,2533,27],[2312,35,2533,31],[2313,12,2534,8],[2313,16,2534,12],[2313,17,2534,13,"_ready"],[2313,23,2534,19],[2313,26,2534,22],[2313,31,2534,27],[2314,12,2535,8],[2314,16,2535,12],[2314,17,2535,13,"_dbInfo"],[2314,24,2535,20],[2314,27,2535,23],[2314,31,2535,27],[2315,12,2537,8],[2315,16,2537,12],[2315,17,2537,13,"_wrapLibraryMethodsWithReady"],[2315,45,2537,41],[2315,46,2537,42],[2315,47,2537,43],[2316,12,2538,8],[2316,16,2538,12],[2316,17,2538,13,"setDriver"],[2316,26,2538,22],[2316,27,2538,23],[2316,31,2538,27],[2316,32,2538,28,"_config"],[2316,39,2538,35],[2316,40,2538,36,"driver"],[2316,46,2538,42],[2316,47,2538,43],[2316,48,2538,44],[2316,55,2538,51],[2316,56,2538,52],[2316,57,2538,53],[2316,69,2538,65],[2316,70,2538,66],[2316,71,2538,67],[2316,72,2538,68],[2317,10,2539,4],[2319,10,2541,4],[2320,10,2542,4],[2321,10,2543,4],[2322,10,2544,4],[2324,10,2547,4,"LocalForage"],[2324,21,2547,15],[2324,22,2547,16,"prototype"],[2324,31,2547,25],[2324,32,2547,26,"config"],[2324,38,2547,32],[2324,41,2547,35],[2324,50,2547,44,"config"],[2324,56,2547,50,"config"],[2324,57,2547,51,"options"],[2324,64,2547,58],[2324,66,2547,60],[2325,12,2548,8],[2326,12,2549,8],[2327,12,2550,8],[2328,12,2551,8],[2328,16,2551,12],[2328,17,2551,13],[2328,24,2551,20,"options"],[2328,31,2551,27],[2328,36,2551,32],[2328,47,2551,43],[2328,50,2551,46],[2328,61,2551,57],[2328,64,2551,60,"_typeof"],[2328,71,2551,67],[2328,72,2551,68,"options"],[2328,79,2551,75],[2328,80,2551,76],[2328,86,2551,82],[2328,94,2551,90],[2328,96,2551,92],[2329,14,2552,12],[2330,14,2553,12],[2331,14,2554,12],[2331,18,2554,16],[2331,22,2554,20],[2331,23,2554,21,"_ready"],[2331,29,2554,27],[2331,31,2554,29],[2332,16,2555,16],[2332,23,2555,23],[2332,27,2555,27,"Error"],[2332,32,2555,32],[2332,33,2555,33],[2332,73,2555,73],[2332,76,2555,76],[2332,92,2555,92],[2332,93,2555,93],[2333,14,2556,12],[2334,14,2558,12],[2334,19,2558,17],[2334,23,2558,21,"i"],[2334,24,2558,22],[2334,28,2558,26,"options"],[2334,35,2558,33],[2334,37,2558,35],[2335,16,2559,16],[2335,20,2559,20,"i"],[2335,21,2559,21],[2335,26,2559,26],[2335,37,2559,37],[2335,39,2559,39],[2336,18,2560,20,"options"],[2336,25,2560,27],[2336,26,2560,28,"i"],[2336,27,2560,29],[2336,28,2560,30],[2336,31,2560,33,"options"],[2336,38,2560,40],[2336,39,2560,41,"i"],[2336,40,2560,42],[2336,41,2560,43],[2336,42,2560,44,"replace"],[2336,49,2560,51],[2336,50,2560,52],[2336,55,2560,57],[2336,57,2560,59],[2336,60,2560,62],[2336,61,2560,63],[2337,16,2561,16],[2338,16,2563,16],[2338,20,2563,20,"i"],[2338,21,2563,21],[2338,26,2563,26],[2338,35,2563,35],[2338,39,2563,39],[2338,46,2563,46,"options"],[2338,53,2563,53],[2338,54,2563,54,"i"],[2338,55,2563,55],[2338,56,2563,56],[2338,61,2563,61],[2338,69,2563,69],[2338,71,2563,71],[2339,18,2564,20],[2339,25,2564,27],[2339,29,2564,31,"Error"],[2339,34,2564,36],[2339,35,2564,37],[2339,71,2564,73],[2339,72,2564,74],[2340,16,2565,16],[2341,16,2567,16],[2341,20,2567,20],[2341,21,2567,21,"_config"],[2341,28,2567,28],[2341,29,2567,29,"i"],[2341,30,2567,30],[2341,31,2567,31],[2341,34,2567,34,"options"],[2341,41,2567,41],[2341,42,2567,42,"i"],[2341,43,2567,43],[2341,44,2567,44],[2342,14,2568,12],[2344,14,2570,12],[2345,14,2571,12],[2346,14,2572,12],[2346,18,2572,16],[2346,26,2572,24],[2346,30,2572,28,"options"],[2346,37,2572,35],[2346,41,2572,39,"options"],[2346,48,2572,46],[2346,49,2572,47,"driver"],[2346,55,2572,53],[2346,57,2572,55],[2347,16,2573,16],[2347,23,2573,23],[2347,27,2573,27],[2347,28,2573,28,"setDriver"],[2347,37,2573,37],[2347,38,2573,38],[2347,42,2573,42],[2347,43,2573,43,"_config"],[2347,50,2573,50],[2347,51,2573,51,"driver"],[2347,57,2573,57],[2347,58,2573,58],[2348,14,2574,12],[2349,14,2576,12],[2349,21,2576,19],[2349,25,2576,23],[2350,12,2577,8],[2350,13,2577,9],[2350,19,2577,15],[2350,23,2577,19],[2350,30,2577,26,"options"],[2350,37,2577,33],[2350,42,2577,38],[2350,50,2577,46],[2350,52,2577,48],[2351,14,2578,12],[2351,21,2578,19],[2351,25,2578,23],[2351,26,2578,24,"_config"],[2351,33,2578,31],[2351,34,2578,32,"options"],[2351,41,2578,39],[2351,42,2578,40],[2352,12,2579,8],[2352,13,2579,9],[2352,19,2579,15],[2353,14,2580,12],[2353,21,2580,19],[2353,25,2580,23],[2353,26,2580,24,"_config"],[2353,33,2580,31],[2354,12,2581,8],[2355,10,2582,4],[2355,11,2582,5],[2357,10,2584,4],[2358,10,2585,4],[2360,10,2588,4,"LocalForage"],[2360,21,2588,15],[2360,22,2588,16,"prototype"],[2360,31,2588,25],[2360,32,2588,26,"defineDriver"],[2360,44,2588,38],[2360,47,2588,41],[2360,56,2588,50,"defineDriver"],[2360,68,2588,62,"defineDriver"],[2360,69,2588,63,"driverObject"],[2360,81,2588,75],[2360,83,2588,77,"callback"],[2360,91,2588,85],[2360,93,2588,87,"errorCallback"],[2360,106,2588,100],[2360,108,2588,102],[2361,12,2589,8],[2361,16,2589,12,"promise"],[2361,23,2589,19],[2361,26,2589,22],[2361,30,2589,26,"Promise$1"],[2361,39,2589,35],[2361,40,2589,36],[2361,50,2589,46,"resolve"],[2361,57,2589,53],[2361,59,2589,55,"reject"],[2361,65,2589,61],[2361,67,2589,63],[2362,14,2590,12],[2362,18,2590,16],[2363,16,2591,16],[2363,20,2591,20,"driverName"],[2363,30,2591,30],[2363,33,2591,33,"driverObject"],[2363,45,2591,45],[2363,46,2591,46,"_driver"],[2363,53,2591,53],[2364,16,2592,16],[2364,20,2592,20,"complianceError"],[2364,35,2592,35],[2364,38,2592,38],[2364,42,2592,42,"Error"],[2364,47,2592,47],[2364,48,2592,48],[2364,83,2592,83],[2364,86,2592,86],[2364,139,2592,139],[2364,140,2592,140],[2366,16,2594,16],[2367,16,2595,16],[2368,16,2596,16],[2368,20,2596,20],[2368,21,2596,21,"driverObject"],[2368,33,2596,33],[2368,34,2596,34,"_driver"],[2368,41,2596,41],[2368,43,2596,43],[2369,18,2597,20,"reject"],[2369,24,2597,26],[2369,25,2597,27,"complianceError"],[2369,40,2597,42],[2369,41,2597,43],[2370,18,2598,20],[2371,16,2599,16],[2372,16,2601,16],[2372,20,2601,20,"driverMethods"],[2372,33,2601,33],[2372,36,2601,36,"LibraryMethods"],[2372,50,2601,50],[2372,51,2601,51,"concat"],[2372,57,2601,57],[2372,58,2601,58],[2372,72,2601,72],[2372,73,2601,73],[2373,16,2602,16],[2373,21,2602,21],[2373,25,2602,25,"i"],[2373,26,2602,26],[2373,29,2602,29],[2373,30,2602,30],[2373,32,2602,32,"len"],[2373,35,2602,35],[2373,38,2602,38,"driverMethods"],[2373,51,2602,51],[2373,52,2602,52,"length"],[2373,58,2602,58],[2373,60,2602,60,"i"],[2373,61,2602,61],[2373,64,2602,64,"len"],[2373,67,2602,67],[2373,69,2602,69,"i"],[2373,70,2602,70],[2373,72,2602,72],[2373,74,2602,74],[2374,18,2603,20],[2374,22,2603,24,"driverMethodName"],[2374,38,2603,40],[2374,41,2603,43,"driverMethods"],[2374,54,2603,56],[2374,55,2603,57,"i"],[2374,56,2603,58],[2374,57,2603,59],[2376,18,2605,20],[2377,18,2606,20],[2378,18,2607,20],[2378,22,2607,24,"isRequired"],[2378,32,2607,34],[2378,35,2607,37],[2378,36,2607,38,"includes"],[2378,44,2607,46],[2378,45,2607,47,"OptionalDriverMethods"],[2378,66,2607,68],[2378,68,2607,70,"driverMethodName"],[2378,84,2607,86],[2378,85,2607,87],[2379,18,2608,20],[2379,22,2608,24],[2379,23,2608,25,"isRequired"],[2379,33,2608,35],[2379,37,2608,39,"driverObject"],[2379,49,2608,51],[2379,50,2608,52,"driverMethodName"],[2379,66,2608,68],[2379,67,2608,69],[2379,72,2608,74],[2379,79,2608,81,"driverObject"],[2379,91,2608,93],[2379,92,2608,94,"driverMethodName"],[2379,108,2608,110],[2379,109,2608,111],[2379,114,2608,116],[2379,124,2608,126],[2379,126,2608,128],[2380,20,2609,24,"reject"],[2380,26,2609,30],[2380,27,2609,31,"complianceError"],[2380,42,2609,46],[2380,43,2609,47],[2381,20,2610,24],[2382,18,2611,20],[2383,16,2612,16],[2384,16,2614,16],[2384,20,2614,20,"configureMissingMethods"],[2384,43,2614,43],[2384,46,2614,46],[2384,55,2614,55,"configureMissingMethods"],[2384,78,2614,78,"configureMissingMethods"],[2384,79,2614,78],[2384,81,2614,81],[2385,18,2615,20],[2385,22,2615,24,"methodNotImplementedFactory"],[2385,49,2615,51],[2385,52,2615,54],[2385,61,2615,63,"methodNotImplementedFactory"],[2385,88,2615,90,"methodNotImplementedFactory"],[2385,89,2615,91,"methodName"],[2385,99,2615,101],[2385,101,2615,103],[2386,20,2616,24],[2386,27,2616,31],[2386,39,2616,43],[2387,22,2617,28],[2387,26,2617,32,"error"],[2387,31,2617,37],[2387,34,2617,40],[2387,38,2617,44,"Error"],[2387,43,2617,49],[2387,44,2617,50],[2387,53,2617,59],[2387,56,2617,62,"methodName"],[2387,66,2617,72],[2387,69,2617,75],[2387,112,2617,118],[2387,113,2617,119],[2388,22,2618,28],[2388,26,2618,32,"promise"],[2388,33,2618,39],[2388,36,2618,42,"Promise$1"],[2388,45,2618,51],[2388,46,2618,52,"reject"],[2388,52,2618,58],[2388,53,2618,59,"error"],[2388,58,2618,64],[2388,59,2618,65],[2389,22,2619,28,"executeCallback"],[2389,37,2619,43],[2389,38,2619,44,"promise"],[2389,45,2619,51],[2389,47,2619,53,"arguments"],[2389,56,2619,62],[2389,57,2619,63,"arguments"],[2389,66,2619,72],[2389,67,2619,73,"length"],[2389,73,2619,79],[2389,76,2619,82],[2389,77,2619,83],[2389,78,2619,84],[2389,79,2619,85],[2390,22,2620,28],[2390,29,2620,35,"promise"],[2390,36,2620,42],[2391,20,2621,24],[2391,21,2621,25],[2392,18,2622,20],[2392,19,2622,21],[2393,18,2624,20],[2393,23,2624,25],[2393,27,2624,29,"_i"],[2393,29,2624,31],[2393,32,2624,34],[2393,33,2624,35],[2393,35,2624,37,"_len"],[2393,39,2624,41],[2393,42,2624,44,"OptionalDriverMethods"],[2393,63,2624,65],[2393,64,2624,66,"length"],[2393,70,2624,72],[2393,72,2624,74,"_i"],[2393,74,2624,76],[2393,77,2624,79,"_len"],[2393,81,2624,83],[2393,83,2624,85,"_i"],[2393,85,2624,87],[2393,87,2624,89],[2393,89,2624,91],[2394,20,2625,24],[2394,24,2625,28,"optionalDriverMethod"],[2394,44,2625,48],[2394,47,2625,51,"OptionalDriverMethods"],[2394,68,2625,72],[2394,69,2625,73,"_i"],[2394,71,2625,75],[2394,72,2625,76],[2395,20,2626,24],[2395,24,2626,28],[2395,25,2626,29,"driverObject"],[2395,37,2626,41],[2395,38,2626,42,"optionalDriverMethod"],[2395,58,2626,62],[2395,59,2626,63],[2395,61,2626,65],[2396,22,2627,28,"driverObject"],[2396,34,2627,40],[2396,35,2627,41,"optionalDriverMethod"],[2396,55,2627,61],[2396,56,2627,62],[2396,59,2627,65,"methodNotImplementedFactory"],[2396,86,2627,92],[2396,87,2627,93,"optionalDriverMethod"],[2396,107,2627,113],[2396,108,2627,114],[2397,20,2628,24],[2398,18,2629,20],[2399,16,2630,16],[2399,17,2630,17],[2400,16,2632,16,"configureMissingMethods"],[2400,39,2632,39],[2400,40,2632,40],[2400,41,2632,41],[2401,16,2634,16],[2401,20,2634,20,"setDriverSupport"],[2401,36,2634,36],[2401,39,2634,39],[2401,48,2634,48,"setDriverSupport"],[2401,64,2634,64,"setDriverSupport"],[2401,65,2634,65,"support"],[2401,72,2634,72],[2401,74,2634,74],[2402,18,2635,20],[2402,22,2635,24,"DefinedDrivers"],[2402,36,2635,38],[2402,37,2635,39,"driverName"],[2402,47,2635,49],[2402,48,2635,50],[2402,50,2635,52],[2403,20,2636,24,"console"],[2403,27,2636,31],[2403,28,2636,32,"info"],[2403,32,2636,36],[2403,33,2636,37],[2403,66,2636,70],[2403,69,2636,73,"driverName"],[2403,79,2636,83],[2403,80,2636,84],[2404,18,2637,20],[2405,18,2638,20,"DefinedDrivers"],[2405,32,2638,34],[2405,33,2638,35,"driverName"],[2405,43,2638,45],[2405,44,2638,46],[2405,47,2638,49,"driverObject"],[2405,59,2638,61],[2406,18,2639,20,"DriverSupport"],[2406,31,2639,33],[2406,32,2639,34,"driverName"],[2406,42,2639,44],[2406,43,2639,45],[2406,46,2639,48,"support"],[2406,53,2639,55],[2407,18,2640,20],[2408,18,2641,20],[2409,18,2642,20],[2410,18,2643,20,"resolve"],[2410,25,2643,27],[2410,26,2643,28],[2410,27,2643,29],[2411,16,2644,16],[2411,17,2644,17],[2412,16,2646,16],[2412,20,2646,20],[2412,30,2646,30],[2412,34,2646,34,"driverObject"],[2412,46,2646,46],[2412,48,2646,48],[2413,18,2647,20],[2413,22,2647,24,"driverObject"],[2413,34,2647,36],[2413,35,2647,37,"_support"],[2413,43,2647,45],[2413,47,2647,49],[2413,54,2647,56,"driverObject"],[2413,66,2647,68],[2413,67,2647,69,"_support"],[2413,75,2647,77],[2413,80,2647,82],[2413,90,2647,92],[2413,92,2647,94],[2414,20,2648,24,"driverObject"],[2414,32,2648,36],[2414,33,2648,37,"_support"],[2414,41,2648,45],[2414,42,2648,46],[2414,43,2648,47],[2414,44,2648,48,"then"],[2414,48,2648,52],[2414,49,2648,53,"setDriverSupport"],[2414,65,2648,69],[2414,67,2648,71,"reject"],[2414,73,2648,77],[2414,74,2648,78],[2415,18,2649,20],[2415,19,2649,21],[2415,25,2649,27],[2416,20,2650,24,"setDriverSupport"],[2416,36,2650,40],[2416,37,2650,41],[2416,38,2650,42],[2416,39,2650,43,"driverObject"],[2416,51,2650,55],[2416,52,2650,56,"_support"],[2416,60,2650,64],[2416,61,2650,65],[2417,18,2651,20],[2418,16,2652,16],[2418,17,2652,17],[2418,23,2652,23],[2419,18,2653,20,"setDriverSupport"],[2419,34,2653,36],[2419,35,2653,37],[2419,39,2653,41],[2419,40,2653,42],[2420,16,2654,16],[2421,14,2655,12],[2421,15,2655,13],[2421,16,2655,14],[2421,23,2655,21,"e"],[2421,24,2655,22],[2421,26,2655,24],[2422,16,2656,16,"reject"],[2422,22,2656,22],[2422,23,2656,23,"e"],[2422,24,2656,24],[2422,25,2656,25],[2423,14,2657,12],[2424,12,2658,8],[2424,13,2658,9],[2424,14,2658,10],[2425,12,2660,8,"executeTwoCallbacks"],[2425,31,2660,27],[2425,32,2660,28,"promise"],[2425,39,2660,35],[2425,41,2660,37,"callback"],[2425,49,2660,45],[2425,51,2660,47,"errorCallback"],[2425,64,2660,60],[2425,65,2660,61],[2426,12,2661,8],[2426,19,2661,15,"promise"],[2426,26,2661,22],[2427,10,2662,4],[2427,11,2662,5],[2428,10,2664,4,"LocalForage"],[2428,21,2664,15],[2428,22,2664,16,"prototype"],[2428,31,2664,25],[2428,32,2664,26,"driver"],[2428,38,2664,32],[2428,41,2664,35],[2428,50,2664,44,"driver"],[2428,56,2664,50,"driver"],[2428,57,2664,50],[2428,59,2664,53],[2429,12,2665,8],[2429,19,2665,15],[2429,23,2665,19],[2429,24,2665,20,"_driver"],[2429,31,2665,27],[2429,35,2665,31],[2429,39,2665,35],[2430,10,2666,4],[2430,11,2666,5],[2431,10,2668,4,"LocalForage"],[2431,21,2668,15],[2431,22,2668,16,"prototype"],[2431,31,2668,25],[2431,32,2668,26,"getDriver"],[2431,41,2668,35],[2431,44,2668,38],[2431,53,2668,47,"getDriver"],[2431,62,2668,56,"getDriver"],[2431,63,2668,57,"driverName"],[2431,73,2668,67],[2431,75,2668,69,"callback"],[2431,83,2668,77],[2431,85,2668,79,"errorCallback"],[2431,98,2668,92],[2431,100,2668,94],[2432,12,2669,8],[2432,16,2669,12,"getDriverPromise"],[2432,32,2669,28],[2432,35,2669,31,"DefinedDrivers"],[2432,49,2669,45],[2432,50,2669,46,"driverName"],[2432,60,2669,56],[2432,61,2669,57],[2432,64,2669,60,"Promise$1"],[2432,73,2669,69],[2432,74,2669,70,"resolve"],[2432,81,2669,77],[2432,82,2669,78,"DefinedDrivers"],[2432,96,2669,92],[2432,97,2669,93,"driverName"],[2432,107,2669,103],[2432,108,2669,104],[2432,109,2669,105],[2432,112,2669,108,"Promise$1"],[2432,121,2669,117],[2432,122,2669,118,"reject"],[2432,128,2669,124],[2432,129,2669,125],[2432,133,2669,129,"Error"],[2432,138,2669,134],[2432,139,2669,135],[2432,158,2669,154],[2432,159,2669,155],[2432,160,2669,156],[2433,12,2671,8,"executeTwoCallbacks"],[2433,31,2671,27],[2433,32,2671,28,"getDriverPromise"],[2433,48,2671,44],[2433,50,2671,46,"callback"],[2433,58,2671,54],[2433,60,2671,56,"errorCallback"],[2433,73,2671,69],[2433,74,2671,70],[2434,12,2672,8],[2434,19,2672,15,"getDriverPromise"],[2434,35,2672,31],[2435,10,2673,4],[2435,11,2673,5],[2436,10,2675,4,"LocalForage"],[2436,21,2675,15],[2436,22,2675,16,"prototype"],[2436,31,2675,25],[2436,32,2675,26,"getSerializer"],[2436,45,2675,39],[2436,48,2675,42],[2436,57,2675,51,"getSerializer"],[2436,70,2675,64,"getSerializer"],[2436,71,2675,65,"callback"],[2436,79,2675,73],[2436,81,2675,75],[2437,12,2676,8],[2437,16,2676,12,"serializerPromise"],[2437,33,2676,29],[2437,36,2676,32,"Promise$1"],[2437,45,2676,41],[2437,46,2676,42,"resolve"],[2437,53,2676,49],[2437,54,2676,50,"localforageSerializer"],[2437,75,2676,71],[2437,76,2676,72],[2438,12,2677,8,"executeTwoCallbacks"],[2438,31,2677,27],[2438,32,2677,28,"serializerPromise"],[2438,49,2677,45],[2438,51,2677,47,"callback"],[2438,59,2677,55],[2438,60,2677,56],[2439,12,2678,8],[2439,19,2678,15,"serializerPromise"],[2439,36,2678,32],[2440,10,2679,4],[2440,11,2679,5],[2441,10,2681,4,"LocalForage"],[2441,21,2681,15],[2441,22,2681,16,"prototype"],[2441,31,2681,25],[2441,32,2681,26,"ready"],[2441,37,2681,31],[2441,40,2681,34],[2441,49,2681,43,"ready"],[2441,54,2681,48,"ready"],[2441,55,2681,49,"callback"],[2441,63,2681,57],[2441,65,2681,59],[2442,12,2682,8],[2442,16,2682,12,"self"],[2442,20,2682,16],[2442,23,2682,19],[2442,27,2682,23],[2443,12,2684,8],[2443,16,2684,12,"promise"],[2443,23,2684,19],[2443,26,2684,22,"self"],[2443,30,2684,26],[2443,31,2684,27,"_driverSet"],[2443,41,2684,37],[2443,42,2684,38,"then"],[2443,46,2684,42],[2443,47,2684,43],[2443,59,2684,55],[2444,14,2685,12],[2444,18,2685,16,"self"],[2444,22,2685,20],[2444,23,2685,21,"_ready"],[2444,29,2685,27],[2444,34,2685,32],[2444,38,2685,36],[2444,40,2685,38],[2445,16,2686,16,"self"],[2445,20,2686,20],[2445,21,2686,21,"_ready"],[2445,27,2686,27],[2445,30,2686,30,"self"],[2445,34,2686,34],[2445,35,2686,35,"_initDriver"],[2445,46,2686,46],[2445,47,2686,47],[2445,48,2686,48],[2446,14,2687,12],[2447,14,2689,12],[2447,21,2689,19,"self"],[2447,25,2689,23],[2447,26,2689,24,"_ready"],[2447,32,2689,30],[2448,12,2690,8],[2448,13,2690,9],[2448,14,2690,10],[2449,12,2692,8,"executeTwoCallbacks"],[2449,31,2692,27],[2449,32,2692,28,"promise"],[2449,39,2692,35],[2449,41,2692,37,"callback"],[2449,49,2692,45],[2449,51,2692,47,"callback"],[2449,59,2692,55],[2449,60,2692,56],[2450,12,2693,8],[2450,19,2693,15,"promise"],[2450,26,2693,22],[2451,10,2694,4],[2451,11,2694,5],[2452,10,2696,4,"LocalForage"],[2452,21,2696,15],[2452,22,2696,16,"prototype"],[2452,31,2696,25],[2452,32,2696,26,"setDriver"],[2452,41,2696,35],[2452,44,2696,38],[2452,53,2696,47,"setDriver"],[2452,62,2696,56,"setDriver"],[2452,63,2696,57,"drivers"],[2452,70,2696,64],[2452,72,2696,66,"callback"],[2452,80,2696,74],[2452,82,2696,76,"errorCallback"],[2452,95,2696,89],[2452,97,2696,91],[2453,12,2697,8],[2453,16,2697,12,"self"],[2453,20,2697,16],[2453,23,2697,19],[2453,27,2697,23],[2454,12,2699,8],[2454,16,2699,12],[2454,17,2699,13,"isArray"],[2454,24,2699,20],[2454,25,2699,21,"drivers"],[2454,32,2699,28],[2454,33,2699,29],[2454,35,2699,31],[2455,14,2700,12,"drivers"],[2455,21,2700,19],[2455,24,2700,22],[2455,25,2700,23,"drivers"],[2455,32,2700,30],[2455,33,2700,31],[2456,12,2701,8],[2457,12,2703,8],[2457,16,2703,12,"supportedDrivers"],[2457,32,2703,28],[2457,35,2703,31],[2457,39,2703,35],[2457,40,2703,36,"_getSupportedDrivers"],[2457,60,2703,56],[2457,61,2703,57,"drivers"],[2457,68,2703,64],[2457,69,2703,65],[2458,12,2705,8],[2458,21,2705,17,"setDriverToConfig"],[2458,38,2705,34,"setDriverToConfig"],[2458,39,2705,34],[2458,41,2705,37],[2459,14,2706,12,"self"],[2459,18,2706,16],[2459,19,2706,17,"_config"],[2459,26,2706,24],[2459,27,2706,25,"driver"],[2459,33,2706,31],[2459,36,2706,34,"self"],[2459,40,2706,38],[2459,41,2706,39,"driver"],[2459,47,2706,45],[2459,48,2706,46],[2459,49,2706,47],[2460,12,2707,8],[2461,12,2709,8],[2461,21,2709,17,"extendSelfWithDriver"],[2461,41,2709,37,"extendSelfWithDriver"],[2461,42,2709,38,"driver"],[2461,48,2709,44],[2461,50,2709,46],[2462,14,2710,12,"self"],[2462,18,2710,16],[2462,19,2710,17,"_extend"],[2462,26,2710,24],[2462,27,2710,25,"driver"],[2462,33,2710,31],[2462,34,2710,32],[2463,14,2711,12,"setDriverToConfig"],[2463,31,2711,29],[2463,32,2711,30],[2463,33,2711,31],[2464,14,2713,12,"self"],[2464,18,2713,16],[2464,19,2713,17,"_ready"],[2464,25,2713,23],[2464,28,2713,26,"self"],[2464,32,2713,30],[2464,33,2713,31,"_initStorage"],[2464,45,2713,43],[2464,46,2713,44,"self"],[2464,50,2713,48],[2464,51,2713,49,"_config"],[2464,58,2713,56],[2464,59,2713,57],[2465,14,2714,12],[2465,21,2714,19,"self"],[2465,25,2714,23],[2465,26,2714,24,"_ready"],[2465,32,2714,30],[2466,12,2715,8],[2467,12,2717,8],[2467,21,2717,17,"initDriver"],[2467,31,2717,27,"initDriver"],[2467,32,2717,28,"supportedDrivers"],[2467,48,2717,44],[2467,50,2717,46],[2468,14,2718,12],[2468,21,2718,19],[2468,33,2718,31],[2469,16,2719,16],[2469,20,2719,20,"currentDriverIndex"],[2469,38,2719,38],[2469,41,2719,41],[2469,42,2719,42],[2470,16,2721,16],[2470,25,2721,25,"driverPromiseLoop"],[2470,42,2721,42,"driverPromiseLoop"],[2470,43,2721,42],[2470,45,2721,45],[2471,18,2722,20],[2471,25,2722,27,"currentDriverIndex"],[2471,43,2722,45],[2471,46,2722,48,"supportedDrivers"],[2471,62,2722,64],[2471,63,2722,65,"length"],[2471,69,2722,71],[2471,71,2722,73],[2472,20,2723,24],[2472,24,2723,28,"driverName"],[2472,34,2723,38],[2472,37,2723,41,"supportedDrivers"],[2472,53,2723,57],[2472,54,2723,58,"currentDriverIndex"],[2472,72,2723,76],[2472,73,2723,77],[2473,20,2724,24,"currentDriverIndex"],[2473,38,2724,42],[2473,40,2724,44],[2474,20,2726,24,"self"],[2474,24,2726,28],[2474,25,2726,29,"_dbInfo"],[2474,32,2726,36],[2474,35,2726,39],[2474,39,2726,43],[2475,20,2727,24,"self"],[2475,24,2727,28],[2475,25,2727,29,"_ready"],[2475,31,2727,35],[2475,34,2727,38],[2475,38,2727,42],[2476,20,2729,24],[2476,27,2729,31,"self"],[2476,31,2729,35],[2476,32,2729,36,"getDriver"],[2476,41,2729,45],[2476,42,2729,46,"driverName"],[2476,52,2729,56],[2476,53,2729,57],[2476,54,2729,58,"then"],[2476,58,2729,62],[2476,59,2729,63,"extendSelfWithDriver"],[2476,79,2729,83],[2476,80,2729,84],[2476,81,2729,85],[2476,88,2729,92],[2476,89,2729,93],[2476,90,2729,94,"driverPromiseLoop"],[2476,107,2729,111],[2476,108,2729,112],[2477,18,2730,20],[2478,18,2732,20,"setDriverToConfig"],[2478,35,2732,37],[2478,36,2732,38],[2478,37,2732,39],[2479,18,2733,20],[2479,22,2733,24,"error"],[2479,27,2733,29],[2479,30,2733,32],[2479,34,2733,36,"Error"],[2479,39,2733,41],[2479,40,2733,42],[2479,76,2733,78],[2479,77,2733,79],[2480,18,2734,20,"self"],[2480,22,2734,24],[2480,23,2734,25,"_driverSet"],[2480,33,2734,35],[2480,36,2734,38,"Promise$1"],[2480,45,2734,47],[2480,46,2734,48,"reject"],[2480,52,2734,54],[2480,53,2734,55,"error"],[2480,58,2734,60],[2480,59,2734,61],[2481,18,2735,20],[2481,25,2735,27,"self"],[2481,29,2735,31],[2481,30,2735,32,"_driverSet"],[2481,40,2735,42],[2482,16,2736,16],[2483,16,2738,16],[2483,23,2738,23,"driverPromiseLoop"],[2483,40,2738,40],[2483,41,2738,41],[2483,42,2738,42],[2484,14,2739,12],[2484,15,2739,13],[2485,12,2740,8],[2487,12,2742,8],[2488,12,2743,8],[2489,12,2744,8],[2490,12,2745,8],[2490,16,2745,12,"oldDriverSetDone"],[2490,32,2745,28],[2490,35,2745,31],[2490,39,2745,35],[2490,40,2745,36,"_driverSet"],[2490,50,2745,46],[2490,55,2745,51],[2490,59,2745,55],[2490,62,2745,58],[2490,66,2745,62],[2490,67,2745,63,"_driverSet"],[2490,77,2745,73],[2490,78,2745,74],[2490,85,2745,81],[2490,86,2745,82],[2490,87,2745,83],[2490,99,2745,95],[2491,14,2746,12],[2491,21,2746,19,"Promise$1"],[2491,30,2746,28],[2491,31,2746,29,"resolve"],[2491,38,2746,36],[2491,39,2746,37],[2491,40,2746,38],[2492,12,2747,8],[2492,13,2747,9],[2492,14,2747,10],[2492,17,2747,13,"Promise$1"],[2492,26,2747,22],[2492,27,2747,23,"resolve"],[2492,34,2747,30],[2492,35,2747,31],[2492,36,2747,32],[2493,12,2749,8],[2493,16,2749,12],[2493,17,2749,13,"_driverSet"],[2493,27,2749,23],[2493,30,2749,26,"oldDriverSetDone"],[2493,46,2749,42],[2493,47,2749,43,"then"],[2493,51,2749,47],[2493,52,2749,48],[2493,64,2749,60],[2494,14,2750,12],[2494,18,2750,16,"driverName"],[2494,28,2750,26],[2494,31,2750,29,"supportedDrivers"],[2494,47,2750,45],[2494,48,2750,46],[2494,49,2750,47],[2494,50,2750,48],[2495,14,2751,12,"self"],[2495,18,2751,16],[2495,19,2751,17,"_dbInfo"],[2495,26,2751,24],[2495,29,2751,27],[2495,33,2751,31],[2496,14,2752,12,"self"],[2496,18,2752,16],[2496,19,2752,17,"_ready"],[2496,25,2752,23],[2496,28,2752,26],[2496,32,2752,30],[2497,14,2754,12],[2497,21,2754,19,"self"],[2497,25,2754,23],[2497,26,2754,24,"getDriver"],[2497,35,2754,33],[2497,36,2754,34,"driverName"],[2497,46,2754,44],[2497,47,2754,45],[2497,48,2754,46,"then"],[2497,52,2754,50],[2497,53,2754,51],[2497,63,2754,61,"driver"],[2497,69,2754,67],[2497,71,2754,69],[2498,16,2755,16,"self"],[2498,20,2755,20],[2498,21,2755,21,"_driver"],[2498,28,2755,28],[2498,31,2755,31,"driver"],[2498,37,2755,37],[2498,38,2755,38,"_driver"],[2498,45,2755,45],[2499,16,2756,16,"setDriverToConfig"],[2499,33,2756,33],[2499,34,2756,34],[2499,35,2756,35],[2500,16,2757,16,"self"],[2500,20,2757,20],[2500,21,2757,21,"_wrapLibraryMethodsWithReady"],[2500,49,2757,49],[2500,50,2757,50],[2500,51,2757,51],[2501,16,2758,16,"self"],[2501,20,2758,20],[2501,21,2758,21,"_initDriver"],[2501,32,2758,32],[2501,35,2758,35,"initDriver"],[2501,45,2758,45],[2501,46,2758,46,"supportedDrivers"],[2501,62,2758,62],[2501,63,2758,63],[2502,14,2759,12],[2502,15,2759,13],[2502,16,2759,14],[2503,12,2760,8],[2503,13,2760,9],[2503,14,2760,10],[2503,15,2760,11],[2503,22,2760,18],[2503,23,2760,19],[2503,24,2760,20],[2503,36,2760,32],[2504,14,2761,12,"setDriverToConfig"],[2504,31,2761,29],[2504,32,2761,30],[2504,33,2761,31],[2505,14,2762,12],[2505,18,2762,16,"error"],[2505,23,2762,21],[2505,26,2762,24],[2505,30,2762,28,"Error"],[2505,35,2762,33],[2505,36,2762,34],[2505,72,2762,70],[2505,73,2762,71],[2506,14,2763,12,"self"],[2506,18,2763,16],[2506,19,2763,17,"_driverSet"],[2506,29,2763,27],[2506,32,2763,30,"Promise$1"],[2506,41,2763,39],[2506,42,2763,40,"reject"],[2506,48,2763,46],[2506,49,2763,47,"error"],[2506,54,2763,52],[2506,55,2763,53],[2507,14,2764,12],[2507,21,2764,19,"self"],[2507,25,2764,23],[2507,26,2764,24,"_driverSet"],[2507,36,2764,34],[2508,12,2765,8],[2508,13,2765,9],[2508,14,2765,10],[2509,12,2767,8,"executeTwoCallbacks"],[2509,31,2767,27],[2509,32,2767,28],[2509,36,2767,32],[2509,37,2767,33,"_driverSet"],[2509,47,2767,43],[2509,49,2767,45,"callback"],[2509,57,2767,53],[2509,59,2767,55,"errorCallback"],[2509,72,2767,68],[2509,73,2767,69],[2510,12,2768,8],[2510,19,2768,15],[2510,23,2768,19],[2510,24,2768,20,"_driverSet"],[2510,34,2768,30],[2511,10,2769,4],[2511,11,2769,5],[2512,10,2771,4,"LocalForage"],[2512,21,2771,15],[2512,22,2771,16,"prototype"],[2512,31,2771,25],[2512,32,2771,26,"supports"],[2512,40,2771,34],[2512,43,2771,37],[2512,52,2771,46,"supports"],[2512,60,2771,54,"supports"],[2512,61,2771,55,"driverName"],[2512,71,2771,65],[2512,73,2771,67],[2513,12,2772,8],[2513,19,2772,15],[2513,20,2772,16],[2513,21,2772,17,"DriverSupport"],[2513,34,2772,30],[2513,35,2772,31,"driverName"],[2513,45,2772,41],[2513,46,2772,42],[2514,10,2773,4],[2514,11,2773,5],[2515,10,2775,4,"LocalForage"],[2515,21,2775,15],[2515,22,2775,16,"prototype"],[2515,31,2775,25],[2515,32,2775,26,"_extend"],[2515,39,2775,33],[2515,42,2775,36],[2515,51,2775,45,"_extend"],[2515,58,2775,52,"_extend"],[2515,59,2775,53,"libraryMethodsAndProperties"],[2515,86,2775,80],[2515,88,2775,82],[2516,12,2776,8,"extend"],[2516,18,2776,14],[2516,19,2776,15],[2516,23,2776,19],[2516,25,2776,21,"libraryMethodsAndProperties"],[2516,52,2776,48],[2516,53,2776,49],[2517,10,2777,4],[2517,11,2777,5],[2518,10,2779,4,"LocalForage"],[2518,21,2779,15],[2518,22,2779,16,"prototype"],[2518,31,2779,25],[2518,32,2779,26,"_getSupportedDrivers"],[2518,52,2779,46],[2518,55,2779,49],[2518,64,2779,58,"_getSupportedDrivers"],[2518,84,2779,78,"_getSupportedDrivers"],[2518,85,2779,79,"drivers"],[2518,92,2779,86],[2518,94,2779,88],[2519,12,2780,8],[2519,16,2780,12,"supportedDrivers"],[2519,32,2780,28],[2519,35,2780,31],[2519,37,2780,33],[2520,12,2781,8],[2520,17,2781,13],[2520,21,2781,17,"i"],[2520,22,2781,18],[2520,25,2781,21],[2520,26,2781,22],[2520,28,2781,24,"len"],[2520,31,2781,27],[2520,34,2781,30,"drivers"],[2520,41,2781,37],[2520,42,2781,38,"length"],[2520,48,2781,44],[2520,50,2781,46,"i"],[2520,51,2781,47],[2520,54,2781,50,"len"],[2520,57,2781,53],[2520,59,2781,55,"i"],[2520,60,2781,56],[2520,62,2781,58],[2520,64,2781,60],[2521,14,2782,12],[2521,18,2782,16,"driverName"],[2521,28,2782,26],[2521,31,2782,29,"drivers"],[2521,38,2782,36],[2521,39,2782,37,"i"],[2521,40,2782,38],[2521,41,2782,39],[2522,14,2783,12],[2522,18,2783,16],[2522,22,2783,20],[2522,23,2783,21,"supports"],[2522,31,2783,29],[2522,32,2783,30,"driverName"],[2522,42,2783,40],[2522,43,2783,41],[2522,45,2783,43],[2523,16,2784,16,"supportedDrivers"],[2523,32,2784,32],[2523,33,2784,33,"push"],[2523,37,2784,37],[2523,38,2784,38,"driverName"],[2523,48,2784,48],[2523,49,2784,49],[2524,14,2785,12],[2525,12,2786,8],[2526,12,2787,8],[2526,19,2787,15,"supportedDrivers"],[2526,35,2787,31],[2527,10,2788,4],[2527,11,2788,5],[2528,10,2790,4,"LocalForage"],[2528,21,2790,15],[2528,22,2790,16,"prototype"],[2528,31,2790,25],[2528,32,2790,26,"_wrapLibraryMethodsWithReady"],[2528,60,2790,54],[2528,63,2790,57],[2528,72,2790,66,"_wrapLibraryMethodsWithReady"],[2528,100,2790,94,"_wrapLibraryMethodsWithReady"],[2528,101,2790,94],[2528,103,2790,97],[2529,12,2791,8],[2530,12,2792,8],[2531,12,2793,8],[2532,12,2794,8],[2533,12,2795,8],[2533,17,2795,13],[2533,21,2795,17,"i"],[2533,22,2795,18],[2533,25,2795,21],[2533,26,2795,22],[2533,28,2795,24,"len"],[2533,31,2795,27],[2533,34,2795,30,"LibraryMethods"],[2533,48,2795,44],[2533,49,2795,45,"length"],[2533,55,2795,51],[2533,57,2795,53,"i"],[2533,58,2795,54],[2533,61,2795,57,"len"],[2533,64,2795,60],[2533,66,2795,62,"i"],[2533,67,2795,63],[2533,69,2795,65],[2533,71,2795,67],[2534,14,2796,12,"callWhenReady"],[2534,27,2796,25],[2534,28,2796,26],[2534,32,2796,30],[2534,34,2796,32,"LibraryMethods"],[2534,48,2796,46],[2534,49,2796,47,"i"],[2534,50,2796,48],[2534,51,2796,49],[2534,52,2796,50],[2535,12,2797,8],[2536,10,2798,4],[2536,11,2798,5],[2537,10,2800,4,"LocalForage"],[2537,21,2800,15],[2537,22,2800,16,"prototype"],[2537,31,2800,25],[2537,32,2800,26,"createInstance"],[2537,46,2800,40],[2537,49,2800,43],[2537,58,2800,52,"createInstance"],[2537,72,2800,66,"createInstance"],[2537,73,2800,67,"options"],[2537,80,2800,74],[2537,82,2800,76],[2538,12,2801,8],[2538,19,2801,15],[2538,23,2801,19,"LocalForage"],[2538,34,2801,30],[2538,35,2801,31,"options"],[2538,42,2801,38],[2538,43,2801,39],[2539,10,2802,4],[2539,11,2802,5],[2540,10,2804,4],[2540,17,2804,11,"LocalForage"],[2540,28,2804,22],[2541,8,2805,0],[2541,9,2805,1],[2541,10,2805,2],[2541,11,2805,3],[2543,8,2807,0],[2544,8,2808,0],[2546,8,2811,0],[2546,12,2811,4,"localforage_js"],[2546,26,2811,18],[2546,29,2811,21],[2546,33,2811,25,"LocalForage"],[2546,44,2811,36],[2546,45,2811,37],[2546,46,2811,38],[2547,8,2813,0,"module"],[2547,14,2813,6],[2547,15,2813,7,"exports"],[2547,22,2813,14],[2547,25,2813,17,"localforage_js"],[2547,39,2813,31],[2548,6,2815,0],[2548,7,2815,1],[2548,9,2815,2],[2549,8,2815,3],[2549,11,2815,6],[2549,13,2815,7],[2550,6,2815,8],[2550,7,2815,9],[2551,4,2815,10],[2551,5,2815,11],[2551,7,2815,12],[2551,8,2815,13],[2551,9,2815,14],[2551,11,2815,15],[2551,12,2815,16],[2551,13,2815,17],[2551,14,2815,18],[2551,15,2815,19],[2551,16,2815,20],[2551,17,2815,21],[2551,18,2815,22],[2552,2,2816,0],[2552,3,2816,1],[2552,4,2816,2],[2553,0,2816,3],[2553,3]],"functionMap":{"names":["<global>","<anonymous>","e","s","t.o._.call$argument_1","scheduleDrain","scriptEl.onreadystatechange","nextTick","immediate","INTERNAL","Promise","Promise.prototype._catch","Promise.prototype.then","QueueItem","QueueItem.prototype.callFulfilled","QueueItem.prototype.otherCallFulfilled","QueueItem.prototype.callRejected","QueueItem.prototype.otherCallRejected","unwrap","immediate$argument_0","handlers.resolve","handlers.reject","getThen","appyThen","safelyResolveThenable","onError","onSuccess","tryToUnwrap","tryCatch","resolve","reject","all","allResolver","self.resolve.then$argument_1","resolveFromAll","race","resolver","self.resolve.then$argument_0","_classCallCheck","getIDB","isIndexedDBValid","createBlob","executeCallback","promise.then$argument_0","promise.then$argument_1","executeTwoCallbacks","normalizeKey","getCallback","_binStringToArrayBuffer","_checkBlobSupportWithoutCaching","Promise$1$argument_0","txn.onabort","txn.oncomplete","Promise$1._catch$argument_0","_checkBlobSupport","_checkBlobSupportWithoutCaching.then$argument_0","_deferReadiness","dbContext.dbReady.then$argument_0","_advanceReadiness","_rejectReadiness","_getConnection","openreq.onupgradeneeded","openreq.onerror","openreq.onsuccess","db.onversionchange","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","_encodeBlob","reader.onloadend","_decodeBlob","_isEncodedBlob","_fullyReady","self._initReady.then$argument_0","_tryReconnect","_getOriginalConnection.then$argument_0","_getOriginalConnection.then.then$argument_0","_getOriginalConnection.then.then._catch$argument_0","createTransaction","Promise$1.resolve.then$argument_0","Promise$1.resolve.then.then$argument_0","_tryReconnect.then$argument_0","createDbContext","_initStorage","ignoreErrors","Promise$1.all.then$argument_0","Promise$1.all.then.then$argument_0","Promise$1.all.then.then.then$argument_0","getItem","self.ready.then$argument_0","createTransaction$argument_2","req.onsuccess","req.onerror","iterate","setItem","_checkBlobSupport.then$argument_0","self.ready.then.then$argument_0","transaction.oncomplete","transaction.onerror","removeItem","transaction.onabort","clear","length","key","keys","dropInstance","dbPromise.then$argument_0","req.onblocked","dropDBPromise.then$argument_0","dropDBPromise.then._catch$argument_0","_catch$argument_0","req.onupgradeneeded","dropObjectPromise.then$argument_0","dropObjectPromise.then._catch$argument_0","isWebSQLValid","stringToBuffer","bufferToString","serialize","fileReader.onload","deserialize","createDbTable","_initStorage$1","dbInfo.db.transaction$argument_0","createDbTable$argument_2","createDbTable$argument_3","tryExecuteSql","t.executeSql$argument_3","t.executeSql$argument_2","getItem$1","tryExecuteSql$argument_4","tryExecuteSql$argument_5","iterate$1","_setItem","dbInfo.serializer.serialize$argument_1","dbInfo.db.transaction$argument_1","setItem$1","removeItem$1","clear$1","length$1","key$1","keys$1","getAllStoreNames","db.transaction$argument_0","db.transaction$argument_1","dropInstance$1","Promise$1.then$argument_0","operationInfo.db.transaction$argument_0","dropTable","Promise$1.all.then._catch$argument_0","operationInfo.db.transaction$argument_1","isLocalStorageValid","_getKeyPrefix","checkIfLocalStorageThrows","_isLocalStorageUsable","_initStorage$2","clear$2","getItem$2","iterate$2","key$2","keys$2","length$2","self.keys.then$argument_0","removeItem$2","setItem$2","dropInstance$2","sameValue","includes","callWhenReady","localForageInstance.libraryMethod","localForageInstance.ready.then$argument_0","extend","LocalForage","setDriver._catch$argument_0","config","defineDriver","configureMissingMethods","methodNotImplementedFactory","setDriverSupport","driver","getDriver","getSerializer","ready","self._driverSet.then$argument_0","setDriver","setDriverToConfig","extendSelfWithDriver","initDriver","driverPromiseLoop","_driverSet._catch$argument_0","oldDriverSetDone.then$argument_0","self.getDriver.then$argument_0","oldDriverSetDone.then._catch$argument_0","supports","_extend","_getSupportedDrivers","_wrapLibraryMethodsWithReady","createInstance"],"mappings":"AAA;CCM,oUD,EC,6CC,kBC,4PC,6CD,0CD,sFD;oBIe;KJE;oBII;KJE;oBIE;oCCK;ODM;KJE;oBIE;KJE;AMO;CNc;AOG;CPI;AQQ,sBR;ASU;CTU;6BUE;CVE;yBWC;CXc;AYC;CZU;oCaC;CbE;yCcC;CdE;mCeC;CfE;wCgBC;ChBE;AiBE;YCC;GDY;CjBC;mBmBE;CnBmB;kBoBC;CpBS;AqBE;WCI;KDE;CrBE;AuBE;ECG;GDM;EEE;GFM;EGE;GHE;CvBM;A2BE;C3BU;A4BG;C5BK;A6BG;C7BG;A8BG;ECqB;6CCC;KDK;IEC;KFM;GDC;C9BC;AkCG;ECmB;6BCC;KDK,EH;KGK;GDC;ClCC;AqCe,yJrC;AsCE;CtCqB;AuCI;CvC8B;AwCQ;CxCiB;AyCW;qBCE;SDE,EE;SFE;CzCE;A4CE;C5CQ;A6CE;C7CQ;A8CE;C9CI;A+CmB;C/CQ;AgDiB;yBCC;sBCK;SDM;yBEE;SFM;KDC,WI;KJE;ChDC;AqDE;qDCI;KDG;CrDC;AuDE;8CNM;KMG;mDCS;SDE;CvDE;AyDE;CzDY;A0DE;C1DY;A2DE;yBVC;sCWqB;aXe;0BYG;SZG;4BaE;iCCE;aDO;SbG;KUC;C3DC;AgEE;ChEE;AiEE;CjEE;AkEE;ClEkC;AmEG;yBlBC;2BmBG;SnBO;KkBE;CnEC;AqEG;CrEG;AsEG;CtEE;AuEM;yCCG;KDM;CvEI;AyEK;+CCe;KDO,OE;KFO,WG;KHG;CzEC;A6EI;4CCU;aDS,OE;kDCC;iBDE;aFC;C7EK;AiFE;CjFW;AkFI;ICkC;KDI;4CEe;KFI,OG;KHO,OI;KJY;ClFC;AuFE;gCtCK;0BuCC;uDCC;oCCS;qBDS;kCEE;qBFE;aDI;SvCC;KsCC;CvFI;A4FG;gC3CG;0BuCC;uDCC;oCCU;qBDqB;kCEE;qBFE;aDI;SvCC;K2CC;C5FK;A6FE;gC5CK;0BuCE;yDMG;iBNK;SvCG,O8C;wDNC;6COkB;qBPY;gEQC;qBRG;aMI;S9CC;K4CC;C7FI;AkGE;gCjDK;0BuCC;wDCC;6COa;qBPE;0CQE;qBRE;0CUI;qBVG;aDI;SvCC;KiDC;ClGI;AoGE;gCnDG;0BuCC;wDCC;6COS;qBPE;gEQE;qBRG;aDI;SvCC;KmDC;CpGI;AqGE;gCpDG;0BuCC;uDCC;oCCS;qBDE;kCEE;qBFE;aDI;SvCC;KoDC;CrGI;AsGE;gCrDG;0BuCO;uDCC;oCCU;qBDwB;kCEE;qBFE;aDI;SvCC;KqDC;CtGI;AuGE;gCtDG;0BuCC;uDCC;oCCU;qBDU;kCEE;qBFE;aDI;SvCC;KsDC;CvGI;AwGE;gH9BiB;S8BQ;qCCG;kDxDY;kC0CG;qB1CM;oCyDE;qBzDI;oCyCE;qBzCM;iBwDC;0CEE;iBFM,WG;qFCC,cD;iBHE;aDC;qCCE;sDxDmB;kC0CG;qB1CI;0C6DE;qB7DG;oCyCE;qBzCI;iBwDC;8CME;iBNO,WO;qFHC,cG;iBPE;aDC;CxGM;AiHiB;CjHE;AkH6B;ClH8B;AmHI;CnHqB;AoHK;4BCkD;SDK;CpHY;AsHU;CtHoD;AuHmB;CvHE;AwHI;sCvEY;8BwEU;qCCC;aDG,EE;aFE;SxEC;KuEC;CxHI;A4HE;+CCC;oHCE;6CJI;qBIE;aDI;KDI;C5HC;A+HE;gC9EK;0BuCC;kCiCE;gHOC;iBPU,EQ;iBRE;ajCC;SvCC;K8EC;C/HI;AkIE;gCjFG;0BuCC;kCiCG;kFOC;iBPyB,EQ;iBRE;ajCC;SvCC;KiFC;ClII;AmIE;gClFK;0BuCC;+C4CY;0CXI;kJOC;yBPE,EQ;yBRE;qBWC,EC;qBDiB;a5CE;SvCC;KkFC;CnII;AsIE;CtIE;AuIE;gCtFK;0BuCC;kCiCE;sGOC;iBPE,EQ;iBRE;ajCC;SvCC;KsFC;CvII;AwII;gCvFG;0BuCC;kCiCE;gFOC;iBPE,EQ;iBRE;ajCC;SvCC;KuFC;CxII;AyII;gCxFG;0BuCC;kCiCE;gGOE;iBPG,EQ;iBRE;ajCC;SvCC;KwFC;CzII;A0IS;gCzFG;0BuCC;kCiCE;mHOC;iBPG,EQ;iBRE;ajCC;SvCC;KyFC;C1II;A2IE;gC1FG;0BuCC;kCiCE;oFOC;iBPQ,EQ;iBRE;ajCC;SvCC;K0FC;C3II;A4II;yB3FC;uB4FC;iIfC;aeW,EhB;agBE;S5FC,E6F;S7FE;K2FC;C5IC;A+IE;gC9Fe;S8FkB,OC;iC/FC;6CgGC;oBCC;6CjGC;kF6EC;6B7EE,E4E;6B5EE;yBiGC;qBDC;mD7DO;qB6DE,WE;qBFE;iBhGC,EmG;iBnGE;a+FC;SDC;C/IK;AqJiB;CrJQ;AsJE;CtJO;AuJG;CvJW;AwJM;CxJE;AyJG;CzJmB;A0JI;oClEE;KkEU;C1JI;A2JK;oCnEK;KmEa;C3JI;A4JG;oCpEG;KoEmC;C5JI;A6JG;oCrEE;KqEe;C7JI;A8JE;oCtEE;KsEa;C9JI;A+JG;mCCE;KDE;C/JI;AiKG;oCzEK;KyEG;CjKI;AkKM;oC1EK;6BvCU;+CmFE;anFgB;SuCC;K0EC;ClKI;AmKE;gClHe;SkHM,OnB;SmBQ;CnKK;gBoKiB;CpKE;eqKE;CrKW;AsKmC;yCCC;gDCE;SDE;KDC;CtKC;AyKE;CzKkB;I0KG;qDC0B,cD;K1KC;mC4KQ;K5KmC;yC6KM;oC5HC;8C6HyB;sDCC;+B/KC;yB+KK;qBDC;iB7HQ;uC+HI;iB/HU;S4Hc;K7KI;mCiLE;KjLE;sCkLE;KlLK;0CmLE;KnLI;kCoLE;2CCG;SDM;KpLI;sCsLE;QCS;SDE;QEE;SFM;QGE;mBzLC;gB0LG;iB1Le;ayLG;SHC;mFKK;SLE;gDME;mDCK;aDK;SNC,WQ;SRK;KtLI;qC+LE;K/LE;oCgME;KhME;iDiME;KjMS;yDkME;KlMQ;2CmME;KnME;CDc"}},"type":"js/module"}]}