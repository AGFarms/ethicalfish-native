{"dependencies":[{"name":"@babel/runtime/helpers/readOnlyError","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1190,"column":39,"index":51873}}],"key":"sXvaNDymRtlPafiB+f0cuzg7sKM="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1190,"column":39,"index":51873}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1190,"column":39,"index":51873}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1190,"column":39,"index":51873}}],"key":"rcd0dMwf8BS2g+8U1wyhIOxtYEo="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1190,"column":39,"index":51873}}],"key":"4pxOr+e+5cSZAdeEKxSt3F7LoKY="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1190,"column":39,"index":51873}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"@babel/runtime/helpers/wrapNativeSuper","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1190,"column":39,"index":51873}}],"key":"klKI26kbg7KjCUWxfs8kiTBX2S8="}},{"name":"./curve.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":35,"column":19,"index":1673},"end":{"line":35,"column":40,"index":1694}}],"key":"7vgsfyRLXIYpJPcJK1Pu2glarN0="}},{"name":"./modular.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":36,"column":21,"index":1717},"end":{"line":36,"column":44,"index":1740}}],"key":"FrgRfTwrfMvrcBeFLlJz+0uWEvM="}},{"name":"./utils.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":37,"column":11,"index":1753},"end":{"line":37,"column":32,"index":1774}},{"start":{"line":38,"column":19,"index":1795},"end":{"line":38,"column":40,"index":1816}}],"key":"03VO7/E+L2S6CYQuFHTg8eKUrwk="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _readOnlyError = require(_dependencyMap[0], \"@babel/runtime/helpers/readOnlyError\");\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _classCallCheck = require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\");\n  var _possibleConstructorReturn = require(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\");\n  var _getPrototypeOf = require(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\");\n  var _inherits = require(_dependencyMap[5], \"@babel/runtime/helpers/inherits\");\n  var _wrapNativeSuper = require(_dependencyMap[6], \"@babel/runtime/helpers/wrapNativeSuper\");\n  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DER = exports.DERErr = void 0;\n  exports.weierstrassPoints = weierstrassPoints;\n  exports.weierstrass = weierstrass;\n  exports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n  exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n  /**\n   * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n   *\n   * ### Design rationale for types\n   *\n   * * Interaction between classes from different curves should fail:\n   *   `k256.Point.BASE.add(p256.Point.BASE)`\n   * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n   * * Different calls of `curve()` would return different classes -\n   *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n   *   it won't affect others\n   *\n   * TypeScript can't infer types for classes created inside a function. Classes is one instance\n   * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n   * unique type for every function call.\n   *\n   * We can use generic types via some param, like curve opts, but that would:\n   *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n   *     which is hard to debug.\n   *     2. Params can be generic and we can't enforce them to be constant value:\n   *     if somebody creates curve from non-constant params,\n   *     it would be allowed to interact with other curves with non-constant params\n   *\n   * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  var curve_js_1 = require(_dependencyMap[7], \"./curve.js\");\n  var modular_js_1 = require(_dependencyMap[8], \"./modular.js\");\n  var ut = require(_dependencyMap[9], \"./utils.js\");\n  var utils_js_1 = require(_dependencyMap[9], \"./utils.js\");\n  function validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined) (0, utils_js_1.abool)('lowS', opts.lowS);\n    if (opts.prehash !== undefined) (0, utils_js_1.abool)('prehash', opts.prehash);\n  }\n  function validatePointOpts(curve) {\n    var opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n      a: 'field',\n      b: 'field'\n    }, {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function'\n    });\n    var endo = opts.endo,\n      Fp = opts.Fp,\n      a = opts.a;\n    if (endo) {\n      if (!Fp.eql(a, Fp.ZERO)) {\n        throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n      }\n      if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n        throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n      }\n    }\n    return Object.freeze({\n      ...opts\n    });\n  }\n  var b2n = ut.bytesToNumberBE,\n    h2b = ut.hexToBytes;\n  var DERErr = /*#__PURE__*/function (_Error) {\n    function DERErr() {\n      var m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      _classCallCheck(this, DERErr);\n      return _callSuper(this, DERErr, [m]);\n    }\n    _inherits(DERErr, _Error);\n    return _createClass(DERErr);\n  }(/*#__PURE__*/_wrapNativeSuper(Error));\n  exports.DERErr = DERErr;\n  /**\n   * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n   *\n   *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n   *\n   * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n   */\n  exports.DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n      encode: (tag, data) => {\n        var E = exports.DER.Err;\n        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n        if (data.length & 1) throw new E('tlv.encode: unpadded data');\n        var dataLen = data.length / 2;\n        var len = ut.numberToHexUnpadded(dataLen);\n        if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big');\n        // length of length with long form flag\n        var lenLen = dataLen > 127 ? ut.numberToHexUnpadded(len.length / 2 | 128) : '';\n        var t = ut.numberToHexUnpadded(tag);\n        return t + lenLen + len + data;\n      },\n      // v - value, l - left bytes (unparsed)\n      decode(tag, data) {\n        var E = exports.DER.Err;\n        var pos = 0;\n        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n        if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n        var first = data[pos++];\n        var isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n        var length = 0;\n        if (!isLong) length = first;else {\n          // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n          var lenLen = first & 127;\n          if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n          if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n          var lengthBytes = data.subarray(pos, pos + lenLen);\n          if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n          if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n          for (var b of lengthBytes) length = length << 8 | b;\n          pos += lenLen;\n          if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n        }\n        var v = data.subarray(pos, pos + length);\n        if (v.length !== length) throw new E('tlv.decode: wrong value length');\n        return {\n          v,\n          l: data.subarray(pos + length)\n        };\n      }\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n      encode(num) {\n        var E = exports.DER.Err;\n        if (num < _0n) throw new E('integer: negative integers are not allowed');\n        var hex = ut.numberToHexUnpadded(num);\n        // Pad with zero byte if negative flag is present\n        if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n        if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n        return hex;\n      },\n      decode(data) {\n        var E = exports.DER.Err;\n        if (data[0] & 128) throw new E('invalid signature integer: negative');\n        if (data[0] === 0x00 && !(data[1] & 128)) throw new E('invalid signature integer: unnecessary leading zero');\n        return b2n(data);\n      }\n    },\n    toSig(hex) {\n      // parse DER signature\n      var _exports$DER = exports.DER,\n        E = _exports$DER.Err,\n        int = _exports$DER._int,\n        tlv = _exports$DER._tlv;\n      var data = typeof hex === 'string' ? h2b(hex) : hex;\n      ut.abytes(data);\n      var _tlv$decode = tlv.decode(0x30, data),\n        seqBytes = _tlv$decode.v,\n        seqLeftBytes = _tlv$decode.l;\n      if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n      var _tlv$decode2 = tlv.decode(0x02, seqBytes),\n        rBytes = _tlv$decode2.v,\n        rLeftBytes = _tlv$decode2.l;\n      var _tlv$decode3 = tlv.decode(0x02, rLeftBytes),\n        sBytes = _tlv$decode3.v,\n        sLeftBytes = _tlv$decode3.l;\n      if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n      return {\n        r: int.decode(rBytes),\n        s: int.decode(sBytes)\n      };\n    },\n    hexFromSig(sig) {\n      var _exports$DER2 = exports.DER,\n        tlv = _exports$DER2._tlv,\n        int = _exports$DER2._int;\n      var rs = tlv.encode(0x02, int.encode(sig.r));\n      var ss = tlv.encode(0x02, int.encode(sig.s));\n      var seq = rs + ss;\n      return tlv.encode(0x30, seq);\n    }\n  };\n  // Be friendly to bad ECMAScript parsers by not using bigint literals\n  // prettier-ignore\n  var _0n = BigInt(0),\n    _1n = BigInt(1),\n    _2n = BigInt(2),\n    _3n = BigInt(3),\n    _4n = BigInt(4);\n  function weierstrassPoints(opts) {\n    var CURVE = validatePointOpts(opts);\n    var Fp = CURVE.Fp; // All curves has same field / group length as for now, but they can differ\n    var Fn = (0, modular_js_1.Field)(CURVE.n, CURVE.nBitLength);\n    var toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {\n      var a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n    var fromBytes = CURVE.fromBytes || (bytes => {\n      // const head = bytes[0];\n      var tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      var x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      var y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return {\n        x,\n        y\n      };\n    });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n      var a = CURVE.a,\n        b = CURVE.b;\n      var x2 = Fp.sqr(x); // x * x\n      var x3 = Fp.mul(x2, x); // x2 * x\n      return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n      return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n      var lengths = CURVE.allowedPrivateKeyLengths,\n        nByteLength = CURVE.nByteLength,\n        wrapPrivateKey = CURVE.wrapPrivateKey,\n        N = CURVE.n;\n      if (lengths && typeof key !== 'bigint') {\n        if (ut.isBytes(key)) key = ut.bytesToHex(key);\n        // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n        if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('invalid private key');\n        key = key.padStart(nByteLength * 2, '0');\n      }\n      var num;\n      try {\n        num = typeof key === 'bigint' ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));\n      } catch (error) {\n        throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n      }\n      if (wrapPrivateKey) num = (0, modular_js_1.mod)(num, N); // disabled by default, enabled for BLS\n      ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n      return num;\n    }\n    function assertPrjPoint(other) {\n      if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    var toAffineMemo = (0, utils_js_1.memoized)((p, iz) => {\n      var x = p.px,\n        y = p.py,\n        z = p.pz;\n      // Fast-path for normalized points\n      if (Fp.eql(z, Fp.ONE)) return {\n        x,\n        y\n      };\n      var is0 = p.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      var ax = Fp.mul(x, iz);\n      var ay = Fp.mul(y, iz);\n      var zz = Fp.mul(z, iz);\n      if (is0) return {\n        x: Fp.ZERO,\n        y: Fp.ZERO\n      };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return {\n        x: ax,\n        y: ay\n      };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    var assertValidMemo = (0, utils_js_1.memoized)(p => {\n      if (p.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is invalid representation of ZERO.\n        if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      var _p$toAffine = p.toAffine(),\n        x = _p$toAffine.x,\n        y = _p$toAffine.y;\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      var left = Fp.sqr(y); // y²\n      var right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n      return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    var Point = /*#__PURE__*/function () {\n      function Point(px, py, pz) {\n        _classCallCheck(this, Point);\n        this.px = px;\n        this.py = py;\n        this.pz = pz;\n        if (px == null || !Fp.isValid(px)) throw new Error('x required');\n        if (py == null || !Fp.isValid(py)) throw new Error('y required');\n        if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n        Object.freeze(this);\n      }\n      // Does not validate if the point is on-curve.\n      // Use fromHex instead, or call assertValidity() later.\n      return _createClass(Point, [{\n        key: \"x\",\n        get: function () {\n          return this.toAffine().x;\n        }\n      }, {\n        key: \"y\",\n        get: function () {\n          return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n      }, {\n        key: \"_setWindowSize\",\n        value:\n        // \"Private method\", don't use it directly\n        function _setWindowSize(windowSize) {\n          wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n      }, {\n        key: \"assertValidity\",\n        value: function assertValidity() {\n          assertValidMemo(this);\n        }\n      }, {\n        key: \"hasEvenY\",\n        value: function hasEvenY() {\n          var _this$toAffine = this.toAffine(),\n            y = _this$toAffine.y;\n          if (Fp.isOdd) return !Fp.isOdd(y);\n          throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n      }, {\n        key: \"equals\",\n        value: function equals(other) {\n          assertPrjPoint(other);\n          var X1 = this.px,\n            Y1 = this.py,\n            Z1 = this.pz;\n          var X2 = other.px,\n            Y2 = other.py,\n            Z2 = other.pz;\n          var U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n          var U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n          return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n      }, {\n        key: \"negate\",\n        value: function negate() {\n          return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n      }, {\n        key: \"double\",\n        value: function double() {\n          var a = CURVE.a,\n            b = CURVE.b;\n          var b3 = Fp.mul(b, _3n);\n          var X1 = this.px,\n            Y1 = this.py,\n            Z1 = this.pz;\n          var X3 = Fp.ZERO,\n            Y3 = Fp.ZERO,\n            Z3 = Fp.ZERO; // prettier-ignore\n          var t0 = Fp.mul(X1, X1); // step 1\n          var t1 = Fp.mul(Y1, Y1);\n          var t2 = Fp.mul(Z1, Z1);\n          var t3 = Fp.mul(X1, Y1);\n          t3 = Fp.add(t3, t3); // step 5\n          Z3 = Fp.mul(X1, Z1);\n          Z3 = Fp.add(Z3, Z3);\n          X3 = Fp.mul(a, Z3);\n          Y3 = Fp.mul(b3, t2);\n          Y3 = Fp.add(X3, Y3); // step 10\n          X3 = Fp.sub(t1, Y3);\n          Y3 = Fp.add(t1, Y3);\n          Y3 = Fp.mul(X3, Y3);\n          X3 = Fp.mul(t3, X3);\n          Z3 = Fp.mul(b3, Z3); // step 15\n          t2 = Fp.mul(a, t2);\n          t3 = Fp.sub(t0, t2);\n          t3 = Fp.mul(a, t3);\n          t3 = Fp.add(t3, Z3);\n          Z3 = Fp.add(t0, t0); // step 20\n          t0 = Fp.add(Z3, t0);\n          t0 = Fp.add(t0, t2);\n          t0 = Fp.mul(t0, t3);\n          Y3 = Fp.add(Y3, t0);\n          t2 = Fp.mul(Y1, Z1); // step 25\n          t2 = Fp.add(t2, t2);\n          t0 = Fp.mul(t2, t3);\n          X3 = Fp.sub(X3, t0);\n          Z3 = Fp.mul(t2, t1);\n          Z3 = Fp.add(Z3, Z3); // step 30\n          Z3 = Fp.add(Z3, Z3);\n          return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n      }, {\n        key: \"add\",\n        value: function add(other) {\n          assertPrjPoint(other);\n          var X1 = this.px,\n            Y1 = this.py,\n            Z1 = this.pz;\n          var X2 = other.px,\n            Y2 = other.py,\n            Z2 = other.pz;\n          var X3 = Fp.ZERO,\n            Y3 = Fp.ZERO,\n            Z3 = Fp.ZERO; // prettier-ignore\n          var a = CURVE.a;\n          var b3 = Fp.mul(CURVE.b, _3n);\n          var t0 = Fp.mul(X1, X2); // step 1\n          var t1 = Fp.mul(Y1, Y2);\n          var t2 = Fp.mul(Z1, Z2);\n          var t3 = Fp.add(X1, Y1);\n          var t4 = Fp.add(X2, Y2); // step 5\n          t3 = Fp.mul(t3, t4);\n          t4 = Fp.add(t0, t1);\n          t3 = Fp.sub(t3, t4);\n          t4 = Fp.add(X1, Z1);\n          var t5 = Fp.add(X2, Z2); // step 10\n          t4 = Fp.mul(t4, t5);\n          t5 = Fp.add(t0, t2);\n          t4 = Fp.sub(t4, t5);\n          t5 = Fp.add(Y1, Z1);\n          X3 = Fp.add(Y2, Z2); // step 15\n          t5 = Fp.mul(t5, X3);\n          X3 = Fp.add(t1, t2);\n          t5 = Fp.sub(t5, X3);\n          Z3 = Fp.mul(a, t4);\n          X3 = Fp.mul(b3, t2); // step 20\n          Z3 = Fp.add(X3, Z3);\n          X3 = Fp.sub(t1, Z3);\n          Z3 = Fp.add(t1, Z3);\n          Y3 = Fp.mul(X3, Z3);\n          t1 = Fp.add(t0, t0); // step 25\n          t1 = Fp.add(t1, t0);\n          t2 = Fp.mul(a, t2);\n          t4 = Fp.mul(b3, t4);\n          t1 = Fp.add(t1, t2);\n          t2 = Fp.sub(t0, t2); // step 30\n          t2 = Fp.mul(a, t2);\n          t4 = Fp.add(t4, t2);\n          t0 = Fp.mul(t1, t4);\n          Y3 = Fp.add(Y3, t0);\n          t0 = Fp.mul(t5, t4); // step 35\n          X3 = Fp.mul(t3, X3);\n          X3 = Fp.sub(X3, t0);\n          t0 = Fp.mul(t3, t1);\n          Z3 = Fp.mul(t5, Z3);\n          Z3 = Fp.add(Z3, t0); // step 40\n          return new Point(X3, Y3, Z3);\n        }\n      }, {\n        key: \"subtract\",\n        value: function subtract(other) {\n          return this.add(other.negate());\n        }\n      }, {\n        key: \"is0\",\n        value: function is0() {\n          return this.equals(Point.ZERO);\n        }\n      }, {\n        key: \"wNAF\",\n        value: function wNAF(n) {\n          return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n      }, {\n        key: \"multiplyUnsafe\",\n        value: function multiplyUnsafe(sc) {\n          var endo = CURVE.endo,\n            N = CURVE.n;\n          ut.aInRange('scalar', sc, _0n, N);\n          var I = Point.ZERO;\n          if (sc === _0n) return I;\n          if (this.is0() || sc === _1n) return this;\n          // Case a: no endomorphism. Case b: has precomputes.\n          if (!endo || wnaf.hasPrecomputes(this)) return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n          // Case c: endomorphism\n          var _endo$splitScalar = endo.splitScalar(sc),\n            k1neg = _endo$splitScalar.k1neg,\n            k1 = _endo$splitScalar.k1,\n            k2neg = _endo$splitScalar.k2neg,\n            k2 = _endo$splitScalar.k2;\n          var k1p = I;\n          var k2p = I;\n          var d = this;\n          while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n) k1p = k1p.add(d);\n            if (k2 & _1n) k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n          }\n          if (k1neg) k1p = k1p.negate();\n          if (k2neg) k2p = k2p.negate();\n          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n          return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n      }, {\n        key: \"multiply\",\n        value: function multiply(scalar) {\n          var endo = CURVE.endo,\n            N = CURVE.n;\n          ut.aInRange('scalar', scalar, _1n, N);\n          var point, fake; // Fake point is used to const-time mult\n          if (endo) {\n            var _endo$splitScalar2 = endo.splitScalar(scalar),\n              k1neg = _endo$splitScalar2.k1neg,\n              k1 = _endo$splitScalar2.k1,\n              k2neg = _endo$splitScalar2.k2neg,\n              k2 = _endo$splitScalar2.k2;\n            var _this$wNAF = this.wNAF(k1),\n              k1p = _this$wNAF.p,\n              f1p = _this$wNAF.f;\n            var _this$wNAF2 = this.wNAF(k2),\n              k2p = _this$wNAF2.p,\n              f2p = _this$wNAF2.f;\n            k1p = wnaf.constTimeNegate(k1neg, k1p);\n            k2p = wnaf.constTimeNegate(k2neg, k2p);\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n          } else {\n            var _this$wNAF3 = this.wNAF(scalar),\n              p = _this$wNAF3.p,\n              f = _this$wNAF3.f;\n            point = p;\n            fake = f;\n          }\n          // Normalize `z` for both points, but return only real one\n          return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n      }, {\n        key: \"multiplyAndAddUnsafe\",\n        value: function multiplyAndAddUnsafe(Q, a, b) {\n          var G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n          var mul = (P, a // Select faster multiply() method\n          ) => a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n          var sum = mul(this, a).add(mul(Q, b));\n          return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n      }, {\n        key: \"toAffine\",\n        value: function toAffine(iz) {\n          return toAffineMemo(this, iz);\n        }\n      }, {\n        key: \"isTorsionFree\",\n        value: function isTorsionFree() {\n          var cofactor = CURVE.h,\n            isTorsionFree = CURVE.isTorsionFree;\n          if (cofactor === _1n) return true; // No subgroups, always torsion-free\n          if (isTorsionFree) return isTorsionFree(Point, this);\n          throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n      }, {\n        key: \"clearCofactor\",\n        value: function clearCofactor() {\n          var cofactor = CURVE.h,\n            clearCofactor = CURVE.clearCofactor;\n          if (cofactor === _1n) return this; // Fast-path\n          if (clearCofactor) return clearCofactor(Point, this);\n          return this.multiplyUnsafe(CURVE.h);\n        }\n      }, {\n        key: \"toRawBytes\",\n        value: function toRawBytes() {\n          var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n          (0, utils_js_1.abool)('isCompressed', isCompressed);\n          this.assertValidity();\n          return toBytes(Point, this, isCompressed);\n        }\n      }, {\n        key: \"toHex\",\n        value: function toHex() {\n          var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n          (0, utils_js_1.abool)('isCompressed', isCompressed);\n          return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n      }], [{\n        key: \"fromAffine\",\n        value: function fromAffine(p) {\n          var _ref = p || {},\n            x = _ref.x,\n            y = _ref.y;\n          if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n          if (p instanceof Point) throw new Error('projective point not allowed');\n          var is0 = i => Fp.eql(i, Fp.ZERO);\n          // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n          if (is0(x) && is0(y)) return Point.ZERO;\n          return new Point(x, y, Fp.ONE);\n        }\n      }, {\n        key: \"normalizeZ\",\n        value: function normalizeZ(points) {\n          var toInv = Fp.invertBatch(points.map(p => p.pz));\n          return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n      }, {\n        key: \"fromHex\",\n        value: function fromHex(hex) {\n          var P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));\n          P.assertValidity();\n          return P;\n        }\n        // Multiplies generator point by privateKey.\n      }, {\n        key: \"fromPrivateKey\",\n        value: function fromPrivateKey(privateKey) {\n          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n      }, {\n        key: \"msm\",\n        value: function msm(points, scalars) {\n          return (0, curve_js_1.pippenger)(Point, Fn, points, scalars);\n        }\n      }]);\n    }();\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    var _bits = CURVE.nBitLength;\n    var wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n      CURVE,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar,\n      weierstrassEquation,\n      isWithinCurveOrder\n    };\n  }\n  function validateOpts(curve) {\n    var opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function'\n    }, {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean'\n    });\n    return Object.freeze({\n      lowS: true,\n      ...opts\n    });\n  }\n  /**\n   * Creates short weierstrass curve and ECDSA signature methods for it.\n   * @example\n   * import { Field } from '@noble/curves/abstract/modular';\n   * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n   * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n   */\n  function weierstrass(curveDef) {\n    var CURVE = validateOpts(curveDef);\n    var Fp = CURVE.Fp,\n      CURVE_ORDER = CURVE.n;\n    var compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    var uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n      return (0, modular_js_1.mod)(a, CURVE_ORDER);\n    }\n    function invN(a) {\n      return (0, modular_js_1.invert)(a, CURVE_ORDER);\n    }\n    var _weierstrassPoints = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n          var a = point.toAffine();\n          var x = Fp.toBytes(a.x);\n          var cat = ut.concatBytes;\n          (0, utils_js_1.abool)('isCompressed', isCompressed);\n          if (isCompressed) {\n            return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n          } else {\n            return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n          }\n        },\n        fromBytes(bytes) {\n          var len = bytes.length;\n          var head = bytes[0];\n          var tail = bytes.subarray(1);\n          // this.assertValidity() is done inside of fromHex\n          if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n            var x = ut.bytesToNumberBE(tail);\n            if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n            var y2 = weierstrassEquation(x); // y² = x³ + ax + b\n            var y;\n            try {\n              y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n            } catch (sqrtError) {\n              var suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n              throw new Error('Point is not on curve' + suffix);\n            }\n            var isYOdd = (y & _1n) === _1n;\n            // ECDSA\n            var isHeadOdd = (head & 1) === 1;\n            if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n            return {\n              x,\n              y\n            };\n          } else if (len === uncompressedLen && head === 0x04) {\n            var _x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            var _y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return {\n              x: _x,\n              y: _y\n            };\n          } else {\n            var cl = compressedLen;\n            var ul = uncompressedLen;\n            throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n          }\n        }\n      }),\n      Point = _weierstrassPoints.ProjectivePoint,\n      normPrivateKeyToScalar = _weierstrassPoints.normPrivateKeyToScalar,\n      weierstrassEquation = _weierstrassPoints.weierstrassEquation,\n      isWithinCurveOrder = _weierstrassPoints.isWithinCurveOrder;\n    var numToNByteStr = num => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n      var HALF = CURVE_ORDER >> _1n;\n      return number > HALF;\n    }\n    function normalizeS(s) {\n      return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    var slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    var Signature = /*#__PURE__*/function () {\n      function Signature(r, s, recovery) {\n        _classCallCheck(this, Signature);\n        this.r = r;\n        this.s = s;\n        this.recovery = recovery;\n        this.assertValidity();\n      }\n      // pair (bytes of r, bytes of s)\n      return _createClass(Signature, [{\n        key: \"assertValidity\",\n        value: function assertValidity() {\n          ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n          ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n      }, {\n        key: \"addRecoveryBit\",\n        value: function addRecoveryBit(recovery) {\n          return new Signature(this.r, this.s, recovery);\n        }\n      }, {\n        key: \"recoverPublicKey\",\n        value: function recoverPublicKey(msgHash) {\n          var r = this.r,\n            s = this.s,\n            rec = this.recovery;\n          var h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n          if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n          var radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n          if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n          var prefix = (rec & 1) === 0 ? '02' : '03';\n          var R = Point.fromHex(prefix + numToNByteStr(radj));\n          var ir = invN(radj); // r^-1\n          var u1 = modN(-h * ir); // -hr^-1\n          var u2 = modN(s * ir); // sr^-1\n          var Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n          if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n          Q.assertValidity();\n          return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n      }, {\n        key: \"hasHighS\",\n        value: function hasHighS() {\n          return isBiggerThanHalfOrder(this.s);\n        }\n      }, {\n        key: \"normalizeS\",\n        value: function normalizeS() {\n          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n      }, {\n        key: \"toDERRawBytes\",\n        value: function toDERRawBytes() {\n          return ut.hexToBytes(this.toDERHex());\n        }\n      }, {\n        key: \"toDERHex\",\n        value: function toDERHex() {\n          return exports.DER.hexFromSig({\n            r: this.r,\n            s: this.s\n          });\n        }\n        // padded bytes of r, then padded bytes of s\n      }, {\n        key: \"toCompactRawBytes\",\n        value: function toCompactRawBytes() {\n          return ut.hexToBytes(this.toCompactHex());\n        }\n      }, {\n        key: \"toCompactHex\",\n        value: function toCompactHex() {\n          return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n      }], [{\n        key: \"fromCompact\",\n        value: function fromCompact(hex) {\n          var l = CURVE.nByteLength;\n          hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);\n          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n      }, {\n        key: \"fromDER\",\n        value: function fromDER(hex) {\n          var _exports$DER$toSig = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex)),\n            r = _exports$DER$toSig.r,\n            s = _exports$DER$toSig.s;\n          return new Signature(r, s);\n        }\n      }]);\n    }();\n    var utils = {\n      isValidPrivateKey(privateKey) {\n        try {\n          normPrivateKeyToScalar(privateKey);\n          return true;\n        } catch (error) {\n          return false;\n        }\n      },\n      normPrivateKeyToScalar: normPrivateKeyToScalar,\n      /**\n       * Produces cryptographically secure private key from random of size\n       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n       */\n      randomPrivateKey: () => {\n        var length = (0, modular_js_1.getMinHashLength)(CURVE.n);\n        return (0, modular_js_1.mapHashToField)(CURVE.randomBytes(length), CURVE.n);\n      },\n      /**\n       * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n       * Allows to massively speed-up `point.multiply(scalar)`.\n       * @returns cached point\n       * @example\n       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n       * fast.multiply(privKey); // much faster ECDH now\n       */\n      precompute() {\n        var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n        var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n        point._setWindowSize(windowSize);\n        point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n        return point;\n      }\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey) {\n      var isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n      var arr = ut.isBytes(item);\n      var str = typeof item === 'string';\n      var len = (arr || str) && item.length;\n      if (arr) return len === compressedLen || len === uncompressedLen;\n      if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n      if (item instanceof Point) return true;\n      return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB) {\n      var isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (isProbPub(privateA)) throw new Error('first arg must be private key');\n      if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n      var b = Point.fromHex(publicB); // check for being on-curve\n      return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    var bits2int = CURVE.bits2int || function (bytes) {\n      // Our custom check \"just in case\"\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      var num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      var delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    var bits2int_modN = CURVE.bits2int_modN || function (bytes) {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n    // NOTE: pads output with zero as per spec\n    var ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n      ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n      // works with order, can have different size than numToField!\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n      if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n      var hash = CURVE.hash,\n        randomBytes = CURVE.randomBytes;\n      var lowS = opts.lowS,\n        prehash = opts.prehash,\n        ent = opts.extraEntropy; // generates low-s sigs by default\n      if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n      msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n      validateSigVerOpts(opts);\n      if (prehash) msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n      // We can't later call bits2octets, since nested bits2int is broken for curves\n      // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n      // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n      var h1int = bits2int_modN(msgHash);\n      var d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n      var seedArgs = [int2octets(d), int2octets(h1int)];\n      // extraEntropy. RFC6979 3.6: additional k' (optional).\n      if (ent != null && ent !== false) {\n        // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n        var e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n        seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes\n      }\n      var seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n      var m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n      // Converts signature params into point w r/s, checks result for validity.\n      function k2sig(kBytes) {\n        // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n        var k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n        if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n        var ik = invN(k); // k^-1 mod n\n        var q = Point.BASE.multiply(k).toAffine(); // q = Gk\n        var r = modN(q.x); // r = q.x mod n\n        if (r === _0n) return;\n        // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n        // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n        // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n        var s = modN(ik * modN(m + r * d)); // Not using blinding here\n        if (s === _0n) return;\n        var recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n        var normS = s;\n        if (lowS && isBiggerThanHalfOrder(s)) {\n          normS = normalizeS(s); // if lowS was passed, ensure s is always\n          recovery ^= 1; // // in the bottom half of N\n        }\n        return new Signature(r, normS, recovery); // use normS, not s\n      }\n      return {\n        seed,\n        k2sig\n      };\n    }\n    var defaultSigOpts = {\n      lowS: CURVE.lowS,\n      prehash: false\n    };\n    var defaultVerOpts = {\n      lowS: CURVE.lowS,\n      prehash: false\n    };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n      var _prepSig = prepSig(msgHash, privKey, opts),\n        seed = _prepSig.seed,\n        k2sig = _prepSig.k2sig; // Steps A, D of RFC6979 3.2.\n      var C = CURVE;\n      var drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n      return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey) {\n      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultVerOpts;\n      var sg = signature;\n      msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n      publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);\n      var lowS = opts.lowS,\n        prehash = opts.prehash,\n        format = opts.format;\n      // Verify opts, deduce signature format\n      validateSigVerOpts(opts);\n      if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n      if (format !== undefined && format !== 'compact' && format !== 'der') throw new Error('format must be compact or der');\n      var isHex = typeof sg === 'string' || ut.isBytes(sg);\n      var isObj = !isHex && !format && typeof sg === 'object' && sg !== null && typeof sg.r === 'bigint' && typeof sg.s === 'bigint';\n      if (!isHex && !isObj) throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n      var _sig = undefined;\n      var P;\n      try {\n        if (isObj) _sig = new Signature(sg.r, sg.s);\n        if (isHex) {\n          // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n          // Since DER can also be 2*nByteLength bytes, we check for it first.\n          try {\n            if (format !== 'compact') _sig = Signature.fromDER(sg);\n          } catch (derError) {\n            if (!(derError instanceof exports.DER.Err)) throw derError;\n          }\n          if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n        }\n        P = Point.fromHex(publicKey);\n      } catch (error) {\n        return false;\n      }\n      if (!_sig) return false;\n      if (lowS && _sig.hasHighS()) return false;\n      if (prehash) msgHash = CURVE.hash(msgHash);\n      var _sig2 = _sig,\n        r = _sig2.r,\n        s = _sig2.s;\n      var h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n      var is = invN(s); // s^-1\n      var u1 = modN(h * is); // u1 = hs^-1 mod n\n      var u2 = modN(r * is); // u2 = rs^-1 mod n\n      var R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n      if (!R) return false;\n      var v = modN(R.x);\n      return v === r;\n    }\n    return {\n      CURVE,\n      getPublicKey,\n      getSharedSecret,\n      sign,\n      verify,\n      ProjectivePoint: Point,\n      Signature,\n      utils\n    };\n  }\n  /**\n   * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n   * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n   * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n   * b = False and y = sqrt(Z * (u / v)) otherwise.\n   * @param Fp\n   * @param Z\n   * @returns\n   */\n  function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    var q = Fp.ORDER;\n    var l = _0n;\n    for (var o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n    var c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    var _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n    var _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    var c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    var c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    var c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    var c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    var c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    var c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    var sqrtRatio = (u, v) => {\n      var tv1 = c6; // 1. tv1 = c6\n      var tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n      var tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n      tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n      var tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n      tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n      tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n      tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n      tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n      var tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n      tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n      var isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n      tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n      tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n      tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n      // 17. for i in (c1, c1 - 1, ..., 2):\n      for (var i = c1; i > _1n; i--) {\n        var _tv = i - _2n; // 18.    tv5 = i - 2\n        _tv = _2n << _tv - _1n; // 19.    tv5 = 2^tv5\n        var tvv5 = Fp.pow(tv4, _tv); // 20.    tv5 = tv4^tv5\n        var e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n        tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n        tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n        tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n        tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n      }\n      return {\n        isValid: isQR,\n        value: tv3\n      };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n      // sqrt_ratio_3mod4(u, v)\n      var _c2 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n      var _c3 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n      sqrtRatio = (u, v) => {\n        var tv1 = Fp.sqr(v); // 1. tv1 = v^2\n        var tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n        tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n        var y1 = Fp.pow(tv1, _c2); // 4. y1 = tv1^c1\n        y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n        var y2 = Fp.mul(y1, _c3); // 6. y2 = y1 * c2\n        var tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n        var isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n        var y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n        return {\n          isValid: isQR,\n          value: y\n        }; // 11. return (isQR, y) isQR ? y : y*c2\n      };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n  }\n  /**\n   * Simplified Shallue-van de Woestijne-Ulas Method\n   * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n   */\n  function mapToCurveSimpleSWU(Fp, opts) {\n    (0, modular_js_1.validateField)(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n    var sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return u => {\n      // prettier-ignore\n      var tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n      tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n      tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n      tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n      tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n      tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n      tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n      tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n      tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n      tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n      tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n      tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n      tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n      tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n      tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n      tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n      tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n      x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n      var _sqrtRatio = sqrtRatio(tv2, tv6),\n        isValid = _sqrtRatio.isValid,\n        value = _sqrtRatio.value; // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n      y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n      y = Fp.mul(y, value); // 20.   y = y * y1\n      x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n      y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n      var e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n      y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n      x = Fp.div(x, tv4); // 25.   x = x / tv4\n      return {\n        x,\n        y\n      };\n    };\n  }\n});","lineCount":1317,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_readOnlyError"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,1,13],[6,6,1,13,"_classCallCheck"],[6,21,1,13],[6,24,1,13,"require"],[6,31,1,13],[6,32,1,13,"_dependencyMap"],[6,46,1,13],[7,2,1,13],[7,6,1,13,"_possibleConstructorReturn"],[7,32,1,13],[7,35,1,13,"require"],[7,42,1,13],[7,43,1,13,"_dependencyMap"],[7,57,1,13],[8,2,1,13],[8,6,1,13,"_getPrototypeOf"],[8,21,1,13],[8,24,1,13,"require"],[8,31,1,13],[8,32,1,13,"_dependencyMap"],[8,46,1,13],[9,2,1,13],[9,6,1,13,"_inherits"],[9,15,1,13],[9,18,1,13,"require"],[9,25,1,13],[9,26,1,13,"_dependencyMap"],[9,40,1,13],[10,2,1,13],[10,6,1,13,"_wrapNativeSuper"],[10,22,1,13],[10,25,1,13,"require"],[10,32,1,13],[10,33,1,13,"_dependencyMap"],[10,47,1,13],[11,2,1,13],[11,11,1,13,"_callSuper"],[11,22,1,13,"t"],[11,23,1,13],[11,25,1,13,"o"],[11,26,1,13],[11,28,1,13,"e"],[11,29,1,13],[11,40,1,13,"o"],[11,41,1,13],[11,44,1,13,"_getPrototypeOf"],[11,59,1,13],[11,60,1,13,"o"],[11,61,1,13],[11,64,1,13,"_possibleConstructorReturn"],[11,90,1,13],[11,91,1,13,"t"],[11,92,1,13],[11,94,1,13,"_isNativeReflectConstruct"],[11,119,1,13],[11,124,1,13,"Reflect"],[11,131,1,13],[11,132,1,13,"construct"],[11,141,1,13],[11,142,1,13,"o"],[11,143,1,13],[11,145,1,13,"e"],[11,146,1,13],[11,154,1,13,"_getPrototypeOf"],[11,169,1,13],[11,170,1,13,"t"],[11,171,1,13],[11,173,1,13,"constructor"],[11,184,1,13],[11,188,1,13,"o"],[11,189,1,13],[11,190,1,13,"apply"],[11,195,1,13],[11,196,1,13,"t"],[11,197,1,13],[11,199,1,13,"e"],[11,200,1,13],[12,2,1,13],[12,11,1,13,"_isNativeReflectConstruct"],[12,37,1,13],[12,51,1,13,"t"],[12,52,1,13],[12,56,1,13,"Boolean"],[12,63,1,13],[12,64,1,13,"prototype"],[12,73,1,13],[12,74,1,13,"valueOf"],[12,81,1,13],[12,82,1,13,"call"],[12,86,1,13],[12,87,1,13,"Reflect"],[12,94,1,13],[12,95,1,13,"construct"],[12,104,1,13],[12,105,1,13,"Boolean"],[12,112,1,13],[12,145,1,13,"t"],[12,146,1,13],[12,159,1,13,"_isNativeReflectConstruct"],[12,184,1,13],[12,196,1,13,"_isNativeReflectConstruct"],[12,197,1,13],[12,210,1,13,"t"],[12,211,1,13],[13,2,2,0,"Object"],[13,8,2,6],[13,9,2,7,"defineProperty"],[13,23,2,21],[13,24,2,22,"exports"],[13,31,2,29],[13,33,2,31],[13,45,2,43],[13,47,2,45],[14,4,2,47,"value"],[14,9,2,52],[14,11,2,54],[15,2,2,59],[15,3,2,60],[15,4,2,61],[16,2,3,0,"exports"],[16,9,3,7],[16,10,3,8,"DER"],[16,13,3,11],[16,16,3,14,"exports"],[16,23,3,21],[16,24,3,22,"DERErr"],[16,30,3,28],[16,33,3,31],[16,38,3,36],[16,39,3,37],[17,2,4,0,"exports"],[17,9,4,7],[17,10,4,8,"weierstrassPoints"],[17,27,4,25],[17,30,4,28,"weierstrassPoints"],[17,47,4,45],[18,2,5,0,"exports"],[18,9,5,7],[18,10,5,8,"weierstrass"],[18,21,5,19],[18,24,5,22,"weierstrass"],[18,35,5,33],[19,2,6,0,"exports"],[19,9,6,7],[19,10,6,8,"SWUFpSqrtRatio"],[19,24,6,22],[19,27,6,25,"SWUFpSqrtRatio"],[19,41,6,39],[20,2,7,0,"exports"],[20,9,7,7],[20,10,7,8,"mapToCurveSimpleSWU"],[20,29,7,27],[20,32,7,30,"mapToCurveSimpleSWU"],[20,51,7,49],[21,2,8,0],[22,0,9,0],[23,0,10,0],[24,0,11,0],[25,0,12,0],[26,0,13,0],[27,0,14,0],[28,0,15,0],[29,0,16,0],[30,0,17,0],[31,0,18,0],[32,0,19,0],[33,0,20,0],[34,0,21,0],[35,0,22,0],[36,0,23,0],[37,0,24,0],[38,0,25,0],[39,0,26,0],[40,0,27,0],[41,0,28,0],[42,0,29,0],[43,0,30,0],[44,0,31,0],[45,0,32,0],[46,0,33,0],[47,2,34,0],[48,2,35,0],[48,6,35,6,"curve_js_1"],[48,16,35,16],[48,19,35,19,"require"],[48,26,35,26],[48,27,35,26,"_dependencyMap"],[48,41,35,26],[48,58,35,39],[48,59,35,40],[49,2,36,0],[49,6,36,6,"modular_js_1"],[49,18,36,18],[49,21,36,21,"require"],[49,28,36,28],[49,29,36,28,"_dependencyMap"],[49,43,36,28],[49,62,36,43],[49,63,36,44],[50,2,37,0],[50,6,37,6,"ut"],[50,8,37,8],[50,11,37,11,"require"],[50,18,37,18],[50,19,37,18,"_dependencyMap"],[50,33,37,18],[50,50,37,31],[50,51,37,32],[51,2,38,0],[51,6,38,6,"utils_js_1"],[51,16,38,16],[51,19,38,19,"require"],[51,26,38,26],[51,27,38,26,"_dependencyMap"],[51,41,38,26],[51,58,38,39],[51,59,38,40],[52,2,39,0],[52,11,39,9,"validateSigVerOpts"],[52,29,39,27,"validateSigVerOpts"],[52,30,39,28,"opts"],[52,34,39,32],[52,36,39,34],[53,4,40,4],[53,8,40,8,"opts"],[53,12,40,12],[53,13,40,13,"lowS"],[53,17,40,17],[53,22,40,22,"undefined"],[53,31,40,31],[53,33,41,8],[53,34,41,9],[53,35,41,10],[53,37,41,12,"utils_js_1"],[53,47,41,22],[53,48,41,23,"abool"],[53,53,41,28],[53,55,41,30],[53,61,41,36],[53,63,41,38,"opts"],[53,67,41,42],[53,68,41,43,"lowS"],[53,72,41,47],[53,73,41,48],[54,4,42,4],[54,8,42,8,"opts"],[54,12,42,12],[54,13,42,13,"prehash"],[54,20,42,20],[54,25,42,25,"undefined"],[54,34,42,34],[54,36,43,8],[54,37,43,9],[54,38,43,10],[54,40,43,12,"utils_js_1"],[54,50,43,22],[54,51,43,23,"abool"],[54,56,43,28],[54,58,43,30],[54,67,43,39],[54,69,43,41,"opts"],[54,73,43,45],[54,74,43,46,"prehash"],[54,81,43,53],[54,82,43,54],[55,2,44,0],[56,2,45,0],[56,11,45,9,"validatePointOpts"],[56,28,45,26,"validatePointOpts"],[56,29,45,27,"curve"],[56,34,45,32],[56,36,45,34],[57,4,46,4],[57,8,46,10,"opts"],[57,12,46,14],[57,15,46,17],[57,16,46,18],[57,17,46,19],[57,19,46,21,"curve_js_1"],[57,29,46,31],[57,30,46,32,"validateBasic"],[57,43,46,45],[57,45,46,47,"curve"],[57,50,46,52],[57,51,46,53],[58,4,47,4,"ut"],[58,6,47,6],[58,7,47,7,"validateObject"],[58,21,47,21],[58,22,47,22,"opts"],[58,26,47,26],[58,28,47,28],[59,6,48,8,"a"],[59,7,48,9],[59,9,48,11],[59,16,48,18],[60,6,49,8,"b"],[60,7,49,9],[60,9,49,11],[61,4,50,4],[61,5,50,5],[61,7,50,7],[62,6,51,8,"allowedPrivateKeyLengths"],[62,30,51,32],[62,32,51,34],[62,39,51,41],[63,6,52,8,"wrapPrivateKey"],[63,20,52,22],[63,22,52,24],[63,31,52,33],[64,6,53,8,"isTorsionFree"],[64,19,53,21],[64,21,53,23],[64,31,53,33],[65,6,54,8,"clearCofactor"],[65,19,54,21],[65,21,54,23],[65,31,54,33],[66,6,55,8,"allowInfinityPoint"],[66,24,55,26],[66,26,55,28],[66,35,55,37],[67,6,56,8,"fromBytes"],[67,15,56,17],[67,17,56,19],[67,27,56,29],[68,6,57,8,"toBytes"],[68,13,57,15],[68,15,57,17],[69,4,58,4],[69,5,58,5],[69,6,58,6],[70,4,59,4],[70,8,59,12,"endo"],[70,12,59,16],[70,15,59,28,"opts"],[70,19,59,32],[70,20,59,12,"endo"],[70,24,59,16],[71,6,59,18,"Fp"],[71,8,59,20],[71,11,59,28,"opts"],[71,15,59,32],[71,16,59,18,"Fp"],[71,18,59,20],[72,6,59,22,"a"],[72,7,59,23],[72,10,59,28,"opts"],[72,14,59,32],[72,15,59,22,"a"],[72,16,59,23],[73,4,60,4],[73,8,60,8,"endo"],[73,12,60,12],[73,14,60,14],[74,6,61,8],[74,10,61,12],[74,11,61,13,"Fp"],[74,13,61,15],[74,14,61,16,"eql"],[74,17,61,19],[74,18,61,20,"a"],[74,19,61,21],[74,21,61,23,"Fp"],[74,23,61,25],[74,24,61,26,"ZERO"],[74,28,61,30],[74,29,61,31],[74,31,61,33],[75,8,62,12],[75,14,62,18],[75,18,62,22,"Error"],[75,23,62,27],[75,24,62,28],[75,100,62,104],[75,101,62,105],[76,6,63,8],[77,6,64,8],[77,10,64,12],[77,17,64,19,"endo"],[77,21,64,23],[77,26,64,28],[77,34,64,36],[77,38,65,12],[77,45,65,19,"endo"],[77,49,65,23],[77,50,65,24,"beta"],[77,54,65,28],[77,59,65,33],[77,67,65,41],[77,71,66,12],[77,78,66,19,"endo"],[77,82,66,23],[77,83,66,24,"splitScalar"],[77,94,66,35],[77,99,66,40],[77,109,66,50],[77,111,66,52],[78,8,67,12],[78,14,67,18],[78,18,67,22,"Error"],[78,23,67,27],[78,24,67,28],[78,95,67,99],[78,96,67,100],[79,6,68,8],[80,4,69,4],[81,4,70,4],[81,11,70,11,"Object"],[81,17,70,17],[81,18,70,18,"freeze"],[81,24,70,24],[81,25,70,25],[82,6,70,27],[82,9,70,30,"opts"],[83,4,70,35],[83,5,70,36],[83,6,70,37],[84,2,71,0],[85,2,72,0],[85,6,72,25,"b2n"],[85,9,72,28],[85,12,72,50,"ut"],[85,14,72,52],[85,15,72,8,"bytesToNumberBE"],[85,30,72,23],[86,4,72,42,"h2b"],[86,7,72,45],[86,10,72,50,"ut"],[86,12,72,52],[86,13,72,30,"hexToBytes"],[86,23,72,40],[87,2,72,53],[87,6,73,6,"DERErr"],[87,12,73,12],[87,38,73,12,"_Error"],[87,44,73,12],[88,4,74,4],[88,13,74,4,"DERErr"],[88,20,74,4],[88,22,74,24],[89,6,74,24],[89,10,74,16,"m"],[89,11,74,17],[89,14,74,17,"arguments"],[89,23,74,17],[89,24,74,17,"length"],[89,30,74,17],[89,38,74,17,"arguments"],[89,47,74,17],[89,55,74,17,"undefined"],[89,64,74,17],[89,67,74,17,"arguments"],[89,76,74,17],[89,82,74,20],[89,84,74,22],[90,6,74,22,"_classCallCheck"],[90,21,74,22],[90,28,74,22,"DERErr"],[90,34,74,22],[91,6,74,22],[91,13,74,22,"_callSuper"],[91,23,74,22],[91,30,74,22,"DERErr"],[91,36,74,22],[91,39,75,14,"m"],[91,40,75,15],[92,4,76,4],[93,4,76,5,"_inherits"],[93,13,76,5],[93,14,76,5,"DERErr"],[93,20,76,5],[93,22,76,5,"_Error"],[93,28,76,5],[94,4,76,5],[94,11,76,5,"_createClass"],[94,23,76,5],[94,24,76,5,"DERErr"],[94,30,76,5],[95,2,76,5],[95,17,76,5,"_wrapNativeSuper"],[95,33,76,5],[95,34,73,21,"Error"],[95,39,73,26],[96,2,78,0,"exports"],[96,9,78,7],[96,10,78,8,"DERErr"],[96,16,78,14],[96,19,78,17,"DERErr"],[96,25,78,23],[97,2,79,0],[98,0,80,0],[99,0,81,0],[100,0,82,0],[101,0,83,0],[102,0,84,0],[103,0,85,0],[104,2,86,0,"exports"],[104,9,86,7],[104,10,86,8,"DER"],[104,13,86,11],[104,16,86,14],[105,4,87,4],[106,4,88,4,"Err"],[106,7,88,7],[106,9,88,9,"DERErr"],[106,15,88,15],[107,4,89,4],[108,4,90,4,"_tlv"],[108,8,90,8],[108,10,90,10],[109,6,91,8,"encode"],[109,12,91,14],[109,14,91,16,"encode"],[109,15,91,17,"tag"],[109,18,91,20],[109,20,91,22,"data"],[109,24,91,26],[109,29,91,31],[110,8,92,12],[110,12,92,25,"E"],[110,13,92,26],[110,16,92,31,"exports"],[110,23,92,38],[110,24,92,39,"DER"],[110,27,92,42],[110,28,92,20,"Err"],[110,31,92,23],[111,8,93,12],[111,12,93,16,"tag"],[111,15,93,19],[111,18,93,22],[111,19,93,23],[111,23,93,27,"tag"],[111,26,93,30],[111,29,93,33],[111,32,93,36],[111,34,94,16],[111,40,94,22],[111,44,94,26,"E"],[111,45,94,27],[111,46,94,28],[111,69,94,51],[111,70,94,52],[112,8,95,12],[112,12,95,16,"data"],[112,16,95,20],[112,17,95,21,"length"],[112,23,95,27],[112,26,95,30],[112,27,95,31],[112,29,96,16],[112,35,96,22],[112,39,96,26,"E"],[112,40,96,27],[112,41,96,28],[112,68,96,55],[112,69,96,56],[113,8,97,12],[113,12,97,18,"dataLen"],[113,19,97,25],[113,22,97,28,"data"],[113,26,97,32],[113,27,97,33,"length"],[113,33,97,39],[113,36,97,42],[113,37,97,43],[114,8,98,12],[114,12,98,18,"len"],[114,15,98,21],[114,18,98,24,"ut"],[114,20,98,26],[114,21,98,27,"numberToHexUnpadded"],[114,40,98,46],[114,41,98,47,"dataLen"],[114,48,98,54],[114,49,98,55],[115,8,99,12],[115,12,99,17,"len"],[115,15,99,20],[115,16,99,21,"length"],[115,22,99,27],[115,25,99,30],[115,26,99,31],[115,29,99,35],[115,32,99,38],[115,34,100,16],[115,40,100,22],[115,44,100,26,"E"],[115,45,100,27],[115,46,100,28],[115,84,100,66],[115,85,100,67],[116,8,101,12],[117,8,102,12],[117,12,102,18,"lenLen"],[117,18,102,24],[117,21,102,27,"dataLen"],[117,28,102,34],[117,31,102,37],[117,34,102,40],[117,37,102,43,"ut"],[117,39,102,45],[117,40,102,46,"numberToHexUnpadded"],[117,59,102,65],[117,60,102,67,"len"],[117,63,102,70],[117,64,102,71,"length"],[117,70,102,77],[117,73,102,80],[117,74,102,81],[117,77,102,85],[117,80,102,88],[117,81,102,89],[117,84,102,92],[117,86,102,94],[118,8,103,12],[118,12,103,18,"t"],[118,13,103,19],[118,16,103,22,"ut"],[118,18,103,24],[118,19,103,25,"numberToHexUnpadded"],[118,38,103,44],[118,39,103,45,"tag"],[118,42,103,48],[118,43,103,49],[119,8,104,12],[119,15,104,19,"t"],[119,16,104,20],[119,19,104,23,"lenLen"],[119,25,104,29],[119,28,104,32,"len"],[119,31,104,35],[119,34,104,38,"data"],[119,38,104,42],[120,6,105,8],[120,7,105,9],[121,6,106,8],[122,6,107,8,"decode"],[122,12,107,14,"decode"],[122,13,107,15,"tag"],[122,16,107,18],[122,18,107,20,"data"],[122,22,107,24],[122,24,107,26],[123,8,108,12],[123,12,108,25,"E"],[123,13,108,26],[123,16,108,31,"exports"],[123,23,108,38],[123,24,108,39,"DER"],[123,27,108,42],[123,28,108,20,"Err"],[123,31,108,23],[124,8,109,12],[124,12,109,16,"pos"],[124,15,109,19],[124,18,109,22],[124,19,109,23],[125,8,110,12],[125,12,110,16,"tag"],[125,15,110,19],[125,18,110,22],[125,19,110,23],[125,23,110,27,"tag"],[125,26,110,30],[125,29,110,33],[125,32,110,36],[125,34,111,16],[125,40,111,22],[125,44,111,26,"E"],[125,45,111,27],[125,46,111,28],[125,69,111,51],[125,70,111,52],[126,8,112,12],[126,12,112,16,"data"],[126,16,112,20],[126,17,112,21,"length"],[126,23,112,27],[126,26,112,30],[126,27,112,31],[126,31,112,35,"data"],[126,35,112,39],[126,36,112,40,"pos"],[126,39,112,43],[126,41,112,45],[126,42,112,46],[126,47,112,51,"tag"],[126,50,112,54],[126,52,113,16],[126,58,113,22],[126,62,113,26,"E"],[126,63,113,27],[126,64,113,28],[126,87,113,51],[126,88,113,52],[127,8,114,12],[127,12,114,18,"first"],[127,17,114,23],[127,20,114,26,"data"],[127,24,114,30],[127,25,114,31,"pos"],[127,28,114,34],[127,30,114,36],[127,31,114,37],[128,8,115,12],[128,12,115,18,"isLong"],[128,18,115,24],[128,21,115,27],[128,22,115,28],[128,24,115,30,"first"],[128,29,115,35],[128,32,115,38],[128,35,115,41],[128,36,115,42],[128,37,115,43],[128,38,115,44],[129,8,116,12],[129,12,116,16,"length"],[129,18,116,22],[129,21,116,25],[129,22,116,26],[130,8,117,12],[130,12,117,16],[130,13,117,17,"isLong"],[130,19,117,23],[130,21,118,16,"length"],[130,27,118,22],[130,30,118,25,"first"],[130,35,118,30],[130,36,118,31],[130,41,119,17],[131,10,120,16],[132,10,121,16],[132,14,121,22,"lenLen"],[132,20,121,28],[132,23,121,31,"first"],[132,28,121,36],[132,31,121,39],[132,34,121,42],[133,10,122,16],[133,14,122,20],[133,15,122,21,"lenLen"],[133,21,122,27],[133,23,123,20],[133,29,123,26],[133,33,123,30,"E"],[133,34,123,31],[133,35,123,32],[133,86,123,83],[133,87,123,84],[134,10,124,16],[134,14,124,20,"lenLen"],[134,20,124,26],[134,23,124,29],[134,24,124,30],[134,26,125,20],[134,32,125,26],[134,36,125,30,"E"],[134,37,125,31],[134,38,125,32],[134,80,125,74],[134,81,125,75],[134,82,125,76],[134,83,125,77],[135,10,126,16],[135,14,126,22,"lengthBytes"],[135,25,126,33],[135,28,126,36,"data"],[135,32,126,40],[135,33,126,41,"subarray"],[135,41,126,49],[135,42,126,50,"pos"],[135,45,126,53],[135,47,126,55,"pos"],[135,50,126,58],[135,53,126,61,"lenLen"],[135,59,126,67],[135,60,126,68],[136,10,127,16],[136,14,127,20,"lengthBytes"],[136,25,127,31],[136,26,127,32,"length"],[136,32,127,38],[136,37,127,43,"lenLen"],[136,43,127,49],[136,45,128,20],[136,51,128,26],[136,55,128,30,"E"],[136,56,128,31],[136,57,128,32],[136,96,128,71],[136,97,128,72],[137,10,129,16],[137,14,129,20,"lengthBytes"],[137,25,129,31],[137,26,129,32],[137,27,129,33],[137,28,129,34],[137,33,129,39],[137,34,129,40],[137,36,130,20],[137,42,130,26],[137,46,130,30,"E"],[137,47,130,31],[137,48,130,32],[137,86,130,70],[137,87,130,71],[138,10,131,16],[138,15,131,21],[138,19,131,27,"b"],[138,20,131,28],[138,24,131,32,"lengthBytes"],[138,35,131,43],[138,37,132,20,"length"],[138,43,132,26],[138,46,132,30,"length"],[138,52,132,36],[138,56,132,40],[138,57,132,41],[138,60,132,45,"b"],[138,61,132,46],[139,10,133,16,"pos"],[139,13,133,19],[139,17,133,23,"lenLen"],[139,23,133,29],[140,10,134,16],[140,14,134,20,"length"],[140,20,134,26],[140,23,134,29],[140,26,134,32],[140,28,135,20],[140,34,135,26],[140,38,135,30,"E"],[140,39,135,31],[140,40,135,32],[140,80,135,72],[140,81,135,73],[141,8,136,12],[142,8,137,12],[142,12,137,18,"v"],[142,13,137,19],[142,16,137,22,"data"],[142,20,137,26],[142,21,137,27,"subarray"],[142,29,137,35],[142,30,137,36,"pos"],[142,33,137,39],[142,35,137,41,"pos"],[142,38,137,44],[142,41,137,47,"length"],[142,47,137,53],[142,48,137,54],[143,8,138,12],[143,12,138,16,"v"],[143,13,138,17],[143,14,138,18,"length"],[143,20,138,24],[143,25,138,29,"length"],[143,31,138,35],[143,33,139,16],[143,39,139,22],[143,43,139,26,"E"],[143,44,139,27],[143,45,139,28],[143,77,139,60],[143,78,139,61],[144,8,140,12],[144,15,140,19],[145,10,140,21,"v"],[145,11,140,22],[146,10,140,24,"l"],[146,11,140,25],[146,13,140,27,"data"],[146,17,140,31],[146,18,140,32,"subarray"],[146,26,140,40],[146,27,140,41,"pos"],[146,30,140,44],[146,33,140,47,"length"],[146,39,140,53],[147,8,140,55],[147,9,140,56],[148,6,141,8],[149,4,142,4],[149,5,142,5],[150,4,143,4],[151,4,144,4],[152,4,145,4],[153,4,146,4],[154,4,147,4,"_int"],[154,8,147,8],[154,10,147,10],[155,6,148,8,"encode"],[155,12,148,14,"encode"],[155,13,148,15,"num"],[155,16,148,18],[155,18,148,20],[156,8,149,12],[156,12,149,25,"E"],[156,13,149,26],[156,16,149,31,"exports"],[156,23,149,38],[156,24,149,39,"DER"],[156,27,149,42],[156,28,149,20,"Err"],[156,31,149,23],[157,8,150,12],[157,12,150,16,"num"],[157,15,150,19],[157,18,150,22,"_0n"],[157,21,150,25],[157,23,151,16],[157,29,151,22],[157,33,151,26,"E"],[157,34,151,27],[157,35,151,28],[157,79,151,72],[157,80,151,73],[158,8,152,12],[158,12,152,16,"hex"],[158,15,152,19],[158,18,152,22,"ut"],[158,20,152,24],[158,21,152,25,"numberToHexUnpadded"],[158,40,152,44],[158,41,152,45,"num"],[158,44,152,48],[158,45,152,49],[159,8,153,12],[160,8,154,12],[160,12,154,16,"Number"],[160,18,154,22],[160,19,154,23,"parseInt"],[160,27,154,31],[160,28,154,32,"hex"],[160,31,154,35],[160,32,154,36],[160,33,154,37],[160,34,154,38],[160,36,154,40],[160,38,154,42],[160,39,154,43],[160,42,154,46],[160,48,154,52],[160,50,155,16,"hex"],[160,53,155,19],[160,56,155,22],[160,60,155,26],[160,63,155,29,"hex"],[160,66,155,32],[161,8,156,12],[161,12,156,16,"hex"],[161,15,156,19],[161,16,156,20,"length"],[161,22,156,26],[161,25,156,29],[161,26,156,30],[161,28,157,16],[161,34,157,22],[161,38,157,26,"E"],[161,39,157,27],[161,40,157,28],[161,88,157,76],[161,89,157,77],[162,8,158,12],[162,15,158,19,"hex"],[162,18,158,22],[163,6,159,8],[163,7,159,9],[164,6,160,8,"decode"],[164,12,160,14,"decode"],[164,13,160,15,"data"],[164,17,160,19],[164,19,160,21],[165,8,161,12],[165,12,161,25,"E"],[165,13,161,26],[165,16,161,31,"exports"],[165,23,161,38],[165,24,161,39,"DER"],[165,27,161,42],[165,28,161,20,"Err"],[165,31,161,23],[166,8,162,12],[166,12,162,16,"data"],[166,16,162,20],[166,17,162,21],[166,18,162,22],[166,19,162,23],[166,22,162,26],[166,25,162,29],[166,27,163,16],[166,33,163,22],[166,37,163,26,"E"],[166,38,163,27],[166,39,163,28],[166,76,163,65],[166,77,163,66],[167,8,164,12],[167,12,164,16,"data"],[167,16,164,20],[167,17,164,21],[167,18,164,22],[167,19,164,23],[167,24,164,28],[167,28,164,32],[167,32,164,36],[167,34,164,38,"data"],[167,38,164,42],[167,39,164,43],[167,40,164,44],[167,41,164,45],[167,44,164,48],[167,47,164,51],[167,48,164,52],[167,50,165,16],[167,56,165,22],[167,60,165,26,"E"],[167,61,165,27],[167,62,165,28],[167,115,165,81],[167,116,165,82],[168,8,166,12],[168,15,166,19,"b2n"],[168,18,166,22],[168,19,166,23,"data"],[168,23,166,27],[168,24,166,28],[169,6,167,8],[170,4,168,4],[170,5,168,5],[171,4,169,4,"toSig"],[171,9,169,9,"toSig"],[171,10,169,10,"hex"],[171,13,169,13],[171,15,169,15],[172,6,170,8],[173,6,171,8],[173,10,171,8,"_exports$DER"],[173,22,171,8],[173,25,171,49,"exports"],[173,32,171,56],[173,33,171,57,"DER"],[173,36,171,60],[174,8,171,21,"E"],[174,9,171,22],[174,12,171,22,"_exports$DER"],[174,24,171,22],[174,25,171,16,"Err"],[174,28,171,19],[175,8,171,30,"int"],[175,11,171,33],[175,14,171,33,"_exports$DER"],[175,26,171,33],[175,27,171,24,"_int"],[175,31,171,28],[176,8,171,41,"tlv"],[176,11,171,44],[176,14,171,44,"_exports$DER"],[176,26,171,44],[176,27,171,35,"_tlv"],[176,31,171,39],[177,6,172,8],[177,10,172,14,"data"],[177,14,172,18],[177,17,172,21],[177,24,172,28,"hex"],[177,27,172,31],[177,32,172,36],[177,40,172,44],[177,43,172,47,"h2b"],[177,46,172,50],[177,47,172,51,"hex"],[177,50,172,54],[177,51,172,55],[177,54,172,58,"hex"],[177,57,172,61],[178,6,173,8,"ut"],[178,8,173,10],[178,9,173,11,"abytes"],[178,15,173,17],[178,16,173,18,"data"],[178,20,173,22],[178,21,173,23],[179,6,174,8],[179,10,174,8,"_tlv$decode"],[179,21,174,8],[179,24,174,49,"tlv"],[179,27,174,52],[179,28,174,53,"decode"],[179,34,174,59],[179,35,174,60],[179,39,174,64],[179,41,174,66,"data"],[179,45,174,70],[179,46,174,71],[180,8,174,19,"seqBytes"],[180,16,174,27],[180,19,174,27,"_tlv$decode"],[180,30,174,27],[180,31,174,16,"v"],[180,32,174,17],[181,8,174,32,"seqLeftBytes"],[181,20,174,44],[181,23,174,44,"_tlv$decode"],[181,34,174,44],[181,35,174,29,"l"],[181,36,174,30],[182,6,175,8],[182,10,175,12,"seqLeftBytes"],[182,22,175,24],[182,23,175,25,"length"],[182,29,175,31],[182,31,176,12],[182,37,176,18],[182,41,176,22,"E"],[182,42,176,23],[182,43,176,24],[182,88,176,69],[182,89,176,70],[183,6,177,8],[183,10,177,8,"_tlv$decode2"],[183,22,177,8],[183,25,177,45,"tlv"],[183,28,177,48],[183,29,177,49,"decode"],[183,35,177,55],[183,36,177,56],[183,40,177,60],[183,42,177,62,"seqBytes"],[183,50,177,70],[183,51,177,71],[184,8,177,19,"rBytes"],[184,14,177,25],[184,17,177,25,"_tlv$decode2"],[184,29,177,25],[184,30,177,16,"v"],[184,31,177,17],[185,8,177,30,"rLeftBytes"],[185,18,177,40],[185,21,177,40,"_tlv$decode2"],[185,33,177,40],[185,34,177,27,"l"],[185,35,177,28],[186,6,178,8],[186,10,178,8,"_tlv$decode3"],[186,22,178,8],[186,25,178,45,"tlv"],[186,28,178,48],[186,29,178,49,"decode"],[186,35,178,55],[186,36,178,56],[186,40,178,60],[186,42,178,62,"rLeftBytes"],[186,52,178,72],[186,53,178,73],[187,8,178,19,"sBytes"],[187,14,178,25],[187,17,178,25,"_tlv$decode3"],[187,29,178,25],[187,30,178,16,"v"],[187,31,178,17],[188,8,178,30,"sLeftBytes"],[188,18,178,40],[188,21,178,40,"_tlv$decode3"],[188,33,178,40],[188,34,178,27,"l"],[188,35,178,28],[189,6,179,8],[189,10,179,12,"sLeftBytes"],[189,20,179,22],[189,21,179,23,"length"],[189,27,179,29],[189,29,180,12],[189,35,180,18],[189,39,180,22,"E"],[189,40,180,23],[189,41,180,24],[189,86,180,69],[189,87,180,70],[190,6,181,8],[190,13,181,15],[191,8,181,17,"r"],[191,9,181,18],[191,11,181,20,"int"],[191,14,181,23],[191,15,181,24,"decode"],[191,21,181,30],[191,22,181,31,"rBytes"],[191,28,181,37],[191,29,181,38],[192,8,181,40,"s"],[192,9,181,41],[192,11,181,43,"int"],[192,14,181,46],[192,15,181,47,"decode"],[192,21,181,53],[192,22,181,54,"sBytes"],[192,28,181,60],[193,6,181,62],[193,7,181,63],[194,4,182,4],[194,5,182,5],[195,4,183,4,"hexFromSig"],[195,14,183,14,"hexFromSig"],[195,15,183,15,"sig"],[195,18,183,18],[195,20,183,20],[196,6,184,8],[196,10,184,8,"_exports$DER2"],[196,23,184,8],[196,26,184,41,"exports"],[196,33,184,48],[196,34,184,49,"DER"],[196,37,184,52],[197,8,184,22,"tlv"],[197,11,184,25],[197,14,184,25,"_exports$DER2"],[197,27,184,25],[197,28,184,16,"_tlv"],[197,32,184,20],[198,8,184,33,"int"],[198,11,184,36],[198,14,184,36,"_exports$DER2"],[198,27,184,36],[198,28,184,27,"_int"],[198,32,184,31],[199,6,185,8],[199,10,185,14,"rs"],[199,12,185,16],[199,15,185,19,"tlv"],[199,18,185,22],[199,19,185,23,"encode"],[199,25,185,29],[199,26,185,30],[199,30,185,34],[199,32,185,36,"int"],[199,35,185,39],[199,36,185,40,"encode"],[199,42,185,46],[199,43,185,47,"sig"],[199,46,185,50],[199,47,185,51,"r"],[199,48,185,52],[199,49,185,53],[199,50,185,54],[200,6,186,8],[200,10,186,14,"ss"],[200,12,186,16],[200,15,186,19,"tlv"],[200,18,186,22],[200,19,186,23,"encode"],[200,25,186,29],[200,26,186,30],[200,30,186,34],[200,32,186,36,"int"],[200,35,186,39],[200,36,186,40,"encode"],[200,42,186,46],[200,43,186,47,"sig"],[200,46,186,50],[200,47,186,51,"s"],[200,48,186,52],[200,49,186,53],[200,50,186,54],[201,6,187,8],[201,10,187,14,"seq"],[201,13,187,17],[201,16,187,20,"rs"],[201,18,187,22],[201,21,187,25,"ss"],[201,23,187,27],[202,6,188,8],[202,13,188,15,"tlv"],[202,16,188,18],[202,17,188,19,"encode"],[202,23,188,25],[202,24,188,26],[202,28,188,30],[202,30,188,32,"seq"],[202,33,188,35],[202,34,188,36],[203,4,189,4],[204,2,190,0],[204,3,190,1],[205,2,191,0],[206,2,192,0],[207,2,193,0],[207,6,193,6,"_0n"],[207,9,193,9],[207,12,193,12,"BigInt"],[207,18,193,18],[207,19,193,19],[207,20,193,20],[207,21,193,21],[208,4,193,23,"_1n"],[208,7,193,26],[208,10,193,29,"BigInt"],[208,16,193,35],[208,17,193,36],[208,18,193,37],[208,19,193,38],[209,4,193,40,"_2n"],[209,7,193,43],[209,10,193,46,"BigInt"],[209,16,193,52],[209,17,193,53],[209,18,193,54],[209,19,193,55],[210,4,193,57,"_3n"],[210,7,193,60],[210,10,193,63,"BigInt"],[210,16,193,69],[210,17,193,70],[210,18,193,71],[210,19,193,72],[211,4,193,74,"_4n"],[211,7,193,77],[211,10,193,80,"BigInt"],[211,16,193,86],[211,17,193,87],[211,18,193,88],[211,19,193,89],[212,2,194,0],[212,11,194,9,"weierstrassPoints"],[212,28,194,26,"weierstrassPoints"],[212,29,194,27,"opts"],[212,33,194,31],[212,35,194,33],[213,4,195,4],[213,8,195,10,"CURVE"],[213,13,195,15],[213,16,195,18,"validatePointOpts"],[213,33,195,35],[213,34,195,36,"opts"],[213,38,195,40],[213,39,195,41],[214,4,196,4],[214,8,196,12,"Fp"],[214,10,196,14],[214,13,196,19,"CURVE"],[214,18,196,24],[214,19,196,12,"Fp"],[214,21,196,14],[214,22,196,25],[214,23,196,26],[215,4,197,4],[215,8,197,10,"Fn"],[215,10,197,12],[215,13,197,15],[215,14,197,16],[215,15,197,17],[215,17,197,19,"modular_js_1"],[215,29,197,31],[215,30,197,32,"Field"],[215,35,197,37],[215,37,197,39,"CURVE"],[215,42,197,44],[215,43,197,45,"n"],[215,44,197,46],[215,46,197,48,"CURVE"],[215,51,197,53],[215,52,197,54,"nBitLength"],[215,62,197,64],[215,63,197,65],[216,4,198,4],[216,8,198,10,"toBytes"],[216,15,198,17],[216,18,198,20,"CURVE"],[216,23,198,25],[216,24,198,26,"toBytes"],[216,31,198,33],[216,36,199,9],[216,37,199,10,"_c"],[216,39,199,12],[216,41,199,14,"point"],[216,46,199,19],[216,48,199,21,"_isCompressed"],[216,61,199,34],[216,66,199,39],[217,6,200,12],[217,10,200,18,"a"],[217,11,200,19],[217,14,200,22,"point"],[217,19,200,27],[217,20,200,28,"toAffine"],[217,28,200,36],[217,29,200,37],[217,30,200,38],[218,6,201,12],[218,13,201,19,"ut"],[218,15,201,21],[218,16,201,22,"concatBytes"],[218,27,201,33],[218,28,201,34,"Uint8Array"],[218,38,201,44],[218,39,201,45,"from"],[218,43,201,49],[218,44,201,50],[218,45,201,51],[218,49,201,55],[218,50,201,56],[218,51,201,57],[218,53,201,59,"Fp"],[218,55,201,61],[218,56,201,62,"toBytes"],[218,63,201,69],[218,64,201,70,"a"],[218,65,201,71],[218,66,201,72,"x"],[218,67,201,73],[218,68,201,74],[218,70,201,76,"Fp"],[218,72,201,78],[218,73,201,79,"toBytes"],[218,80,201,86],[218,81,201,87,"a"],[218,82,201,88],[218,83,201,89,"y"],[218,84,201,90],[218,85,201,91],[218,86,201,92],[219,4,202,8],[219,5,202,9],[219,6,202,10],[220,4,203,4],[220,8,203,10,"fromBytes"],[220,17,203,19],[220,20,203,22,"CURVE"],[220,25,203,27],[220,26,203,28,"fromBytes"],[220,35,203,37],[220,40,204,10,"bytes"],[220,45,204,15],[220,49,204,20],[221,6,205,12],[222,6,206,12],[222,10,206,18,"tail"],[222,14,206,22],[222,17,206,25,"bytes"],[222,22,206,30],[222,23,206,31,"subarray"],[222,31,206,39],[222,32,206,40],[222,33,206,41],[222,34,206,42],[223,6,207,12],[224,6,208,12],[224,10,208,18,"x"],[224,11,208,19],[224,14,208,22,"Fp"],[224,16,208,24],[224,17,208,25,"fromBytes"],[224,26,208,34],[224,27,208,35,"tail"],[224,31,208,39],[224,32,208,40,"subarray"],[224,40,208,48],[224,41,208,49],[224,42,208,50],[224,44,208,52,"Fp"],[224,46,208,54],[224,47,208,55,"BYTES"],[224,52,208,60],[224,53,208,61],[224,54,208,62],[225,6,209,12],[225,10,209,18,"y"],[225,11,209,19],[225,14,209,22,"Fp"],[225,16,209,24],[225,17,209,25,"fromBytes"],[225,26,209,34],[225,27,209,35,"tail"],[225,31,209,39],[225,32,209,40,"subarray"],[225,40,209,48],[225,41,209,49,"Fp"],[225,43,209,51],[225,44,209,52,"BYTES"],[225,49,209,57],[225,51,209,59],[225,52,209,60],[225,55,209,63,"Fp"],[225,57,209,65],[225,58,209,66,"BYTES"],[225,63,209,71],[225,64,209,72],[225,65,209,73],[226,6,210,12],[226,13,210,19],[227,8,210,21,"x"],[227,9,210,22],[228,8,210,24,"y"],[229,6,210,26],[229,7,210,27],[230,4,211,8],[230,5,211,9],[230,6,211,10],[231,4,212,4],[232,0,213,0],[233,0,214,0],[234,0,215,0],[235,4,216,4],[235,13,216,13,"weierstrassEquation"],[235,32,216,32,"weierstrassEquation"],[235,33,216,33,"x"],[235,34,216,34],[235,36,216,36],[236,6,217,8],[236,10,217,16,"a"],[236,11,217,17],[236,14,217,25,"CURVE"],[236,19,217,30],[236,20,217,16,"a"],[236,21,217,17],[237,8,217,19,"b"],[237,9,217,20],[237,12,217,25,"CURVE"],[237,17,217,30],[237,18,217,19,"b"],[237,19,217,20],[238,6,218,8],[238,10,218,14,"x2"],[238,12,218,16],[238,15,218,19,"Fp"],[238,17,218,21],[238,18,218,22,"sqr"],[238,21,218,25],[238,22,218,26,"x"],[238,23,218,27],[238,24,218,28],[238,25,218,29],[238,26,218,30],[239,6,219,8],[239,10,219,14,"x3"],[239,12,219,16],[239,15,219,19,"Fp"],[239,17,219,21],[239,18,219,22,"mul"],[239,21,219,25],[239,22,219,26,"x2"],[239,24,219,28],[239,26,219,30,"x"],[239,27,219,31],[239,28,219,32],[239,29,219,33],[239,30,219,34],[240,6,220,8],[240,13,220,15,"Fp"],[240,15,220,17],[240,16,220,18,"add"],[240,19,220,21],[240,20,220,22,"Fp"],[240,22,220,24],[240,23,220,25,"add"],[240,26,220,28],[240,27,220,29,"x3"],[240,29,220,31],[240,31,220,33,"Fp"],[240,33,220,35],[240,34,220,36,"mul"],[240,37,220,39],[240,38,220,40,"x"],[240,39,220,41],[240,41,220,43,"a"],[240,42,220,44],[240,43,220,45],[240,44,220,46],[240,46,220,48,"b"],[240,47,220,49],[240,48,220,50],[240,49,220,51],[240,50,220,52],[241,4,221,4],[242,4,222,4],[243,4,223,4],[244,4,224,4],[245,4,225,4],[246,4,226,4],[246,8,226,8],[246,9,226,9,"Fp"],[246,11,226,11],[246,12,226,12,"eql"],[246,15,226,15],[246,16,226,16,"Fp"],[246,18,226,18],[246,19,226,19,"sqr"],[246,22,226,22],[246,23,226,23,"CURVE"],[246,28,226,28],[246,29,226,29,"Gy"],[246,31,226,31],[246,32,226,32],[246,34,226,34,"weierstrassEquation"],[246,53,226,53],[246,54,226,54,"CURVE"],[246,59,226,59],[246,60,226,60,"Gx"],[246,62,226,62],[246,63,226,63],[246,64,226,64],[246,66,227,8],[246,72,227,14],[246,76,227,18,"Error"],[246,81,227,23],[246,82,227,24],[246,127,227,69],[246,128,227,70],[247,4,228,4],[248,4,229,4],[248,13,229,13,"isWithinCurveOrder"],[248,31,229,31,"isWithinCurveOrder"],[248,32,229,32,"num"],[248,35,229,35],[248,37,229,37],[249,6,230,8],[249,13,230,15,"ut"],[249,15,230,17],[249,16,230,18,"inRange"],[249,23,230,25],[249,24,230,26,"num"],[249,27,230,29],[249,29,230,31,"_1n"],[249,32,230,34],[249,34,230,36,"CURVE"],[249,39,230,41],[249,40,230,42,"n"],[249,41,230,43],[249,42,230,44],[250,4,231,4],[251,4,232,4],[252,4,233,4],[253,4,234,4],[253,13,234,13,"normPrivateKeyToScalar"],[253,35,234,35,"normPrivateKeyToScalar"],[253,36,234,36,"key"],[253,39,234,39],[253,41,234,41],[254,6,235,8],[254,10,235,42,"lengths"],[254,17,235,49],[254,20,235,89,"CURVE"],[254,25,235,94],[254,26,235,16,"allowedPrivateKeyLengths"],[254,50,235,40],[255,8,235,51,"nByteLength"],[255,19,235,62],[255,22,235,89,"CURVE"],[255,27,235,94],[255,28,235,51,"nByteLength"],[255,39,235,62],[256,8,235,64,"wrapPrivateKey"],[256,22,235,78],[256,25,235,89,"CURVE"],[256,30,235,94],[256,31,235,64,"wrapPrivateKey"],[256,45,235,78],[257,8,235,83,"N"],[257,9,235,84],[257,12,235,89,"CURVE"],[257,17,235,94],[257,18,235,80,"n"],[257,19,235,81],[258,6,236,8],[258,10,236,12,"lengths"],[258,17,236,19],[258,21,236,23],[258,28,236,30,"key"],[258,31,236,33],[258,36,236,38],[258,44,236,46],[258,46,236,48],[259,8,237,12],[259,12,237,16,"ut"],[259,14,237,18],[259,15,237,19,"isBytes"],[259,22,237,26],[259,23,237,27,"key"],[259,26,237,30],[259,27,237,31],[259,29,238,16,"key"],[259,32,238,19],[259,35,238,22,"ut"],[259,37,238,24],[259,38,238,25,"bytesToHex"],[259,48,238,35],[259,49,238,36,"key"],[259,52,238,39],[259,53,238,40],[260,8,239,12],[261,8,240,12],[261,12,240,16],[261,19,240,23,"key"],[261,22,240,26],[261,27,240,31],[261,35,240,39],[261,39,240,43],[261,40,240,44,"lengths"],[261,47,240,51],[261,48,240,52,"includes"],[261,56,240,60],[261,57,240,61,"key"],[261,60,240,64],[261,61,240,65,"length"],[261,67,240,71],[261,68,240,72],[261,70,241,16],[261,76,241,22],[261,80,241,26,"Error"],[261,85,241,31],[261,86,241,32],[261,107,241,53],[261,108,241,54],[262,8,242,12,"key"],[262,11,242,15],[262,14,242,18,"key"],[262,17,242,21],[262,18,242,22,"padStart"],[262,26,242,30],[262,27,242,31,"nByteLength"],[262,38,242,42],[262,41,242,45],[262,42,242,46],[262,44,242,48],[262,47,242,51],[262,48,242,52],[263,6,243,8],[264,6,244,8],[264,10,244,12,"num"],[264,13,244,15],[265,6,245,8],[265,10,245,12],[266,8,246,12,"num"],[266,11,246,15],[266,14,247,16],[266,21,247,23,"key"],[266,24,247,26],[266,29,247,31],[266,37,247,39],[266,40,248,22,"key"],[266,43,248,25],[266,46,249,22,"ut"],[266,48,249,24],[266,49,249,25,"bytesToNumberBE"],[266,64,249,40],[266,65,249,41],[266,66,249,42],[266,67,249,43],[266,69,249,45,"utils_js_1"],[266,79,249,55],[266,80,249,56,"ensureBytes"],[266,91,249,67],[266,93,249,69],[266,106,249,82],[266,108,249,84,"key"],[266,111,249,87],[266,113,249,89,"nByteLength"],[266,124,249,100],[266,125,249,101],[266,126,249,102],[267,6,250,8],[267,7,250,9],[267,8,251,8],[267,15,251,15,"error"],[267,20,251,20],[267,22,251,22],[268,8,252,12],[268,14,252,18],[268,18,252,22,"Error"],[268,23,252,27],[268,24,252,28],[268,63,252,67],[268,66,252,70,"nByteLength"],[268,77,252,81],[268,80,252,84],[268,94,252,98],[268,97,252,101],[268,104,252,108,"key"],[268,107,252,111],[268,108,252,112],[269,6,253,8],[270,6,254,8],[270,10,254,12,"wrapPrivateKey"],[270,24,254,26],[270,26,255,12,"num"],[270,29,255,15],[270,32,255,18],[270,33,255,19],[270,34,255,20],[270,36,255,22,"modular_js_1"],[270,48,255,34],[270,49,255,35,"mod"],[270,52,255,38],[270,54,255,40,"num"],[270,57,255,43],[270,59,255,45,"N"],[270,60,255,46],[270,61,255,47],[270,62,255,48],[270,63,255,49],[271,6,256,8,"ut"],[271,8,256,10],[271,9,256,11,"aInRange"],[271,17,256,19],[271,18,256,20],[271,31,256,33],[271,33,256,35,"num"],[271,36,256,38],[271,38,256,40,"_1n"],[271,41,256,43],[271,43,256,45,"N"],[271,44,256,46],[271,45,256,47],[271,46,256,48],[271,47,256,49],[272,6,257,8],[272,13,257,15,"num"],[272,16,257,18],[273,4,258,4],[274,4,259,4],[274,13,259,13,"assertPrjPoint"],[274,27,259,27,"assertPrjPoint"],[274,28,259,28,"other"],[274,33,259,33],[274,35,259,35],[275,6,260,8],[275,10,260,12],[275,12,260,14,"other"],[275,17,260,19],[275,29,260,31,"Point"],[275,34,260,36],[275,35,260,37],[275,37,261,12],[275,43,261,18],[275,47,261,22,"Error"],[275,52,261,27],[275,53,261,28],[275,79,261,54],[275,80,261,55],[276,4,262,4],[277,4,263,4],[278,4,264,4],[279,4,265,4],[280,4,266,4],[281,4,267,4],[281,8,267,10,"toAffineMemo"],[281,20,267,22],[281,23,267,25],[281,24,267,26],[281,25,267,27],[281,27,267,29,"utils_js_1"],[281,37,267,39],[281,38,267,40,"memoized"],[281,46,267,48],[281,48,267,50],[281,49,267,51,"p"],[281,50,267,52],[281,52,267,54,"iz"],[281,54,267,56],[281,59,267,61],[282,6,268,8],[282,10,268,20,"x"],[282,11,268,21],[282,14,268,40,"p"],[282,15,268,41],[282,16,268,16,"px"],[282,18,268,18],[283,8,268,27,"y"],[283,9,268,28],[283,12,268,40,"p"],[283,13,268,41],[283,14,268,23,"py"],[283,16,268,25],[284,8,268,34,"z"],[284,9,268,35],[284,12,268,40,"p"],[284,13,268,41],[284,14,268,30,"pz"],[284,16,268,32],[285,6,269,8],[286,6,270,8],[286,10,270,12,"Fp"],[286,12,270,14],[286,13,270,15,"eql"],[286,16,270,18],[286,17,270,19,"z"],[286,18,270,20],[286,20,270,22,"Fp"],[286,22,270,24],[286,23,270,25,"ONE"],[286,26,270,28],[286,27,270,29],[286,29,271,12],[286,36,271,19],[287,8,271,21,"x"],[287,9,271,22],[288,8,271,24,"y"],[289,6,271,26],[289,7,271,27],[290,6,272,8],[290,10,272,14,"is0"],[290,13,272,17],[290,16,272,20,"p"],[290,17,272,21],[290,18,272,22,"is0"],[290,21,272,25],[290,22,272,26],[290,23,272,27],[291,6,273,8],[292,6,274,8],[293,6,275,8],[293,10,275,12,"iz"],[293,12,275,14],[293,16,275,18],[293,20,275,22],[293,22,276,12,"iz"],[293,24,276,14],[293,27,276,17,"is0"],[293,30,276,20],[293,33,276,23,"Fp"],[293,35,276,25],[293,36,276,26,"ONE"],[293,39,276,29],[293,42,276,32,"Fp"],[293,44,276,34],[293,45,276,35,"inv"],[293,48,276,38],[293,49,276,39,"z"],[293,50,276,40],[293,51,276,41],[294,6,277,8],[294,10,277,14,"ax"],[294,12,277,16],[294,15,277,19,"Fp"],[294,17,277,21],[294,18,277,22,"mul"],[294,21,277,25],[294,22,277,26,"x"],[294,23,277,27],[294,25,277,29,"iz"],[294,27,277,31],[294,28,277,32],[295,6,278,8],[295,10,278,14,"ay"],[295,12,278,16],[295,15,278,19,"Fp"],[295,17,278,21],[295,18,278,22,"mul"],[295,21,278,25],[295,22,278,26,"y"],[295,23,278,27],[295,25,278,29,"iz"],[295,27,278,31],[295,28,278,32],[296,6,279,8],[296,10,279,14,"zz"],[296,12,279,16],[296,15,279,19,"Fp"],[296,17,279,21],[296,18,279,22,"mul"],[296,21,279,25],[296,22,279,26,"z"],[296,23,279,27],[296,25,279,29,"iz"],[296,27,279,31],[296,28,279,32],[297,6,280,8],[297,10,280,12,"is0"],[297,13,280,15],[297,15,281,12],[297,22,281,19],[298,8,281,21,"x"],[298,9,281,22],[298,11,281,24,"Fp"],[298,13,281,26],[298,14,281,27,"ZERO"],[298,18,281,31],[299,8,281,33,"y"],[299,9,281,34],[299,11,281,36,"Fp"],[299,13,281,38],[299,14,281,39,"ZERO"],[300,6,281,44],[300,7,281,45],[301,6,282,8],[301,10,282,12],[301,11,282,13,"Fp"],[301,13,282,15],[301,14,282,16,"eql"],[301,17,282,19],[301,18,282,20,"zz"],[301,20,282,22],[301,22,282,24,"Fp"],[301,24,282,26],[301,25,282,27,"ONE"],[301,28,282,30],[301,29,282,31],[301,31,283,12],[301,37,283,18],[301,41,283,22,"Error"],[301,46,283,27],[301,47,283,28],[301,65,283,46],[301,66,283,47],[302,6,284,8],[302,13,284,15],[303,8,284,17,"x"],[303,9,284,18],[303,11,284,20,"ax"],[303,13,284,22],[304,8,284,24,"y"],[304,9,284,25],[304,11,284,27,"ay"],[305,6,284,30],[305,7,284,31],[306,4,285,4],[306,5,285,5],[306,6,285,6],[307,4,286,4],[308,4,287,4],[309,4,288,4],[309,8,288,10,"assertValidMemo"],[309,23,288,25],[309,26,288,28],[309,27,288,29],[309,28,288,30],[309,30,288,32,"utils_js_1"],[309,40,288,42],[309,41,288,43,"memoized"],[309,49,288,51],[309,51,288,54,"p"],[309,52,288,55],[309,56,288,60],[310,6,289,8],[310,10,289,12,"p"],[310,11,289,13],[310,12,289,14,"is0"],[310,15,289,17],[310,16,289,18],[310,17,289,19],[310,19,289,21],[311,8,290,12],[312,8,291,12],[313,8,292,12],[314,8,293,12],[314,12,293,16,"CURVE"],[314,17,293,21],[314,18,293,22,"allowInfinityPoint"],[314,36,293,40],[314,40,293,44],[314,41,293,45,"Fp"],[314,43,293,47],[314,44,293,48,"is0"],[314,47,293,51],[314,48,293,52,"p"],[314,49,293,53],[314,50,293,54,"py"],[314,52,293,56],[314,53,293,57],[314,55,294,16],[315,8,295,12],[315,14,295,18],[315,18,295,22,"Error"],[315,23,295,27],[315,24,295,28],[315,41,295,45],[315,42,295,46],[316,6,296,8],[317,6,297,8],[318,6,298,8],[318,10,298,8,"_p$toAffine"],[318,21,298,8],[318,24,298,25,"p"],[318,25,298,26],[318,26,298,27,"toAffine"],[318,34,298,35],[318,35,298,36],[318,36,298,37],[319,8,298,16,"x"],[319,9,298,17],[319,12,298,17,"_p$toAffine"],[319,23,298,17],[319,24,298,16,"x"],[319,25,298,17],[320,8,298,19,"y"],[320,9,298,20],[320,12,298,20,"_p$toAffine"],[320,23,298,20],[320,24,298,19,"y"],[320,25,298,20],[321,6,299,8],[322,6,300,8],[322,10,300,12],[322,11,300,13,"Fp"],[322,13,300,15],[322,14,300,16,"isValid"],[322,21,300,23],[322,22,300,24,"x"],[322,23,300,25],[322,24,300,26],[322,28,300,30],[322,29,300,31,"Fp"],[322,31,300,33],[322,32,300,34,"isValid"],[322,39,300,41],[322,40,300,42,"y"],[322,41,300,43],[322,42,300,44],[322,44,301,12],[322,50,301,18],[322,54,301,22,"Error"],[322,59,301,27],[322,60,301,28],[322,86,301,54],[322,87,301,55],[323,6,302,8],[323,10,302,14,"left"],[323,14,302,18],[323,17,302,21,"Fp"],[323,19,302,23],[323,20,302,24,"sqr"],[323,23,302,27],[323,24,302,28,"y"],[323,25,302,29],[323,26,302,30],[323,27,302,31],[323,28,302,32],[324,6,303,8],[324,10,303,14,"right"],[324,15,303,19],[324,18,303,22,"weierstrassEquation"],[324,37,303,41],[324,38,303,42,"x"],[324,39,303,43],[324,40,303,44],[324,41,303,45],[324,42,303,46],[325,6,304,8],[325,10,304,12],[325,11,304,13,"Fp"],[325,13,304,15],[325,14,304,16,"eql"],[325,17,304,19],[325,18,304,20,"left"],[325,22,304,24],[325,24,304,26,"right"],[325,29,304,31],[325,30,304,32],[325,32,305,12],[325,38,305,18],[325,42,305,22,"Error"],[325,47,305,27],[325,48,305,28],[325,83,305,63],[325,84,305,64],[326,6,306,8],[326,10,306,12],[326,11,306,13,"p"],[326,12,306,14],[326,13,306,15,"isTorsionFree"],[326,26,306,28],[326,27,306,29],[326,28,306,30],[326,30,307,12],[326,36,307,18],[326,40,307,22,"Error"],[326,45,307,27],[326,46,307,28],[326,86,307,68],[326,87,307,69],[327,6,308,8],[327,13,308,15],[327,17,308,19],[328,4,309,4],[328,5,309,5],[328,6,309,6],[329,4,310,4],[330,0,311,0],[331,0,312,0],[332,0,313,0],[333,0,314,0],[334,4,310,4],[334,8,315,10,"Point"],[334,13,315,15],[335,6,316,8],[335,15,316,8,"Point"],[335,21,316,20,"px"],[335,23,316,22],[335,25,316,24,"py"],[335,27,316,26],[335,29,316,28,"pz"],[335,31,316,30],[335,33,316,32],[336,8,316,32,"_classCallCheck"],[336,23,316,32],[336,30,316,32,"Point"],[336,35,316,32],[337,8,317,12],[337,12,317,16],[337,13,317,17,"px"],[337,15,317,19],[337,18,317,22,"px"],[337,20,317,24],[338,8,318,12],[338,12,318,16],[338,13,318,17,"py"],[338,15,318,19],[338,18,318,22,"py"],[338,20,318,24],[339,8,319,12],[339,12,319,16],[339,13,319,17,"pz"],[339,15,319,19],[339,18,319,22,"pz"],[339,20,319,24],[340,8,320,12],[340,12,320,16,"px"],[340,14,320,18],[340,18,320,22],[340,22,320,26],[340,26,320,30],[340,27,320,31,"Fp"],[340,29,320,33],[340,30,320,34,"isValid"],[340,37,320,41],[340,38,320,42,"px"],[340,40,320,44],[340,41,320,45],[340,43,321,16],[340,49,321,22],[340,53,321,26,"Error"],[340,58,321,31],[340,59,321,32],[340,71,321,44],[340,72,321,45],[341,8,322,12],[341,12,322,16,"py"],[341,14,322,18],[341,18,322,22],[341,22,322,26],[341,26,322,30],[341,27,322,31,"Fp"],[341,29,322,33],[341,30,322,34,"isValid"],[341,37,322,41],[341,38,322,42,"py"],[341,40,322,44],[341,41,322,45],[341,43,323,16],[341,49,323,22],[341,53,323,26,"Error"],[341,58,323,31],[341,59,323,32],[341,71,323,44],[341,72,323,45],[342,8,324,12],[342,12,324,16,"pz"],[342,14,324,18],[342,18,324,22],[342,22,324,26],[342,26,324,30],[342,27,324,31,"Fp"],[342,29,324,33],[342,30,324,34,"isValid"],[342,37,324,41],[342,38,324,42,"pz"],[342,40,324,44],[342,41,324,45],[342,43,325,16],[342,49,325,22],[342,53,325,26,"Error"],[342,58,325,31],[342,59,325,32],[342,71,325,44],[342,72,325,45],[343,8,326,12,"Object"],[343,14,326,18],[343,15,326,19,"freeze"],[343,21,326,25],[343,22,326,26],[343,26,326,30],[343,27,326,31],[344,6,327,8],[345,6,328,8],[346,6,329,8],[347,6,329,8],[347,13,329,8,"_createClass"],[347,25,329,8],[347,26,329,8,"Point"],[347,31,329,8],[348,8,329,8,"key"],[348,11,329,8],[349,8,329,8,"get"],[349,11,329,8],[349,13,342,8],[349,22,342,8,"get"],[349,23,342,8],[349,25,342,16],[350,10,343,12],[350,17,343,19],[350,21,343,23],[350,22,343,24,"toAffine"],[350,30,343,32],[350,31,343,33],[350,32,343,34],[350,33,343,35,"x"],[350,34,343,36],[351,8,344,8],[352,6,344,9],[353,8,344,9,"key"],[353,11,344,9],[354,8,344,9,"get"],[354,11,344,9],[354,13,345,8],[354,22,345,8,"get"],[354,23,345,8],[354,25,345,16],[355,10,346,12],[355,17,346,19],[355,21,346,23],[355,22,346,24,"toAffine"],[355,30,346,32],[355,31,346,33],[355,32,346,34],[355,33,346,35,"y"],[355,34,346,36],[356,8,347,8],[357,8,348,8],[358,0,349,0],[359,0,350,0],[360,0,351,0],[361,0,352,0],[362,0,353,0],[363,6,348,8],[364,8,348,8,"key"],[364,11,348,8],[365,8,348,8,"value"],[365,13,348,8],[366,8,375,8],[367,8,376,8],[367,17,376,8,"_setWindowSize"],[367,31,376,22,"_setWindowSize"],[367,32,376,23,"windowSize"],[367,42,376,33],[367,44,376,35],[368,10,377,12,"wnaf"],[368,14,377,16],[368,15,377,17,"setWindowSize"],[368,28,377,30],[368,29,377,31],[368,33,377,35],[368,35,377,37,"windowSize"],[368,45,377,47],[368,46,377,48],[369,8,378,8],[370,8,379,8],[371,6,379,8],[372,8,379,8,"key"],[372,11,379,8],[373,8,379,8,"value"],[373,13,379,8],[373,15,380,8],[373,24,380,8,"assertValidity"],[373,38,380,22,"assertValidity"],[373,39,380,22],[373,41,380,25],[374,10,381,12,"assertValidMemo"],[374,25,381,27],[374,26,381,28],[374,30,381,32],[374,31,381,33],[375,8,382,8],[376,6,382,9],[377,8,382,9,"key"],[377,11,382,9],[378,8,382,9,"value"],[378,13,382,9],[378,15,383,8],[378,24,383,8,"hasEvenY"],[378,32,383,16,"hasEvenY"],[378,33,383,16],[378,35,383,19],[379,10,384,12],[379,14,384,12,"_this$toAffine"],[379,28,384,12],[379,31,384,26],[379,35,384,30],[379,36,384,31,"toAffine"],[379,44,384,39],[379,45,384,40],[379,46,384,41],[380,12,384,20,"y"],[380,13,384,21],[380,16,384,21,"_this$toAffine"],[380,30,384,21],[380,31,384,20,"y"],[380,32,384,21],[381,10,385,12],[381,14,385,16,"Fp"],[381,16,385,18],[381,17,385,19,"isOdd"],[381,22,385,24],[381,24,386,16],[381,31,386,23],[381,32,386,24,"Fp"],[381,34,386,26],[381,35,386,27,"isOdd"],[381,40,386,32],[381,41,386,33,"y"],[381,42,386,34],[381,43,386,35],[382,10,387,12],[382,16,387,18],[382,20,387,22,"Error"],[382,25,387,27],[382,26,387,28],[382,55,387,57],[382,56,387,58],[383,8,388,8],[384,8,389,8],[385,0,390,0],[386,0,391,0],[387,6,389,8],[388,8,389,8,"key"],[388,11,389,8],[389,8,389,8,"value"],[389,13,389,8],[389,15,392,8],[389,24,392,8,"equals"],[389,30,392,14,"equals"],[389,31,392,15,"other"],[389,36,392,20],[389,38,392,22],[390,10,393,12,"assertPrjPoint"],[390,24,393,26],[390,25,393,27,"other"],[390,30,393,32],[390,31,393,33],[391,10,394,12],[391,14,394,24,"X1"],[391,16,394,26],[391,19,394,47],[391,23,394,51],[391,24,394,20,"px"],[391,26,394,22],[392,12,394,32,"Y1"],[392,14,394,34],[392,17,394,47],[392,21,394,51],[392,22,394,28,"py"],[392,24,394,30],[393,12,394,40,"Z1"],[393,14,394,42],[393,17,394,47],[393,21,394,51],[393,22,394,36,"pz"],[393,24,394,38],[394,10,395,12],[394,14,395,24,"X2"],[394,16,395,26],[394,19,395,47,"other"],[394,24,395,52],[394,25,395,20,"px"],[394,27,395,22],[395,12,395,32,"Y2"],[395,14,395,34],[395,17,395,47,"other"],[395,22,395,52],[395,23,395,28,"py"],[395,25,395,30],[396,12,395,40,"Z2"],[396,14,395,42],[396,17,395,47,"other"],[396,22,395,52],[396,23,395,36,"pz"],[396,25,395,38],[397,10,396,12],[397,14,396,18,"U1"],[397,16,396,20],[397,19,396,23,"Fp"],[397,21,396,25],[397,22,396,26,"eql"],[397,25,396,29],[397,26,396,30,"Fp"],[397,28,396,32],[397,29,396,33,"mul"],[397,32,396,36],[397,33,396,37,"X1"],[397,35,396,39],[397,37,396,41,"Z2"],[397,39,396,43],[397,40,396,44],[397,42,396,46,"Fp"],[397,44,396,48],[397,45,396,49,"mul"],[397,48,396,52],[397,49,396,53,"X2"],[397,51,396,55],[397,53,396,57,"Z1"],[397,55,396,59],[397,56,396,60],[397,57,396,61],[398,10,397,12],[398,14,397,18,"U2"],[398,16,397,20],[398,19,397,23,"Fp"],[398,21,397,25],[398,22,397,26,"eql"],[398,25,397,29],[398,26,397,30,"Fp"],[398,28,397,32],[398,29,397,33,"mul"],[398,32,397,36],[398,33,397,37,"Y1"],[398,35,397,39],[398,37,397,41,"Z2"],[398,39,397,43],[398,40,397,44],[398,42,397,46,"Fp"],[398,44,397,48],[398,45,397,49,"mul"],[398,48,397,52],[398,49,397,53,"Y2"],[398,51,397,55],[398,53,397,57,"Z1"],[398,55,397,59],[398,56,397,60],[398,57,397,61],[399,10,398,12],[399,17,398,19,"U1"],[399,19,398,21],[399,23,398,25,"U2"],[399,25,398,27],[400,8,399,8],[401,8,400,8],[402,0,401,0],[403,0,402,0],[404,6,400,8],[405,8,400,8,"key"],[405,11,400,8],[406,8,400,8,"value"],[406,13,400,8],[406,15,403,8],[406,24,403,8,"negate"],[406,30,403,14,"negate"],[406,31,403,14],[406,33,403,17],[407,10,404,12],[407,17,404,19],[407,21,404,23,"Point"],[407,26,404,28],[407,27,404,29],[407,31,404,33],[407,32,404,34,"px"],[407,34,404,36],[407,36,404,38,"Fp"],[407,38,404,40],[407,39,404,41,"neg"],[407,42,404,44],[407,43,404,45],[407,47,404,49],[407,48,404,50,"py"],[407,50,404,52],[407,51,404,53],[407,53,404,55],[407,57,404,59],[407,58,404,60,"pz"],[407,60,404,62],[407,61,404,63],[408,8,405,8],[409,8,406,8],[410,8,407,8],[411,8,408,8],[412,8,409,8],[413,6,409,8],[414,8,409,8,"key"],[414,11,409,8],[415,8,409,8,"value"],[415,13,409,8],[415,15,410,8],[415,24,410,8,"double"],[415,30,410,14,"double"],[415,31,410,14],[415,33,410,17],[416,10,411,12],[416,14,411,20,"a"],[416,15,411,21],[416,18,411,29,"CURVE"],[416,23,411,34],[416,24,411,20,"a"],[416,25,411,21],[417,12,411,23,"b"],[417,13,411,24],[417,16,411,29,"CURVE"],[417,21,411,34],[417,22,411,23,"b"],[417,23,411,24],[418,10,412,12],[418,14,412,18,"b3"],[418,16,412,20],[418,19,412,23,"Fp"],[418,21,412,25],[418,22,412,26,"mul"],[418,25,412,29],[418,26,412,30,"b"],[418,27,412,31],[418,29,412,33,"_3n"],[418,32,412,36],[418,33,412,37],[419,10,413,12],[419,14,413,24,"X1"],[419,16,413,26],[419,19,413,47],[419,23,413,51],[419,24,413,20,"px"],[419,26,413,22],[420,12,413,32,"Y1"],[420,14,413,34],[420,17,413,47],[420,21,413,51],[420,22,413,28,"py"],[420,24,413,30],[421,12,413,40,"Z1"],[421,14,413,42],[421,17,413,47],[421,21,413,51],[421,22,413,36,"pz"],[421,24,413,38],[422,10,414,12],[422,14,414,16,"X3"],[422,16,414,18],[422,19,414,21,"Fp"],[422,21,414,23],[422,22,414,24,"ZERO"],[422,26,414,28],[423,12,414,30,"Y3"],[423,14,414,32],[423,17,414,35,"Fp"],[423,19,414,37],[423,20,414,38,"ZERO"],[423,24,414,42],[424,12,414,44,"Z3"],[424,14,414,46],[424,17,414,49,"Fp"],[424,19,414,51],[424,20,414,52,"ZERO"],[424,24,414,56],[424,25,414,57],[424,26,414,58],[425,10,415,12],[425,14,415,16,"t0"],[425,16,415,18],[425,19,415,21,"Fp"],[425,21,415,23],[425,22,415,24,"mul"],[425,25,415,27],[425,26,415,28,"X1"],[425,28,415,30],[425,30,415,32,"X1"],[425,32,415,34],[425,33,415,35],[425,34,415,36],[425,35,415,37],[426,10,416,12],[426,14,416,16,"t1"],[426,16,416,18],[426,19,416,21,"Fp"],[426,21,416,23],[426,22,416,24,"mul"],[426,25,416,27],[426,26,416,28,"Y1"],[426,28,416,30],[426,30,416,32,"Y1"],[426,32,416,34],[426,33,416,35],[427,10,417,12],[427,14,417,16,"t2"],[427,16,417,18],[427,19,417,21,"Fp"],[427,21,417,23],[427,22,417,24,"mul"],[427,25,417,27],[427,26,417,28,"Z1"],[427,28,417,30],[427,30,417,32,"Z1"],[427,32,417,34],[427,33,417,35],[428,10,418,12],[428,14,418,16,"t3"],[428,16,418,18],[428,19,418,21,"Fp"],[428,21,418,23],[428,22,418,24,"mul"],[428,25,418,27],[428,26,418,28,"X1"],[428,28,418,30],[428,30,418,32,"Y1"],[428,32,418,34],[428,33,418,35],[429,10,419,12,"t3"],[429,12,419,14],[429,15,419,17,"Fp"],[429,17,419,19],[429,18,419,20,"add"],[429,21,419,23],[429,22,419,24,"t3"],[429,24,419,26],[429,26,419,28,"t3"],[429,28,419,30],[429,29,419,31],[429,30,419,32],[429,31,419,33],[430,10,420,12,"Z3"],[430,12,420,14],[430,15,420,17,"Fp"],[430,17,420,19],[430,18,420,20,"mul"],[430,21,420,23],[430,22,420,24,"X1"],[430,24,420,26],[430,26,420,28,"Z1"],[430,28,420,30],[430,29,420,31],[431,10,421,12,"Z3"],[431,12,421,14],[431,15,421,17,"Fp"],[431,17,421,19],[431,18,421,20,"add"],[431,21,421,23],[431,22,421,24,"Z3"],[431,24,421,26],[431,26,421,28,"Z3"],[431,28,421,30],[431,29,421,31],[432,10,422,12,"X3"],[432,12,422,14],[432,15,422,17,"Fp"],[432,17,422,19],[432,18,422,20,"mul"],[432,21,422,23],[432,22,422,24,"a"],[432,23,422,25],[432,25,422,27,"Z3"],[432,27,422,29],[432,28,422,30],[433,10,423,12,"Y3"],[433,12,423,14],[433,15,423,17,"Fp"],[433,17,423,19],[433,18,423,20,"mul"],[433,21,423,23],[433,22,423,24,"b3"],[433,24,423,26],[433,26,423,28,"t2"],[433,28,423,30],[433,29,423,31],[434,10,424,12,"Y3"],[434,12,424,14],[434,15,424,17,"Fp"],[434,17,424,19],[434,18,424,20,"add"],[434,21,424,23],[434,22,424,24,"X3"],[434,24,424,26],[434,26,424,28,"Y3"],[434,28,424,30],[434,29,424,31],[434,30,424,32],[434,31,424,33],[435,10,425,12,"X3"],[435,12,425,14],[435,15,425,17,"Fp"],[435,17,425,19],[435,18,425,20,"sub"],[435,21,425,23],[435,22,425,24,"t1"],[435,24,425,26],[435,26,425,28,"Y3"],[435,28,425,30],[435,29,425,31],[436,10,426,12,"Y3"],[436,12,426,14],[436,15,426,17,"Fp"],[436,17,426,19],[436,18,426,20,"add"],[436,21,426,23],[436,22,426,24,"t1"],[436,24,426,26],[436,26,426,28,"Y3"],[436,28,426,30],[436,29,426,31],[437,10,427,12,"Y3"],[437,12,427,14],[437,15,427,17,"Fp"],[437,17,427,19],[437,18,427,20,"mul"],[437,21,427,23],[437,22,427,24,"X3"],[437,24,427,26],[437,26,427,28,"Y3"],[437,28,427,30],[437,29,427,31],[438,10,428,12,"X3"],[438,12,428,14],[438,15,428,17,"Fp"],[438,17,428,19],[438,18,428,20,"mul"],[438,21,428,23],[438,22,428,24,"t3"],[438,24,428,26],[438,26,428,28,"X3"],[438,28,428,30],[438,29,428,31],[439,10,429,12,"Z3"],[439,12,429,14],[439,15,429,17,"Fp"],[439,17,429,19],[439,18,429,20,"mul"],[439,21,429,23],[439,22,429,24,"b3"],[439,24,429,26],[439,26,429,28,"Z3"],[439,28,429,30],[439,29,429,31],[439,30,429,32],[439,31,429,33],[440,10,430,12,"t2"],[440,12,430,14],[440,15,430,17,"Fp"],[440,17,430,19],[440,18,430,20,"mul"],[440,21,430,23],[440,22,430,24,"a"],[440,23,430,25],[440,25,430,27,"t2"],[440,27,430,29],[440,28,430,30],[441,10,431,12,"t3"],[441,12,431,14],[441,15,431,17,"Fp"],[441,17,431,19],[441,18,431,20,"sub"],[441,21,431,23],[441,22,431,24,"t0"],[441,24,431,26],[441,26,431,28,"t2"],[441,28,431,30],[441,29,431,31],[442,10,432,12,"t3"],[442,12,432,14],[442,15,432,17,"Fp"],[442,17,432,19],[442,18,432,20,"mul"],[442,21,432,23],[442,22,432,24,"a"],[442,23,432,25],[442,25,432,27,"t3"],[442,27,432,29],[442,28,432,30],[443,10,433,12,"t3"],[443,12,433,14],[443,15,433,17,"Fp"],[443,17,433,19],[443,18,433,20,"add"],[443,21,433,23],[443,22,433,24,"t3"],[443,24,433,26],[443,26,433,28,"Z3"],[443,28,433,30],[443,29,433,31],[444,10,434,12,"Z3"],[444,12,434,14],[444,15,434,17,"Fp"],[444,17,434,19],[444,18,434,20,"add"],[444,21,434,23],[444,22,434,24,"t0"],[444,24,434,26],[444,26,434,28,"t0"],[444,28,434,30],[444,29,434,31],[444,30,434,32],[444,31,434,33],[445,10,435,12,"t0"],[445,12,435,14],[445,15,435,17,"Fp"],[445,17,435,19],[445,18,435,20,"add"],[445,21,435,23],[445,22,435,24,"Z3"],[445,24,435,26],[445,26,435,28,"t0"],[445,28,435,30],[445,29,435,31],[446,10,436,12,"t0"],[446,12,436,14],[446,15,436,17,"Fp"],[446,17,436,19],[446,18,436,20,"add"],[446,21,436,23],[446,22,436,24,"t0"],[446,24,436,26],[446,26,436,28,"t2"],[446,28,436,30],[446,29,436,31],[447,10,437,12,"t0"],[447,12,437,14],[447,15,437,17,"Fp"],[447,17,437,19],[447,18,437,20,"mul"],[447,21,437,23],[447,22,437,24,"t0"],[447,24,437,26],[447,26,437,28,"t3"],[447,28,437,30],[447,29,437,31],[448,10,438,12,"Y3"],[448,12,438,14],[448,15,438,17,"Fp"],[448,17,438,19],[448,18,438,20,"add"],[448,21,438,23],[448,22,438,24,"Y3"],[448,24,438,26],[448,26,438,28,"t0"],[448,28,438,30],[448,29,438,31],[449,10,439,12,"t2"],[449,12,439,14],[449,15,439,17,"Fp"],[449,17,439,19],[449,18,439,20,"mul"],[449,21,439,23],[449,22,439,24,"Y1"],[449,24,439,26],[449,26,439,28,"Z1"],[449,28,439,30],[449,29,439,31],[449,30,439,32],[449,31,439,33],[450,10,440,12,"t2"],[450,12,440,14],[450,15,440,17,"Fp"],[450,17,440,19],[450,18,440,20,"add"],[450,21,440,23],[450,22,440,24,"t2"],[450,24,440,26],[450,26,440,28,"t2"],[450,28,440,30],[450,29,440,31],[451,10,441,12,"t0"],[451,12,441,14],[451,15,441,17,"Fp"],[451,17,441,19],[451,18,441,20,"mul"],[451,21,441,23],[451,22,441,24,"t2"],[451,24,441,26],[451,26,441,28,"t3"],[451,28,441,30],[451,29,441,31],[452,10,442,12,"X3"],[452,12,442,14],[452,15,442,17,"Fp"],[452,17,442,19],[452,18,442,20,"sub"],[452,21,442,23],[452,22,442,24,"X3"],[452,24,442,26],[452,26,442,28,"t0"],[452,28,442,30],[452,29,442,31],[453,10,443,12,"Z3"],[453,12,443,14],[453,15,443,17,"Fp"],[453,17,443,19],[453,18,443,20,"mul"],[453,21,443,23],[453,22,443,24,"t2"],[453,24,443,26],[453,26,443,28,"t1"],[453,28,443,30],[453,29,443,31],[454,10,444,12,"Z3"],[454,12,444,14],[454,15,444,17,"Fp"],[454,17,444,19],[454,18,444,20,"add"],[454,21,444,23],[454,22,444,24,"Z3"],[454,24,444,26],[454,26,444,28,"Z3"],[454,28,444,30],[454,29,444,31],[454,30,444,32],[454,31,444,33],[455,10,445,12,"Z3"],[455,12,445,14],[455,15,445,17,"Fp"],[455,17,445,19],[455,18,445,20,"add"],[455,21,445,23],[455,22,445,24,"Z3"],[455,24,445,26],[455,26,445,28,"Z3"],[455,28,445,30],[455,29,445,31],[456,10,446,12],[456,17,446,19],[456,21,446,23,"Point"],[456,26,446,28],[456,27,446,29,"X3"],[456,29,446,31],[456,31,446,33,"Y3"],[456,33,446,35],[456,35,446,37,"Z3"],[456,37,446,39],[456,38,446,40],[457,8,447,8],[458,8,448,8],[459,8,449,8],[460,8,450,8],[461,8,451,8],[462,6,451,8],[463,8,451,8,"key"],[463,11,451,8],[464,8,451,8,"value"],[464,13,451,8],[464,15,452,8],[464,24,452,8,"add"],[464,27,452,11,"add"],[464,28,452,12,"other"],[464,33,452,17],[464,35,452,19],[465,10,453,12,"assertPrjPoint"],[465,24,453,26],[465,25,453,27,"other"],[465,30,453,32],[465,31,453,33],[466,10,454,12],[466,14,454,24,"X1"],[466,16,454,26],[466,19,454,47],[466,23,454,51],[466,24,454,20,"px"],[466,26,454,22],[467,12,454,32,"Y1"],[467,14,454,34],[467,17,454,47],[467,21,454,51],[467,22,454,28,"py"],[467,24,454,30],[468,12,454,40,"Z1"],[468,14,454,42],[468,17,454,47],[468,21,454,51],[468,22,454,36,"pz"],[468,24,454,38],[469,10,455,12],[469,14,455,24,"X2"],[469,16,455,26],[469,19,455,47,"other"],[469,24,455,52],[469,25,455,20,"px"],[469,27,455,22],[470,12,455,32,"Y2"],[470,14,455,34],[470,17,455,47,"other"],[470,22,455,52],[470,23,455,28,"py"],[470,25,455,30],[471,12,455,40,"Z2"],[471,14,455,42],[471,17,455,47,"other"],[471,22,455,52],[471,23,455,36,"pz"],[471,25,455,38],[472,10,456,12],[472,14,456,16,"X3"],[472,16,456,18],[472,19,456,21,"Fp"],[472,21,456,23],[472,22,456,24,"ZERO"],[472,26,456,28],[473,12,456,30,"Y3"],[473,14,456,32],[473,17,456,35,"Fp"],[473,19,456,37],[473,20,456,38,"ZERO"],[473,24,456,42],[474,12,456,44,"Z3"],[474,14,456,46],[474,17,456,49,"Fp"],[474,19,456,51],[474,20,456,52,"ZERO"],[474,24,456,56],[474,25,456,57],[474,26,456,58],[475,10,457,12],[475,14,457,18,"a"],[475,15,457,19],[475,18,457,22,"CURVE"],[475,23,457,27],[475,24,457,28,"a"],[475,25,457,29],[476,10,458,12],[476,14,458,18,"b3"],[476,16,458,20],[476,19,458,23,"Fp"],[476,21,458,25],[476,22,458,26,"mul"],[476,25,458,29],[476,26,458,30,"CURVE"],[476,31,458,35],[476,32,458,36,"b"],[476,33,458,37],[476,35,458,39,"_3n"],[476,38,458,42],[476,39,458,43],[477,10,459,12],[477,14,459,16,"t0"],[477,16,459,18],[477,19,459,21,"Fp"],[477,21,459,23],[477,22,459,24,"mul"],[477,25,459,27],[477,26,459,28,"X1"],[477,28,459,30],[477,30,459,32,"X2"],[477,32,459,34],[477,33,459,35],[477,34,459,36],[477,35,459,37],[478,10,460,12],[478,14,460,16,"t1"],[478,16,460,18],[478,19,460,21,"Fp"],[478,21,460,23],[478,22,460,24,"mul"],[478,25,460,27],[478,26,460,28,"Y1"],[478,28,460,30],[478,30,460,32,"Y2"],[478,32,460,34],[478,33,460,35],[479,10,461,12],[479,14,461,16,"t2"],[479,16,461,18],[479,19,461,21,"Fp"],[479,21,461,23],[479,22,461,24,"mul"],[479,25,461,27],[479,26,461,28,"Z1"],[479,28,461,30],[479,30,461,32,"Z2"],[479,32,461,34],[479,33,461,35],[480,10,462,12],[480,14,462,16,"t3"],[480,16,462,18],[480,19,462,21,"Fp"],[480,21,462,23],[480,22,462,24,"add"],[480,25,462,27],[480,26,462,28,"X1"],[480,28,462,30],[480,30,462,32,"Y1"],[480,32,462,34],[480,33,462,35],[481,10,463,12],[481,14,463,16,"t4"],[481,16,463,18],[481,19,463,21,"Fp"],[481,21,463,23],[481,22,463,24,"add"],[481,25,463,27],[481,26,463,28,"X2"],[481,28,463,30],[481,30,463,32,"Y2"],[481,32,463,34],[481,33,463,35],[481,34,463,36],[481,35,463,37],[482,10,464,12,"t3"],[482,12,464,14],[482,15,464,17,"Fp"],[482,17,464,19],[482,18,464,20,"mul"],[482,21,464,23],[482,22,464,24,"t3"],[482,24,464,26],[482,26,464,28,"t4"],[482,28,464,30],[482,29,464,31],[483,10,465,12,"t4"],[483,12,465,14],[483,15,465,17,"Fp"],[483,17,465,19],[483,18,465,20,"add"],[483,21,465,23],[483,22,465,24,"t0"],[483,24,465,26],[483,26,465,28,"t1"],[483,28,465,30],[483,29,465,31],[484,10,466,12,"t3"],[484,12,466,14],[484,15,466,17,"Fp"],[484,17,466,19],[484,18,466,20,"sub"],[484,21,466,23],[484,22,466,24,"t3"],[484,24,466,26],[484,26,466,28,"t4"],[484,28,466,30],[484,29,466,31],[485,10,467,12,"t4"],[485,12,467,14],[485,15,467,17,"Fp"],[485,17,467,19],[485,18,467,20,"add"],[485,21,467,23],[485,22,467,24,"X1"],[485,24,467,26],[485,26,467,28,"Z1"],[485,28,467,30],[485,29,467,31],[486,10,468,12],[486,14,468,16,"t5"],[486,16,468,18],[486,19,468,21,"Fp"],[486,21,468,23],[486,22,468,24,"add"],[486,25,468,27],[486,26,468,28,"X2"],[486,28,468,30],[486,30,468,32,"Z2"],[486,32,468,34],[486,33,468,35],[486,34,468,36],[486,35,468,37],[487,10,469,12,"t4"],[487,12,469,14],[487,15,469,17,"Fp"],[487,17,469,19],[487,18,469,20,"mul"],[487,21,469,23],[487,22,469,24,"t4"],[487,24,469,26],[487,26,469,28,"t5"],[487,28,469,30],[487,29,469,31],[488,10,470,12,"t5"],[488,12,470,14],[488,15,470,17,"Fp"],[488,17,470,19],[488,18,470,20,"add"],[488,21,470,23],[488,22,470,24,"t0"],[488,24,470,26],[488,26,470,28,"t2"],[488,28,470,30],[488,29,470,31],[489,10,471,12,"t4"],[489,12,471,14],[489,15,471,17,"Fp"],[489,17,471,19],[489,18,471,20,"sub"],[489,21,471,23],[489,22,471,24,"t4"],[489,24,471,26],[489,26,471,28,"t5"],[489,28,471,30],[489,29,471,31],[490,10,472,12,"t5"],[490,12,472,14],[490,15,472,17,"Fp"],[490,17,472,19],[490,18,472,20,"add"],[490,21,472,23],[490,22,472,24,"Y1"],[490,24,472,26],[490,26,472,28,"Z1"],[490,28,472,30],[490,29,472,31],[491,10,473,12,"X3"],[491,12,473,14],[491,15,473,17,"Fp"],[491,17,473,19],[491,18,473,20,"add"],[491,21,473,23],[491,22,473,24,"Y2"],[491,24,473,26],[491,26,473,28,"Z2"],[491,28,473,30],[491,29,473,31],[491,30,473,32],[491,31,473,33],[492,10,474,12,"t5"],[492,12,474,14],[492,15,474,17,"Fp"],[492,17,474,19],[492,18,474,20,"mul"],[492,21,474,23],[492,22,474,24,"t5"],[492,24,474,26],[492,26,474,28,"X3"],[492,28,474,30],[492,29,474,31],[493,10,475,12,"X3"],[493,12,475,14],[493,15,475,17,"Fp"],[493,17,475,19],[493,18,475,20,"add"],[493,21,475,23],[493,22,475,24,"t1"],[493,24,475,26],[493,26,475,28,"t2"],[493,28,475,30],[493,29,475,31],[494,10,476,12,"t5"],[494,12,476,14],[494,15,476,17,"Fp"],[494,17,476,19],[494,18,476,20,"sub"],[494,21,476,23],[494,22,476,24,"t5"],[494,24,476,26],[494,26,476,28,"X3"],[494,28,476,30],[494,29,476,31],[495,10,477,12,"Z3"],[495,12,477,14],[495,15,477,17,"Fp"],[495,17,477,19],[495,18,477,20,"mul"],[495,21,477,23],[495,22,477,24,"a"],[495,23,477,25],[495,25,477,27,"t4"],[495,27,477,29],[495,28,477,30],[496,10,478,12,"X3"],[496,12,478,14],[496,15,478,17,"Fp"],[496,17,478,19],[496,18,478,20,"mul"],[496,21,478,23],[496,22,478,24,"b3"],[496,24,478,26],[496,26,478,28,"t2"],[496,28,478,30],[496,29,478,31],[496,30,478,32],[496,31,478,33],[497,10,479,12,"Z3"],[497,12,479,14],[497,15,479,17,"Fp"],[497,17,479,19],[497,18,479,20,"add"],[497,21,479,23],[497,22,479,24,"X3"],[497,24,479,26],[497,26,479,28,"Z3"],[497,28,479,30],[497,29,479,31],[498,10,480,12,"X3"],[498,12,480,14],[498,15,480,17,"Fp"],[498,17,480,19],[498,18,480,20,"sub"],[498,21,480,23],[498,22,480,24,"t1"],[498,24,480,26],[498,26,480,28,"Z3"],[498,28,480,30],[498,29,480,31],[499,10,481,12,"Z3"],[499,12,481,14],[499,15,481,17,"Fp"],[499,17,481,19],[499,18,481,20,"add"],[499,21,481,23],[499,22,481,24,"t1"],[499,24,481,26],[499,26,481,28,"Z3"],[499,28,481,30],[499,29,481,31],[500,10,482,12,"Y3"],[500,12,482,14],[500,15,482,17,"Fp"],[500,17,482,19],[500,18,482,20,"mul"],[500,21,482,23],[500,22,482,24,"X3"],[500,24,482,26],[500,26,482,28,"Z3"],[500,28,482,30],[500,29,482,31],[501,10,483,12,"t1"],[501,12,483,14],[501,15,483,17,"Fp"],[501,17,483,19],[501,18,483,20,"add"],[501,21,483,23],[501,22,483,24,"t0"],[501,24,483,26],[501,26,483,28,"t0"],[501,28,483,30],[501,29,483,31],[501,30,483,32],[501,31,483,33],[502,10,484,12,"t1"],[502,12,484,14],[502,15,484,17,"Fp"],[502,17,484,19],[502,18,484,20,"add"],[502,21,484,23],[502,22,484,24,"t1"],[502,24,484,26],[502,26,484,28,"t0"],[502,28,484,30],[502,29,484,31],[503,10,485,12,"t2"],[503,12,485,14],[503,15,485,17,"Fp"],[503,17,485,19],[503,18,485,20,"mul"],[503,21,485,23],[503,22,485,24,"a"],[503,23,485,25],[503,25,485,27,"t2"],[503,27,485,29],[503,28,485,30],[504,10,486,12,"t4"],[504,12,486,14],[504,15,486,17,"Fp"],[504,17,486,19],[504,18,486,20,"mul"],[504,21,486,23],[504,22,486,24,"b3"],[504,24,486,26],[504,26,486,28,"t4"],[504,28,486,30],[504,29,486,31],[505,10,487,12,"t1"],[505,12,487,14],[505,15,487,17,"Fp"],[505,17,487,19],[505,18,487,20,"add"],[505,21,487,23],[505,22,487,24,"t1"],[505,24,487,26],[505,26,487,28,"t2"],[505,28,487,30],[505,29,487,31],[506,10,488,12,"t2"],[506,12,488,14],[506,15,488,17,"Fp"],[506,17,488,19],[506,18,488,20,"sub"],[506,21,488,23],[506,22,488,24,"t0"],[506,24,488,26],[506,26,488,28,"t2"],[506,28,488,30],[506,29,488,31],[506,30,488,32],[506,31,488,33],[507,10,489,12,"t2"],[507,12,489,14],[507,15,489,17,"Fp"],[507,17,489,19],[507,18,489,20,"mul"],[507,21,489,23],[507,22,489,24,"a"],[507,23,489,25],[507,25,489,27,"t2"],[507,27,489,29],[507,28,489,30],[508,10,490,12,"t4"],[508,12,490,14],[508,15,490,17,"Fp"],[508,17,490,19],[508,18,490,20,"add"],[508,21,490,23],[508,22,490,24,"t4"],[508,24,490,26],[508,26,490,28,"t2"],[508,28,490,30],[508,29,490,31],[509,10,491,12,"t0"],[509,12,491,14],[509,15,491,17,"Fp"],[509,17,491,19],[509,18,491,20,"mul"],[509,21,491,23],[509,22,491,24,"t1"],[509,24,491,26],[509,26,491,28,"t4"],[509,28,491,30],[509,29,491,31],[510,10,492,12,"Y3"],[510,12,492,14],[510,15,492,17,"Fp"],[510,17,492,19],[510,18,492,20,"add"],[510,21,492,23],[510,22,492,24,"Y3"],[510,24,492,26],[510,26,492,28,"t0"],[510,28,492,30],[510,29,492,31],[511,10,493,12,"t0"],[511,12,493,14],[511,15,493,17,"Fp"],[511,17,493,19],[511,18,493,20,"mul"],[511,21,493,23],[511,22,493,24,"t5"],[511,24,493,26],[511,26,493,28,"t4"],[511,28,493,30],[511,29,493,31],[511,30,493,32],[511,31,493,33],[512,10,494,12,"X3"],[512,12,494,14],[512,15,494,17,"Fp"],[512,17,494,19],[512,18,494,20,"mul"],[512,21,494,23],[512,22,494,24,"t3"],[512,24,494,26],[512,26,494,28,"X3"],[512,28,494,30],[512,29,494,31],[513,10,495,12,"X3"],[513,12,495,14],[513,15,495,17,"Fp"],[513,17,495,19],[513,18,495,20,"sub"],[513,21,495,23],[513,22,495,24,"X3"],[513,24,495,26],[513,26,495,28,"t0"],[513,28,495,30],[513,29,495,31],[514,10,496,12,"t0"],[514,12,496,14],[514,15,496,17,"Fp"],[514,17,496,19],[514,18,496,20,"mul"],[514,21,496,23],[514,22,496,24,"t3"],[514,24,496,26],[514,26,496,28,"t1"],[514,28,496,30],[514,29,496,31],[515,10,497,12,"Z3"],[515,12,497,14],[515,15,497,17,"Fp"],[515,17,497,19],[515,18,497,20,"mul"],[515,21,497,23],[515,22,497,24,"t5"],[515,24,497,26],[515,26,497,28,"Z3"],[515,28,497,30],[515,29,497,31],[516,10,498,12,"Z3"],[516,12,498,14],[516,15,498,17,"Fp"],[516,17,498,19],[516,18,498,20,"add"],[516,21,498,23],[516,22,498,24,"Z3"],[516,24,498,26],[516,26,498,28,"t0"],[516,28,498,30],[516,29,498,31],[516,30,498,32],[516,31,498,33],[517,10,499,12],[517,17,499,19],[517,21,499,23,"Point"],[517,26,499,28],[517,27,499,29,"X3"],[517,29,499,31],[517,31,499,33,"Y3"],[517,33,499,35],[517,35,499,37,"Z3"],[517,37,499,39],[517,38,499,40],[518,8,500,8],[519,6,500,9],[520,8,500,9,"key"],[520,11,500,9],[521,8,500,9,"value"],[521,13,500,9],[521,15,501,8],[521,24,501,8,"subtract"],[521,32,501,16,"subtract"],[521,33,501,17,"other"],[521,38,501,22],[521,40,501,24],[522,10,502,12],[522,17,502,19],[522,21,502,23],[522,22,502,24,"add"],[522,25,502,27],[522,26,502,28,"other"],[522,31,502,33],[522,32,502,34,"negate"],[522,38,502,40],[522,39,502,41],[522,40,502,42],[522,41,502,43],[523,8,503,8],[524,6,503,9],[525,8,503,9,"key"],[525,11,503,9],[526,8,503,9,"value"],[526,13,503,9],[526,15,504,8],[526,24,504,8,"is0"],[526,27,504,11,"is0"],[526,28,504,11],[526,30,504,14],[527,10,505,12],[527,17,505,19],[527,21,505,23],[527,22,505,24,"equals"],[527,28,505,30],[527,29,505,31,"Point"],[527,34,505,36],[527,35,505,37,"ZERO"],[527,39,505,41],[527,40,505,42],[528,8,506,8],[529,6,506,9],[530,8,506,9,"key"],[530,11,506,9],[531,8,506,9,"value"],[531,13,506,9],[531,15,507,8],[531,24,507,8,"wNAF"],[531,28,507,12,"wNAF"],[531,29,507,13,"n"],[531,30,507,14],[531,32,507,16],[532,10,508,12],[532,17,508,19,"wnaf"],[532,21,508,23],[532,22,508,24,"wNAFCached"],[532,32,508,34],[532,33,508,35],[532,37,508,39],[532,39,508,41,"n"],[532,40,508,42],[532,42,508,44,"Point"],[532,47,508,49],[532,48,508,50,"normalizeZ"],[532,58,508,60],[532,59,508,61],[533,8,509,8],[534,8,510,8],[535,0,511,0],[536,0,512,0],[537,0,513,0],[538,0,514,0],[539,6,510,8],[540,8,510,8,"key"],[540,11,510,8],[541,8,510,8,"value"],[541,13,510,8],[541,15,515,8],[541,24,515,8,"multiplyUnsafe"],[541,38,515,22,"multiplyUnsafe"],[541,39,515,23,"sc"],[541,41,515,25],[541,43,515,27],[542,10,516,12],[542,14,516,20,"endo"],[542,18,516,24],[542,21,516,35,"CURVE"],[542,26,516,40],[542,27,516,20,"endo"],[542,31,516,24],[543,12,516,29,"N"],[543,13,516,30],[543,16,516,35,"CURVE"],[543,21,516,40],[543,22,516,26,"n"],[543,23,516,27],[544,10,517,12,"ut"],[544,12,517,14],[544,13,517,15,"aInRange"],[544,21,517,23],[544,22,517,24],[544,30,517,32],[544,32,517,34,"sc"],[544,34,517,36],[544,36,517,38,"_0n"],[544,39,517,41],[544,41,517,43,"N"],[544,42,517,44],[544,43,517,45],[545,10,518,12],[545,14,518,18,"I"],[545,15,518,19],[545,18,518,22,"Point"],[545,23,518,27],[545,24,518,28,"ZERO"],[545,28,518,32],[546,10,519,12],[546,14,519,16,"sc"],[546,16,519,18],[546,21,519,23,"_0n"],[546,24,519,26],[546,26,520,16],[546,33,520,23,"I"],[546,34,520,24],[547,10,521,12],[547,14,521,16],[547,18,521,20],[547,19,521,21,"is0"],[547,22,521,24],[547,23,521,25],[547,24,521,26],[547,28,521,30,"sc"],[547,30,521,32],[547,35,521,37,"_1n"],[547,38,521,40],[547,40,522,16],[547,47,522,23],[547,51,522,27],[548,10,523,12],[549,10,524,12],[549,14,524,16],[549,15,524,17,"endo"],[549,19,524,21],[549,23,524,25,"wnaf"],[549,27,524,29],[549,28,524,30,"hasPrecomputes"],[549,42,524,44],[549,43,524,45],[549,47,524,49],[549,48,524,50],[549,50,525,16],[549,57,525,23,"wnaf"],[549,61,525,27],[549,62,525,28,"wNAFCachedUnsafe"],[549,78,525,44],[549,79,525,45],[549,83,525,49],[549,85,525,51,"sc"],[549,87,525,53],[549,89,525,55,"Point"],[549,94,525,60],[549,95,525,61,"normalizeZ"],[549,105,525,71],[549,106,525,72],[550,10,526,12],[551,10,527,12],[551,14,527,12,"_endo$splitScalar"],[551,31,527,12],[551,34,527,43,"endo"],[551,38,527,47],[551,39,527,48,"splitScalar"],[551,50,527,59],[551,51,527,60,"sc"],[551,53,527,62],[551,54,527,63],[552,12,527,18,"k1neg"],[552,17,527,23],[552,20,527,23,"_endo$splitScalar"],[552,37,527,23],[552,38,527,18,"k1neg"],[552,43,527,23],[553,12,527,25,"k1"],[553,14,527,27],[553,17,527,27,"_endo$splitScalar"],[553,34,527,27],[553,35,527,25,"k1"],[553,37,527,27],[554,12,527,29,"k2neg"],[554,17,527,34],[554,20,527,34,"_endo$splitScalar"],[554,37,527,34],[554,38,527,29,"k2neg"],[554,43,527,34],[555,12,527,36,"k2"],[555,14,527,38],[555,17,527,38,"_endo$splitScalar"],[555,34,527,38],[555,35,527,36,"k2"],[555,37,527,38],[556,10,528,12],[556,14,528,16,"k1p"],[556,17,528,19],[556,20,528,22,"I"],[556,21,528,23],[557,10,529,12],[557,14,529,16,"k2p"],[557,17,529,19],[557,20,529,22,"I"],[557,21,529,23],[558,10,530,12],[558,14,530,16,"d"],[558,15,530,17],[558,18,530,20],[558,22,530,24],[559,10,531,12],[559,17,531,19,"k1"],[559,19,531,21],[559,22,531,24,"_0n"],[559,25,531,27],[559,29,531,31,"k2"],[559,31,531,33],[559,34,531,36,"_0n"],[559,37,531,39],[559,39,531,41],[560,12,532,16],[560,16,532,20,"k1"],[560,18,532,22],[560,21,532,25,"_1n"],[560,24,532,28],[560,26,533,20,"k1p"],[560,29,533,23],[560,32,533,26,"k1p"],[560,35,533,29],[560,36,533,30,"add"],[560,39,533,33],[560,40,533,34,"d"],[560,41,533,35],[560,42,533,36],[561,12,534,16],[561,16,534,20,"k2"],[561,18,534,22],[561,21,534,25,"_1n"],[561,24,534,28],[561,26,535,20,"k2p"],[561,29,535,23],[561,32,535,26,"k2p"],[561,35,535,29],[561,36,535,30,"add"],[561,39,535,33],[561,40,535,34,"d"],[561,41,535,35],[561,42,535,36],[562,12,536,16,"d"],[562,13,536,17],[562,16,536,20,"d"],[562,17,536,21],[562,18,536,22,"double"],[562,24,536,28],[562,25,536,29],[562,26,536,30],[563,12,537,16,"k1"],[563,14,537,18],[563,19,537,23,"_1n"],[563,22,537,26],[564,12,538,16,"k2"],[564,14,538,18],[564,19,538,23,"_1n"],[564,22,538,26],[565,10,539,12],[566,10,540,12],[566,14,540,16,"k1neg"],[566,19,540,21],[566,21,541,16,"k1p"],[566,24,541,19],[566,27,541,22,"k1p"],[566,30,541,25],[566,31,541,26,"negate"],[566,37,541,32],[566,38,541,33],[566,39,541,34],[567,10,542,12],[567,14,542,16,"k2neg"],[567,19,542,21],[567,21,543,16,"k2p"],[567,24,543,19],[567,27,543,22,"k2p"],[567,30,543,25],[567,31,543,26,"negate"],[567,37,543,32],[567,38,543,33],[567,39,543,34],[568,10,544,12,"k2p"],[568,13,544,15],[568,16,544,18],[568,20,544,22,"Point"],[568,25,544,27],[568,26,544,28,"Fp"],[568,28,544,30],[568,29,544,31,"mul"],[568,32,544,34],[568,33,544,35,"k2p"],[568,36,544,38],[568,37,544,39,"px"],[568,39,544,41],[568,41,544,43,"endo"],[568,45,544,47],[568,46,544,48,"beta"],[568,50,544,52],[568,51,544,53],[568,53,544,55,"k2p"],[568,56,544,58],[568,57,544,59,"py"],[568,59,544,61],[568,61,544,63,"k2p"],[568,64,544,66],[568,65,544,67,"pz"],[568,67,544,69],[568,68,544,70],[569,10,545,12],[569,17,545,19,"k1p"],[569,20,545,22],[569,21,545,23,"add"],[569,24,545,26],[569,25,545,27,"k2p"],[569,28,545,30],[569,29,545,31],[570,8,546,8],[571,8,547,8],[572,0,548,0],[573,0,549,0],[574,0,550,0],[575,0,551,0],[576,0,552,0],[577,0,553,0],[578,0,554,0],[579,0,555,0],[580,6,547,8],[581,8,547,8,"key"],[581,11,547,8],[582,8,547,8,"value"],[582,13,547,8],[582,15,556,8],[582,24,556,8,"multiply"],[582,32,556,16,"multiply"],[582,33,556,17,"scalar"],[582,39,556,23],[582,41,556,25],[583,10,557,12],[583,14,557,20,"endo"],[583,18,557,24],[583,21,557,35,"CURVE"],[583,26,557,40],[583,27,557,20,"endo"],[583,31,557,24],[584,12,557,29,"N"],[584,13,557,30],[584,16,557,35,"CURVE"],[584,21,557,40],[584,22,557,26,"n"],[584,23,557,27],[585,10,558,12,"ut"],[585,12,558,14],[585,13,558,15,"aInRange"],[585,21,558,23],[585,22,558,24],[585,30,558,32],[585,32,558,34,"scalar"],[585,38,558,40],[585,40,558,42,"_1n"],[585,43,558,45],[585,45,558,47,"N"],[585,46,558,48],[585,47,558,49],[586,10,559,12],[586,14,559,16,"point"],[586,19,559,21],[586,21,559,23,"fake"],[586,25,559,27],[586,26,559,28],[586,27,559,29],[587,10,560,12],[587,14,560,16,"endo"],[587,18,560,20],[587,20,560,22],[588,12,561,16],[588,16,561,16,"_endo$splitScalar2"],[588,34,561,16],[588,37,561,49,"endo"],[588,41,561,53],[588,42,561,54,"splitScalar"],[588,53,561,65],[588,54,561,66,"scalar"],[588,60,561,72],[588,61,561,73],[589,14,561,24,"k1neg"],[589,19,561,29],[589,22,561,29,"_endo$splitScalar2"],[589,40,561,29],[589,41,561,24,"k1neg"],[589,46,561,29],[590,14,561,31,"k1"],[590,16,561,33],[590,19,561,33,"_endo$splitScalar2"],[590,37,561,33],[590,38,561,31,"k1"],[590,40,561,33],[591,14,561,35,"k2neg"],[591,19,561,40],[591,22,561,40,"_endo$splitScalar2"],[591,40,561,40],[591,41,561,35,"k2neg"],[591,46,561,40],[592,14,561,42,"k2"],[592,16,561,44],[592,19,561,44,"_endo$splitScalar2"],[592,37,561,44],[592,38,561,42,"k2"],[592,40,561,44],[593,12,562,16],[593,16,562,16,"_this$wNAF"],[593,26,562,16],[593,29,562,41],[593,33,562,45],[593,34,562,46,"wNAF"],[593,38,562,50],[593,39,562,51,"k1"],[593,41,562,53],[593,42,562,54],[594,14,562,25,"k1p"],[594,17,562,28],[594,20,562,28,"_this$wNAF"],[594,30,562,28],[594,31,562,22,"p"],[594,32,562,23],[595,14,562,33,"f1p"],[595,17,562,36],[595,20,562,36,"_this$wNAF"],[595,30,562,36],[595,31,562,30,"f"],[595,32,562,31],[596,12,563,16],[596,16,563,16,"_this$wNAF2"],[596,27,563,16],[596,30,563,41],[596,34,563,45],[596,35,563,46,"wNAF"],[596,39,563,50],[596,40,563,51,"k2"],[596,42,563,53],[596,43,563,54],[597,14,563,25,"k2p"],[597,17,563,28],[597,20,563,28,"_this$wNAF2"],[597,31,563,28],[597,32,563,22,"p"],[597,33,563,23],[598,14,563,33,"f2p"],[598,17,563,36],[598,20,563,36,"_this$wNAF2"],[598,31,563,36],[598,32,563,30,"f"],[598,33,563,31],[599,12,564,16,"k1p"],[599,15,564,19],[599,18,564,22,"wnaf"],[599,22,564,26],[599,23,564,27,"constTimeNegate"],[599,38,564,42],[599,39,564,43,"k1neg"],[599,44,564,48],[599,46,564,50,"k1p"],[599,49,564,53],[599,50,564,54],[600,12,565,16,"k2p"],[600,15,565,19],[600,18,565,22,"wnaf"],[600,22,565,26],[600,23,565,27,"constTimeNegate"],[600,38,565,42],[600,39,565,43,"k2neg"],[600,44,565,48],[600,46,565,50,"k2p"],[600,49,565,53],[600,50,565,54],[601,12,566,16,"k2p"],[601,15,566,19],[601,18,566,22],[601,22,566,26,"Point"],[601,27,566,31],[601,28,566,32,"Fp"],[601,30,566,34],[601,31,566,35,"mul"],[601,34,566,38],[601,35,566,39,"k2p"],[601,38,566,42],[601,39,566,43,"px"],[601,41,566,45],[601,43,566,47,"endo"],[601,47,566,51],[601,48,566,52,"beta"],[601,52,566,56],[601,53,566,57],[601,55,566,59,"k2p"],[601,58,566,62],[601,59,566,63,"py"],[601,61,566,65],[601,63,566,67,"k2p"],[601,66,566,70],[601,67,566,71,"pz"],[601,69,566,73],[601,70,566,74],[602,12,567,16,"point"],[602,17,567,21],[602,20,567,24,"k1p"],[602,23,567,27],[602,24,567,28,"add"],[602,27,567,31],[602,28,567,32,"k2p"],[602,31,567,35],[602,32,567,36],[603,12,568,16,"fake"],[603,16,568,20],[603,19,568,23,"f1p"],[603,22,568,26],[603,23,568,27,"add"],[603,26,568,30],[603,27,568,31,"f2p"],[603,30,568,34],[603,31,568,35],[604,10,569,12],[604,11,569,13],[604,17,570,17],[605,12,571,16],[605,16,571,16,"_this$wNAF3"],[605,27,571,16],[605,30,571,33],[605,34,571,37],[605,35,571,38,"wNAF"],[605,39,571,42],[605,40,571,43,"scalar"],[605,46,571,49],[605,47,571,50],[606,14,571,24,"p"],[606,15,571,25],[606,18,571,25,"_this$wNAF3"],[606,29,571,25],[606,30,571,24,"p"],[606,31,571,25],[607,14,571,27,"f"],[607,15,571,28],[607,18,571,28,"_this$wNAF3"],[607,29,571,28],[607,30,571,27,"f"],[607,31,571,28],[608,12,572,16,"point"],[608,17,572,21],[608,20,572,24,"p"],[608,21,572,25],[609,12,573,16,"fake"],[609,16,573,20],[609,19,573,23,"f"],[609,20,573,24],[610,10,574,12],[611,10,575,12],[612,10,576,12],[612,17,576,19,"Point"],[612,22,576,24],[612,23,576,25,"normalizeZ"],[612,33,576,35],[612,34,576,36],[612,35,576,37,"point"],[612,40,576,42],[612,42,576,44,"fake"],[612,46,576,48],[612,47,576,49],[612,48,576,50],[612,49,576,51],[612,50,576,52],[612,51,576,53],[613,8,577,8],[614,8,578,8],[615,0,579,0],[616,0,580,0],[617,0,581,0],[618,0,582,0],[619,0,583,0],[620,6,578,8],[621,8,578,8,"key"],[621,11,578,8],[622,8,578,8,"value"],[622,13,578,8],[622,15,584,8],[622,24,584,8,"multiplyAndAddUnsafe"],[622,44,584,28,"multiplyAndAddUnsafe"],[622,45,584,29,"Q"],[622,46,584,30],[622,48,584,32,"a"],[622,49,584,33],[622,51,584,35,"b"],[622,52,584,36],[622,54,584,38],[623,10,585,12],[623,14,585,18,"G"],[623,15,585,19],[623,18,585,22,"Point"],[623,23,585,27],[623,24,585,28,"BASE"],[623,28,585,32],[623,29,585,33],[623,30,585,34],[624,10,586,12],[624,14,586,18,"mul"],[624,17,586,21],[624,20,586,24,"mul"],[624,21,586,25,"P"],[624,22,586,26],[624,24,586,28,"a"],[624,25,586,29],[624,26,586,30],[625,10,586,30],[625,15,587,18,"a"],[625,16,587,19],[625,21,587,24,"_0n"],[625,24,587,27],[625,28,587,31,"a"],[625,29,587,32],[625,34,587,37,"_1n"],[625,37,587,40],[625,41,587,44],[625,42,587,45,"P"],[625,43,587,46],[625,44,587,47,"equals"],[625,50,587,53],[625,51,587,54,"G"],[625,52,587,55],[625,53,587,56],[625,56,587,59,"P"],[625,57,587,60],[625,58,587,61,"multiplyUnsafe"],[625,72,587,75],[625,73,587,76,"a"],[625,74,587,77],[625,75,587,78],[625,78,587,81,"P"],[625,79,587,82],[625,80,587,83,"multiply"],[625,88,587,91],[625,89,587,92,"a"],[625,90,587,93],[625,91,587,95],[626,10,588,12],[626,14,588,18,"sum"],[626,17,588,21],[626,20,588,24,"mul"],[626,23,588,27],[626,24,588,28],[626,28,588,32],[626,30,588,34,"a"],[626,31,588,35],[626,32,588,36],[626,33,588,37,"add"],[626,36,588,40],[626,37,588,41,"mul"],[626,40,588,44],[626,41,588,45,"Q"],[626,42,588,46],[626,44,588,48,"b"],[626,45,588,49],[626,46,588,50],[626,47,588,51],[627,10,589,12],[627,17,589,19,"sum"],[627,20,589,22],[627,21,589,23,"is0"],[627,24,589,26],[627,25,589,27],[627,26,589,28],[627,29,589,31,"undefined"],[627,38,589,40],[627,41,589,43,"sum"],[627,44,589,46],[628,8,590,8],[629,8,591,8],[630,8,592,8],[631,8,593,8],[632,6,593,8],[633,8,593,8,"key"],[633,11,593,8],[634,8,593,8,"value"],[634,13,593,8],[634,15,594,8],[634,24,594,8,"toAffine"],[634,32,594,16,"toAffine"],[634,33,594,17,"iz"],[634,35,594,19],[634,37,594,21],[635,10,595,12],[635,17,595,19,"toAffineMemo"],[635,29,595,31],[635,30,595,32],[635,34,595,36],[635,36,595,38,"iz"],[635,38,595,40],[635,39,595,41],[636,8,596,8],[637,6,596,9],[638,8,596,9,"key"],[638,11,596,9],[639,8,596,9,"value"],[639,13,596,9],[639,15,597,8],[639,24,597,8,"isTorsionFree"],[639,37,597,21,"isTorsionFree"],[639,38,597,21],[639,40,597,24],[640,10,598,12],[640,14,598,23,"cofactor"],[640,22,598,31],[640,25,598,51,"CURVE"],[640,30,598,56],[640,31,598,20,"h"],[640,32,598,21],[641,12,598,33,"isTorsionFree"],[641,25,598,46],[641,28,598,51,"CURVE"],[641,33,598,56],[641,34,598,33,"isTorsionFree"],[641,47,598,46],[642,10,599,12],[642,14,599,16,"cofactor"],[642,22,599,24],[642,27,599,29,"_1n"],[642,30,599,32],[642,32,600,16],[642,39,600,23],[642,43,600,27],[642,44,600,28],[642,45,600,29],[643,10,601,12],[643,14,601,16,"isTorsionFree"],[643,27,601,29],[643,29,602,16],[643,36,602,23,"isTorsionFree"],[643,49,602,36],[643,50,602,37,"Point"],[643,55,602,42],[643,57,602,44],[643,61,602,48],[643,62,602,49],[644,10,603,12],[644,16,603,18],[644,20,603,22,"Error"],[644,25,603,27],[644,26,603,28],[644,88,603,90],[644,89,603,91],[645,8,604,8],[646,6,604,9],[647,8,604,9,"key"],[647,11,604,9],[648,8,604,9,"value"],[648,13,604,9],[648,15,605,8],[648,24,605,8,"clearCofactor"],[648,37,605,21,"clearCofactor"],[648,38,605,21],[648,40,605,24],[649,10,606,12],[649,14,606,23,"cofactor"],[649,22,606,31],[649,25,606,51,"CURVE"],[649,30,606,56],[649,31,606,20,"h"],[649,32,606,21],[650,12,606,33,"clearCofactor"],[650,25,606,46],[650,28,606,51,"CURVE"],[650,33,606,56],[650,34,606,33,"clearCofactor"],[650,47,606,46],[651,10,607,12],[651,14,607,16,"cofactor"],[651,22,607,24],[651,27,607,29,"_1n"],[651,30,607,32],[651,32,608,16],[651,39,608,23],[651,43,608,27],[651,44,608,28],[651,45,608,29],[652,10,609,12],[652,14,609,16,"clearCofactor"],[652,27,609,29],[652,29,610,16],[652,36,610,23,"clearCofactor"],[652,49,610,36],[652,50,610,37,"Point"],[652,55,610,42],[652,57,610,44],[652,61,610,48],[652,62,610,49],[653,10,611,12],[653,17,611,19],[653,21,611,23],[653,22,611,24,"multiplyUnsafe"],[653,36,611,38],[653,37,611,39,"CURVE"],[653,42,611,44],[653,43,611,45,"h"],[653,44,611,46],[653,45,611,47],[654,8,612,8],[655,6,612,9],[656,8,612,9,"key"],[656,11,612,9],[657,8,612,9,"value"],[657,13,612,9],[657,15,613,8],[657,24,613,8,"toRawBytes"],[657,34,613,18,"toRawBytes"],[657,35,613,18],[657,37,613,40],[658,10,613,40],[658,14,613,19,"isCompressed"],[658,26,613,31],[658,29,613,31,"arguments"],[658,38,613,31],[658,39,613,31,"length"],[658,45,613,31],[658,53,613,31,"arguments"],[658,62,613,31],[658,70,613,31,"undefined"],[658,79,613,31],[658,82,613,31,"arguments"],[658,91,613,31],[658,97,613,34],[658,101,613,38],[659,10,614,12],[659,11,614,13],[659,12,614,14],[659,14,614,16,"utils_js_1"],[659,24,614,26],[659,25,614,27,"abool"],[659,30,614,32],[659,32,614,34],[659,46,614,48],[659,48,614,50,"isCompressed"],[659,60,614,62],[659,61,614,63],[660,10,615,12],[660,14,615,16],[660,15,615,17,"assertValidity"],[660,29,615,31],[660,30,615,32],[660,31,615,33],[661,10,616,12],[661,17,616,19,"toBytes"],[661,24,616,26],[661,25,616,27,"Point"],[661,30,616,32],[661,32,616,34],[661,36,616,38],[661,38,616,40,"isCompressed"],[661,50,616,52],[661,51,616,53],[662,8,617,8],[663,6,617,9],[664,8,617,9,"key"],[664,11,617,9],[665,8,617,9,"value"],[665,13,617,9],[665,15,618,8],[665,24,618,8,"toHex"],[665,29,618,13,"toHex"],[665,30,618,13],[665,32,618,35],[666,10,618,35],[666,14,618,14,"isCompressed"],[666,26,618,26],[666,29,618,26,"arguments"],[666,38,618,26],[666,39,618,26,"length"],[666,45,618,26],[666,53,618,26,"arguments"],[666,62,618,26],[666,70,618,26,"undefined"],[666,79,618,26],[666,82,618,26,"arguments"],[666,91,618,26],[666,97,618,29],[666,101,618,33],[667,10,619,12],[667,11,619,13],[667,12,619,14],[667,14,619,16,"utils_js_1"],[667,24,619,26],[667,25,619,27,"abool"],[667,30,619,32],[667,32,619,34],[667,46,619,48],[667,48,619,50,"isCompressed"],[667,60,619,62],[667,61,619,63],[668,10,620,12],[668,17,620,19,"ut"],[668,19,620,21],[668,20,620,22,"bytesToHex"],[668,30,620,32],[668,31,620,33],[668,35,620,37],[668,36,620,38,"toRawBytes"],[668,46,620,48],[668,47,620,49,"isCompressed"],[668,59,620,61],[668,60,620,62],[668,61,620,63],[669,8,621,8],[670,6,621,9],[671,8,621,9,"key"],[671,11,621,9],[672,8,621,9,"value"],[672,13,621,9],[672,15,330,8],[672,24,330,15,"fromAffine"],[672,34,330,25,"fromAffine"],[672,35,330,26,"p"],[672,36,330,27],[672,38,330,29],[673,10,331,12],[673,14,331,12,"_ref"],[673,18,331,12],[673,21,331,29,"p"],[673,22,331,30],[673,26,331,34],[673,27,331,35],[673,28,331,36],[674,12,331,20,"x"],[674,13,331,21],[674,16,331,21,"_ref"],[674,20,331,21],[674,21,331,20,"x"],[674,22,331,21],[675,12,331,23,"y"],[675,13,331,24],[675,16,331,24,"_ref"],[675,20,331,24],[675,21,331,23,"y"],[675,22,331,24],[676,10,332,12],[676,14,332,16],[676,15,332,17,"p"],[676,16,332,18],[676,20,332,22],[676,21,332,23,"Fp"],[676,23,332,25],[676,24,332,26,"isValid"],[676,31,332,33],[676,32,332,34,"x"],[676,33,332,35],[676,34,332,36],[676,38,332,40],[676,39,332,41,"Fp"],[676,41,332,43],[676,42,332,44,"isValid"],[676,49,332,51],[676,50,332,52,"y"],[676,51,332,53],[676,52,332,54],[676,54,333,16],[676,60,333,22],[676,64,333,26,"Error"],[676,69,333,31],[676,70,333,32],[676,92,333,54],[676,93,333,55],[677,10,334,12],[677,14,334,16,"p"],[677,15,334,17],[677,27,334,29,"Point"],[677,32,334,34],[677,34,335,16],[677,40,335,22],[677,44,335,26,"Error"],[677,49,335,31],[677,50,335,32],[677,80,335,62],[677,81,335,63],[678,10,336,12],[678,14,336,18,"is0"],[678,17,336,21],[678,20,336,25,"i"],[678,21,336,26],[678,25,336,31,"Fp"],[678,27,336,33],[678,28,336,34,"eql"],[678,31,336,37],[678,32,336,38,"i"],[678,33,336,39],[678,35,336,41,"Fp"],[678,37,336,43],[678,38,336,44,"ZERO"],[678,42,336,48],[678,43,336,49],[679,10,337,12],[680,10,338,12],[680,14,338,16,"is0"],[680,17,338,19],[680,18,338,20,"x"],[680,19,338,21],[680,20,338,22],[680,24,338,26,"is0"],[680,27,338,29],[680,28,338,30,"y"],[680,29,338,31],[680,30,338,32],[680,32,339,16],[680,39,339,23,"Point"],[680,44,339,28],[680,45,339,29,"ZERO"],[680,49,339,33],[681,10,340,12],[681,17,340,19],[681,21,340,23,"Point"],[681,26,340,28],[681,27,340,29,"x"],[681,28,340,30],[681,30,340,32,"y"],[681,31,340,33],[681,33,340,35,"Fp"],[681,35,340,37],[681,36,340,38,"ONE"],[681,39,340,41],[681,40,340,42],[682,8,341,8],[683,6,341,9],[684,8,341,9,"key"],[684,11,341,9],[685,8,341,9,"value"],[685,13,341,9],[685,15,354,8],[685,24,354,15,"normalizeZ"],[685,34,354,25,"normalizeZ"],[685,35,354,26,"points"],[685,41,354,32],[685,43,354,34],[686,10,355,12],[686,14,355,18,"toInv"],[686,19,355,23],[686,22,355,26,"Fp"],[686,24,355,28],[686,25,355,29,"invertBatch"],[686,36,355,40],[686,37,355,41,"points"],[686,43,355,47],[686,44,355,48,"map"],[686,47,355,51],[686,48,355,53,"p"],[686,49,355,54],[686,53,355,59,"p"],[686,54,355,60],[686,55,355,61,"pz"],[686,57,355,63],[686,58,355,64],[686,59,355,65],[687,10,356,12],[687,17,356,19,"points"],[687,23,356,25],[687,24,356,26,"map"],[687,27,356,29],[687,28,356,30],[687,29,356,31,"p"],[687,30,356,32],[687,32,356,34,"i"],[687,33,356,35],[687,38,356,40,"p"],[687,39,356,41],[687,40,356,42,"toAffine"],[687,48,356,50],[687,49,356,51,"toInv"],[687,54,356,56],[687,55,356,57,"i"],[687,56,356,58],[687,57,356,59],[687,58,356,60],[687,59,356,61],[687,60,356,62,"map"],[687,63,356,65],[687,64,356,66,"Point"],[687,69,356,71],[687,70,356,72,"fromAffine"],[687,80,356,82],[687,81,356,83],[688,8,357,8],[689,8,358,8],[690,0,359,0],[691,0,360,0],[692,0,361,0],[693,6,358,8],[694,8,358,8,"key"],[694,11,358,8],[695,8,358,8,"value"],[695,13,358,8],[695,15,362,8],[695,24,362,15,"fromHex"],[695,31,362,22,"fromHex"],[695,32,362,23,"hex"],[695,35,362,26],[695,37,362,28],[696,10,363,12],[696,14,363,18,"P"],[696,15,363,19],[696,18,363,22,"Point"],[696,23,363,27],[696,24,363,28,"fromAffine"],[696,34,363,38],[696,35,363,39,"fromBytes"],[696,44,363,48],[696,45,363,49],[696,46,363,50],[696,47,363,51],[696,49,363,53,"utils_js_1"],[696,59,363,63],[696,60,363,64,"ensureBytes"],[696,71,363,75],[696,73,363,77],[696,83,363,87],[696,85,363,89,"hex"],[696,88,363,92],[696,89,363,93],[696,90,363,94],[696,91,363,95],[697,10,364,12,"P"],[697,11,364,13],[697,12,364,14,"assertValidity"],[697,26,364,28],[697,27,364,29],[697,28,364,30],[698,10,365,12],[698,17,365,19,"P"],[698,18,365,20],[699,8,366,8],[700,8,367,8],[701,6,367,8],[702,8,367,8,"key"],[702,11,367,8],[703,8,367,8,"value"],[703,13,367,8],[703,15,368,8],[703,24,368,15,"fromPrivateKey"],[703,38,368,29,"fromPrivateKey"],[703,39,368,30,"privateKey"],[703,49,368,40],[703,51,368,42],[704,10,369,12],[704,17,369,19,"Point"],[704,22,369,24],[704,23,369,25,"BASE"],[704,27,369,29],[704,28,369,30,"multiply"],[704,36,369,38],[704,37,369,39,"normPrivateKeyToScalar"],[704,59,369,61],[704,60,369,62,"privateKey"],[704,70,369,72],[704,71,369,73],[704,72,369,74],[705,8,370,8],[706,8,371,8],[707,6,371,8],[708,8,371,8,"key"],[708,11,371,8],[709,8,371,8,"value"],[709,13,371,8],[709,15,372,8],[709,24,372,15,"msm"],[709,27,372,18,"msm"],[709,28,372,19,"points"],[709,34,372,25],[709,36,372,27,"scalars"],[709,43,372,34],[709,45,372,36],[710,10,373,12],[710,17,373,19],[710,18,373,20],[710,19,373,21],[710,21,373,23,"curve_js_1"],[710,31,373,33],[710,32,373,34,"pippenger"],[710,41,373,43],[710,43,373,45,"Point"],[710,48,373,50],[710,50,373,52,"Fn"],[710,52,373,54],[710,54,373,56,"points"],[710,60,373,62],[710,62,373,64,"scalars"],[710,69,373,71],[710,70,373,72],[711,8,374,8],[712,6,374,9],[713,4,374,9],[714,4,623,4,"Point"],[714,9,623,9],[714,10,623,10,"BASE"],[714,14,623,14],[714,17,623,17],[714,21,623,21,"Point"],[714,26,623,26],[714,27,623,27,"CURVE"],[714,32,623,32],[714,33,623,33,"Gx"],[714,35,623,35],[714,37,623,37,"CURVE"],[714,42,623,42],[714,43,623,43,"Gy"],[714,45,623,45],[714,47,623,47,"Fp"],[714,49,623,49],[714,50,623,50,"ONE"],[714,53,623,53],[714,54,623,54],[715,4,624,4,"Point"],[715,9,624,9],[715,10,624,10,"ZERO"],[715,14,624,14],[715,17,624,17],[715,21,624,21,"Point"],[715,26,624,26],[715,27,624,27,"Fp"],[715,29,624,29],[715,30,624,30,"ZERO"],[715,34,624,34],[715,36,624,36,"Fp"],[715,38,624,38],[715,39,624,39,"ONE"],[715,42,624,42],[715,44,624,44,"Fp"],[715,46,624,46],[715,47,624,47,"ZERO"],[715,51,624,51],[715,52,624,52],[716,4,625,4],[716,8,625,10,"_bits"],[716,13,625,15],[716,16,625,18,"CURVE"],[716,21,625,23],[716,22,625,24,"nBitLength"],[716,32,625,34],[717,4,626,4],[717,8,626,10,"wnaf"],[717,12,626,14],[717,15,626,17],[717,16,626,18],[717,17,626,19],[717,19,626,21,"curve_js_1"],[717,29,626,31],[717,30,626,32,"wNAF"],[717,34,626,36],[717,36,626,38,"Point"],[717,41,626,43],[717,43,626,45,"CURVE"],[717,48,626,50],[717,49,626,51,"endo"],[717,53,626,55],[717,56,626,58,"Math"],[717,60,626,62],[717,61,626,63,"ceil"],[717,65,626,67],[717,66,626,68,"_bits"],[717,71,626,73],[717,74,626,76],[717,75,626,77],[717,76,626,78],[717,79,626,81,"_bits"],[717,84,626,86],[717,85,626,87],[718,4,627,4],[719,4,628,4],[719,11,628,11],[720,6,629,8,"CURVE"],[720,11,629,13],[721,6,630,8,"ProjectivePoint"],[721,21,630,23],[721,23,630,25,"Point"],[721,28,630,30],[722,6,631,8,"normPrivateKeyToScalar"],[722,28,631,30],[723,6,632,8,"weierstrassEquation"],[723,25,632,27],[724,6,633,8,"isWithinCurveOrder"],[725,4,634,4],[725,5,634,5],[726,2,635,0],[727,2,636,0],[727,11,636,9,"validateOpts"],[727,23,636,21,"validateOpts"],[727,24,636,22,"curve"],[727,29,636,27],[727,31,636,29],[728,4,637,4],[728,8,637,10,"opts"],[728,12,637,14],[728,15,637,17],[728,16,637,18],[728,17,637,19],[728,19,637,21,"curve_js_1"],[728,29,637,31],[728,30,637,32,"validateBasic"],[728,43,637,45],[728,45,637,47,"curve"],[728,50,637,52],[728,51,637,53],[729,4,638,4,"ut"],[729,6,638,6],[729,7,638,7,"validateObject"],[729,21,638,21],[729,22,638,22,"opts"],[729,26,638,26],[729,28,638,28],[730,6,639,8,"hash"],[730,10,639,12],[730,12,639,14],[730,18,639,20],[731,6,640,8,"hmac"],[731,10,640,12],[731,12,640,14],[731,22,640,24],[732,6,641,8,"randomBytes"],[732,17,641,19],[732,19,641,21],[733,4,642,4],[733,5,642,5],[733,7,642,7],[734,6,643,8,"bits2int"],[734,14,643,16],[734,16,643,18],[734,26,643,28],[735,6,644,8,"bits2int_modN"],[735,19,644,21],[735,21,644,23],[735,31,644,33],[736,6,645,8,"lowS"],[736,10,645,12],[736,12,645,14],[737,4,646,4],[737,5,646,5],[737,6,646,6],[738,4,647,4],[738,11,647,11,"Object"],[738,17,647,17],[738,18,647,18,"freeze"],[738,24,647,24],[738,25,647,25],[739,6,647,27,"lowS"],[739,10,647,31],[739,12,647,33],[739,16,647,37],[740,6,647,39],[740,9,647,42,"opts"],[741,4,647,47],[741,5,647,48],[741,6,647,49],[742,2,648,0],[743,2,649,0],[744,0,650,0],[745,0,651,0],[746,0,652,0],[747,0,653,0],[748,0,654,0],[749,0,655,0],[750,2,656,0],[750,11,656,9,"weierstrass"],[750,22,656,20,"weierstrass"],[750,23,656,21,"curveDef"],[750,31,656,29],[750,33,656,31],[751,4,657,4],[751,8,657,10,"CURVE"],[751,13,657,15],[751,16,657,18,"validateOpts"],[751,28,657,30],[751,29,657,31,"curveDef"],[751,37,657,39],[751,38,657,40],[752,4,658,4],[752,8,658,12,"Fp"],[752,10,658,14],[752,13,658,35,"CURVE"],[752,18,658,40],[752,19,658,12,"Fp"],[752,21,658,14],[753,6,658,19,"CURVE_ORDER"],[753,17,658,30],[753,20,658,35,"CURVE"],[753,25,658,40],[753,26,658,16,"n"],[753,27,658,17],[754,4,659,4],[754,8,659,10,"compressedLen"],[754,21,659,23],[754,24,659,26,"Fp"],[754,26,659,28],[754,27,659,29,"BYTES"],[754,32,659,34],[754,35,659,37],[754,36,659,38],[754,37,659,39],[754,38,659,40],[755,4,660,4],[755,8,660,10,"uncompressedLen"],[755,23,660,25],[755,26,660,28],[755,27,660,29],[755,30,660,32,"Fp"],[755,32,660,34],[755,33,660,35,"BYTES"],[755,38,660,40],[755,41,660,43],[755,42,660,44],[755,43,660,45],[755,44,660,46],[756,4,661,4],[756,13,661,13,"modN"],[756,17,661,17,"modN"],[756,18,661,18,"a"],[756,19,661,19],[756,21,661,21],[757,6,662,8],[757,13,662,15],[757,14,662,16],[757,15,662,17],[757,17,662,19,"modular_js_1"],[757,29,662,31],[757,30,662,32,"mod"],[757,33,662,35],[757,35,662,37,"a"],[757,36,662,38],[757,38,662,40,"CURVE_ORDER"],[757,49,662,51],[757,50,662,52],[758,4,663,4],[759,4,664,4],[759,13,664,13,"invN"],[759,17,664,17,"invN"],[759,18,664,18,"a"],[759,19,664,19],[759,21,664,21],[760,6,665,8],[760,13,665,15],[760,14,665,16],[760,15,665,17],[760,17,665,19,"modular_js_1"],[760,29,665,31],[760,30,665,32,"invert"],[760,36,665,38],[760,38,665,40,"a"],[760,39,665,41],[760,41,665,43,"CURVE_ORDER"],[760,52,665,54],[760,53,665,55],[761,4,666,4],[762,4,667,4],[762,8,667,4,"_weierstrassPoints"],[762,26,667,4],[762,29,667,105,"weierstrassPoints"],[762,46,667,122],[762,47,667,123],[763,8,668,8],[763,11,668,11,"CURVE"],[763,16,668,16],[764,8,669,8,"toBytes"],[764,15,669,15,"toBytes"],[764,16,669,16,"_c"],[764,18,669,18],[764,20,669,20,"point"],[764,25,669,25],[764,27,669,27,"isCompressed"],[764,39,669,39],[764,41,669,41],[765,10,670,12],[765,14,670,18,"a"],[765,15,670,19],[765,18,670,22,"point"],[765,23,670,27],[765,24,670,28,"toAffine"],[765,32,670,36],[765,33,670,37],[765,34,670,38],[766,10,671,12],[766,14,671,18,"x"],[766,15,671,19],[766,18,671,22,"Fp"],[766,20,671,24],[766,21,671,25,"toBytes"],[766,28,671,32],[766,29,671,33,"a"],[766,30,671,34],[766,31,671,35,"x"],[766,32,671,36],[766,33,671,37],[767,10,672,12],[767,14,672,18,"cat"],[767,17,672,21],[767,20,672,24,"ut"],[767,22,672,26],[767,23,672,27,"concatBytes"],[767,34,672,38],[768,10,673,12],[768,11,673,13],[768,12,673,14],[768,14,673,16,"utils_js_1"],[768,24,673,26],[768,25,673,27,"abool"],[768,30,673,32],[768,32,673,34],[768,46,673,48],[768,48,673,50,"isCompressed"],[768,60,673,62],[768,61,673,63],[769,10,674,12],[769,14,674,16,"isCompressed"],[769,26,674,28],[769,28,674,30],[770,12,675,16],[770,19,675,23,"cat"],[770,22,675,26],[770,23,675,27,"Uint8Array"],[770,33,675,37],[770,34,675,38,"from"],[770,38,675,42],[770,39,675,43],[770,40,675,44,"point"],[770,45,675,49],[770,46,675,50,"hasEvenY"],[770,54,675,58],[770,55,675,59],[770,56,675,60],[770,59,675,63],[770,63,675,67],[770,66,675,70],[770,70,675,74],[770,71,675,75],[770,72,675,76],[770,74,675,78,"x"],[770,75,675,79],[770,76,675,80],[771,10,676,12],[771,11,676,13],[771,17,677,17],[772,12,678,16],[772,19,678,23,"cat"],[772,22,678,26],[772,23,678,27,"Uint8Array"],[772,33,678,37],[772,34,678,38,"from"],[772,38,678,42],[772,39,678,43],[772,40,678,44],[772,44,678,48],[772,45,678,49],[772,46,678,50],[772,48,678,52,"x"],[772,49,678,53],[772,51,678,55,"Fp"],[772,53,678,57],[772,54,678,58,"toBytes"],[772,61,678,65],[772,62,678,66,"a"],[772,63,678,67],[772,64,678,68,"y"],[772,65,678,69],[772,66,678,70],[772,67,678,71],[773,10,679,12],[774,8,680,8],[774,9,680,9],[775,8,681,8,"fromBytes"],[775,17,681,17,"fromBytes"],[775,18,681,18,"bytes"],[775,23,681,23],[775,25,681,25],[776,10,682,12],[776,14,682,18,"len"],[776,17,682,21],[776,20,682,24,"bytes"],[776,25,682,29],[776,26,682,30,"length"],[776,32,682,36],[777,10,683,12],[777,14,683,18,"head"],[777,18,683,22],[777,21,683,25,"bytes"],[777,26,683,30],[777,27,683,31],[777,28,683,32],[777,29,683,33],[778,10,684,12],[778,14,684,18,"tail"],[778,18,684,22],[778,21,684,25,"bytes"],[778,26,684,30],[778,27,684,31,"subarray"],[778,35,684,39],[778,36,684,40],[778,37,684,41],[778,38,684,42],[779,10,685,12],[780,10,686,12],[780,14,686,16,"len"],[780,17,686,19],[780,22,686,24,"compressedLen"],[780,35,686,37],[780,40,686,42,"head"],[780,44,686,46],[780,49,686,51],[780,53,686,55],[780,57,686,59,"head"],[780,61,686,63],[780,66,686,68],[780,70,686,72],[780,71,686,73],[780,73,686,75],[781,12,687,16],[781,16,687,22,"x"],[781,17,687,23],[781,20,687,26,"ut"],[781,22,687,28],[781,23,687,29,"bytesToNumberBE"],[781,38,687,44],[781,39,687,45,"tail"],[781,43,687,49],[781,44,687,50],[782,12,688,16],[782,16,688,20],[782,17,688,21,"ut"],[782,19,688,23],[782,20,688,24,"inRange"],[782,27,688,31],[782,28,688,32,"x"],[782,29,688,33],[782,31,688,35,"_1n"],[782,34,688,38],[782,36,688,40,"Fp"],[782,38,688,42],[782,39,688,43,"ORDER"],[782,44,688,48],[782,45,688,49],[782,47,689,20],[782,53,689,26],[782,57,689,30,"Error"],[782,62,689,35],[782,63,689,36],[782,86,689,59],[782,87,689,60],[783,12,690,16],[783,16,690,22,"y2"],[783,18,690,24],[783,21,690,27,"weierstrassEquation"],[783,40,690,46],[783,41,690,47,"x"],[783,42,690,48],[783,43,690,49],[783,44,690,50],[783,45,690,51],[784,12,691,16],[784,16,691,20,"y"],[784,17,691,21],[785,12,692,16],[785,16,692,20],[786,14,693,20,"y"],[786,15,693,21],[786,18,693,24,"Fp"],[786,20,693,26],[786,21,693,27,"sqrt"],[786,25,693,31],[786,26,693,32,"y2"],[786,28,693,34],[786,29,693,35],[786,30,693,36],[786,31,693,37],[787,12,694,16],[787,13,694,17],[787,14,695,16],[787,21,695,23,"sqrtError"],[787,30,695,32],[787,32,695,34],[788,14,696,20],[788,18,696,26,"suffix"],[788,24,696,32],[788,27,696,35,"sqrtError"],[788,36,696,44],[788,48,696,56,"Error"],[788,53,696,61],[788,56,696,64],[788,60,696,68],[788,63,696,71,"sqrtError"],[788,72,696,80],[788,73,696,81,"message"],[788,80,696,88],[788,83,696,91],[788,85,696,93],[789,14,697,20],[789,20,697,26],[789,24,697,30,"Error"],[789,29,697,35],[789,30,697,36],[789,53,697,59],[789,56,697,62,"suffix"],[789,62,697,68],[789,63,697,69],[790,12,698,16],[791,12,699,16],[791,16,699,22,"isYOdd"],[791,22,699,28],[791,25,699,31],[791,26,699,32,"y"],[791,27,699,33],[791,30,699,36,"_1n"],[791,33,699,39],[791,39,699,45,"_1n"],[791,42,699,48],[792,12,700,16],[793,12,701,16],[793,16,701,22,"isHeadOdd"],[793,25,701,31],[793,28,701,34],[793,29,701,35,"head"],[793,33,701,39],[793,36,701,42],[793,37,701,43],[793,43,701,49],[793,44,701,50],[794,12,702,16],[794,16,702,20,"isHeadOdd"],[794,25,702,29],[794,30,702,34,"isYOdd"],[794,36,702,40],[794,38,703,20,"y"],[794,39,703,21],[794,42,703,24,"Fp"],[794,44,703,26],[794,45,703,27,"neg"],[794,48,703,30],[794,49,703,31,"y"],[794,50,703,32],[794,51,703,33],[795,12,704,16],[795,19,704,23],[796,14,704,25,"x"],[796,15,704,26],[797,14,704,28,"y"],[798,12,704,30],[798,13,704,31],[799,10,705,12],[799,11,705,13],[799,17,706,17],[799,21,706,21,"len"],[799,24,706,24],[799,29,706,29,"uncompressedLen"],[799,44,706,44],[799,48,706,48,"head"],[799,52,706,52],[799,57,706,57],[799,61,706,61],[799,63,706,63],[800,12,707,16],[800,16,707,22,"x"],[800,18,707,23],[800,21,707,26,"Fp"],[800,23,707,28],[800,24,707,29,"fromBytes"],[800,33,707,38],[800,34,707,39,"tail"],[800,38,707,43],[800,39,707,44,"subarray"],[800,47,707,52],[800,48,707,53],[800,49,707,54],[800,51,707,56,"Fp"],[800,53,707,58],[800,54,707,59,"BYTES"],[800,59,707,64],[800,60,707,65],[800,61,707,66],[801,12,708,16],[801,16,708,22,"y"],[801,18,708,23],[801,21,708,26,"Fp"],[801,23,708,28],[801,24,708,29,"fromBytes"],[801,33,708,38],[801,34,708,39,"tail"],[801,38,708,43],[801,39,708,44,"subarray"],[801,47,708,52],[801,48,708,53,"Fp"],[801,50,708,55],[801,51,708,56,"BYTES"],[801,56,708,61],[801,58,708,63],[801,59,708,64],[801,62,708,67,"Fp"],[801,64,708,69],[801,65,708,70,"BYTES"],[801,70,708,75],[801,71,708,76],[801,72,708,77],[802,12,709,16],[802,19,709,23],[803,14,709,25,"x"],[803,15,709,26],[803,17,709,25,"x"],[803,19,709,26],[804,14,709,28,"y"],[804,15,709,29],[804,17,709,28,"y"],[805,12,709,30],[805,13,709,31],[806,10,710,12],[806,11,710,13],[806,17,711,17],[807,12,712,16],[807,16,712,22,"cl"],[807,18,712,24],[807,21,712,27,"compressedLen"],[807,34,712,40],[808,12,713,16],[808,16,713,22,"ul"],[808,18,713,24],[808,21,713,27,"uncompressedLen"],[808,36,713,42],[809,12,714,16],[809,18,714,22],[809,22,714,26,"Error"],[809,27,714,31],[809,28,714,32],[809,64,714,68],[809,67,714,71,"cl"],[809,69,714,73],[809,72,714,76],[809,92,714,96],[809,95,714,99,"ul"],[809,97,714,101],[809,100,714,104],[809,108,714,112],[809,111,714,115,"len"],[809,114,714,118],[809,115,714,119],[810,10,715,12],[811,8,716,8],[812,6,717,4],[812,7,717,5],[812,8,717,6],[813,6,667,29,"Point"],[813,11,667,34],[813,14,667,34,"_weierstrassPoints"],[813,32,667,34],[813,33,667,12,"ProjectivePoint"],[813,48,667,27],[814,6,667,36,"normPrivateKeyToScalar"],[814,28,667,58],[814,31,667,58,"_weierstrassPoints"],[814,49,667,58],[814,50,667,36,"normPrivateKeyToScalar"],[814,72,667,58],[815,6,667,60,"weierstrassEquation"],[815,25,667,79],[815,28,667,79,"_weierstrassPoints"],[815,46,667,79],[815,47,667,60,"weierstrassEquation"],[815,66,667,79],[816,6,667,81,"isWithinCurveOrder"],[816,24,667,99],[816,27,667,99,"_weierstrassPoints"],[816,45,667,99],[816,46,667,81,"isWithinCurveOrder"],[816,64,667,99],[817,4,718,4],[817,8,718,10,"numToNByteStr"],[817,21,718,23],[817,24,718,27,"num"],[817,27,718,30],[817,31,718,35,"ut"],[817,33,718,37],[817,34,718,38,"bytesToHex"],[817,44,718,48],[817,45,718,49,"ut"],[817,47,718,51],[817,48,718,52,"numberToBytesBE"],[817,63,718,67],[817,64,718,68,"num"],[817,67,718,71],[817,69,718,73,"CURVE"],[817,74,718,78],[817,75,718,79,"nByteLength"],[817,86,718,90],[817,87,718,91],[817,88,718,92],[818,4,719,4],[818,13,719,13,"isBiggerThanHalfOrder"],[818,34,719,34,"isBiggerThanHalfOrder"],[818,35,719,35,"number"],[818,41,719,41],[818,43,719,43],[819,6,720,8],[819,10,720,14,"HALF"],[819,14,720,18],[819,17,720,21,"CURVE_ORDER"],[819,28,720,32],[819,32,720,36,"_1n"],[819,35,720,39],[820,6,721,8],[820,13,721,15,"number"],[820,19,721,21],[820,22,721,24,"HALF"],[820,26,721,28],[821,4,722,4],[822,4,723,4],[822,13,723,13,"normalizeS"],[822,23,723,23,"normalizeS"],[822,24,723,24,"s"],[822,25,723,25],[822,27,723,27],[823,6,724,8],[823,13,724,15,"isBiggerThanHalfOrder"],[823,34,724,36],[823,35,724,37,"s"],[823,36,724,38],[823,37,724,39],[823,40,724,42,"modN"],[823,44,724,46],[823,45,724,47],[823,46,724,48,"s"],[823,47,724,49],[823,48,724,50],[823,51,724,53,"s"],[823,52,724,54],[824,4,725,4],[825,4,726,4],[826,4,727,4],[826,8,727,10,"slcNum"],[826,14,727,16],[826,17,727,19,"slcNum"],[826,18,727,20,"b"],[826,19,727,21],[826,21,727,23,"from"],[826,25,727,27],[826,27,727,29,"to"],[826,29,727,31],[826,34,727,36,"ut"],[826,36,727,38],[826,37,727,39,"bytesToNumberBE"],[826,52,727,54],[826,53,727,55,"b"],[826,54,727,56],[826,55,727,57,"slice"],[826,60,727,62],[826,61,727,63,"from"],[826,65,727,67],[826,67,727,69,"to"],[826,69,727,71],[826,70,727,72],[826,71,727,73],[827,4,728,4],[828,0,729,0],[829,0,730,0],[830,4,728,4],[830,8,731,10,"Signature"],[830,17,731,19],[831,6,732,8],[831,15,732,8,"Signature"],[831,25,732,20,"r"],[831,26,732,21],[831,28,732,23,"s"],[831,29,732,24],[831,31,732,26,"recovery"],[831,39,732,34],[831,41,732,36],[832,8,732,36,"_classCallCheck"],[832,23,732,36],[832,30,732,36,"Signature"],[832,39,732,36],[833,8,733,12],[833,12,733,16],[833,13,733,17,"r"],[833,14,733,18],[833,17,733,21,"r"],[833,18,733,22],[834,8,734,12],[834,12,734,16],[834,13,734,17,"s"],[834,14,734,18],[834,17,734,21,"s"],[834,18,734,22],[835,8,735,12],[835,12,735,16],[835,13,735,17,"recovery"],[835,21,735,25],[835,24,735,28,"recovery"],[835,32,735,36],[836,8,736,12],[836,12,736,16],[836,13,736,17,"assertValidity"],[836,27,736,31],[836,28,736,32],[836,29,736,33],[837,6,737,8],[838,6,738,8],[839,6,738,8],[839,13,738,8,"_createClass"],[839,25,738,8],[839,26,738,8,"Signature"],[839,35,738,8],[840,8,738,8,"key"],[840,11,738,8],[841,8,738,8,"value"],[841,13,738,8],[841,15,750,8],[841,24,750,8,"assertValidity"],[841,38,750,22,"assertValidity"],[841,39,750,22],[841,41,750,25],[842,10,751,12,"ut"],[842,12,751,14],[842,13,751,15,"aInRange"],[842,21,751,23],[842,22,751,24],[842,25,751,27],[842,27,751,29],[842,31,751,33],[842,32,751,34,"r"],[842,33,751,35],[842,35,751,37,"_1n"],[842,38,751,40],[842,40,751,42,"CURVE_ORDER"],[842,51,751,53],[842,52,751,54],[842,53,751,55],[842,54,751,56],[843,10,752,12,"ut"],[843,12,752,14],[843,13,752,15,"aInRange"],[843,21,752,23],[843,22,752,24],[843,25,752,27],[843,27,752,29],[843,31,752,33],[843,32,752,34,"s"],[843,33,752,35],[843,35,752,37,"_1n"],[843,38,752,40],[843,40,752,42,"CURVE_ORDER"],[843,51,752,53],[843,52,752,54],[843,53,752,55],[843,54,752,56],[844,8,753,8],[845,6,753,9],[846,8,753,9,"key"],[846,11,753,9],[847,8,753,9,"value"],[847,13,753,9],[847,15,754,8],[847,24,754,8,"addRecoveryBit"],[847,38,754,22,"addRecoveryBit"],[847,39,754,23,"recovery"],[847,47,754,31],[847,49,754,33],[848,10,755,12],[848,17,755,19],[848,21,755,23,"Signature"],[848,30,755,32],[848,31,755,33],[848,35,755,37],[848,36,755,38,"r"],[848,37,755,39],[848,39,755,41],[848,43,755,45],[848,44,755,46,"s"],[848,45,755,47],[848,47,755,49,"recovery"],[848,55,755,57],[848,56,755,58],[849,8,756,8],[850,6,756,9],[851,8,756,9,"key"],[851,11,756,9],[852,8,756,9,"value"],[852,13,756,9],[852,15,757,8],[852,24,757,8,"recoverPublicKey"],[852,40,757,24,"recoverPublicKey"],[852,41,757,25,"msgHash"],[852,48,757,32],[852,50,757,34],[853,10,758,12],[853,14,758,20,"r"],[853,15,758,21],[853,18,758,44],[853,22,758,48],[853,23,758,20,"r"],[853,24,758,21],[854,12,758,23,"s"],[854,13,758,24],[854,16,758,44],[854,20,758,48],[854,21,758,23,"s"],[854,22,758,24],[855,12,758,36,"rec"],[855,15,758,39],[855,18,758,44],[855,22,758,48],[855,23,758,26,"recovery"],[855,31,758,34],[856,10,759,12],[856,14,759,18,"h"],[856,15,759,19],[856,18,759,22,"bits2int_modN"],[856,31,759,35],[856,32,759,36],[856,33,759,37],[856,34,759,38],[856,36,759,40,"utils_js_1"],[856,46,759,50],[856,47,759,51,"ensureBytes"],[856,58,759,62],[856,60,759,64],[856,69,759,73],[856,71,759,75,"msgHash"],[856,78,759,82],[856,79,759,83],[856,80,759,84],[856,81,759,85],[856,82,759,86],[857,10,760,12],[857,14,760,16,"rec"],[857,17,760,19],[857,21,760,23],[857,25,760,27],[857,29,760,31],[857,30,760,32],[857,31,760,33],[857,32,760,34],[857,34,760,36],[857,35,760,37],[857,37,760,39],[857,38,760,40],[857,40,760,42],[857,41,760,43],[857,42,760,44],[857,43,760,45,"includes"],[857,51,760,53],[857,52,760,54,"rec"],[857,55,760,57],[857,56,760,58],[857,58,761,16],[857,64,761,22],[857,68,761,26,"Error"],[857,73,761,31],[857,74,761,32],[857,95,761,53],[857,96,761,54],[858,10,762,12],[858,14,762,18,"radj"],[858,18,762,22],[858,21,762,25,"rec"],[858,24,762,28],[858,29,762,33],[858,30,762,34],[858,34,762,38,"rec"],[858,37,762,41],[858,42,762,46],[858,43,762,47],[858,46,762,50,"r"],[858,47,762,51],[858,50,762,54,"CURVE"],[858,55,762,59],[858,56,762,60,"n"],[858,57,762,61],[858,60,762,64,"r"],[858,61,762,65],[859,10,763,12],[859,14,763,16,"radj"],[859,18,763,20],[859,22,763,24,"Fp"],[859,24,763,26],[859,25,763,27,"ORDER"],[859,30,763,32],[859,32,764,16],[859,38,764,22],[859,42,764,26,"Error"],[859,47,764,31],[859,48,764,32],[859,76,764,60],[859,77,764,61],[860,10,765,12],[860,14,765,18,"prefix"],[860,20,765,24],[860,23,765,27],[860,24,765,28,"rec"],[860,27,765,31],[860,30,765,34],[860,31,765,35],[860,37,765,41],[860,38,765,42],[860,41,765,45],[860,45,765,49],[860,48,765,52],[860,52,765,56],[861,10,766,12],[861,14,766,18,"R"],[861,15,766,19],[861,18,766,22,"Point"],[861,23,766,27],[861,24,766,28,"fromHex"],[861,31,766,35],[861,32,766,36,"prefix"],[861,38,766,42],[861,41,766,45,"numToNByteStr"],[861,54,766,58],[861,55,766,59,"radj"],[861,59,766,63],[861,60,766,64],[861,61,766,65],[862,10,767,12],[862,14,767,18,"ir"],[862,16,767,20],[862,19,767,23,"invN"],[862,23,767,27],[862,24,767,28,"radj"],[862,28,767,32],[862,29,767,33],[862,30,767,34],[862,31,767,35],[863,10,768,12],[863,14,768,18,"u1"],[863,16,768,20],[863,19,768,23,"modN"],[863,23,768,27],[863,24,768,28],[863,25,768,29,"h"],[863,26,768,30],[863,29,768,33,"ir"],[863,31,768,35],[863,32,768,36],[863,33,768,37],[863,34,768,38],[864,10,769,12],[864,14,769,18,"u2"],[864,16,769,20],[864,19,769,23,"modN"],[864,23,769,27],[864,24,769,28,"s"],[864,25,769,29],[864,28,769,32,"ir"],[864,30,769,34],[864,31,769,35],[864,32,769,36],[864,33,769,37],[865,10,770,12],[865,14,770,18,"Q"],[865,15,770,19],[865,18,770,22,"Point"],[865,23,770,27],[865,24,770,28,"BASE"],[865,28,770,32],[865,29,770,33,"multiplyAndAddUnsafe"],[865,49,770,53],[865,50,770,54,"R"],[865,51,770,55],[865,53,770,57,"u1"],[865,55,770,59],[865,57,770,61,"u2"],[865,59,770,63],[865,60,770,64],[865,61,770,65],[865,62,770,66],[866,10,771,12],[866,14,771,16],[866,15,771,17,"Q"],[866,16,771,18],[866,18,772,16],[866,24,772,22],[866,28,772,26,"Error"],[866,33,772,31],[866,34,772,32],[866,53,772,51],[866,54,772,52],[866,55,772,53],[866,56,772,54],[867,10,773,12,"Q"],[867,11,773,13],[867,12,773,14,"assertValidity"],[867,26,773,28],[867,27,773,29],[867,28,773,30],[868,10,774,12],[868,17,774,19,"Q"],[868,18,774,20],[869,8,775,8],[870,8,776,8],[871,6,776,8],[872,8,776,8,"key"],[872,11,776,8],[873,8,776,8,"value"],[873,13,776,8],[873,15,777,8],[873,24,777,8,"hasHighS"],[873,32,777,16,"hasHighS"],[873,33,777,16],[873,35,777,19],[874,10,778,12],[874,17,778,19,"isBiggerThanHalfOrder"],[874,38,778,40],[874,39,778,41],[874,43,778,45],[874,44,778,46,"s"],[874,45,778,47],[874,46,778,48],[875,8,779,8],[876,6,779,9],[877,8,779,9,"key"],[877,11,779,9],[878,8,779,9,"value"],[878,13,779,9],[878,15,780,8],[878,24,780,8,"normalizeS"],[878,34,780,18,"normalizeS"],[878,35,780,18],[878,37,780,21],[879,10,781,12],[879,17,781,19],[879,21,781,23],[879,22,781,24,"hasHighS"],[879,30,781,32],[879,31,781,33],[879,32,781,34],[879,35,781,37],[879,39,781,41,"Signature"],[879,48,781,50],[879,49,781,51],[879,53,781,55],[879,54,781,56,"r"],[879,55,781,57],[879,57,781,59,"modN"],[879,61,781,63],[879,62,781,64],[879,63,781,65],[879,67,781,69],[879,68,781,70,"s"],[879,69,781,71],[879,70,781,72],[879,72,781,74],[879,76,781,78],[879,77,781,79,"recovery"],[879,85,781,87],[879,86,781,88],[879,89,781,91],[879,93,781,95],[880,8,782,8],[881,8,783,8],[882,6,783,8],[883,8,783,8,"key"],[883,11,783,8],[884,8,783,8,"value"],[884,13,783,8],[884,15,784,8],[884,24,784,8,"toDERRawBytes"],[884,37,784,21,"toDERRawBytes"],[884,38,784,21],[884,40,784,24],[885,10,785,12],[885,17,785,19,"ut"],[885,19,785,21],[885,20,785,22,"hexToBytes"],[885,30,785,32],[885,31,785,33],[885,35,785,37],[885,36,785,38,"toDERHex"],[885,44,785,46],[885,45,785,47],[885,46,785,48],[885,47,785,49],[886,8,786,8],[887,6,786,9],[888,8,786,9,"key"],[888,11,786,9],[889,8,786,9,"value"],[889,13,786,9],[889,15,787,8],[889,24,787,8,"toDERHex"],[889,32,787,16,"toDERHex"],[889,33,787,16],[889,35,787,19],[890,10,788,12],[890,17,788,19,"exports"],[890,24,788,26],[890,25,788,27,"DER"],[890,28,788,30],[890,29,788,31,"hexFromSig"],[890,39,788,41],[890,40,788,42],[891,12,788,44,"r"],[891,13,788,45],[891,15,788,47],[891,19,788,51],[891,20,788,52,"r"],[891,21,788,53],[892,12,788,55,"s"],[892,13,788,56],[892,15,788,58],[892,19,788,62],[892,20,788,63,"s"],[893,10,788,65],[893,11,788,66],[893,12,788,67],[894,8,789,8],[895,8,790,8],[896,6,790,8],[897,8,790,8,"key"],[897,11,790,8],[898,8,790,8,"value"],[898,13,790,8],[898,15,791,8],[898,24,791,8,"toCompactRawBytes"],[898,41,791,25,"toCompactRawBytes"],[898,42,791,25],[898,44,791,28],[899,10,792,12],[899,17,792,19,"ut"],[899,19,792,21],[899,20,792,22,"hexToBytes"],[899,30,792,32],[899,31,792,33],[899,35,792,37],[899,36,792,38,"toCompactHex"],[899,48,792,50],[899,49,792,51],[899,50,792,52],[899,51,792,53],[900,8,793,8],[901,6,793,9],[902,8,793,9,"key"],[902,11,793,9],[903,8,793,9,"value"],[903,13,793,9],[903,15,794,8],[903,24,794,8,"toCompactHex"],[903,36,794,20,"toCompactHex"],[903,37,794,20],[903,39,794,23],[904,10,795,12],[904,17,795,19,"numToNByteStr"],[904,30,795,32],[904,31,795,33],[904,35,795,37],[904,36,795,38,"r"],[904,37,795,39],[904,38,795,40],[904,41,795,43,"numToNByteStr"],[904,54,795,56],[904,55,795,57],[904,59,795,61],[904,60,795,62,"s"],[904,61,795,63],[904,62,795,64],[905,8,796,8],[906,6,796,9],[907,8,796,9,"key"],[907,11,796,9],[908,8,796,9,"value"],[908,13,796,9],[908,15,739,8],[908,24,739,15,"fromCompact"],[908,35,739,26,"fromCompact"],[908,36,739,27,"hex"],[908,39,739,30],[908,41,739,32],[909,10,740,12],[909,14,740,18,"l"],[909,15,740,19],[909,18,740,22,"CURVE"],[909,23,740,27],[909,24,740,28,"nByteLength"],[909,35,740,39],[910,10,741,12,"hex"],[910,13,741,15],[910,16,741,18],[910,17,741,19],[910,18,741,20],[910,20,741,22,"utils_js_1"],[910,30,741,32],[910,31,741,33,"ensureBytes"],[910,42,741,44],[910,44,741,46],[910,62,741,64],[910,64,741,66,"hex"],[910,67,741,69],[910,69,741,71,"l"],[910,70,741,72],[910,73,741,75],[910,74,741,76],[910,75,741,77],[911,10,742,12],[911,17,742,19],[911,21,742,23,"Signature"],[911,30,742,32],[911,31,742,33,"slcNum"],[911,37,742,39],[911,38,742,40,"hex"],[911,41,742,43],[911,43,742,45],[911,44,742,46],[911,46,742,48,"l"],[911,47,742,49],[911,48,742,50],[911,50,742,52,"slcNum"],[911,56,742,58],[911,57,742,59,"hex"],[911,60,742,62],[911,62,742,64,"l"],[911,63,742,65],[911,65,742,67],[911,66,742,68],[911,69,742,71,"l"],[911,70,742,72],[911,71,742,73],[911,72,742,74],[912,8,743,8],[913,8,744,8],[914,8,745,8],[915,6,745,8],[916,8,745,8,"key"],[916,11,745,8],[917,8,745,8,"value"],[917,13,745,8],[917,15,746,8],[917,24,746,15,"fromDER"],[917,31,746,22,"fromDER"],[917,32,746,23,"hex"],[917,35,746,26],[917,37,746,28],[918,10,747,12],[918,14,747,12,"_exports$DER$toSig"],[918,32,747,12],[918,35,747,29,"exports"],[918,42,747,36],[918,43,747,37,"DER"],[918,46,747,40],[918,47,747,41,"toSig"],[918,52,747,46],[918,53,747,47],[918,54,747,48],[918,55,747,49],[918,57,747,51,"utils_js_1"],[918,67,747,61],[918,68,747,62,"ensureBytes"],[918,79,747,73],[918,81,747,75],[918,86,747,80],[918,88,747,82,"hex"],[918,91,747,85],[918,92,747,86],[918,93,747,87],[919,12,747,20,"r"],[919,13,747,21],[919,16,747,21,"_exports$DER$toSig"],[919,34,747,21],[919,35,747,20,"r"],[919,36,747,21],[920,12,747,23,"s"],[920,13,747,24],[920,16,747,24,"_exports$DER$toSig"],[920,34,747,24],[920,35,747,23,"s"],[920,36,747,24],[921,10,748,12],[921,17,748,19],[921,21,748,23,"Signature"],[921,30,748,32],[921,31,748,33,"r"],[921,32,748,34],[921,34,748,36,"s"],[921,35,748,37],[921,36,748,38],[922,8,749,8],[923,6,749,9],[924,4,749,9],[925,4,798,4],[925,8,798,10,"utils"],[925,13,798,15],[925,16,798,18],[926,6,799,8,"isValidPrivateKey"],[926,23,799,25,"isValidPrivateKey"],[926,24,799,26,"privateKey"],[926,34,799,36],[926,36,799,38],[927,8,800,12],[927,12,800,16],[928,10,801,16,"normPrivateKeyToScalar"],[928,32,801,38],[928,33,801,39,"privateKey"],[928,43,801,49],[928,44,801,50],[929,10,802,16],[929,17,802,23],[929,21,802,27],[930,8,803,12],[930,9,803,13],[930,10,804,12],[930,17,804,19,"error"],[930,22,804,24],[930,24,804,26],[931,10,805,16],[931,17,805,23],[931,22,805,28],[932,8,806,12],[933,6,807,8],[933,7,807,9],[934,6,808,8,"normPrivateKeyToScalar"],[934,28,808,30],[934,30,808,32,"normPrivateKeyToScalar"],[934,52,808,54],[935,6,809,8],[936,0,810,0],[937,0,811,0],[938,0,812,0],[939,6,813,8,"randomPrivateKey"],[939,22,813,24],[939,24,813,26,"randomPrivateKey"],[939,25,813,26],[939,30,813,32],[940,8,814,12],[940,12,814,18,"length"],[940,18,814,24],[940,21,814,27],[940,22,814,28],[940,23,814,29],[940,25,814,31,"modular_js_1"],[940,37,814,43],[940,38,814,44,"getMinHashLength"],[940,54,814,60],[940,56,814,62,"CURVE"],[940,61,814,67],[940,62,814,68,"n"],[940,63,814,69],[940,64,814,70],[941,8,815,12],[941,15,815,19],[941,16,815,20],[941,17,815,21],[941,19,815,23,"modular_js_1"],[941,31,815,35],[941,32,815,36,"mapHashToField"],[941,46,815,50],[941,48,815,52,"CURVE"],[941,53,815,57],[941,54,815,58,"randomBytes"],[941,65,815,69],[941,66,815,70,"length"],[941,72,815,76],[941,73,815,77],[941,75,815,79,"CURVE"],[941,80,815,84],[941,81,815,85,"n"],[941,82,815,86],[941,83,815,87],[942,6,816,8],[942,7,816,9],[943,6,817,8],[944,0,818,0],[945,0,819,0],[946,0,820,0],[947,0,821,0],[948,0,822,0],[949,0,823,0],[950,0,824,0],[951,6,825,8,"precompute"],[951,16,825,18,"precompute"],[951,17,825,18],[951,19,825,55],[952,8,825,55],[952,12,825,19,"windowSize"],[952,22,825,29],[952,25,825,29,"arguments"],[952,34,825,29],[952,35,825,29,"length"],[952,41,825,29],[952,49,825,29,"arguments"],[952,58,825,29],[952,66,825,29,"undefined"],[952,75,825,29],[952,78,825,29,"arguments"],[952,87,825,29],[952,93,825,32],[952,94,825,33],[953,8,825,33],[953,12,825,35,"point"],[953,17,825,40],[953,20,825,40,"arguments"],[953,29,825,40],[953,30,825,40,"length"],[953,36,825,40],[953,44,825,40,"arguments"],[953,53,825,40],[953,61,825,40,"undefined"],[953,70,825,40],[953,73,825,40,"arguments"],[953,82,825,40],[953,88,825,43,"Point"],[953,93,825,48],[953,94,825,49,"BASE"],[953,98,825,53],[954,8,826,12,"point"],[954,13,826,17],[954,14,826,18,"_setWindowSize"],[954,28,826,32],[954,29,826,33,"windowSize"],[954,39,826,43],[954,40,826,44],[955,8,827,12,"point"],[955,13,827,17],[955,14,827,18,"multiply"],[955,22,827,26],[955,23,827,27,"BigInt"],[955,29,827,33],[955,30,827,34],[955,31,827,35],[955,32,827,36],[955,33,827,37],[955,34,827,38],[955,35,827,39],[956,8,828,12],[956,15,828,19,"point"],[956,20,828,24],[957,6,829,8],[958,4,830,4],[958,5,830,5],[959,4,831,4],[960,0,832,0],[961,0,833,0],[962,0,834,0],[963,0,835,0],[964,0,836,0],[965,4,837,4],[965,13,837,13,"getPublicKey"],[965,25,837,25,"getPublicKey"],[965,26,837,26,"privateKey"],[965,36,837,36],[965,38,837,59],[966,6,837,59],[966,10,837,38,"isCompressed"],[966,22,837,50],[966,25,837,50,"arguments"],[966,34,837,50],[966,35,837,50,"length"],[966,41,837,50],[966,49,837,50,"arguments"],[966,58,837,50],[966,66,837,50,"undefined"],[966,75,837,50],[966,78,837,50,"arguments"],[966,87,837,50],[966,93,837,53],[966,97,837,57],[967,6,838,8],[967,13,838,15,"Point"],[967,18,838,20],[967,19,838,21,"fromPrivateKey"],[967,33,838,35],[967,34,838,36,"privateKey"],[967,44,838,46],[967,45,838,47],[967,46,838,48,"toRawBytes"],[967,56,838,58],[967,57,838,59,"isCompressed"],[967,69,838,71],[967,70,838,72],[968,4,839,4],[969,4,840,4],[970,0,841,0],[971,0,842,0],[972,4,843,4],[972,13,843,13,"isProbPub"],[972,22,843,22,"isProbPub"],[972,23,843,23,"item"],[972,27,843,27],[972,29,843,29],[973,6,844,8],[973,10,844,14,"arr"],[973,13,844,17],[973,16,844,20,"ut"],[973,18,844,22],[973,19,844,23,"isBytes"],[973,26,844,30],[973,27,844,31,"item"],[973,31,844,35],[973,32,844,36],[974,6,845,8],[974,10,845,14,"str"],[974,13,845,17],[974,16,845,20],[974,23,845,27,"item"],[974,27,845,31],[974,32,845,36],[974,40,845,44],[975,6,846,8],[975,10,846,14,"len"],[975,13,846,17],[975,16,846,20],[975,17,846,21,"arr"],[975,20,846,24],[975,24,846,28,"str"],[975,27,846,31],[975,32,846,36,"item"],[975,36,846,40],[975,37,846,41,"length"],[975,43,846,47],[976,6,847,8],[976,10,847,12,"arr"],[976,13,847,15],[976,15,848,12],[976,22,848,19,"len"],[976,25,848,22],[976,30,848,27,"compressedLen"],[976,43,848,40],[976,47,848,44,"len"],[976,50,848,47],[976,55,848,52,"uncompressedLen"],[976,70,848,67],[977,6,849,8],[977,10,849,12,"str"],[977,13,849,15],[977,15,850,12],[977,22,850,19,"len"],[977,25,850,22],[977,30,850,27],[977,31,850,28],[977,34,850,31,"compressedLen"],[977,47,850,44],[977,51,850,48,"len"],[977,54,850,51],[977,59,850,56],[977,60,850,57],[977,63,850,60,"uncompressedLen"],[977,78,850,75],[978,6,851,8],[978,10,851,12,"item"],[978,14,851,16],[978,26,851,28,"Point"],[978,31,851,33],[978,33,852,12],[978,40,852,19],[978,44,852,23],[979,6,853,8],[979,13,853,15],[979,18,853,20],[980,4,854,4],[981,4,855,4],[982,0,856,0],[983,0,857,0],[984,0,858,0],[985,0,859,0],[986,0,860,0],[987,0,861,0],[988,0,862,0],[989,0,863,0],[990,0,864,0],[991,4,865,4],[991,13,865,13,"getSharedSecret"],[991,28,865,28,"getSharedSecret"],[991,29,865,29,"privateA"],[991,37,865,37],[991,39,865,39,"publicB"],[991,46,865,46],[991,48,865,69],[992,6,865,69],[992,10,865,48,"isCompressed"],[992,22,865,60],[992,25,865,60,"arguments"],[992,34,865,60],[992,35,865,60,"length"],[992,41,865,60],[992,49,865,60,"arguments"],[992,58,865,60],[992,66,865,60,"undefined"],[992,75,865,60],[992,78,865,60,"arguments"],[992,87,865,60],[992,93,865,63],[992,97,865,67],[993,6,866,8],[993,10,866,12,"isProbPub"],[993,19,866,21],[993,20,866,22,"privateA"],[993,28,866,30],[993,29,866,31],[993,31,867,12],[993,37,867,18],[993,41,867,22,"Error"],[993,46,867,27],[993,47,867,28],[993,78,867,59],[993,79,867,60],[994,6,868,8],[994,10,868,12],[994,11,868,13,"isProbPub"],[994,20,868,22],[994,21,868,23,"publicB"],[994,28,868,30],[994,29,868,31],[994,31,869,12],[994,37,869,18],[994,41,869,22,"Error"],[994,46,869,27],[994,47,869,28],[994,78,869,59],[994,79,869,60],[995,6,870,8],[995,10,870,14,"b"],[995,11,870,15],[995,14,870,18,"Point"],[995,19,870,23],[995,20,870,24,"fromHex"],[995,27,870,31],[995,28,870,32,"publicB"],[995,35,870,39],[995,36,870,40],[995,37,870,41],[995,38,870,42],[996,6,871,8],[996,13,871,15,"b"],[996,14,871,16],[996,15,871,17,"multiply"],[996,23,871,25],[996,24,871,26,"normPrivateKeyToScalar"],[996,46,871,48],[996,47,871,49,"privateA"],[996,55,871,57],[996,56,871,58],[996,57,871,59],[996,58,871,60,"toRawBytes"],[996,68,871,70],[996,69,871,71,"isCompressed"],[996,81,871,83],[996,82,871,84],[997,4,872,4],[998,4,873,4],[999,4,874,4],[1000,4,875,4],[1001,4,876,4],[1002,4,877,4],[1002,8,877,10,"bits2int"],[1002,16,877,18],[1002,19,877,21,"CURVE"],[1002,24,877,26],[1002,25,877,27,"bits2int"],[1002,33,877,35],[1002,37,878,8],[1002,47,878,18,"bytes"],[1002,52,878,23],[1002,54,878,25],[1003,6,879,12],[1004,6,880,12],[1004,10,880,16,"bytes"],[1004,15,880,21],[1004,16,880,22,"length"],[1004,22,880,28],[1004,25,880,31],[1004,29,880,35],[1004,31,881,16],[1004,37,881,22],[1004,41,881,26,"Error"],[1004,46,881,31],[1004,47,881,32],[1004,67,881,52],[1004,68,881,53],[1005,6,882,12],[1006,6,883,12],[1007,6,884,12],[1007,10,884,18,"num"],[1007,13,884,21],[1007,16,884,24,"ut"],[1007,18,884,26],[1007,19,884,27,"bytesToNumberBE"],[1007,34,884,42],[1007,35,884,43,"bytes"],[1007,40,884,48],[1007,41,884,49],[1007,42,884,50],[1007,43,884,51],[1008,6,885,12],[1008,10,885,18,"delta"],[1008,15,885,23],[1008,18,885,26,"bytes"],[1008,23,885,31],[1008,24,885,32,"length"],[1008,30,885,38],[1008,33,885,41],[1008,34,885,42],[1008,37,885,45,"CURVE"],[1008,42,885,50],[1008,43,885,51,"nBitLength"],[1008,53,885,61],[1008,54,885,62],[1008,55,885,63],[1009,6,886,12],[1009,13,886,19,"delta"],[1009,18,886,24],[1009,21,886,27],[1009,22,886,28],[1009,25,886,31,"num"],[1009,28,886,34],[1009,32,886,38,"BigInt"],[1009,38,886,44],[1009,39,886,45,"delta"],[1009,44,886,50],[1009,45,886,51],[1009,48,886,54,"num"],[1009,51,886,57],[1010,4,887,8],[1010,5,887,9],[1011,4,888,4],[1011,8,888,10,"bits2int_modN"],[1011,21,888,23],[1011,24,888,26,"CURVE"],[1011,29,888,31],[1011,30,888,32,"bits2int_modN"],[1011,43,888,45],[1011,47,889,8],[1011,57,889,18,"bytes"],[1011,62,889,23],[1011,64,889,25],[1012,6,890,12],[1012,13,890,19,"modN"],[1012,17,890,23],[1012,18,890,24,"bits2int"],[1012,26,890,32],[1012,27,890,33,"bytes"],[1012,32,890,38],[1012,33,890,39],[1012,34,890,40],[1012,35,890,41],[1012,36,890,42],[1013,4,891,8],[1013,5,891,9],[1014,4,892,4],[1015,4,893,4],[1015,8,893,10,"ORDER_MASK"],[1015,18,893,20],[1015,21,893,23,"ut"],[1015,23,893,25],[1015,24,893,26,"bitMask"],[1015,31,893,33],[1015,32,893,34,"CURVE"],[1015,37,893,39],[1015,38,893,40,"nBitLength"],[1015,48,893,50],[1015,49,893,51],[1016,4,894,4],[1017,0,895,0],[1018,0,896,0],[1019,4,897,4],[1019,13,897,13,"int2octets"],[1019,23,897,23,"int2octets"],[1019,24,897,24,"num"],[1019,27,897,27],[1019,29,897,29],[1020,6,898,8,"ut"],[1020,8,898,10],[1020,9,898,11,"aInRange"],[1020,17,898,19],[1020,18,898,20],[1020,28,898,30],[1020,31,898,33,"CURVE"],[1020,36,898,38],[1020,37,898,39,"nBitLength"],[1020,47,898,49],[1020,49,898,51,"num"],[1020,52,898,54],[1020,54,898,56,"_0n"],[1020,57,898,59],[1020,59,898,61,"ORDER_MASK"],[1020,69,898,71],[1020,70,898,72],[1021,6,899,8],[1022,6,900,8],[1022,13,900,15,"ut"],[1022,15,900,17],[1022,16,900,18,"numberToBytesBE"],[1022,31,900,33],[1022,32,900,34,"num"],[1022,35,900,37],[1022,37,900,39,"CURVE"],[1022,42,900,44],[1022,43,900,45,"nByteLength"],[1022,54,900,56],[1022,55,900,57],[1023,4,901,4],[1024,4,902,4],[1025,4,903,4],[1026,4,904,4],[1027,4,905,4],[1028,4,906,4],[1029,4,907,4],[1029,13,907,13,"prepSig"],[1029,20,907,20,"prepSig"],[1029,21,907,21,"msgHash"],[1029,28,907,28],[1029,30,907,30,"privateKey"],[1029,40,907,40],[1029,42,907,65],[1030,6,907,65],[1030,10,907,42,"opts"],[1030,14,907,46],[1030,17,907,46,"arguments"],[1030,26,907,46],[1030,27,907,46,"length"],[1030,33,907,46],[1030,41,907,46,"arguments"],[1030,50,907,46],[1030,58,907,46,"undefined"],[1030,67,907,46],[1030,70,907,46,"arguments"],[1030,79,907,46],[1030,85,907,49,"defaultSigOpts"],[1030,99,907,63],[1031,6,908,8],[1031,10,908,12],[1031,11,908,13],[1031,22,908,24],[1031,24,908,26],[1031,35,908,37],[1031,36,908,38],[1031,37,908,39,"some"],[1031,41,908,43],[1031,42,908,45,"k"],[1031,43,908,46],[1031,47,908,51,"k"],[1031,48,908,52],[1031,52,908,56,"opts"],[1031,56,908,60],[1031,57,908,61],[1031,59,909,12],[1031,65,909,18],[1031,69,909,22,"Error"],[1031,74,909,27],[1031,75,909,28],[1031,112,909,65],[1031,113,909,66],[1032,6,910,8],[1032,10,910,16,"hash"],[1032,14,910,20],[1032,17,910,38,"CURVE"],[1032,22,910,43],[1032,23,910,16,"hash"],[1032,27,910,20],[1033,8,910,22,"randomBytes"],[1033,19,910,33],[1033,22,910,38,"CURVE"],[1033,27,910,43],[1033,28,910,22,"randomBytes"],[1033,39,910,33],[1034,6,911,8],[1034,10,911,14,"lowS"],[1034,14,911,18],[1034,17,911,51,"opts"],[1034,21,911,55],[1034,22,911,14,"lowS"],[1034,26,911,18],[1035,8,911,20,"prehash"],[1035,15,911,27],[1035,18,911,51,"opts"],[1035,22,911,55],[1035,23,911,20,"prehash"],[1035,30,911,27],[1036,8,911,43,"ent"],[1036,11,911,46],[1036,14,911,51,"opts"],[1036,18,911,55],[1036,19,911,29,"extraEntropy"],[1036,31,911,41],[1036,32,911,56],[1036,33,911,57],[1037,6,912,8],[1037,10,912,12,"lowS"],[1037,14,912,16],[1037,18,912,20],[1037,22,912,24],[1037,24,913,12,"lowS"],[1037,28,913,16],[1037,31,913,19],[1037,35,913,23],[1037,36,913,24],[1037,37,913,25],[1038,6,914,8,"msgHash"],[1038,13,914,15],[1038,16,914,18],[1038,17,914,19],[1038,18,914,20],[1038,20,914,22,"utils_js_1"],[1038,30,914,32],[1038,31,914,33,"ensureBytes"],[1038,42,914,44],[1038,44,914,46],[1038,53,914,55],[1038,55,914,57,"msgHash"],[1038,62,914,64],[1038,63,914,65],[1039,6,915,8,"validateSigVerOpts"],[1039,24,915,26],[1039,25,915,27,"opts"],[1039,29,915,31],[1039,30,915,32],[1040,6,916,8],[1040,10,916,12,"prehash"],[1040,17,916,19],[1040,19,917,12,"msgHash"],[1040,26,917,19],[1040,29,917,22],[1040,30,917,23],[1040,31,917,24],[1040,33,917,26,"utils_js_1"],[1040,43,917,36],[1040,44,917,37,"ensureBytes"],[1040,55,917,48],[1040,57,917,50],[1040,76,917,69],[1040,78,917,71,"hash"],[1040,82,917,75],[1040,83,917,76,"msgHash"],[1040,90,917,83],[1040,91,917,84],[1040,92,917,85],[1041,6,918,8],[1042,6,919,8],[1043,6,920,8],[1044,6,921,8],[1044,10,921,14,"h1int"],[1044,15,921,19],[1044,18,921,22,"bits2int_modN"],[1044,31,921,35],[1044,32,921,36,"msgHash"],[1044,39,921,43],[1044,40,921,44],[1045,6,922,8],[1045,10,922,14,"d"],[1045,11,922,15],[1045,14,922,18,"normPrivateKeyToScalar"],[1045,36,922,40],[1045,37,922,41,"privateKey"],[1045,47,922,51],[1045,48,922,52],[1045,49,922,53],[1045,50,922,54],[1046,6,923,8],[1046,10,923,14,"seedArgs"],[1046,18,923,22],[1046,21,923,25],[1046,22,923,26,"int2octets"],[1046,32,923,36],[1046,33,923,37,"d"],[1046,34,923,38],[1046,35,923,39],[1046,37,923,41,"int2octets"],[1046,47,923,51],[1046,48,923,52,"h1int"],[1046,53,923,57],[1046,54,923,58],[1046,55,923,59],[1047,6,924,8],[1048,6,925,8],[1048,10,925,12,"ent"],[1048,13,925,15],[1048,17,925,19],[1048,21,925,23],[1048,25,925,27,"ent"],[1048,28,925,30],[1048,33,925,35],[1048,38,925,40],[1048,40,925,42],[1049,8,926,12],[1050,8,927,12],[1050,12,927,18,"e"],[1050,13,927,19],[1050,16,927,22,"ent"],[1050,19,927,25],[1050,24,927,30],[1050,28,927,34],[1050,31,927,37,"randomBytes"],[1050,42,927,48],[1050,43,927,49,"Fp"],[1050,45,927,51],[1050,46,927,52,"BYTES"],[1050,51,927,57],[1050,52,927,58],[1050,55,927,61,"ent"],[1050,58,927,64],[1050,59,927,65],[1050,60,927,66],[1051,8,928,12,"seedArgs"],[1051,16,928,20],[1051,17,928,21,"push"],[1051,21,928,25],[1051,22,928,26],[1051,23,928,27],[1051,24,928,28],[1051,26,928,30,"utils_js_1"],[1051,36,928,40],[1051,37,928,41,"ensureBytes"],[1051,48,928,52],[1051,50,928,54],[1051,64,928,68],[1051,66,928,70,"e"],[1051,67,928,71],[1051,68,928,72],[1051,69,928,73],[1051,70,928,74],[1051,71,928,75],[1052,6,929,8],[1053,6,930,8],[1053,10,930,14,"seed"],[1053,14,930,18],[1053,17,930,21,"ut"],[1053,19,930,23],[1053,20,930,24,"concatBytes"],[1053,31,930,35],[1053,32,930,36],[1053,35,930,39,"seedArgs"],[1053,43,930,47],[1053,44,930,48],[1053,45,930,49],[1053,46,930,50],[1054,6,931,8],[1054,10,931,14,"m"],[1054,11,931,15],[1054,14,931,18,"h1int"],[1054,19,931,23],[1054,20,931,24],[1054,21,931,25],[1055,6,932,8],[1056,6,933,8],[1056,15,933,17,"k2sig"],[1056,20,933,22,"k2sig"],[1056,21,933,23,"kBytes"],[1056,27,933,29],[1056,29,933,31],[1057,8,934,12],[1058,8,935,12],[1058,12,935,18,"k"],[1058,13,935,19],[1058,16,935,22,"bits2int"],[1058,24,935,30],[1058,25,935,31,"kBytes"],[1058,31,935,37],[1058,32,935,38],[1058,33,935,39],[1058,34,935,40],[1059,8,936,12],[1059,12,936,16],[1059,13,936,17,"isWithinCurveOrder"],[1059,31,936,35],[1059,32,936,36,"k"],[1059,33,936,37],[1059,34,936,38],[1059,36,937,16],[1059,43,937,23],[1059,44,937,24],[1060,8,938,12],[1060,12,938,18,"ik"],[1060,14,938,20],[1060,17,938,23,"invN"],[1060,21,938,27],[1060,22,938,28,"k"],[1060,23,938,29],[1060,24,938,30],[1060,25,938,31],[1060,26,938,32],[1061,8,939,12],[1061,12,939,18,"q"],[1061,13,939,19],[1061,16,939,22,"Point"],[1061,21,939,27],[1061,22,939,28,"BASE"],[1061,26,939,32],[1061,27,939,33,"multiply"],[1061,35,939,41],[1061,36,939,42,"k"],[1061,37,939,43],[1061,38,939,44],[1061,39,939,45,"toAffine"],[1061,47,939,53],[1061,48,939,54],[1061,49,939,55],[1061,50,939,56],[1061,51,939,57],[1062,8,940,12],[1062,12,940,18,"r"],[1062,13,940,19],[1062,16,940,22,"modN"],[1062,20,940,26],[1062,21,940,27,"q"],[1062,22,940,28],[1062,23,940,29,"x"],[1062,24,940,30],[1062,25,940,31],[1062,26,940,32],[1062,27,940,33],[1063,8,941,12],[1063,12,941,16,"r"],[1063,13,941,17],[1063,18,941,22,"_0n"],[1063,21,941,25],[1063,23,942,16],[1064,8,943,12],[1065,8,944,12],[1066,8,945,12],[1067,8,946,12],[1067,12,946,18,"s"],[1067,13,946,19],[1067,16,946,22,"modN"],[1067,20,946,26],[1067,21,946,27,"ik"],[1067,23,946,29],[1067,26,946,32,"modN"],[1067,30,946,36],[1067,31,946,37,"m"],[1067,32,946,38],[1067,35,946,41,"r"],[1067,36,946,42],[1067,39,946,45,"d"],[1067,40,946,46],[1067,41,946,47],[1067,42,946,48],[1067,43,946,49],[1067,44,946,50],[1068,8,947,12],[1068,12,947,16,"s"],[1068,13,947,17],[1068,18,947,22,"_0n"],[1068,21,947,25],[1068,23,948,16],[1069,8,949,12],[1069,12,949,16,"recovery"],[1069,20,949,24],[1069,23,949,27],[1069,24,949,28,"q"],[1069,25,949,29],[1069,26,949,30,"x"],[1069,27,949,31],[1069,32,949,36,"r"],[1069,33,949,37],[1069,36,949,40],[1069,37,949,41],[1069,40,949,44],[1069,41,949,45],[1069,45,949,49,"Number"],[1069,51,949,55],[1069,52,949,56,"q"],[1069,53,949,57],[1069,54,949,58,"y"],[1069,55,949,59],[1069,58,949,62,"_1n"],[1069,61,949,65],[1069,62,949,66],[1069,63,949,67],[1069,64,949,68],[1070,8,950,12],[1070,12,950,16,"normS"],[1070,17,950,21],[1070,20,950,24,"s"],[1070,21,950,25],[1071,8,951,12],[1071,12,951,16,"lowS"],[1071,16,951,20],[1071,20,951,24,"isBiggerThanHalfOrder"],[1071,41,951,45],[1071,42,951,46,"s"],[1071,43,951,47],[1071,44,951,48],[1071,46,951,50],[1072,10,952,16,"normS"],[1072,15,952,21],[1072,18,952,24,"normalizeS"],[1072,28,952,34],[1072,29,952,35,"s"],[1072,30,952,36],[1072,31,952,37],[1072,32,952,38],[1072,33,952,39],[1073,10,953,16,"recovery"],[1073,18,953,24],[1073,22,953,28],[1073,23,953,29],[1073,24,953,30],[1073,25,953,31],[1074,8,954,12],[1075,8,955,12],[1075,15,955,19],[1075,19,955,23,"Signature"],[1075,28,955,32],[1075,29,955,33,"r"],[1075,30,955,34],[1075,32,955,36,"normS"],[1075,37,955,41],[1075,39,955,43,"recovery"],[1075,47,955,51],[1075,48,955,52],[1075,49,955,53],[1075,50,955,54],[1076,6,956,8],[1077,6,957,8],[1077,13,957,15],[1078,8,957,17,"seed"],[1078,12,957,21],[1079,8,957,23,"k2sig"],[1080,6,957,29],[1080,7,957,30],[1081,4,958,4],[1082,4,959,4],[1082,8,959,10,"defaultSigOpts"],[1082,22,959,24],[1082,25,959,27],[1083,6,959,29,"lowS"],[1083,10,959,33],[1083,12,959,35,"CURVE"],[1083,17,959,40],[1083,18,959,41,"lowS"],[1083,22,959,45],[1084,6,959,47,"prehash"],[1084,13,959,54],[1084,15,959,56],[1085,4,959,62],[1085,5,959,63],[1086,4,960,4],[1086,8,960,10,"defaultVerOpts"],[1086,22,960,24],[1086,25,960,27],[1087,6,960,29,"lowS"],[1087,10,960,33],[1087,12,960,35,"CURVE"],[1087,17,960,40],[1087,18,960,41,"lowS"],[1087,22,960,45],[1088,6,960,47,"prehash"],[1088,13,960,54],[1088,15,960,56],[1089,4,960,62],[1089,5,960,63],[1090,4,961,4],[1091,0,962,0],[1092,0,963,0],[1093,0,964,0],[1094,0,965,0],[1095,0,966,0],[1096,0,967,0],[1097,0,968,0],[1098,0,969,0],[1099,0,970,0],[1100,0,971,0],[1101,0,972,0],[1102,0,973,0],[1103,4,974,4],[1103,13,974,13,"sign"],[1103,17,974,17,"sign"],[1103,18,974,18,"msgHash"],[1103,25,974,25],[1103,27,974,27,"privKey"],[1103,34,974,34],[1103,36,974,59],[1104,6,974,59],[1104,10,974,36,"opts"],[1104,14,974,40],[1104,17,974,40,"arguments"],[1104,26,974,40],[1104,27,974,40,"length"],[1104,33,974,40],[1104,41,974,40,"arguments"],[1104,50,974,40],[1104,58,974,40,"undefined"],[1104,67,974,40],[1104,70,974,40,"arguments"],[1104,79,974,40],[1104,85,974,43,"defaultSigOpts"],[1104,99,974,57],[1105,6,975,8],[1105,10,975,8,"_prepSig"],[1105,18,975,8],[1105,21,975,32,"prepSig"],[1105,28,975,39],[1105,29,975,40,"msgHash"],[1105,36,975,47],[1105,38,975,49,"privKey"],[1105,45,975,56],[1105,47,975,58,"opts"],[1105,51,975,62],[1105,52,975,63],[1106,8,975,16,"seed"],[1106,12,975,20],[1106,15,975,20,"_prepSig"],[1106,23,975,20],[1106,24,975,16,"seed"],[1106,28,975,20],[1107,8,975,22,"k2sig"],[1107,13,975,27],[1107,16,975,27,"_prepSig"],[1107,24,975,27],[1107,25,975,22,"k2sig"],[1107,30,975,27],[1107,31,975,64],[1107,32,975,65],[1108,6,976,8],[1108,10,976,14,"C"],[1108,11,976,15],[1108,14,976,18,"CURVE"],[1108,19,976,23],[1109,6,977,8],[1109,10,977,14,"drbg"],[1109,14,977,18],[1109,17,977,21,"ut"],[1109,19,977,23],[1109,20,977,24,"createHmacDrbg"],[1109,34,977,38],[1109,35,977,39,"C"],[1109,36,977,40],[1109,37,977,41,"hash"],[1109,41,977,45],[1109,42,977,46,"outputLen"],[1109,51,977,55],[1109,53,977,57,"C"],[1109,54,977,58],[1109,55,977,59,"nByteLength"],[1109,66,977,70],[1109,68,977,72,"C"],[1109,69,977,73],[1109,70,977,74,"hmac"],[1109,74,977,78],[1109,75,977,79],[1110,6,978,8],[1110,13,978,15,"drbg"],[1110,17,978,19],[1110,18,978,20,"seed"],[1110,22,978,24],[1110,24,978,26,"k2sig"],[1110,29,978,31],[1110,30,978,32],[1110,31,978,33],[1110,32,978,34],[1111,4,979,4],[1112,4,980,4],[1113,4,981,4,"Point"],[1113,9,981,9],[1113,10,981,10,"BASE"],[1113,14,981,14],[1113,15,981,15,"_setWindowSize"],[1113,29,981,29],[1113,30,981,30],[1113,31,981,31],[1113,32,981,32],[1114,4,982,4],[1115,4,983,4],[1116,0,984,0],[1117,0,985,0],[1118,0,986,0],[1119,0,987,0],[1120,0,988,0],[1121,0,989,0],[1122,0,990,0],[1123,0,991,0],[1124,0,992,0],[1125,0,993,0],[1126,0,994,0],[1127,0,995,0],[1128,4,996,4],[1128,13,996,13,"verify"],[1128,19,996,19,"verify"],[1128,20,996,20,"signature"],[1128,29,996,29],[1128,31,996,31,"msgHash"],[1128,38,996,38],[1128,40,996,40,"publicKey"],[1128,49,996,49],[1128,51,996,74],[1129,6,996,74],[1129,10,996,51,"opts"],[1129,14,996,55],[1129,17,996,55,"arguments"],[1129,26,996,55],[1129,27,996,55,"length"],[1129,33,996,55],[1129,41,996,55,"arguments"],[1129,50,996,55],[1129,58,996,55,"undefined"],[1129,67,996,55],[1129,70,996,55,"arguments"],[1129,79,996,55],[1129,85,996,58,"defaultVerOpts"],[1129,99,996,72],[1130,6,997,8],[1130,10,997,14,"sg"],[1130,12,997,16],[1130,15,997,19,"signature"],[1130,24,997,28],[1131,6,998,8,"msgHash"],[1131,13,998,15],[1131,16,998,18],[1131,17,998,19],[1131,18,998,20],[1131,20,998,22,"utils_js_1"],[1131,30,998,32],[1131,31,998,33,"ensureBytes"],[1131,42,998,44],[1131,44,998,46],[1131,53,998,55],[1131,55,998,57,"msgHash"],[1131,62,998,64],[1131,63,998,65],[1132,6,999,8,"publicKey"],[1132,15,999,17],[1132,18,999,20],[1132,19,999,21],[1132,20,999,22],[1132,22,999,24,"utils_js_1"],[1132,32,999,34],[1132,33,999,35,"ensureBytes"],[1132,44,999,46],[1132,46,999,48],[1132,57,999,59],[1132,59,999,61,"publicKey"],[1132,68,999,70],[1132,69,999,71],[1133,6,1000,8],[1133,10,1000,16,"lowS"],[1133,14,1000,20],[1133,17,1000,42,"opts"],[1133,21,1000,46],[1133,22,1000,16,"lowS"],[1133,26,1000,20],[1134,8,1000,22,"prehash"],[1134,15,1000,29],[1134,18,1000,42,"opts"],[1134,22,1000,46],[1134,23,1000,22,"prehash"],[1134,30,1000,29],[1135,8,1000,31,"format"],[1135,14,1000,37],[1135,17,1000,42,"opts"],[1135,21,1000,46],[1135,22,1000,31,"format"],[1135,28,1000,37],[1136,6,1001,8],[1137,6,1002,8,"validateSigVerOpts"],[1137,24,1002,26],[1137,25,1002,27,"opts"],[1137,29,1002,31],[1137,30,1002,32],[1138,6,1003,8],[1138,10,1003,12],[1138,18,1003,20],[1138,22,1003,24,"opts"],[1138,26,1003,28],[1138,28,1004,12],[1138,34,1004,18],[1138,38,1004,22,"Error"],[1138,43,1004,27],[1138,44,1004,28],[1138,80,1004,64],[1138,81,1004,65],[1139,6,1005,8],[1139,10,1005,12,"format"],[1139,16,1005,18],[1139,21,1005,23,"undefined"],[1139,30,1005,32],[1139,34,1005,36,"format"],[1139,40,1005,42],[1139,45,1005,47],[1139,54,1005,56],[1139,58,1005,60,"format"],[1139,64,1005,66],[1139,69,1005,71],[1139,74,1005,76],[1139,76,1006,12],[1139,82,1006,18],[1139,86,1006,22,"Error"],[1139,91,1006,27],[1139,92,1006,28],[1139,123,1006,59],[1139,124,1006,60],[1140,6,1007,8],[1140,10,1007,14,"isHex"],[1140,15,1007,19],[1140,18,1007,22],[1140,25,1007,29,"sg"],[1140,27,1007,31],[1140,32,1007,36],[1140,40,1007,44],[1140,44,1007,48,"ut"],[1140,46,1007,50],[1140,47,1007,51,"isBytes"],[1140,54,1007,58],[1140,55,1007,59,"sg"],[1140,57,1007,61],[1140,58,1007,62],[1141,6,1008,8],[1141,10,1008,14,"isObj"],[1141,15,1008,19],[1141,18,1008,22],[1141,19,1008,23,"isHex"],[1141,24,1008,28],[1141,28,1009,12],[1141,29,1009,13,"format"],[1141,35,1009,19],[1141,39,1010,12],[1141,46,1010,19,"sg"],[1141,48,1010,21],[1141,53,1010,26],[1141,61,1010,34],[1141,65,1011,12,"sg"],[1141,67,1011,14],[1141,72,1011,19],[1141,76,1011,23],[1141,80,1012,12],[1141,87,1012,19,"sg"],[1141,89,1012,21],[1141,90,1012,22,"r"],[1141,91,1012,23],[1141,96,1012,28],[1141,104,1012,36],[1141,108,1013,12],[1141,115,1013,19,"sg"],[1141,117,1013,21],[1141,118,1013,22,"s"],[1141,119,1013,23],[1141,124,1013,28],[1141,132,1013,36],[1142,6,1014,8],[1142,10,1014,12],[1142,11,1014,13,"isHex"],[1142,16,1014,18],[1142,20,1014,22],[1142,21,1014,23,"isObj"],[1142,26,1014,28],[1142,28,1015,12],[1142,34,1015,18],[1142,38,1015,22,"Error"],[1142,43,1015,27],[1142,44,1015,28],[1142,118,1015,102],[1142,119,1015,103],[1143,6,1016,8],[1143,10,1016,12,"_sig"],[1143,14,1016,16],[1143,17,1016,19,"undefined"],[1143,26,1016,28],[1144,6,1017,8],[1144,10,1017,12,"P"],[1144,11,1017,13],[1145,6,1018,8],[1145,10,1018,12],[1146,8,1019,12],[1146,12,1019,16,"isObj"],[1146,17,1019,21],[1146,19,1020,16,"_sig"],[1146,23,1020,20],[1146,26,1020,23],[1146,30,1020,27,"Signature"],[1146,39,1020,36],[1146,40,1020,37,"sg"],[1146,42,1020,39],[1146,43,1020,40,"r"],[1146,44,1020,41],[1146,46,1020,43,"sg"],[1146,48,1020,45],[1146,49,1020,46,"s"],[1146,50,1020,47],[1146,51,1020,48],[1147,8,1021,12],[1147,12,1021,16,"isHex"],[1147,17,1021,21],[1147,19,1021,23],[1148,10,1022,16],[1149,10,1023,16],[1150,10,1024,16],[1150,14,1024,20],[1151,12,1025,20],[1151,16,1025,24,"format"],[1151,22,1025,30],[1151,27,1025,35],[1151,36,1025,44],[1151,38,1026,24,"_sig"],[1151,42,1026,28],[1151,45,1026,31,"Signature"],[1151,54,1026,40],[1151,55,1026,41,"fromDER"],[1151,62,1026,48],[1151,63,1026,49,"sg"],[1151,65,1026,51],[1151,66,1026,52],[1152,10,1027,16],[1152,11,1027,17],[1152,12,1028,16],[1152,19,1028,23,"derError"],[1152,27,1028,31],[1152,29,1028,33],[1153,12,1029,20],[1153,16,1029,24],[1153,18,1029,26,"derError"],[1153,26,1029,34],[1153,38,1029,46,"exports"],[1153,45,1029,53],[1153,46,1029,54,"DER"],[1153,49,1029,57],[1153,50,1029,58,"Err"],[1153,53,1029,61],[1153,54,1029,62],[1153,56,1030,24],[1153,62,1030,30,"derError"],[1153,70,1030,38],[1154,10,1031,16],[1155,10,1032,16],[1155,14,1032,20],[1155,15,1032,21,"_sig"],[1155,19,1032,25],[1155,23,1032,29,"format"],[1155,29,1032,35],[1155,34,1032,40],[1155,39,1032,45],[1155,41,1033,20,"_sig"],[1155,45,1033,24],[1155,48,1033,27,"Signature"],[1155,57,1033,36],[1155,58,1033,37,"fromCompact"],[1155,69,1033,48],[1155,70,1033,49,"sg"],[1155,72,1033,51],[1155,73,1033,52],[1156,8,1034,12],[1157,8,1035,12,"P"],[1157,9,1035,13],[1157,12,1035,16,"Point"],[1157,17,1035,21],[1157,18,1035,22,"fromHex"],[1157,25,1035,29],[1157,26,1035,30,"publicKey"],[1157,35,1035,39],[1157,36,1035,40],[1158,6,1036,8],[1158,7,1036,9],[1158,8,1037,8],[1158,15,1037,15,"error"],[1158,20,1037,20],[1158,22,1037,22],[1159,8,1038,12],[1159,15,1038,19],[1159,20,1038,24],[1160,6,1039,8],[1161,6,1040,8],[1161,10,1040,12],[1161,11,1040,13,"_sig"],[1161,15,1040,17],[1161,17,1041,12],[1161,24,1041,19],[1161,29,1041,24],[1162,6,1042,8],[1162,10,1042,12,"lowS"],[1162,14,1042,16],[1162,18,1042,20,"_sig"],[1162,22,1042,24],[1162,23,1042,25,"hasHighS"],[1162,31,1042,33],[1162,32,1042,34],[1162,33,1042,35],[1162,35,1043,12],[1162,42,1043,19],[1162,47,1043,24],[1163,6,1044,8],[1163,10,1044,12,"prehash"],[1163,17,1044,19],[1163,19,1045,12,"msgHash"],[1163,26,1045,19],[1163,29,1045,22,"CURVE"],[1163,34,1045,27],[1163,35,1045,28,"hash"],[1163,39,1045,32],[1163,40,1045,33,"msgHash"],[1163,47,1045,40],[1163,48,1045,41],[1164,6,1046,8],[1164,10,1046,8,"_sig2"],[1164,15,1046,8],[1164,18,1046,25,"_sig"],[1164,22,1046,29],[1165,8,1046,16,"r"],[1165,9,1046,17],[1165,12,1046,17,"_sig2"],[1165,17,1046,17],[1165,18,1046,16,"r"],[1165,19,1046,17],[1166,8,1046,19,"s"],[1166,9,1046,20],[1166,12,1046,20,"_sig2"],[1166,17,1046,20],[1166,18,1046,19,"s"],[1166,19,1046,20],[1167,6,1047,8],[1167,10,1047,14,"h"],[1167,11,1047,15],[1167,14,1047,18,"bits2int_modN"],[1167,27,1047,31],[1167,28,1047,32,"msgHash"],[1167,35,1047,39],[1167,36,1047,40],[1167,37,1047,41],[1167,38,1047,42],[1168,6,1048,8],[1168,10,1048,14,"is"],[1168,12,1048,16],[1168,15,1048,19,"invN"],[1168,19,1048,23],[1168,20,1048,24,"s"],[1168,21,1048,25],[1168,22,1048,26],[1168,23,1048,27],[1168,24,1048,28],[1169,6,1049,8],[1169,10,1049,14,"u1"],[1169,12,1049,16],[1169,15,1049,19,"modN"],[1169,19,1049,23],[1169,20,1049,24,"h"],[1169,21,1049,25],[1169,24,1049,28,"is"],[1169,26,1049,30],[1169,27,1049,31],[1169,28,1049,32],[1169,29,1049,33],[1170,6,1050,8],[1170,10,1050,14,"u2"],[1170,12,1050,16],[1170,15,1050,19,"modN"],[1170,19,1050,23],[1170,20,1050,24,"r"],[1170,21,1050,25],[1170,24,1050,28,"is"],[1170,26,1050,30],[1170,27,1050,31],[1170,28,1050,32],[1170,29,1050,33],[1171,6,1051,8],[1171,10,1051,14,"R"],[1171,11,1051,15],[1171,14,1051,18,"Point"],[1171,19,1051,23],[1171,20,1051,24,"BASE"],[1171,24,1051,28],[1171,25,1051,29,"multiplyAndAddUnsafe"],[1171,45,1051,49],[1171,46,1051,50,"P"],[1171,47,1051,51],[1171,49,1051,53,"u1"],[1171,51,1051,55],[1171,53,1051,57,"u2"],[1171,55,1051,59],[1171,56,1051,60],[1171,58,1051,62,"toAffine"],[1171,66,1051,70],[1171,67,1051,71],[1171,68,1051,72],[1171,69,1051,73],[1171,70,1051,74],[1172,6,1052,8],[1172,10,1052,12],[1172,11,1052,13,"R"],[1172,12,1052,14],[1172,14,1053,12],[1172,21,1053,19],[1172,26,1053,24],[1173,6,1054,8],[1173,10,1054,14,"v"],[1173,11,1054,15],[1173,14,1054,18,"modN"],[1173,18,1054,22],[1173,19,1054,23,"R"],[1173,20,1054,24],[1173,21,1054,25,"x"],[1173,22,1054,26],[1173,23,1054,27],[1174,6,1055,8],[1174,13,1055,15,"v"],[1174,14,1055,16],[1174,19,1055,21,"r"],[1174,20,1055,22],[1175,4,1056,4],[1176,4,1057,4],[1176,11,1057,11],[1177,6,1058,8,"CURVE"],[1177,11,1058,13],[1178,6,1059,8,"getPublicKey"],[1178,18,1059,20],[1179,6,1060,8,"getSharedSecret"],[1179,21,1060,23],[1180,6,1061,8,"sign"],[1180,10,1061,12],[1181,6,1062,8,"verify"],[1181,12,1062,14],[1182,6,1063,8,"ProjectivePoint"],[1182,21,1063,23],[1182,23,1063,25,"Point"],[1182,28,1063,30],[1183,6,1064,8,"Signature"],[1183,15,1064,17],[1184,6,1065,8,"utils"],[1185,4,1066,4],[1185,5,1066,5],[1186,2,1067,0],[1187,2,1068,0],[1188,0,1069,0],[1189,0,1070,0],[1190,0,1071,0],[1191,0,1072,0],[1192,0,1073,0],[1193,0,1074,0],[1194,0,1075,0],[1195,0,1076,0],[1196,2,1077,0],[1196,11,1077,9,"SWUFpSqrtRatio"],[1196,25,1077,23,"SWUFpSqrtRatio"],[1196,26,1077,24,"Fp"],[1196,28,1077,26],[1196,30,1077,28,"Z"],[1196,31,1077,29],[1196,33,1077,31],[1197,4,1078,4],[1198,4,1079,4],[1198,8,1079,10,"q"],[1198,9,1079,11],[1198,12,1079,14,"Fp"],[1198,14,1079,16],[1198,15,1079,17,"ORDER"],[1198,20,1079,22],[1199,4,1080,4],[1199,8,1080,8,"l"],[1199,9,1080,9],[1199,12,1080,12,"_0n"],[1199,15,1080,15],[1200,4,1081,4],[1200,9,1081,9],[1200,13,1081,13,"o"],[1200,14,1081,14],[1200,17,1081,17,"q"],[1200,18,1081,18],[1200,21,1081,21,"_1n"],[1200,24,1081,24],[1200,26,1081,26,"o"],[1200,27,1081,27],[1200,30,1081,30,"_2n"],[1200,33,1081,33],[1200,38,1081,38,"_0n"],[1200,41,1081,41],[1200,43,1081,43,"o"],[1200,44,1081,44],[1200,48,1081,48,"_2n"],[1200,51,1081,51],[1200,53,1082,8,"l"],[1200,54,1082,9],[1200,58,1082,13,"_1n"],[1200,61,1082,16],[1201,4,1083,4],[1201,8,1083,10,"c1"],[1201,10,1083,12],[1201,13,1083,15,"l"],[1201,14,1083,16],[1201,15,1083,17],[1201,16,1083,18],[1202,4,1084,4],[1203,4,1085,4],[1204,4,1086,4],[1204,8,1086,10,"_2n_pow_c1_1"],[1204,20,1086,22],[1204,23,1086,25,"_2n"],[1204,26,1086,28],[1204,30,1086,33,"c1"],[1204,32,1086,35],[1204,35,1086,38,"_1n"],[1204,38,1086,41],[1204,41,1086,44,"_1n"],[1204,44,1086,48],[1205,4,1087,4],[1205,8,1087,10,"_2n_pow_c1"],[1205,18,1087,20],[1205,21,1087,23,"_2n_pow_c1_1"],[1205,33,1087,35],[1205,36,1087,38,"_2n"],[1205,39,1087,41],[1206,4,1088,4],[1206,8,1088,10,"c2"],[1206,10,1088,12],[1206,13,1088,15],[1206,14,1088,16,"q"],[1206,15,1088,17],[1206,18,1088,20,"_1n"],[1206,21,1088,23],[1206,25,1088,27,"_2n_pow_c1"],[1206,35,1088,37],[1206,36,1088,38],[1206,37,1088,39],[1207,4,1089,4],[1207,8,1089,10,"c3"],[1207,10,1089,12],[1207,13,1089,15],[1207,14,1089,16,"c2"],[1207,16,1089,18],[1207,19,1089,21,"_1n"],[1207,22,1089,24],[1207,26,1089,28,"_2n"],[1207,29,1089,31],[1207,30,1089,32],[1207,31,1089,33],[1208,4,1090,4],[1208,8,1090,10,"c4"],[1208,10,1090,12],[1208,13,1090,15,"_2n_pow_c1"],[1208,23,1090,25],[1208,26,1090,28,"_1n"],[1208,29,1090,31],[1208,30,1090,32],[1208,31,1090,33],[1209,4,1091,4],[1209,8,1091,10,"c5"],[1209,10,1091,12],[1209,13,1091,15,"_2n_pow_c1_1"],[1209,25,1091,27],[1209,26,1091,28],[1209,27,1091,29],[1210,4,1092,4],[1210,8,1092,10,"c6"],[1210,10,1092,12],[1210,13,1092,15,"Fp"],[1210,15,1092,17],[1210,16,1092,18,"pow"],[1210,19,1092,21],[1210,20,1092,22,"Z"],[1210,21,1092,23],[1210,23,1092,25,"c2"],[1210,25,1092,27],[1210,26,1092,28],[1210,27,1092,29],[1210,28,1092,30],[1211,4,1093,4],[1211,8,1093,10,"c7"],[1211,10,1093,12],[1211,13,1093,15,"Fp"],[1211,15,1093,17],[1211,16,1093,18,"pow"],[1211,19,1093,21],[1211,20,1093,22,"Z"],[1211,21,1093,23],[1211,23,1093,25],[1211,24,1093,26,"c2"],[1211,26,1093,28],[1211,29,1093,31,"_1n"],[1211,32,1093,34],[1211,36,1093,38,"_2n"],[1211,39,1093,41],[1211,40,1093,42],[1211,41,1093,43],[1211,42,1093,44],[1212,4,1094,4],[1212,8,1094,8,"sqrtRatio"],[1212,17,1094,17],[1212,20,1094,20,"sqrtRatio"],[1212,21,1094,21,"u"],[1212,22,1094,22],[1212,24,1094,24,"v"],[1212,25,1094,25],[1212,30,1094,30],[1213,6,1095,8],[1213,10,1095,12,"tv1"],[1213,13,1095,15],[1213,16,1095,18,"c6"],[1213,18,1095,20],[1213,19,1095,21],[1213,20,1095,22],[1214,6,1096,8],[1214,10,1096,12,"tv2"],[1214,13,1096,15],[1214,16,1096,18,"Fp"],[1214,18,1096,20],[1214,19,1096,21,"pow"],[1214,22,1096,24],[1214,23,1096,25,"v"],[1214,24,1096,26],[1214,26,1096,28,"c4"],[1214,28,1096,30],[1214,29,1096,31],[1214,30,1096,32],[1214,31,1096,33],[1215,6,1097,8],[1215,10,1097,12,"tv3"],[1215,13,1097,15],[1215,16,1097,18,"Fp"],[1215,18,1097,20],[1215,19,1097,21,"sqr"],[1215,22,1097,24],[1215,23,1097,25,"tv2"],[1215,26,1097,28],[1215,27,1097,29],[1215,28,1097,30],[1215,29,1097,31],[1216,6,1098,8,"tv3"],[1216,9,1098,11],[1216,12,1098,14,"Fp"],[1216,14,1098,16],[1216,15,1098,17,"mul"],[1216,18,1098,20],[1216,19,1098,21,"tv3"],[1216,22,1098,24],[1216,24,1098,26,"v"],[1216,25,1098,27],[1216,26,1098,28],[1216,27,1098,29],[1216,28,1098,30],[1217,6,1099,8],[1217,10,1099,12,"tv5"],[1217,13,1099,15],[1217,16,1099,18,"Fp"],[1217,18,1099,20],[1217,19,1099,21,"mul"],[1217,22,1099,24],[1217,23,1099,25,"u"],[1217,24,1099,26],[1217,26,1099,28,"tv3"],[1217,29,1099,31],[1217,30,1099,32],[1217,31,1099,33],[1217,32,1099,34],[1218,6,1100,8,"tv5"],[1218,9,1100,11],[1218,12,1100,14,"Fp"],[1218,14,1100,16],[1218,15,1100,17,"pow"],[1218,18,1100,20],[1218,19,1100,21,"tv5"],[1218,22,1100,24],[1218,24,1100,26,"c3"],[1218,26,1100,28],[1218,27,1100,29],[1218,28,1100,30],[1218,29,1100,31],[1219,6,1101,8,"tv5"],[1219,9,1101,11],[1219,12,1101,14,"Fp"],[1219,14,1101,16],[1219,15,1101,17,"mul"],[1219,18,1101,20],[1219,19,1101,21,"tv5"],[1219,22,1101,24],[1219,24,1101,26,"tv2"],[1219,27,1101,29],[1219,28,1101,30],[1219,29,1101,31],[1219,30,1101,32],[1220,6,1102,8,"tv2"],[1220,9,1102,11],[1220,12,1102,14,"Fp"],[1220,14,1102,16],[1220,15,1102,17,"mul"],[1220,18,1102,20],[1220,19,1102,21,"tv5"],[1220,22,1102,24],[1220,24,1102,26,"v"],[1220,25,1102,27],[1220,26,1102,28],[1220,27,1102,29],[1220,28,1102,30],[1221,6,1103,8,"tv3"],[1221,9,1103,11],[1221,12,1103,14,"Fp"],[1221,14,1103,16],[1221,15,1103,17,"mul"],[1221,18,1103,20],[1221,19,1103,21,"tv5"],[1221,22,1103,24],[1221,24,1103,26,"u"],[1221,25,1103,27],[1221,26,1103,28],[1221,27,1103,29],[1221,28,1103,30],[1222,6,1104,8],[1222,10,1104,12,"tv4"],[1222,13,1104,15],[1222,16,1104,18,"Fp"],[1222,18,1104,20],[1222,19,1104,21,"mul"],[1222,22,1104,24],[1222,23,1104,25,"tv3"],[1222,26,1104,28],[1222,28,1104,30,"tv2"],[1222,31,1104,33],[1222,32,1104,34],[1222,33,1104,35],[1222,34,1104,36],[1223,6,1105,8,"tv5"],[1223,9,1105,11],[1223,12,1105,14,"Fp"],[1223,14,1105,16],[1223,15,1105,17,"pow"],[1223,18,1105,20],[1223,19,1105,21,"tv4"],[1223,22,1105,24],[1223,24,1105,26,"c5"],[1223,26,1105,28],[1223,27,1105,29],[1223,28,1105,30],[1223,29,1105,31],[1224,6,1106,8],[1224,10,1106,12,"isQR"],[1224,14,1106,16],[1224,17,1106,19,"Fp"],[1224,19,1106,21],[1224,20,1106,22,"eql"],[1224,23,1106,25],[1224,24,1106,26,"tv5"],[1224,27,1106,29],[1224,29,1106,31,"Fp"],[1224,31,1106,33],[1224,32,1106,34,"ONE"],[1224,35,1106,37],[1224,36,1106,38],[1224,37,1106,39],[1224,38,1106,40],[1225,6,1107,8,"tv2"],[1225,9,1107,11],[1225,12,1107,14,"Fp"],[1225,14,1107,16],[1225,15,1107,17,"mul"],[1225,18,1107,20],[1225,19,1107,21,"tv3"],[1225,22,1107,24],[1225,24,1107,26,"c7"],[1225,26,1107,28],[1225,27,1107,29],[1225,28,1107,30],[1225,29,1107,31],[1226,6,1108,8,"tv5"],[1226,9,1108,11],[1226,12,1108,14,"Fp"],[1226,14,1108,16],[1226,15,1108,17,"mul"],[1226,18,1108,20],[1226,19,1108,21,"tv4"],[1226,22,1108,24],[1226,24,1108,26,"tv1"],[1226,27,1108,29],[1226,28,1108,30],[1226,29,1108,31],[1226,30,1108,32],[1227,6,1109,8,"tv3"],[1227,9,1109,11],[1227,12,1109,14,"Fp"],[1227,14,1109,16],[1227,15,1109,17,"cmov"],[1227,19,1109,21],[1227,20,1109,22,"tv2"],[1227,23,1109,25],[1227,25,1109,27,"tv3"],[1227,28,1109,30],[1227,30,1109,32,"isQR"],[1227,34,1109,36],[1227,35,1109,37],[1227,36,1109,38],[1227,37,1109,39],[1228,6,1110,8,"tv4"],[1228,9,1110,11],[1228,12,1110,14,"Fp"],[1228,14,1110,16],[1228,15,1110,17,"cmov"],[1228,19,1110,21],[1228,20,1110,22,"tv5"],[1228,23,1110,25],[1228,25,1110,27,"tv4"],[1228,28,1110,30],[1228,30,1110,32,"isQR"],[1228,34,1110,36],[1228,35,1110,37],[1228,36,1110,38],[1228,37,1110,39],[1229,6,1111,8],[1230,6,1112,8],[1230,11,1112,13],[1230,15,1112,17,"i"],[1230,16,1112,18],[1230,19,1112,21,"c1"],[1230,21,1112,23],[1230,23,1112,25,"i"],[1230,24,1112,26],[1230,27,1112,29,"_1n"],[1230,30,1112,32],[1230,32,1112,34,"i"],[1230,33,1112,35],[1230,35,1112,37],[1230,37,1112,39],[1231,8,1113,12],[1231,12,1113,16,"tv5"],[1231,15,1113,19],[1231,18,1113,22,"i"],[1231,19,1113,23],[1231,22,1113,26,"_2n"],[1231,25,1113,29],[1231,26,1113,30],[1231,27,1113,31],[1232,8,1114,12,"tv5"],[1232,11,1114,15],[1232,14,1114,18,"_2n"],[1232,17,1114,21],[1232,21,1114,26,"tv5"],[1232,24,1114,29],[1232,27,1114,32,"_1n"],[1232,30,1114,36],[1232,31,1114,37],[1232,32,1114,38],[1233,8,1115,12],[1233,12,1115,16,"tvv5"],[1233,16,1115,20],[1233,19,1115,23,"Fp"],[1233,21,1115,25],[1233,22,1115,26,"pow"],[1233,25,1115,29],[1233,26,1115,30,"tv4"],[1233,29,1115,33],[1233,31,1115,35,"tv5"],[1233,34,1115,38],[1233,35,1115,39],[1233,36,1115,40],[1233,37,1115,41],[1234,8,1116,12],[1234,12,1116,18,"e1"],[1234,14,1116,20],[1234,17,1116,23,"Fp"],[1234,19,1116,25],[1234,20,1116,26,"eql"],[1234,23,1116,29],[1234,24,1116,30,"tvv5"],[1234,28,1116,34],[1234,30,1116,36,"Fp"],[1234,32,1116,38],[1234,33,1116,39,"ONE"],[1234,36,1116,42],[1234,37,1116,43],[1234,38,1116,44],[1234,39,1116,45],[1235,8,1117,12,"tv2"],[1235,11,1117,15],[1235,14,1117,18,"Fp"],[1235,16,1117,20],[1235,17,1117,21,"mul"],[1235,20,1117,24],[1235,21,1117,25,"tv3"],[1235,24,1117,28],[1235,26,1117,30,"tv1"],[1235,29,1117,33],[1235,30,1117,34],[1235,31,1117,35],[1235,32,1117,36],[1236,8,1118,12,"tv1"],[1236,11,1118,15],[1236,14,1118,18,"Fp"],[1236,16,1118,20],[1236,17,1118,21,"mul"],[1236,20,1118,24],[1236,21,1118,25,"tv1"],[1236,24,1118,28],[1236,26,1118,30,"tv1"],[1236,29,1118,33],[1236,30,1118,34],[1236,31,1118,35],[1236,32,1118,36],[1237,8,1119,12,"tvv5"],[1237,12,1119,16],[1237,15,1119,19,"Fp"],[1237,17,1119,21],[1237,18,1119,22,"mul"],[1237,21,1119,25],[1237,22,1119,26,"tv4"],[1237,25,1119,29],[1237,27,1119,31,"tv1"],[1237,30,1119,34],[1237,31,1119,35],[1237,32,1119,36],[1237,33,1119,37],[1238,8,1120,12,"tv3"],[1238,11,1120,15],[1238,14,1120,18,"Fp"],[1238,16,1120,20],[1238,17,1120,21,"cmov"],[1238,21,1120,25],[1238,22,1120,26,"tv2"],[1238,25,1120,29],[1238,27,1120,31,"tv3"],[1238,30,1120,34],[1238,32,1120,36,"e1"],[1238,34,1120,38],[1238,35,1120,39],[1238,36,1120,40],[1238,37,1120,41],[1239,8,1121,12,"tv4"],[1239,11,1121,15],[1239,14,1121,18,"Fp"],[1239,16,1121,20],[1239,17,1121,21,"cmov"],[1239,21,1121,25],[1239,22,1121,26,"tvv5"],[1239,26,1121,30],[1239,28,1121,32,"tv4"],[1239,31,1121,35],[1239,33,1121,37,"e1"],[1239,35,1121,39],[1239,36,1121,40],[1239,37,1121,41],[1239,38,1121,42],[1240,6,1122,8],[1241,6,1123,8],[1241,13,1123,15],[1242,8,1123,17,"isValid"],[1242,15,1123,24],[1242,17,1123,26,"isQR"],[1242,21,1123,30],[1243,8,1123,32,"value"],[1243,13,1123,37],[1243,15,1123,39,"tv3"],[1244,6,1123,43],[1244,7,1123,44],[1245,4,1124,4],[1245,5,1124,5],[1246,4,1125,4],[1246,8,1125,8,"Fp"],[1246,10,1125,10],[1246,11,1125,11,"ORDER"],[1246,16,1125,16],[1246,19,1125,19,"_4n"],[1246,22,1125,22],[1246,27,1125,27,"_3n"],[1246,30,1125,30],[1246,32,1125,32],[1247,6,1126,8],[1248,6,1127,8],[1248,10,1127,14,"c1"],[1248,13,1127,16],[1248,16,1127,19],[1248,17,1127,20,"Fp"],[1248,19,1127,22],[1248,20,1127,23,"ORDER"],[1248,25,1127,28],[1248,28,1127,31,"_3n"],[1248,31,1127,34],[1248,35,1127,38,"_4n"],[1248,38,1127,41],[1248,39,1127,42],[1248,40,1127,43],[1249,6,1128,8],[1249,10,1128,14,"c2"],[1249,13,1128,16],[1249,16,1128,19,"Fp"],[1249,18,1128,21],[1249,19,1128,22,"sqrt"],[1249,23,1128,26],[1249,24,1128,27,"Fp"],[1249,26,1128,29],[1249,27,1128,30,"neg"],[1249,30,1128,33],[1249,31,1128,34,"Z"],[1249,32,1128,35],[1249,33,1128,36],[1249,34,1128,37],[1249,35,1128,38],[1249,36,1128,39],[1250,6,1129,8,"sqrtRatio"],[1250,15,1129,17],[1250,18,1129,20,"sqrtRatio"],[1250,19,1129,21,"u"],[1250,20,1129,22],[1250,22,1129,24,"v"],[1250,23,1129,25],[1250,28,1129,30],[1251,8,1130,12],[1251,12,1130,16,"tv1"],[1251,15,1130,19],[1251,18,1130,22,"Fp"],[1251,20,1130,24],[1251,21,1130,25,"sqr"],[1251,24,1130,28],[1251,25,1130,29,"v"],[1251,26,1130,30],[1251,27,1130,31],[1251,28,1130,32],[1251,29,1130,33],[1252,8,1131,12],[1252,12,1131,18,"tv2"],[1252,15,1131,21],[1252,18,1131,24,"Fp"],[1252,20,1131,26],[1252,21,1131,27,"mul"],[1252,24,1131,30],[1252,25,1131,31,"u"],[1252,26,1131,32],[1252,28,1131,34,"v"],[1252,29,1131,35],[1252,30,1131,36],[1252,31,1131,37],[1252,32,1131,38],[1253,8,1132,12,"tv1"],[1253,11,1132,15],[1253,14,1132,18,"Fp"],[1253,16,1132,20],[1253,17,1132,21,"mul"],[1253,20,1132,24],[1253,21,1132,25,"tv1"],[1253,24,1132,28],[1253,26,1132,30,"tv2"],[1253,29,1132,33],[1253,30,1132,34],[1253,31,1132,35],[1253,32,1132,36],[1254,8,1133,12],[1254,12,1133,16,"y1"],[1254,14,1133,18],[1254,17,1133,21,"Fp"],[1254,19,1133,23],[1254,20,1133,24,"pow"],[1254,23,1133,27],[1254,24,1133,28,"tv1"],[1254,27,1133,31],[1254,29,1133,33,"c1"],[1254,32,1133,35],[1254,33,1133,36],[1254,34,1133,37],[1254,35,1133,38],[1255,8,1134,12,"y1"],[1255,10,1134,14],[1255,13,1134,17,"Fp"],[1255,15,1134,19],[1255,16,1134,20,"mul"],[1255,19,1134,23],[1255,20,1134,24,"y1"],[1255,22,1134,26],[1255,24,1134,28,"tv2"],[1255,27,1134,31],[1255,28,1134,32],[1255,29,1134,33],[1255,30,1134,34],[1256,8,1135,12],[1256,12,1135,18,"y2"],[1256,14,1135,20],[1256,17,1135,23,"Fp"],[1256,19,1135,25],[1256,20,1135,26,"mul"],[1256,23,1135,29],[1256,24,1135,30,"y1"],[1256,26,1135,32],[1256,28,1135,34,"c2"],[1256,31,1135,36],[1256,32,1135,37],[1256,33,1135,38],[1256,34,1135,39],[1257,8,1136,12],[1257,12,1136,18,"tv3"],[1257,15,1136,21],[1257,18,1136,24,"Fp"],[1257,20,1136,26],[1257,21,1136,27,"mul"],[1257,24,1136,30],[1257,25,1136,31,"Fp"],[1257,27,1136,33],[1257,28,1136,34,"sqr"],[1257,31,1136,37],[1257,32,1136,38,"y1"],[1257,34,1136,40],[1257,35,1136,41],[1257,37,1136,43,"v"],[1257,38,1136,44],[1257,39,1136,45],[1257,40,1136,46],[1257,41,1136,47],[1258,8,1137,12],[1258,12,1137,18,"isQR"],[1258,16,1137,22],[1258,19,1137,25,"Fp"],[1258,21,1137,27],[1258,22,1137,28,"eql"],[1258,25,1137,31],[1258,26,1137,32,"tv3"],[1258,29,1137,35],[1258,31,1137,37,"u"],[1258,32,1137,38],[1258,33,1137,39],[1258,34,1137,40],[1258,35,1137,41],[1259,8,1138,12],[1259,12,1138,16,"y"],[1259,13,1138,17],[1259,16,1138,20,"Fp"],[1259,18,1138,22],[1259,19,1138,23,"cmov"],[1259,23,1138,27],[1259,24,1138,28,"y2"],[1259,26,1138,30],[1259,28,1138,32,"y1"],[1259,30,1138,34],[1259,32,1138,36,"isQR"],[1259,36,1138,40],[1259,37,1138,41],[1259,38,1138,42],[1259,39,1138,43],[1260,8,1139,12],[1260,15,1139,19],[1261,10,1139,21,"isValid"],[1261,17,1139,28],[1261,19,1139,30,"isQR"],[1261,23,1139,34],[1262,10,1139,36,"value"],[1262,15,1139,41],[1262,17,1139,43,"y"],[1263,8,1139,45],[1263,9,1139,46],[1263,10,1139,47],[1263,11,1139,48],[1264,6,1140,8],[1264,7,1140,9],[1265,4,1141,4],[1266,4,1142,4],[1267,4,1143,4],[1268,4,1144,4],[1268,11,1144,11,"sqrtRatio"],[1268,20,1144,20],[1269,2,1145,0],[1270,2,1146,0],[1271,0,1147,0],[1272,0,1148,0],[1273,0,1149,0],[1274,2,1150,0],[1274,11,1150,9,"mapToCurveSimpleSWU"],[1274,30,1150,28,"mapToCurveSimpleSWU"],[1274,31,1150,29,"Fp"],[1274,33,1150,31],[1274,35,1150,33,"opts"],[1274,39,1150,37],[1274,41,1150,39],[1275,4,1151,4],[1275,5,1151,5],[1275,6,1151,6],[1275,8,1151,8,"modular_js_1"],[1275,20,1151,20],[1275,21,1151,21,"validateField"],[1275,34,1151,34],[1275,36,1151,36,"Fp"],[1275,38,1151,38],[1275,39,1151,39],[1276,4,1152,4],[1276,8,1152,8],[1276,9,1152,9,"Fp"],[1276,11,1152,11],[1276,12,1152,12,"isValid"],[1276,19,1152,19],[1276,20,1152,20,"opts"],[1276,24,1152,24],[1276,25,1152,25,"A"],[1276,26,1152,26],[1276,27,1152,27],[1276,31,1152,31],[1276,32,1152,32,"Fp"],[1276,34,1152,34],[1276,35,1152,35,"isValid"],[1276,42,1152,42],[1276,43,1152,43,"opts"],[1276,47,1152,47],[1276,48,1152,48,"B"],[1276,49,1152,49],[1276,50,1152,50],[1276,54,1152,54],[1276,55,1152,55,"Fp"],[1276,57,1152,57],[1276,58,1152,58,"isValid"],[1276,65,1152,65],[1276,66,1152,66,"opts"],[1276,70,1152,70],[1276,71,1152,71,"Z"],[1276,72,1152,72],[1276,73,1152,73],[1276,75,1153,8],[1276,81,1153,14],[1276,85,1153,18,"Error"],[1276,90,1153,23],[1276,91,1153,24],[1276,126,1153,59],[1276,127,1153,60],[1277,4,1154,4],[1277,8,1154,10,"sqrtRatio"],[1277,17,1154,19],[1277,20,1154,22,"SWUFpSqrtRatio"],[1277,34,1154,36],[1277,35,1154,37,"Fp"],[1277,37,1154,39],[1277,39,1154,41,"opts"],[1277,43,1154,45],[1277,44,1154,46,"Z"],[1277,45,1154,47],[1277,46,1154,48],[1278,4,1155,4],[1278,8,1155,8],[1278,9,1155,9,"Fp"],[1278,11,1155,11],[1278,12,1155,12,"isOdd"],[1278,17,1155,17],[1278,19,1156,8],[1278,25,1156,14],[1278,29,1156,18,"Error"],[1278,34,1156,23],[1278,35,1156,24],[1278,65,1156,54],[1278,66,1156,55],[1279,4,1157,4],[1280,4,1158,4],[1281,4,1159,4],[1281,11,1159,12,"u"],[1281,12,1159,13],[1281,16,1159,18],[1282,6,1160,8],[1283,6,1161,8],[1283,10,1161,12,"tv1"],[1283,13,1161,15],[1283,15,1161,17,"tv2"],[1283,18,1161,20],[1283,20,1161,22,"tv3"],[1283,23,1161,25],[1283,25,1161,27,"tv4"],[1283,28,1161,30],[1283,30,1161,32,"tv5"],[1283,33,1161,35],[1283,35,1161,37,"tv6"],[1283,38,1161,40],[1283,40,1161,42,"x"],[1283,41,1161,43],[1283,43,1161,45,"y"],[1283,44,1161,46],[1284,6,1162,8,"tv1"],[1284,9,1162,11],[1284,12,1162,14,"Fp"],[1284,14,1162,16],[1284,15,1162,17,"sqr"],[1284,18,1162,20],[1284,19,1162,21,"u"],[1284,20,1162,22],[1284,21,1162,23],[1284,22,1162,24],[1284,23,1162,25],[1285,6,1163,8,"tv1"],[1285,9,1163,11],[1285,12,1163,14,"Fp"],[1285,14,1163,16],[1285,15,1163,17,"mul"],[1285,18,1163,20],[1285,19,1163,21,"tv1"],[1285,22,1163,24],[1285,24,1163,26,"opts"],[1285,28,1163,30],[1285,29,1163,31,"Z"],[1285,30,1163,32],[1285,31,1163,33],[1285,32,1163,34],[1285,33,1163,35],[1286,6,1164,8,"tv2"],[1286,9,1164,11],[1286,12,1164,14,"Fp"],[1286,14,1164,16],[1286,15,1164,17,"sqr"],[1286,18,1164,20],[1286,19,1164,21,"tv1"],[1286,22,1164,24],[1286,23,1164,25],[1286,24,1164,26],[1286,25,1164,27],[1287,6,1165,8,"tv2"],[1287,9,1165,11],[1287,12,1165,14,"Fp"],[1287,14,1165,16],[1287,15,1165,17,"add"],[1287,18,1165,20],[1287,19,1165,21,"tv2"],[1287,22,1165,24],[1287,24,1165,26,"tv1"],[1287,27,1165,29],[1287,28,1165,30],[1287,29,1165,31],[1287,30,1165,32],[1288,6,1166,8,"tv3"],[1288,9,1166,11],[1288,12,1166,14,"Fp"],[1288,14,1166,16],[1288,15,1166,17,"add"],[1288,18,1166,20],[1288,19,1166,21,"tv2"],[1288,22,1166,24],[1288,24,1166,26,"Fp"],[1288,26,1166,28],[1288,27,1166,29,"ONE"],[1288,30,1166,32],[1288,31,1166,33],[1288,32,1166,34],[1288,33,1166,35],[1289,6,1167,8,"tv3"],[1289,9,1167,11],[1289,12,1167,14,"Fp"],[1289,14,1167,16],[1289,15,1167,17,"mul"],[1289,18,1167,20],[1289,19,1167,21,"tv3"],[1289,22,1167,24],[1289,24,1167,26,"opts"],[1289,28,1167,30],[1289,29,1167,31,"B"],[1289,30,1167,32],[1289,31,1167,33],[1289,32,1167,34],[1289,33,1167,35],[1290,6,1168,8,"tv4"],[1290,9,1168,11],[1290,12,1168,14,"Fp"],[1290,14,1168,16],[1290,15,1168,17,"cmov"],[1290,19,1168,21],[1290,20,1168,22,"opts"],[1290,24,1168,26],[1290,25,1168,27,"Z"],[1290,26,1168,28],[1290,28,1168,30,"Fp"],[1290,30,1168,32],[1290,31,1168,33,"neg"],[1290,34,1168,36],[1290,35,1168,37,"tv2"],[1290,38,1168,40],[1290,39,1168,41],[1290,41,1168,43],[1290,42,1168,44,"Fp"],[1290,44,1168,46],[1290,45,1168,47,"eql"],[1290,48,1168,50],[1290,49,1168,51,"tv2"],[1290,52,1168,54],[1290,54,1168,56,"Fp"],[1290,56,1168,58],[1290,57,1168,59,"ZERO"],[1290,61,1168,63],[1290,62,1168,64],[1290,63,1168,65],[1290,64,1168,66],[1290,65,1168,67],[1291,6,1169,8,"tv4"],[1291,9,1169,11],[1291,12,1169,14,"Fp"],[1291,14,1169,16],[1291,15,1169,17,"mul"],[1291,18,1169,20],[1291,19,1169,21,"tv4"],[1291,22,1169,24],[1291,24,1169,26,"opts"],[1291,28,1169,30],[1291,29,1169,31,"A"],[1291,30,1169,32],[1291,31,1169,33],[1291,32,1169,34],[1291,33,1169,35],[1292,6,1170,8,"tv2"],[1292,9,1170,11],[1292,12,1170,14,"Fp"],[1292,14,1170,16],[1292,15,1170,17,"sqr"],[1292,18,1170,20],[1292,19,1170,21,"tv3"],[1292,22,1170,24],[1292,23,1170,25],[1292,24,1170,26],[1292,25,1170,27],[1293,6,1171,8,"tv6"],[1293,9,1171,11],[1293,12,1171,14,"Fp"],[1293,14,1171,16],[1293,15,1171,17,"sqr"],[1293,18,1171,20],[1293,19,1171,21,"tv4"],[1293,22,1171,24],[1293,23,1171,25],[1293,24,1171,26],[1293,25,1171,27],[1294,6,1172,8,"tv5"],[1294,9,1172,11],[1294,12,1172,14,"Fp"],[1294,14,1172,16],[1294,15,1172,17,"mul"],[1294,18,1172,20],[1294,19,1172,21,"tv6"],[1294,22,1172,24],[1294,24,1172,26,"opts"],[1294,28,1172,30],[1294,29,1172,31,"A"],[1294,30,1172,32],[1294,31,1172,33],[1294,32,1172,34],[1294,33,1172,35],[1295,6,1173,8,"tv2"],[1295,9,1173,11],[1295,12,1173,14,"Fp"],[1295,14,1173,16],[1295,15,1173,17,"add"],[1295,18,1173,20],[1295,19,1173,21,"tv2"],[1295,22,1173,24],[1295,24,1173,26,"tv5"],[1295,27,1173,29],[1295,28,1173,30],[1295,29,1173,31],[1295,30,1173,32],[1296,6,1174,8,"tv2"],[1296,9,1174,11],[1296,12,1174,14,"Fp"],[1296,14,1174,16],[1296,15,1174,17,"mul"],[1296,18,1174,20],[1296,19,1174,21,"tv2"],[1296,22,1174,24],[1296,24,1174,26,"tv3"],[1296,27,1174,29],[1296,28,1174,30],[1296,29,1174,31],[1296,30,1174,32],[1297,6,1175,8,"tv6"],[1297,9,1175,11],[1297,12,1175,14,"Fp"],[1297,14,1175,16],[1297,15,1175,17,"mul"],[1297,18,1175,20],[1297,19,1175,21,"tv6"],[1297,22,1175,24],[1297,24,1175,26,"tv4"],[1297,27,1175,29],[1297,28,1175,30],[1297,29,1175,31],[1297,30,1175,32],[1298,6,1176,8,"tv5"],[1298,9,1176,11],[1298,12,1176,14,"Fp"],[1298,14,1176,16],[1298,15,1176,17,"mul"],[1298,18,1176,20],[1298,19,1176,21,"tv6"],[1298,22,1176,24],[1298,24,1176,26,"opts"],[1298,28,1176,30],[1298,29,1176,31,"B"],[1298,30,1176,32],[1298,31,1176,33],[1298,32,1176,34],[1298,33,1176,35],[1299,6,1177,8,"tv2"],[1299,9,1177,11],[1299,12,1177,14,"Fp"],[1299,14,1177,16],[1299,15,1177,17,"add"],[1299,18,1177,20],[1299,19,1177,21,"tv2"],[1299,22,1177,24],[1299,24,1177,26,"tv5"],[1299,27,1177,29],[1299,28,1177,30],[1299,29,1177,31],[1299,30,1177,32],[1300,6,1178,8,"x"],[1300,7,1178,9],[1300,10,1178,12,"Fp"],[1300,12,1178,14],[1300,13,1178,15,"mul"],[1300,16,1178,18],[1300,17,1178,19,"tv1"],[1300,20,1178,22],[1300,22,1178,24,"tv3"],[1300,25,1178,27],[1300,26,1178,28],[1300,27,1178,29],[1300,28,1178,30],[1301,6,1179,8],[1301,10,1179,8,"_sqrtRatio"],[1301,20,1179,8],[1301,23,1179,35,"sqrtRatio"],[1301,32,1179,44],[1301,33,1179,45,"tv2"],[1301,36,1179,48],[1301,38,1179,50,"tv6"],[1301,41,1179,53],[1301,42,1179,54],[1302,8,1179,16,"isValid"],[1302,15,1179,23],[1302,18,1179,23,"_sqrtRatio"],[1302,28,1179,23],[1302,29,1179,16,"isValid"],[1302,36,1179,23],[1303,8,1179,25,"value"],[1303,13,1179,30],[1303,16,1179,30,"_sqrtRatio"],[1303,26,1179,30],[1303,27,1179,25,"value"],[1303,32,1179,30],[1303,33,1179,55],[1303,34,1179,56],[1304,6,1180,8,"y"],[1304,7,1180,9],[1304,10,1180,12,"Fp"],[1304,12,1180,14],[1304,13,1180,15,"mul"],[1304,16,1180,18],[1304,17,1180,19,"tv1"],[1304,20,1180,22],[1304,22,1180,24,"u"],[1304,23,1180,25],[1304,24,1180,26],[1304,25,1180,27],[1304,26,1180,28],[1305,6,1181,8,"y"],[1305,7,1181,9],[1305,10,1181,12,"Fp"],[1305,12,1181,14],[1305,13,1181,15,"mul"],[1305,16,1181,18],[1305,17,1181,19,"y"],[1305,18,1181,20],[1305,20,1181,22,"value"],[1305,25,1181,27],[1305,26,1181,28],[1305,27,1181,29],[1305,28,1181,30],[1306,6,1182,8,"x"],[1306,7,1182,9],[1306,10,1182,12,"Fp"],[1306,12,1182,14],[1306,13,1182,15,"cmov"],[1306,17,1182,19],[1306,18,1182,20,"x"],[1306,19,1182,21],[1306,21,1182,23,"tv3"],[1306,24,1182,26],[1306,26,1182,28,"isValid"],[1306,33,1182,35],[1306,34,1182,36],[1306,35,1182,37],[1306,36,1182,38],[1307,6,1183,8,"y"],[1307,7,1183,9],[1307,10,1183,12,"Fp"],[1307,12,1183,14],[1307,13,1183,15,"cmov"],[1307,17,1183,19],[1307,18,1183,20,"y"],[1307,19,1183,21],[1307,21,1183,23,"value"],[1307,26,1183,28],[1307,28,1183,30,"isValid"],[1307,35,1183,37],[1307,36,1183,38],[1307,37,1183,39],[1307,38,1183,40],[1308,6,1184,8],[1308,10,1184,14,"e1"],[1308,12,1184,16],[1308,15,1184,19,"Fp"],[1308,17,1184,21],[1308,18,1184,22,"isOdd"],[1308,23,1184,27],[1308,24,1184,28,"u"],[1308,25,1184,29],[1308,26,1184,30],[1308,31,1184,35,"Fp"],[1308,33,1184,37],[1308,34,1184,38,"isOdd"],[1308,39,1184,43],[1308,40,1184,44,"y"],[1308,41,1184,45],[1308,42,1184,46],[1308,43,1184,47],[1308,44,1184,48],[1309,6,1185,8,"y"],[1309,7,1185,9],[1309,10,1185,12,"Fp"],[1309,12,1185,14],[1309,13,1185,15,"cmov"],[1309,17,1185,19],[1309,18,1185,20,"Fp"],[1309,20,1185,22],[1309,21,1185,23,"neg"],[1309,24,1185,26],[1309,25,1185,27,"y"],[1309,26,1185,28],[1309,27,1185,29],[1309,29,1185,31,"y"],[1309,30,1185,32],[1309,32,1185,34,"e1"],[1309,34,1185,36],[1309,35,1185,37],[1309,36,1185,38],[1309,37,1185,39],[1310,6,1186,8,"x"],[1310,7,1186,9],[1310,10,1186,12,"Fp"],[1310,12,1186,14],[1310,13,1186,15,"div"],[1310,16,1186,18],[1310,17,1186,19,"x"],[1310,18,1186,20],[1310,20,1186,22,"tv4"],[1310,23,1186,25],[1310,24,1186,26],[1310,25,1186,27],[1310,26,1186,28],[1311,6,1187,8],[1311,13,1187,15],[1312,8,1187,17,"x"],[1312,9,1187,18],[1313,8,1187,20,"y"],[1314,6,1187,22],[1314,7,1187,23],[1315,4,1188,4],[1315,5,1188,5],[1316,2,1189,0],[1317,0,1189,1],[1317,3]],"functionMap":{"names":["<global>","validateSigVerOpts","validatePointOpts","DERErr","DERErr#constructor","exports.DER._tlv.encode","exports.DER._tlv.decode","exports.DER._int.encode","exports.DER._int.decode","exports.DER.toSig","exports.DER.hexFromSig","weierstrassPoints","<anonymous>","weierstrassEquation","isWithinCurveOrder","normPrivateKeyToScalar","assertPrjPoint","Point","Point#constructor","Point.fromAffine","is0","Point#get__x","Point#get__y","Point.normalizeZ","points.map$argument_0","Point.fromHex","Point.fromPrivateKey","Point.msm","Point#_setWindowSize","Point#assertValidity","Point#hasEvenY","Point#equals","Point#negate","Point#double","Point#add","Point#subtract","Point#is0","Point#wNAF","Point#multiplyUnsafe","Point#multiply","Point#multiplyAndAddUnsafe","mul","Point#toAffine","Point#isTorsionFree","Point#clearCofactor","Point#toRawBytes","Point#toHex","validateOpts","weierstrass","modN","invN","weierstrassPoints$argument_0.toBytes","weierstrassPoints$argument_0.fromBytes","numToNByteStr","isBiggerThanHalfOrder","normalizeS","slcNum","Signature","Signature#constructor","Signature.fromCompact","Signature.fromDER","Signature#assertValidity","Signature#addRecoveryBit","Signature#recoverPublicKey","Signature#hasHighS","Signature#normalizeS","Signature#toDERRawBytes","Signature#toDERHex","Signature#toCompactRawBytes","Signature#toCompactHex","utils.isValidPrivateKey","utils.randomPrivateKey","utils.precompute","getPublicKey","isProbPub","getSharedSecret","int2octets","prepSig","some$argument_0","k2sig","sign","verify","SWUFpSqrtRatio","sqrtRatio","mapToCurveSimpleSWU"],"mappings":"AAA;ACsC;CDK;AEC;CF0B;AGE;ICC;KDE;CHC;gBKc;SLc;QME;SNkC;QOO;SPW;QQC;SRO;ISE;KTa;IUC;KVM;AWK;SCK;SDG;SCE;SDO;IEK;KFK;IGQ;KHE;IIG;KJwB;IKC;KLG;kDCK;KDkB;qDCG;KDqB;IMM;QCC;SDW;QEG;wBCM,yBD;SFK;QIC;SJE;QKC;SLE;QMO;oDCC,WD;8BCC,8BD;SNC;QQK;SRI;QSE;STE;QUE;SVE;QWE;SXE;QYE;SZE;QaC;SbK;QcI;SdO;QeI;SfE;QgBK;ShBqC;QiBK;SjBgD;QkBC;SlBE;QmBC;SnBE;QoBC;SpBE;QqBM;SrB+B;QsBU;StBqB;QuBO;wBCE;+FDC;SvBG;QyBI;SzBE;Q0BC;S1BO;Q2BC;S3BO;Q4BC;S5BI;Q6BC;S7BG;KNC;CXa;A+CC;C/CY;AgDQ;ICK;KDE;IEC;KFE;QGG;SHW;QIC;SJmC;0BKE,kEL;IMC;KNG;IOC;KPE;mBQE,sDR;ISI;QCC;SDK;QEE;SFI;QGG;SHG;QIC;SJG;QKC;SLE;QMC;SNkB;QOE;SPE;QQC;SRE;QSE;STE;QUC;SVE;QWE;SXE;QYC;SZE;KTC;QsBE;StBQ;0BuBM;SvBG;QwBS;SxBI;IyBQ;KzBE;I0BI;K1BW;I2BW;K3BO;QpCM;SoCS;QpCE;SoCE;I4BM;K5BI;I6BM;4CCC,gBD;QEyB;SFuB;K7BE;IgCgB;KhCK;IiCiB;KjC4D;ChDW;AkFU;oBCiB;KD8B;oBCK;SDW;ClFK;AoFK;WxES;KwE6B;CpFC"}},"type":"js/module"}]}