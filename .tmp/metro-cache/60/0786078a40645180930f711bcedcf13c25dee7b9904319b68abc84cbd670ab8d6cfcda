{"dependencies":[{"name":"@noble/hashes/sha256","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":17,"column":17,"index":829},"end":{"line":17,"column":48,"index":860}}],"key":"Yxk8ukUP92CV4uQAkrTUd3w3OB8="}},{"name":"@noble/hashes/utils","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":18,"column":16,"index":878},"end":{"line":18,"column":46,"index":908}}],"key":"Wb4MojQa5avF4wkk8TQIaT67kag="}},{"name":"./_shortw_utils.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":19,"column":27,"index":937},"end":{"line":19,"column":56,"index":966}}],"key":"fWPB/n7ehD+kHY/oYxyzJhEkgc8="}},{"name":"./abstract/hash-to-curve.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":20,"column":27,"index":995},"end":{"line":20,"column":65,"index":1033}}],"key":"XPcstTcxM3LG4ckGfGPT477stuQ="}},{"name":"./abstract/modular.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":21,"column":21,"index":1056},"end":{"line":21,"column":53,"index":1088}}],"key":"TGTZ+n5Nl+3Yig3TR3CFUMc9C8U="}},{"name":"./abstract/utils.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":22,"column":19,"index":1109},"end":{"line":22,"column":49,"index":1139}}],"key":"SUrLql0CJcHZ2BNUNJ0rAT9E/B8="}},{"name":"./abstract/weierstrass.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":23,"column":25,"index":1166},"end":{"line":23,"column":61,"index":1202}}],"key":"ev8kQr3mava1lQI8+k7CGuXUYh4="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;\n  /**\n   * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n   *\n   * Seems to be rigid (not backdoored)\n   * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n   *\n   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n   * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  var sha256_1 = require(_dependencyMap[0], \"@noble/hashes/sha256\");\n  var utils_1 = require(_dependencyMap[1], \"@noble/hashes/utils\");\n  var _shortw_utils_js_1 = require(_dependencyMap[2], \"./_shortw_utils.js\");\n  var hash_to_curve_js_1 = require(_dependencyMap[3], \"./abstract/hash-to-curve.js\");\n  var modular_js_1 = require(_dependencyMap[4], \"./abstract/modular.js\");\n  var utils_js_1 = require(_dependencyMap[5], \"./abstract/utils.js\");\n  var weierstrass_js_1 = require(_dependencyMap[6], \"./abstract/weierstrass.js\");\n  var secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\n  var secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\n  var _1n = BigInt(1);\n  var _2n = BigInt(2);\n  var divNearest = (a, b) => (a + b / _2n) / b;\n  /**\n   * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n   * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n   */\n  function sqrtMod(y) {\n    var P = secp256k1P;\n    // prettier-ignore\n    var _3n = BigInt(3),\n      _6n = BigInt(6),\n      _11n = BigInt(11),\n      _22n = BigInt(22);\n    // prettier-ignore\n    var _23n = BigInt(23),\n      _44n = BigInt(44),\n      _88n = BigInt(88);\n    var b2 = y * y * y % P; // x^3, 11\n    var b3 = b2 * b2 * y % P; // x^7\n    var b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;\n    var b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;\n    var b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;\n    var b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;\n    var b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;\n    var b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;\n    var b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;\n    var b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;\n    var b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;\n    var t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;\n    var t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;\n    var root = (0, modular_js_1.pow2)(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n    return root;\n  }\n  var Fpk1 = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, {\n    sqrt: sqrtMod\n  });\n  /**\n   * secp256k1 short weierstrass curve and ECDSA signatures over it.\n   *\n   * @example\n   * import { secp256k1 } from '@noble/curves/secp256k1';\n   *\n   * const priv = secp256k1.utils.randomPrivateKey();\n   * const pub = secp256k1.getPublicKey(priv);\n   * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n   * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n   * const isValid = secp256k1.verify(sig, msg, pub) === true;\n   */\n  exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({\n    a: BigInt(0),\n    // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1,\n    // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N,\n    // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    // Cofactor\n    lowS: true,\n    // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: k => {\n        var n = secp256k1N;\n        var a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        var b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        var a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        var b2 = a1;\n        var POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n        var c1 = divNearest(b2 * k, n);\n        var c2 = divNearest(-b1 * k, n);\n        var k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);\n        var k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);\n        var k1neg = k1 > POW_2_128;\n        var k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        };\n      }\n    }\n  }, sha256_1.sha256);\n  // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n  var _0n = BigInt(0);\n  /** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\n  var TAGGED_HASH_PREFIXES = {};\n  function taggedHash(tag) {\n    var tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n      var tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = (0, utils_js_1.concatBytes)(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      messages[_key - 1] = arguments[_key];\n    }\n    return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));\n  }\n  // ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\n  var pointToBytes = point => point.toRawBytes(true).slice(1);\n  var numTo32b = n => (0, utils_js_1.numberToBytesBE)(n, 32);\n  var modP = x => (0, modular_js_1.mod)(x, secp256k1P);\n  var modN = x => (0, modular_js_1.mod)(x, secp256k1N);\n  var Point = exports.secp256k1.ProjectivePoint;\n  var GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n  // Calculate point, scalar and bytes\n  function schnorrGetExtPubKey(priv) {\n    var d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    var p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    var scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return {\n      scalar: scalar,\n      bytes: pointToBytes(p)\n    };\n  }\n  /**\n   * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n   * @returns valid point checked for being on-curve\n   */\n  function lift_x(x) {\n    (0, utils_js_1.aInRange)('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    var xx = modP(x * x);\n    var c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    var y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n    var p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n  }\n  var num = utils_js_1.bytesToNumberBE;\n  /**\n   * Create tagged hash, convert it to bigint, reduce modulo-n.\n   */\n  function challenge() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n  }\n  /**\n   * Schnorr public key is just `x` coordinate of Point as per BIP340.\n   */\n  function schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n  }\n  /**\n   * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n   * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n   */\n  function schnorrSign(message, privateKey) {\n    var auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, utils_1.randomBytes)(32);\n    var m = (0, utils_js_1.ensureBytes)('message', message);\n    var _schnorrGetExtPubKey = schnorrGetExtPubKey(privateKey),\n      px = _schnorrGetExtPubKey.bytes,\n      d = _schnorrGetExtPubKey.scalar; // checks for isWithinCurveOrder\n    var a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    var t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    var rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    var k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    var _schnorrGetExtPubKey2 = schnorrGetExtPubKey(k_),\n      rx = _schnorrGetExtPubKey2.bytes,\n      k = _schnorrGetExtPubKey2.scalar; // Let R = k'⋅G.\n    var e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    var sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n    return sig;\n  }\n  /**\n   * Verifies Schnorr signature.\n   * Will swallow errors & return false except for initial type validation of arguments.\n   */\n  function schnorrVerify(signature, message, publicKey) {\n    var sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);\n    var m = (0, utils_js_1.ensureBytes)('message', message);\n    var pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);\n    try {\n      var P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n      var r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n      if (!(0, utils_js_1.inRange)(r, _1n, secp256k1P)) return false;\n      var s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n      if (!(0, utils_js_1.inRange)(s, _1n, secp256k1N)) return false;\n      var e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n      var R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n      if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n      return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Schnorr signatures over secp256k1.\n   * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n   * @example\n   * import { schnorr } from '@noble/curves/secp256k1';\n   * const priv = schnorr.utils.randomPrivateKey();\n   * const pub = schnorr.getPublicKey(priv);\n   * const msg = new TextEncoder().encode('hello');\n   * const sig = schnorr.sign(msg, priv);\n   * const isValid = schnorr.verify(sig, msg, pub);\n   */\n  exports.schnorr = (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n      randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n      lift_x,\n      pointToBytes,\n      numberToBytesBE: utils_js_1.numberToBytesBE,\n      bytesToNumberBE: utils_js_1.bytesToNumberBE,\n      taggedHash,\n      mod: modular_js_1.mod\n    }\n  }))();\n  var isoMap = /* @__PURE__ */(() => (0, hash_to_curve_js_1.isogenyMap)(Fpk1, [\n  // xNum\n  ['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n  // xDen\n  ['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ],\n  // yNum\n  ['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n  // yDen\n  ['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ]].map(i => i.map(j => BigInt(j)))))();\n  var mapSWU = /* @__PURE__ */(() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11'))\n  }))();\n  var htf = /* @__PURE__ */(() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, scalars => {\n    var _mapSWU = mapSWU(Fpk1.create(scalars[0])),\n      x = _mapSWU.x,\n      y = _mapSWU.y;\n    return isoMap(x, y);\n  }, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256_1.sha256\n  }))();\n  /** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\n  exports.hashToCurve = (() => htf.hashToCurve)();\n  /** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\n  exports.encodeToCurve = (() => htf.encodeToCurve)();\n});","lineCount":296,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"encodeToCurve"],[7,23,3,21],[7,26,3,24,"exports"],[7,33,3,31],[7,34,3,32,"hashToCurve"],[7,45,3,43],[7,48,3,46,"exports"],[7,55,3,53],[7,56,3,54,"schnorr"],[7,63,3,61],[7,66,3,64,"exports"],[7,73,3,71],[7,74,3,72,"secp256k1"],[7,83,3,81],[7,86,3,84],[7,91,3,89],[7,92,3,90],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[21,2,17,0],[21,6,17,6,"sha256_1"],[21,14,17,14],[21,17,17,17,"require"],[21,24,17,24],[21,25,17,24,"_dependencyMap"],[21,39,17,24],[21,66,17,47],[21,67,17,48],[22,2,18,0],[22,6,18,6,"utils_1"],[22,13,18,13],[22,16,18,16,"require"],[22,23,18,23],[22,24,18,23,"_dependencyMap"],[22,38,18,23],[22,64,18,45],[22,65,18,46],[23,2,19,0],[23,6,19,6,"_shortw_utils_js_1"],[23,24,19,24],[23,27,19,27,"require"],[23,34,19,34],[23,35,19,34,"_dependencyMap"],[23,49,19,34],[23,74,19,55],[23,75,19,56],[24,2,20,0],[24,6,20,6,"hash_to_curve_js_1"],[24,24,20,24],[24,27,20,27,"require"],[24,34,20,34],[24,35,20,34,"_dependencyMap"],[24,49,20,34],[24,83,20,64],[24,84,20,65],[25,2,21,0],[25,6,21,6,"modular_js_1"],[25,18,21,18],[25,21,21,21,"require"],[25,28,21,28],[25,29,21,28,"_dependencyMap"],[25,43,21,28],[25,71,21,52],[25,72,21,53],[26,2,22,0],[26,6,22,6,"utils_js_1"],[26,16,22,16],[26,19,22,19,"require"],[26,26,22,26],[26,27,22,26,"_dependencyMap"],[26,41,22,26],[26,67,22,48],[26,68,22,49],[27,2,23,0],[27,6,23,6,"weierstrass_js_1"],[27,22,23,22],[27,25,23,25,"require"],[27,32,23,32],[27,33,23,32,"_dependencyMap"],[27,47,23,32],[27,79,23,60],[27,80,23,61],[28,2,24,0],[28,6,24,6,"secp256k1P"],[28,16,24,16],[28,19,24,19,"BigInt"],[28,25,24,25],[28,26,24,26],[28,94,24,94],[28,95,24,95],[29,2,25,0],[29,6,25,6,"secp256k1N"],[29,16,25,16],[29,19,25,19,"BigInt"],[29,25,25,25],[29,26,25,26],[29,94,25,94],[29,95,25,95],[30,2,26,0],[30,6,26,6,"_1n"],[30,9,26,9],[30,12,26,12,"BigInt"],[30,18,26,18],[30,19,26,19],[30,20,26,20],[30,21,26,21],[31,2,27,0],[31,6,27,6,"_2n"],[31,9,27,9],[31,12,27,12,"BigInt"],[31,18,27,18],[31,19,27,19],[31,20,27,20],[31,21,27,21],[32,2,28,0],[32,6,28,6,"divNearest"],[32,16,28,16],[32,19,28,19,"divNearest"],[32,20,28,20,"a"],[32,21,28,21],[32,23,28,23,"b"],[32,24,28,24],[32,29,28,29],[32,30,28,30,"a"],[32,31,28,31],[32,34,28,34,"b"],[32,35,28,35],[32,38,28,38,"_2n"],[32,41,28,41],[32,45,28,45,"b"],[32,46,28,46],[33,2,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,2,33,0],[37,11,33,9,"sqrtMod"],[37,18,33,16,"sqrtMod"],[37,19,33,17,"y"],[37,20,33,18],[37,22,33,20],[38,4,34,4],[38,8,34,10,"P"],[38,9,34,11],[38,12,34,14,"secp256k1P"],[38,22,34,24],[39,4,35,4],[40,4,36,4],[40,8,36,10,"_3n"],[40,11,36,13],[40,14,36,16,"BigInt"],[40,20,36,22],[40,21,36,23],[40,22,36,24],[40,23,36,25],[41,6,36,27,"_6n"],[41,9,36,30],[41,12,36,33,"BigInt"],[41,18,36,39],[41,19,36,40],[41,20,36,41],[41,21,36,42],[42,6,36,44,"_11n"],[42,10,36,48],[42,13,36,51,"BigInt"],[42,19,36,57],[42,20,36,58],[42,22,36,60],[42,23,36,61],[43,6,36,63,"_22n"],[43,10,36,67],[43,13,36,70,"BigInt"],[43,19,36,76],[43,20,36,77],[43,22,36,79],[43,23,36,80],[44,4,37,4],[45,4,38,4],[45,8,38,10,"_23n"],[45,12,38,14],[45,15,38,17,"BigInt"],[45,21,38,23],[45,22,38,24],[45,24,38,26],[45,25,38,27],[46,6,38,29,"_44n"],[46,10,38,33],[46,13,38,36,"BigInt"],[46,19,38,42],[46,20,38,43],[46,22,38,45],[46,23,38,46],[47,6,38,48,"_88n"],[47,10,38,52],[47,13,38,55,"BigInt"],[47,19,38,61],[47,20,38,62],[47,22,38,64],[47,23,38,65],[48,4,39,4],[48,8,39,10,"b2"],[48,10,39,12],[48,13,39,16,"y"],[48,14,39,17],[48,17,39,20,"y"],[48,18,39,21],[48,21,39,24,"y"],[48,22,39,25],[48,25,39,29,"P"],[48,26,39,30],[48,27,39,31],[48,28,39,32],[49,4,40,4],[49,8,40,10,"b3"],[49,10,40,12],[49,13,40,16,"b2"],[49,15,40,18],[49,18,40,21,"b2"],[49,20,40,23],[49,23,40,26,"y"],[49,24,40,27],[49,27,40,31,"P"],[49,28,40,32],[49,29,40,33],[49,30,40,34],[50,4,41,4],[50,8,41,10,"b6"],[50,10,41,12],[50,13,41,16],[50,14,41,17],[50,15,41,18],[50,17,41,20,"modular_js_1"],[50,29,41,32],[50,30,41,33,"pow2"],[50,34,41,37],[50,36,41,39,"b3"],[50,38,41,41],[50,40,41,43,"_3n"],[50,43,41,46],[50,45,41,48,"P"],[50,46,41,49],[50,47,41,50],[50,50,41,53,"b3"],[50,52,41,55],[50,55,41,59,"P"],[50,56,41,60],[51,4,42,4],[51,8,42,10,"b9"],[51,10,42,12],[51,13,42,16],[51,14,42,17],[51,15,42,18],[51,17,42,20,"modular_js_1"],[51,29,42,32],[51,30,42,33,"pow2"],[51,34,42,37],[51,36,42,39,"b6"],[51,38,42,41],[51,40,42,43,"_3n"],[51,43,42,46],[51,45,42,48,"P"],[51,46,42,49],[51,47,42,50],[51,50,42,53,"b3"],[51,52,42,55],[51,55,42,59,"P"],[51,56,42,60],[52,4,43,4],[52,8,43,10,"b11"],[52,11,43,13],[52,14,43,17],[52,15,43,18],[52,16,43,19],[52,18,43,21,"modular_js_1"],[52,30,43,33],[52,31,43,34,"pow2"],[52,35,43,38],[52,37,43,40,"b9"],[52,39,43,42],[52,41,43,44,"_2n"],[52,44,43,47],[52,46,43,49,"P"],[52,47,43,50],[52,48,43,51],[52,51,43,54,"b2"],[52,53,43,56],[52,56,43,60,"P"],[52,57,43,61],[53,4,44,4],[53,8,44,10,"b22"],[53,11,44,13],[53,14,44,17],[53,15,44,18],[53,16,44,19],[53,18,44,21,"modular_js_1"],[53,30,44,33],[53,31,44,34,"pow2"],[53,35,44,38],[53,37,44,40,"b11"],[53,40,44,43],[53,42,44,45,"_11n"],[53,46,44,49],[53,48,44,51,"P"],[53,49,44,52],[53,50,44,53],[53,53,44,56,"b11"],[53,56,44,59],[53,59,44,63,"P"],[53,60,44,64],[54,4,45,4],[54,8,45,10,"b44"],[54,11,45,13],[54,14,45,17],[54,15,45,18],[54,16,45,19],[54,18,45,21,"modular_js_1"],[54,30,45,33],[54,31,45,34,"pow2"],[54,35,45,38],[54,37,45,40,"b22"],[54,40,45,43],[54,42,45,45,"_22n"],[54,46,45,49],[54,48,45,51,"P"],[54,49,45,52],[54,50,45,53],[54,53,45,56,"b22"],[54,56,45,59],[54,59,45,63,"P"],[54,60,45,64],[55,4,46,4],[55,8,46,10,"b88"],[55,11,46,13],[55,14,46,17],[55,15,46,18],[55,16,46,19],[55,18,46,21,"modular_js_1"],[55,30,46,33],[55,31,46,34,"pow2"],[55,35,46,38],[55,37,46,40,"b44"],[55,40,46,43],[55,42,46,45,"_44n"],[55,46,46,49],[55,48,46,51,"P"],[55,49,46,52],[55,50,46,53],[55,53,46,56,"b44"],[55,56,46,59],[55,59,46,63,"P"],[55,60,46,64],[56,4,47,4],[56,8,47,10,"b176"],[56,12,47,14],[56,15,47,18],[56,16,47,19],[56,17,47,20],[56,19,47,22,"modular_js_1"],[56,31,47,34],[56,32,47,35,"pow2"],[56,36,47,39],[56,38,47,41,"b88"],[56,41,47,44],[56,43,47,46,"_88n"],[56,47,47,50],[56,49,47,52,"P"],[56,50,47,53],[56,51,47,54],[56,54,47,57,"b88"],[56,57,47,60],[56,60,47,64,"P"],[56,61,47,65],[57,4,48,4],[57,8,48,10,"b220"],[57,12,48,14],[57,15,48,18],[57,16,48,19],[57,17,48,20],[57,19,48,22,"modular_js_1"],[57,31,48,34],[57,32,48,35,"pow2"],[57,36,48,39],[57,38,48,41,"b176"],[57,42,48,45],[57,44,48,47,"_44n"],[57,48,48,51],[57,50,48,53,"P"],[57,51,48,54],[57,52,48,55],[57,55,48,58,"b44"],[57,58,48,61],[57,61,48,65,"P"],[57,62,48,66],[58,4,49,4],[58,8,49,10,"b223"],[58,12,49,14],[58,15,49,18],[58,16,49,19],[58,17,49,20],[58,19,49,22,"modular_js_1"],[58,31,49,34],[58,32,49,35,"pow2"],[58,36,49,39],[58,38,49,41,"b220"],[58,42,49,45],[58,44,49,47,"_3n"],[58,47,49,50],[58,49,49,52,"P"],[58,50,49,53],[58,51,49,54],[58,54,49,57,"b3"],[58,56,49,59],[58,59,49,63,"P"],[58,60,49,64],[59,4,50,4],[59,8,50,10,"t1"],[59,10,50,12],[59,13,50,16],[59,14,50,17],[59,15,50,18],[59,17,50,20,"modular_js_1"],[59,29,50,32],[59,30,50,33,"pow2"],[59,34,50,37],[59,36,50,39,"b223"],[59,40,50,43],[59,42,50,45,"_23n"],[59,46,50,49],[59,48,50,51,"P"],[59,49,50,52],[59,50,50,53],[59,53,50,56,"b22"],[59,56,50,59],[59,59,50,63,"P"],[59,60,50,64],[60,4,51,4],[60,8,51,10,"t2"],[60,10,51,12],[60,13,51,16],[60,14,51,17],[60,15,51,18],[60,17,51,20,"modular_js_1"],[60,29,51,32],[60,30,51,33,"pow2"],[60,34,51,37],[60,36,51,39,"t1"],[60,38,51,41],[60,40,51,43,"_6n"],[60,43,51,46],[60,45,51,48,"P"],[60,46,51,49],[60,47,51,50],[60,50,51,53,"b2"],[60,52,51,55],[60,55,51,59,"P"],[60,56,51,60],[61,4,52,4],[61,8,52,10,"root"],[61,12,52,14],[61,15,52,17],[61,16,52,18],[61,17,52,19],[61,19,52,21,"modular_js_1"],[61,31,52,33],[61,32,52,34,"pow2"],[61,36,52,38],[61,38,52,40,"t2"],[61,40,52,42],[61,42,52,44,"_2n"],[61,45,52,47],[61,47,52,49,"P"],[61,48,52,50],[61,49,52,51],[62,4,53,4],[62,8,53,8],[62,9,53,9,"Fpk1"],[62,13,53,13],[62,14,53,14,"eql"],[62,17,53,17],[62,18,53,18,"Fpk1"],[62,22,53,22],[62,23,53,23,"sqr"],[62,26,53,26],[62,27,53,27,"root"],[62,31,53,31],[62,32,53,32],[62,34,53,34,"y"],[62,35,53,35],[62,36,53,36],[62,38,54,8],[62,44,54,14],[62,48,54,18,"Error"],[62,53,54,23],[62,54,54,24],[62,79,54,49],[62,80,54,50],[63,4,55,4],[63,11,55,11,"root"],[63,15,55,15],[64,2,56,0],[65,2,57,0],[65,6,57,6,"Fpk1"],[65,10,57,10],[65,13,57,13],[65,14,57,14],[65,15,57,15],[65,17,57,17,"modular_js_1"],[65,29,57,29],[65,30,57,30,"Field"],[65,35,57,35],[65,37,57,37,"secp256k1P"],[65,47,57,47],[65,49,57,49,"undefined"],[65,58,57,58],[65,60,57,60,"undefined"],[65,69,57,69],[65,71,57,71],[66,4,57,73,"sqrt"],[66,8,57,77],[66,10,57,79,"sqrtMod"],[67,2,57,87],[67,3,57,88],[67,4,57,89],[68,2,58,0],[69,0,59,0],[70,0,60,0],[71,0,61,0],[72,0,62,0],[73,0,63,0],[74,0,64,0],[75,0,65,0],[76,0,66,0],[77,0,67,0],[78,0,68,0],[79,0,69,0],[80,2,70,0,"exports"],[80,9,70,7],[80,10,70,8,"secp256k1"],[80,19,70,17],[80,22,70,20],[80,23,70,21],[80,24,70,22],[80,26,70,24,"_shortw_utils_js_1"],[80,44,70,42],[80,45,70,43,"createCurve"],[80,56,70,54],[80,58,70,56],[81,4,71,4,"a"],[81,5,71,5],[81,7,71,7,"BigInt"],[81,13,71,13],[81,14,71,14],[81,15,71,15],[81,16,71,16],[82,4,71,18],[83,4,72,4,"b"],[83,5,72,5],[83,7,72,7,"BigInt"],[83,13,72,13],[83,14,72,14],[83,15,72,15],[83,16,72,16],[84,4,73,4,"Fp"],[84,6,73,6],[84,8,73,8,"Fpk1"],[84,12,73,12],[85,4,73,14],[86,4,74,4,"n"],[86,5,74,5],[86,7,74,7,"secp256k1N"],[86,17,74,17],[87,4,74,19],[88,4,75,4],[89,4,76,4,"Gx"],[89,6,76,6],[89,8,76,8,"BigInt"],[89,14,76,14],[89,15,76,15],[89,94,76,94],[89,95,76,95],[90,4,77,4,"Gy"],[90,6,77,6],[90,8,77,8,"BigInt"],[90,14,77,14],[90,15,77,15],[90,94,77,94],[90,95,77,95],[91,4,78,4,"h"],[91,5,78,5],[91,7,78,7,"BigInt"],[91,13,78,13],[91,14,78,14],[91,15,78,15],[91,16,78,16],[92,4,78,18],[93,4,79,4,"lowS"],[93,8,79,8],[93,10,79,10],[93,14,79,14],[94,4,79,16],[95,4,80,4,"endo"],[95,8,80,8],[95,10,80,10],[96,6,81,8],[97,6,82,8,"beta"],[97,10,82,12],[97,12,82,14,"BigInt"],[97,18,82,20],[97,19,82,21],[97,87,82,89],[97,88,82,90],[98,6,83,8,"splitScalar"],[98,17,83,19],[98,19,83,22,"k"],[98,20,83,23],[98,24,83,28],[99,8,84,12],[99,12,84,18,"n"],[99,13,84,19],[99,16,84,22,"secp256k1N"],[99,26,84,32],[100,8,85,12],[100,12,85,18,"a1"],[100,14,85,20],[100,17,85,23,"BigInt"],[100,23,85,29],[100,24,85,30],[100,60,85,66],[100,61,85,67],[101,8,86,12],[101,12,86,18,"b1"],[101,14,86,20],[101,17,86,23],[101,18,86,24,"_1n"],[101,21,86,27],[101,24,86,30,"BigInt"],[101,30,86,36],[101,31,86,37],[101,67,86,73],[101,68,86,74],[102,8,87,12],[102,12,87,18,"a2"],[102,14,87,20],[102,17,87,23,"BigInt"],[102,23,87,29],[102,24,87,30],[102,61,87,67],[102,62,87,68],[103,8,88,12],[103,12,88,18,"b2"],[103,14,88,20],[103,17,88,23,"a1"],[103,19,88,25],[104,8,89,12],[104,12,89,18,"POW_2_128"],[104,21,89,27],[104,24,89,30,"BigInt"],[104,30,89,36],[104,31,89,37],[104,68,89,74],[104,69,89,75],[104,70,89,76],[104,71,89,77],[105,8,90,12],[105,12,90,18,"c1"],[105,14,90,20],[105,17,90,23,"divNearest"],[105,27,90,33],[105,28,90,34,"b2"],[105,30,90,36],[105,33,90,39,"k"],[105,34,90,40],[105,36,90,42,"n"],[105,37,90,43],[105,38,90,44],[106,8,91,12],[106,12,91,18,"c2"],[106,14,91,20],[106,17,91,23,"divNearest"],[106,27,91,33],[106,28,91,34],[106,29,91,35,"b1"],[106,31,91,37],[106,34,91,40,"k"],[106,35,91,41],[106,37,91,43,"n"],[106,38,91,44],[106,39,91,45],[107,8,92,12],[107,12,92,16,"k1"],[107,14,92,18],[107,17,92,21],[107,18,92,22],[107,19,92,23],[107,21,92,25,"modular_js_1"],[107,33,92,37],[107,34,92,38,"mod"],[107,37,92,41],[107,39,92,43,"k"],[107,40,92,44],[107,43,92,47,"c1"],[107,45,92,49],[107,48,92,52,"a1"],[107,50,92,54],[107,53,92,57,"c2"],[107,55,92,59],[107,58,92,62,"a2"],[107,60,92,64],[107,62,92,66,"n"],[107,63,92,67],[107,64,92,68],[108,8,93,12],[108,12,93,16,"k2"],[108,14,93,18],[108,17,93,21],[108,18,93,22],[108,19,93,23],[108,21,93,25,"modular_js_1"],[108,33,93,37],[108,34,93,38,"mod"],[108,37,93,41],[108,39,93,43],[108,40,93,44,"c1"],[108,42,93,46],[108,45,93,49,"b1"],[108,47,93,51],[108,50,93,54,"c2"],[108,52,93,56],[108,55,93,59,"b2"],[108,57,93,61],[108,59,93,63,"n"],[108,60,93,64],[108,61,93,65],[109,8,94,12],[109,12,94,18,"k1neg"],[109,17,94,23],[109,20,94,26,"k1"],[109,22,94,28],[109,25,94,31,"POW_2_128"],[109,34,94,40],[110,8,95,12],[110,12,95,18,"k2neg"],[110,17,95,23],[110,20,95,26,"k2"],[110,22,95,28],[110,25,95,31,"POW_2_128"],[110,34,95,40],[111,8,96,12],[111,12,96,16,"k1neg"],[111,17,96,21],[111,19,97,16,"k1"],[111,21,97,18],[111,24,97,21,"n"],[111,25,97,22],[111,28,97,25,"k1"],[111,30,97,27],[112,8,98,12],[112,12,98,16,"k2neg"],[112,17,98,21],[112,19,99,16,"k2"],[112,21,99,18],[112,24,99,21,"n"],[112,25,99,22],[112,28,99,25,"k2"],[112,30,99,27],[113,8,100,12],[113,12,100,16,"k1"],[113,14,100,18],[113,17,100,21,"POW_2_128"],[113,26,100,30],[113,30,100,34,"k2"],[113,32,100,36],[113,35,100,39,"POW_2_128"],[113,44,100,48],[113,46,100,50],[114,10,101,16],[114,16,101,22],[114,20,101,26,"Error"],[114,25,101,31],[114,26,101,32],[114,64,101,70],[114,67,101,73,"k"],[114,68,101,74],[114,69,101,75],[115,8,102,12],[116,8,103,12],[116,15,103,19],[117,10,103,21,"k1neg"],[117,15,103,26],[118,10,103,28,"k1"],[118,12,103,30],[119,10,103,32,"k2neg"],[119,15,103,37],[120,10,103,39,"k2"],[121,8,103,42],[121,9,103,43],[122,6,104,8],[123,4,105,4],[124,2,106,0],[124,3,106,1],[124,5,106,3,"sha256_1"],[124,13,106,11],[124,14,106,12,"sha256"],[124,20,106,18],[124,21,106,19],[125,2,107,0],[126,2,108,0],[127,2,109,0],[127,6,109,6,"_0n"],[127,9,109,9],[127,12,109,12,"BigInt"],[127,18,109,18],[127,19,109,19],[127,20,109,20],[127,21,109,21],[128,2,110,0],[129,2,111,0],[129,6,111,6,"TAGGED_HASH_PREFIXES"],[129,26,111,26],[129,29,111,29],[129,30,111,30],[129,31,111,31],[130,2,112,0],[130,11,112,9,"taggedHash"],[130,21,112,19,"taggedHash"],[130,22,112,20,"tag"],[130,25,112,23],[130,27,112,38],[131,4,113,4],[131,8,113,8,"tagP"],[131,12,113,12],[131,15,113,15,"TAGGED_HASH_PREFIXES"],[131,35,113,35],[131,36,113,36,"tag"],[131,39,113,39],[131,40,113,40],[132,4,114,4],[132,8,114,8,"tagP"],[132,12,114,12],[132,17,114,17,"undefined"],[132,26,114,26],[132,28,114,28],[133,6,115,8],[133,10,115,14,"tagH"],[133,14,115,18],[133,17,115,21],[133,18,115,22],[133,19,115,23],[133,21,115,25,"sha256_1"],[133,29,115,33],[133,30,115,34,"sha256"],[133,36,115,40],[133,38,115,42,"Uint8Array"],[133,48,115,52],[133,49,115,53,"from"],[133,53,115,57],[133,54,115,58,"tag"],[133,57,115,61],[133,59,115,64,"c"],[133,60,115,65],[133,64,115,70,"c"],[133,65,115,71],[133,66,115,72,"charCodeAt"],[133,76,115,82],[133,77,115,83],[133,78,115,84],[133,79,115,85],[133,80,115,86],[133,81,115,87],[134,6,116,8,"tagP"],[134,10,116,12],[134,13,116,15],[134,14,116,16],[134,15,116,17],[134,17,116,19,"utils_js_1"],[134,27,116,29],[134,28,116,30,"concatBytes"],[134,39,116,41],[134,41,116,43,"tagH"],[134,45,116,47],[134,47,116,49,"tagH"],[134,51,116,53],[134,52,116,54],[135,6,117,8,"TAGGED_HASH_PREFIXES"],[135,26,117,28],[135,27,117,29,"tag"],[135,30,117,32],[135,31,117,33],[135,34,117,36,"tagP"],[135,38,117,40],[136,4,118,4],[137,4,118,5],[137,13,118,5,"_len"],[137,17,118,5],[137,20,118,5,"arguments"],[137,29,118,5],[137,30,118,5,"length"],[137,36,118,5],[137,38,112,28,"messages"],[137,46,112,36],[137,53,112,36,"Array"],[137,58,112,36],[137,59,112,36,"_len"],[137,63,112,36],[137,70,112,36,"_len"],[137,74,112,36],[137,85,112,36,"_key"],[137,89,112,36],[137,95,112,36,"_key"],[137,99,112,36],[137,102,112,36,"_len"],[137,106,112,36],[137,108,112,36,"_key"],[137,112,112,36],[138,6,112,28,"messages"],[138,14,112,36],[138,15,112,36,"_key"],[138,19,112,36],[138,27,112,36,"arguments"],[138,36,112,36],[138,37,112,36,"_key"],[138,41,112,36],[139,4,112,36],[140,4,119,4],[140,11,119,11],[140,12,119,12],[140,13,119,13],[140,15,119,15,"sha256_1"],[140,23,119,23],[140,24,119,24,"sha256"],[140,30,119,30],[140,32,119,32],[140,33,119,33],[140,34,119,34],[140,36,119,36,"utils_js_1"],[140,46,119,46],[140,47,119,47,"concatBytes"],[140,58,119,58],[140,60,119,60,"tagP"],[140,64,119,64],[140,66,119,66],[140,69,119,69,"messages"],[140,77,119,77],[140,78,119,78],[140,79,119,79],[141,2,120,0],[142,2,121,0],[143,2,122,0],[143,6,122,6,"pointToBytes"],[143,18,122,18],[143,21,122,22,"point"],[143,26,122,27],[143,30,122,32,"point"],[143,35,122,37],[143,36,122,38,"toRawBytes"],[143,46,122,48],[143,47,122,49],[143,51,122,53],[143,52,122,54],[143,53,122,55,"slice"],[143,58,122,60],[143,59,122,61],[143,60,122,62],[143,61,122,63],[144,2,123,0],[144,6,123,6,"numTo32b"],[144,14,123,14],[144,17,123,18,"n"],[144,18,123,19],[144,22,123,24],[144,23,123,25],[144,24,123,26],[144,26,123,28,"utils_js_1"],[144,36,123,38],[144,37,123,39,"numberToBytesBE"],[144,52,123,54],[144,54,123,56,"n"],[144,55,123,57],[144,57,123,59],[144,59,123,61],[144,60,123,62],[145,2,124,0],[145,6,124,6,"modP"],[145,10,124,10],[145,13,124,14,"x"],[145,14,124,15],[145,18,124,20],[145,19,124,21],[145,20,124,22],[145,22,124,24,"modular_js_1"],[145,34,124,36],[145,35,124,37,"mod"],[145,38,124,40],[145,40,124,42,"x"],[145,41,124,43],[145,43,124,45,"secp256k1P"],[145,53,124,55],[145,54,124,56],[146,2,125,0],[146,6,125,6,"modN"],[146,10,125,10],[146,13,125,14,"x"],[146,14,125,15],[146,18,125,20],[146,19,125,21],[146,20,125,22],[146,22,125,24,"modular_js_1"],[146,34,125,36],[146,35,125,37,"mod"],[146,38,125,40],[146,40,125,42,"x"],[146,41,125,43],[146,43,125,45,"secp256k1N"],[146,53,125,55],[146,54,125,56],[147,2,126,0],[147,6,126,6,"Point"],[147,11,126,11],[147,14,126,14,"exports"],[147,21,126,21],[147,22,126,22,"secp256k1"],[147,31,126,31],[147,32,126,32,"ProjectivePoint"],[147,47,126,47],[148,2,127,0],[148,6,127,6,"GmulAdd"],[148,13,127,13],[148,16,127,16,"GmulAdd"],[148,17,127,17,"Q"],[148,18,127,18],[148,20,127,20,"a"],[148,21,127,21],[148,23,127,23,"b"],[148,24,127,24],[148,29,127,29,"Point"],[148,34,127,34],[148,35,127,35,"BASE"],[148,39,127,39],[148,40,127,40,"multiplyAndAddUnsafe"],[148,60,127,60],[148,61,127,61,"Q"],[148,62,127,62],[148,64,127,64,"a"],[148,65,127,65],[148,67,127,67,"b"],[148,68,127,68],[148,69,127,69],[149,2,128,0],[150,2,129,0],[150,11,129,9,"schnorrGetExtPubKey"],[150,30,129,28,"schnorrGetExtPubKey"],[150,31,129,29,"priv"],[150,35,129,33],[150,37,129,35],[151,4,130,4],[151,8,130,8,"d_"],[151,10,130,10],[151,13,130,13,"exports"],[151,20,130,20],[151,21,130,21,"secp256k1"],[151,30,130,30],[151,31,130,31,"utils"],[151,36,130,36],[151,37,130,37,"normPrivateKeyToScalar"],[151,59,130,59],[151,60,130,60,"priv"],[151,64,130,64],[151,65,130,65],[151,66,130,66],[151,67,130,67],[152,4,131,4],[152,8,131,8,"p"],[152,9,131,9],[152,12,131,12,"Point"],[152,17,131,17],[152,18,131,18,"fromPrivateKey"],[152,32,131,32],[152,33,131,33,"d_"],[152,35,131,35],[152,36,131,36],[152,37,131,37],[152,38,131,38],[153,4,132,4],[153,8,132,10,"scalar"],[153,14,132,16],[153,17,132,19,"p"],[153,18,132,20],[153,19,132,21,"hasEvenY"],[153,27,132,29],[153,28,132,30],[153,29,132,31],[153,32,132,34,"d_"],[153,34,132,36],[153,37,132,39,"modN"],[153,41,132,43],[153,42,132,44],[153,43,132,45,"d_"],[153,45,132,47],[153,46,132,48],[154,4,133,4],[154,11,133,11],[155,6,133,13,"scalar"],[155,12,133,19],[155,14,133,21,"scalar"],[155,20,133,27],[156,6,133,29,"bytes"],[156,11,133,34],[156,13,133,36,"pointToBytes"],[156,25,133,48],[156,26,133,49,"p"],[156,27,133,50],[157,4,133,52],[157,5,133,53],[158,2,134,0],[159,2,135,0],[160,0,136,0],[161,0,137,0],[162,0,138,0],[163,2,139,0],[163,11,139,9,"lift_x"],[163,17,139,15,"lift_x"],[163,18,139,16,"x"],[163,19,139,17],[163,21,139,19],[164,4,140,4],[164,5,140,5],[164,6,140,6],[164,8,140,8,"utils_js_1"],[164,18,140,18],[164,19,140,19,"aInRange"],[164,27,140,27],[164,29,140,29],[164,32,140,32],[164,34,140,34,"x"],[164,35,140,35],[164,37,140,37,"_1n"],[164,40,140,40],[164,42,140,42,"secp256k1P"],[164,52,140,52],[164,53,140,53],[164,54,140,54],[164,55,140,55],[165,4,141,4],[165,8,141,10,"xx"],[165,10,141,12],[165,13,141,15,"modP"],[165,17,141,19],[165,18,141,20,"x"],[165,19,141,21],[165,22,141,24,"x"],[165,23,141,25],[165,24,141,26],[166,4,142,4],[166,8,142,10,"c"],[166,9,142,11],[166,12,142,14,"modP"],[166,16,142,18],[166,17,142,19,"xx"],[166,19,142,21],[166,22,142,24,"x"],[166,23,142,25],[166,26,142,28,"BigInt"],[166,32,142,34],[166,33,142,35],[166,34,142,36],[166,35,142,37],[166,36,142,38],[166,37,142,39],[166,38,142,40],[167,4,143,4],[167,8,143,8,"y"],[167,9,143,9],[167,12,143,12,"sqrtMod"],[167,19,143,19],[167,20,143,20,"c"],[167,21,143,21],[167,22,143,22],[167,23,143,23],[167,24,143,24],[168,4,144,4],[168,8,144,8,"y"],[168,9,144,9],[168,12,144,12,"_2n"],[168,15,144,15],[168,20,144,20,"_0n"],[168,23,144,23],[168,25,145,8,"y"],[168,26,145,9],[168,29,145,12,"modP"],[168,33,145,16],[168,34,145,17],[168,35,145,18,"y"],[168,36,145,19],[168,37,145,20],[168,38,145,21],[168,39,145,22],[169,4,146,4],[169,8,146,10,"p"],[169,9,146,11],[169,12,146,14],[169,16,146,18,"Point"],[169,21,146,23],[169,22,146,24,"x"],[169,23,146,25],[169,25,146,27,"y"],[169,26,146,28],[169,28,146,30,"_1n"],[169,31,146,33],[169,32,146,34],[169,33,146,35],[169,34,146,36],[170,4,147,4,"p"],[170,5,147,5],[170,6,147,6,"assertValidity"],[170,20,147,20],[170,21,147,21],[170,22,147,22],[171,4,148,4],[171,11,148,11,"p"],[171,12,148,12],[172,2,149,0],[173,2,150,0],[173,6,150,6,"num"],[173,9,150,9],[173,12,150,12,"utils_js_1"],[173,22,150,22],[173,23,150,23,"bytesToNumberBE"],[173,38,150,38],[174,2,151,0],[175,0,152,0],[176,0,153,0],[177,2,154,0],[177,11,154,9,"challenge"],[177,20,154,18,"challenge"],[177,21,154,18],[177,23,154,28],[178,4,154,28],[178,13,154,28,"_len2"],[178,18,154,28],[178,21,154,28,"arguments"],[178,30,154,28],[178,31,154,28,"length"],[178,37,154,28],[178,39,154,22,"args"],[178,43,154,26],[178,50,154,26,"Array"],[178,55,154,26],[178,56,154,26,"_len2"],[178,61,154,26],[178,64,154,26,"_key2"],[178,69,154,26],[178,75,154,26,"_key2"],[178,80,154,26],[178,83,154,26,"_len2"],[178,88,154,26],[178,90,154,26,"_key2"],[178,95,154,26],[179,6,154,22,"args"],[179,10,154,26],[179,11,154,26,"_key2"],[179,16,154,26],[179,20,154,26,"arguments"],[179,29,154,26],[179,30,154,26,"_key2"],[179,35,154,26],[180,4,154,26],[181,4,155,4],[181,11,155,11,"modN"],[181,15,155,15],[181,16,155,16,"num"],[181,19,155,19],[181,20,155,20,"taggedHash"],[181,30,155,30],[181,31,155,31],[181,50,155,50],[181,52,155,52],[181,55,155,55,"args"],[181,59,155,59],[181,60,155,60],[181,61,155,61],[181,62,155,62],[182,2,156,0],[183,2,157,0],[184,0,158,0],[185,0,159,0],[186,2,160,0],[186,11,160,9,"schnorrGetPublicKey"],[186,30,160,28,"schnorrGetPublicKey"],[186,31,160,29,"privateKey"],[186,41,160,39],[186,43,160,41],[187,4,161,4],[187,11,161,11,"schnorrGetExtPubKey"],[187,30,161,30],[187,31,161,31,"privateKey"],[187,41,161,41],[187,42,161,42],[187,43,161,43,"bytes"],[187,48,161,48],[187,49,161,49],[187,50,161,50],[188,2,162,0],[189,2,163,0],[190,0,164,0],[191,0,165,0],[192,0,166,0],[193,2,167,0],[193,11,167,9,"schnorrSign"],[193,22,167,20,"schnorrSign"],[193,23,167,21,"message"],[193,30,167,28],[193,32,167,30,"privateKey"],[193,42,167,40],[193,44,167,82],[194,4,167,82],[194,8,167,42,"auxRand"],[194,15,167,49],[194,18,167,49,"arguments"],[194,27,167,49],[194,28,167,49,"length"],[194,34,167,49],[194,42,167,49,"arguments"],[194,51,167,49],[194,59,167,49,"undefined"],[194,68,167,49],[194,71,167,49,"arguments"],[194,80,167,49],[194,86,167,52],[194,87,167,53],[194,88,167,54],[194,90,167,56,"utils_1"],[194,97,167,63],[194,98,167,64,"randomBytes"],[194,109,167,75],[194,111,167,77],[194,113,167,79],[194,114,167,80],[195,4,168,4],[195,8,168,10,"m"],[195,9,168,11],[195,12,168,14],[195,13,168,15],[195,14,168,16],[195,16,168,18,"utils_js_1"],[195,26,168,28],[195,27,168,29,"ensureBytes"],[195,38,168,40],[195,40,168,42],[195,49,168,51],[195,51,168,53,"message"],[195,58,168,60],[195,59,168,61],[196,4,169,4],[196,8,169,4,"_schnorrGetExtPubKey"],[196,28,169,4],[196,31,169,37,"schnorrGetExtPubKey"],[196,50,169,56],[196,51,169,57,"privateKey"],[196,61,169,67],[196,62,169,68],[197,6,169,19,"px"],[197,8,169,21],[197,11,169,21,"_schnorrGetExtPubKey"],[197,31,169,21],[197,32,169,12,"bytes"],[197,37,169,17],[198,6,169,31,"d"],[198,7,169,32],[198,10,169,32,"_schnorrGetExtPubKey"],[198,30,169,32],[198,31,169,23,"scalar"],[198,37,169,29],[198,38,169,69],[198,39,169,70],[199,4,170,4],[199,8,170,10,"a"],[199,9,170,11],[199,12,170,14],[199,13,170,15],[199,14,170,16],[199,16,170,18,"utils_js_1"],[199,26,170,28],[199,27,170,29,"ensureBytes"],[199,38,170,40],[199,40,170,42],[199,49,170,51],[199,51,170,53,"auxRand"],[199,58,170,60],[199,60,170,62],[199,62,170,64],[199,63,170,65],[199,64,170,66],[199,65,170,67],[200,4,171,4],[200,8,171,10,"t"],[200,9,171,11],[200,12,171,14,"numTo32b"],[200,20,171,22],[200,21,171,23,"d"],[200,22,171,24],[200,25,171,27,"num"],[200,28,171,30],[200,29,171,31,"taggedHash"],[200,39,171,41],[200,40,171,42],[200,53,171,55],[200,55,171,57,"a"],[200,56,171,58],[200,57,171,59],[200,58,171,60],[200,59,171,61],[200,60,171,62],[200,61,171,63],[201,4,172,4],[201,8,172,10,"rand"],[201,12,172,14],[201,15,172,17,"taggedHash"],[201,25,172,27],[201,26,172,28],[201,41,172,43],[201,43,172,45,"t"],[201,44,172,46],[201,46,172,48,"px"],[201,48,172,50],[201,50,172,52,"m"],[201,51,172,53],[201,52,172,54],[201,53,172,55],[201,54,172,56],[202,4,173,4],[202,8,173,10,"k_"],[202,10,173,12],[202,13,173,15,"modN"],[202,17,173,19],[202,18,173,20,"num"],[202,21,173,23],[202,22,173,24,"rand"],[202,26,173,28],[202,27,173,29],[202,28,173,30],[202,29,173,31],[202,30,173,32],[203,4,174,4],[203,8,174,8,"k_"],[203,10,174,10],[203,15,174,15,"_0n"],[203,18,174,18],[203,20,175,8],[203,26,175,14],[203,30,175,18,"Error"],[203,35,175,23],[203,36,175,24],[203,60,175,48],[203,61,175,49],[203,62,175,50],[203,63,175,51],[204,4,176,4],[204,8,176,4,"_schnorrGetExtPubKey2"],[204,29,176,4],[204,32,176,37,"schnorrGetExtPubKey"],[204,51,176,56],[204,52,176,57,"k_"],[204,54,176,59],[204,55,176,60],[205,6,176,19,"rx"],[205,8,176,21],[205,11,176,21,"_schnorrGetExtPubKey2"],[205,32,176,21],[205,33,176,12,"bytes"],[205,38,176,17],[206,6,176,31,"k"],[206,7,176,32],[206,10,176,32,"_schnorrGetExtPubKey2"],[206,31,176,32],[206,32,176,23,"scalar"],[206,38,176,29],[206,39,176,61],[206,40,176,62],[207,4,177,4],[207,8,177,10,"e"],[207,9,177,11],[207,12,177,14,"challenge"],[207,21,177,23],[207,22,177,24,"rx"],[207,24,177,26],[207,26,177,28,"px"],[207,28,177,30],[207,30,177,32,"m"],[207,31,177,33],[207,32,177,34],[207,33,177,35],[207,34,177,36],[208,4,178,4],[208,8,178,10,"sig"],[208,11,178,13],[208,14,178,16],[208,18,178,20,"Uint8Array"],[208,28,178,30],[208,29,178,31],[208,31,178,33],[208,32,178,34],[208,33,178,35],[208,34,178,36],[209,4,179,4,"sig"],[209,7,179,7],[209,8,179,8,"set"],[209,11,179,11],[209,12,179,12,"rx"],[209,14,179,14],[209,16,179,16],[209,17,179,17],[209,18,179,18],[210,4,180,4,"sig"],[210,7,180,7],[210,8,180,8,"set"],[210,11,180,11],[210,12,180,12,"numTo32b"],[210,20,180,20],[210,21,180,21,"modN"],[210,25,180,25],[210,26,180,26,"k"],[210,27,180,27],[210,30,180,30,"e"],[210,31,180,31],[210,34,180,34,"d"],[210,35,180,35],[210,36,180,36],[210,37,180,37],[210,39,180,39],[210,41,180,41],[210,42,180,42],[211,4,181,4],[212,4,182,4],[212,8,182,8],[212,9,182,9,"schnorrVerify"],[212,22,182,22],[212,23,182,23,"sig"],[212,26,182,26],[212,28,182,28,"m"],[212,29,182,29],[212,31,182,31,"px"],[212,33,182,33],[212,34,182,34],[212,36,183,8],[212,42,183,14],[212,46,183,18,"Error"],[212,51,183,23],[212,52,183,24],[212,86,183,58],[212,87,183,59],[213,4,184,4],[213,11,184,11,"sig"],[213,14,184,14],[214,2,185,0],[215,2,186,0],[216,0,187,0],[217,0,188,0],[218,0,189,0],[219,2,190,0],[219,11,190,9,"schnorrVerify"],[219,24,190,22,"schnorrVerify"],[219,25,190,23,"signature"],[219,34,190,32],[219,36,190,34,"message"],[219,43,190,41],[219,45,190,43,"publicKey"],[219,54,190,52],[219,56,190,54],[220,4,191,4],[220,8,191,10,"sig"],[220,11,191,13],[220,14,191,16],[220,15,191,17],[220,16,191,18],[220,18,191,20,"utils_js_1"],[220,28,191,30],[220,29,191,31,"ensureBytes"],[220,40,191,42],[220,42,191,44],[220,53,191,55],[220,55,191,57,"signature"],[220,64,191,66],[220,66,191,68],[220,68,191,70],[220,69,191,71],[221,4,192,4],[221,8,192,10,"m"],[221,9,192,11],[221,12,192,14],[221,13,192,15],[221,14,192,16],[221,16,192,18,"utils_js_1"],[221,26,192,28],[221,27,192,29,"ensureBytes"],[221,38,192,40],[221,40,192,42],[221,49,192,51],[221,51,192,53,"message"],[221,58,192,60],[221,59,192,61],[222,4,193,4],[222,8,193,10,"pub"],[222,11,193,13],[222,14,193,16],[222,15,193,17],[222,16,193,18],[222,18,193,20,"utils_js_1"],[222,28,193,30],[222,29,193,31,"ensureBytes"],[222,40,193,42],[222,42,193,44],[222,53,193,55],[222,55,193,57,"publicKey"],[222,64,193,66],[222,66,193,68],[222,68,193,70],[222,69,193,71],[223,4,194,4],[223,8,194,8],[224,6,195,8],[224,10,195,14,"P"],[224,11,195,15],[224,14,195,18,"lift_x"],[224,20,195,24],[224,21,195,25,"num"],[224,24,195,28],[224,25,195,29,"pub"],[224,28,195,32],[224,29,195,33],[224,30,195,34],[224,31,195,35],[224,32,195,36],[225,6,196,8],[225,10,196,14,"r"],[225,11,196,15],[225,14,196,18,"num"],[225,17,196,21],[225,18,196,22,"sig"],[225,21,196,25],[225,22,196,26,"subarray"],[225,30,196,34],[225,31,196,35],[225,32,196,36],[225,34,196,38],[225,36,196,40],[225,37,196,41],[225,38,196,42],[225,39,196,43],[225,40,196,44],[226,6,197,8],[226,10,197,12],[226,11,197,13],[226,12,197,14],[226,13,197,15],[226,15,197,17,"utils_js_1"],[226,25,197,27],[226,26,197,28,"inRange"],[226,33,197,35],[226,35,197,37,"r"],[226,36,197,38],[226,38,197,40,"_1n"],[226,41,197,43],[226,43,197,45,"secp256k1P"],[226,53,197,55],[226,54,197,56],[226,56,198,12],[226,63,198,19],[226,68,198,24],[227,6,199,8],[227,10,199,14,"s"],[227,11,199,15],[227,14,199,18,"num"],[227,17,199,21],[227,18,199,22,"sig"],[227,21,199,25],[227,22,199,26,"subarray"],[227,30,199,34],[227,31,199,35],[227,33,199,37],[227,35,199,39],[227,37,199,41],[227,38,199,42],[227,39,199,43],[227,40,199,44],[227,41,199,45],[228,6,200,8],[228,10,200,12],[228,11,200,13],[228,12,200,14],[228,13,200,15],[228,15,200,17,"utils_js_1"],[228,25,200,27],[228,26,200,28,"inRange"],[228,33,200,35],[228,35,200,37,"s"],[228,36,200,38],[228,38,200,40,"_1n"],[228,41,200,43],[228,43,200,45,"secp256k1N"],[228,53,200,55],[228,54,200,56],[228,56,201,12],[228,63,201,19],[228,68,201,24],[229,6,202,8],[229,10,202,14,"e"],[229,11,202,15],[229,14,202,18,"challenge"],[229,23,202,27],[229,24,202,28,"numTo32b"],[229,32,202,36],[229,33,202,37,"r"],[229,34,202,38],[229,35,202,39],[229,37,202,41,"pointToBytes"],[229,49,202,53],[229,50,202,54,"P"],[229,51,202,55],[229,52,202,56],[229,54,202,58,"m"],[229,55,202,59],[229,56,202,60],[229,57,202,61],[229,58,202,62],[230,6,203,8],[230,10,203,14,"R"],[230,11,203,15],[230,14,203,18,"GmulAdd"],[230,21,203,25],[230,22,203,26,"P"],[230,23,203,27],[230,25,203,29,"s"],[230,26,203,30],[230,28,203,32,"modN"],[230,32,203,36],[230,33,203,37],[230,34,203,38,"e"],[230,35,203,39],[230,36,203,40],[230,37,203,41],[230,38,203,42],[230,39,203,43],[231,6,204,8],[231,10,204,12],[231,11,204,13,"R"],[231,12,204,14],[231,16,204,18],[231,17,204,19,"R"],[231,18,204,20],[231,19,204,21,"hasEvenY"],[231,27,204,29],[231,28,204,30],[231,29,204,31],[231,33,204,35,"R"],[231,34,204,36],[231,35,204,37,"toAffine"],[231,43,204,45],[231,44,204,46],[231,45,204,47],[231,46,204,48,"x"],[231,47,204,49],[231,52,204,54,"r"],[231,53,204,55],[231,55,205,12],[231,62,205,19],[231,67,205,24],[231,68,205,25],[231,69,205,26],[232,6,206,8],[232,13,206,15],[232,17,206,19],[232,18,206,20],[232,19,206,21],[233,4,207,4],[233,5,207,5],[233,6,208,4],[233,13,208,11,"error"],[233,18,208,16],[233,20,208,18],[234,6,209,8],[234,13,209,15],[234,18,209,20],[235,4,210,4],[236,2,211,0],[237,2,212,0],[238,0,213,0],[239,0,214,0],[240,0,215,0],[241,0,216,0],[242,0,217,0],[243,0,218,0],[244,0,219,0],[245,0,220,0],[246,0,221,0],[247,0,222,0],[248,2,223,0,"exports"],[248,9,223,7],[248,10,223,8,"schnorr"],[248,17,223,15],[248,20,223,18],[248,21,223,19],[248,28,223,26],[249,4,224,4,"getPublicKey"],[249,16,224,16],[249,18,224,18,"schnorrGetPublicKey"],[249,37,224,37],[250,4,225,4,"sign"],[250,8,225,8],[250,10,225,10,"schnorrSign"],[250,21,225,21],[251,4,226,4,"verify"],[251,10,226,10],[251,12,226,12,"schnorrVerify"],[251,25,226,25],[252,4,227,4,"utils"],[252,9,227,9],[252,11,227,11],[253,6,228,8,"randomPrivateKey"],[253,22,228,24],[253,24,228,26,"exports"],[253,31,228,33],[253,32,228,34,"secp256k1"],[253,41,228,43],[253,42,228,44,"utils"],[253,47,228,49],[253,48,228,50,"randomPrivateKey"],[253,64,228,66],[254,6,229,8,"lift_x"],[254,12,229,14],[255,6,230,8,"pointToBytes"],[255,18,230,20],[256,6,231,8,"numberToBytesBE"],[256,21,231,23],[256,23,231,25,"utils_js_1"],[256,33,231,35],[256,34,231,36,"numberToBytesBE"],[256,49,231,51],[257,6,232,8,"bytesToNumberBE"],[257,21,232,23],[257,23,232,25,"utils_js_1"],[257,33,232,35],[257,34,232,36,"bytesToNumberBE"],[257,49,232,51],[258,6,233,8,"taggedHash"],[258,16,233,18],[259,6,234,8,"mod"],[259,9,234,11],[259,11,234,13,"modular_js_1"],[259,23,234,25],[259,24,234,26,"mod"],[260,4,235,4],[261,2,236,0],[261,3,236,1],[261,4,236,2],[261,6,236,4],[261,7,236,5],[262,2,237,0],[262,6,237,6,"isoMap"],[262,12,237,12],[262,15,237,15],[262,30,237,31],[262,31,237,32],[262,37,237,38],[262,38,237,39],[262,39,237,40],[262,41,237,42,"hash_to_curve_js_1"],[262,59,237,60],[262,60,237,61,"isogenyMap"],[262,70,237,71],[262,72,237,73,"Fpk1"],[262,76,237,77],[262,78,237,79],[263,2,238,4],[264,2,239,4],[264,3,240,8],[264,71,240,76],[264,73,241,8],[264,140,241,75],[264,142,242,8],[264,210,242,76],[264,212,243,8],[264,280,243,76],[264,281,244,5],[265,2,245,4],[266,2,246,4],[266,3,247,8],[266,71,247,76],[266,73,248,8],[266,141,248,76],[266,143,249,8],[266,211,249,76],[266,212,249,78],[267,2,249,78],[267,3,250,5],[268,2,251,4],[269,2,252,4],[269,3,253,8],[269,71,253,76],[269,73,254,8],[269,141,254,76],[269,143,255,8],[269,211,255,76],[269,213,256,8],[269,281,256,76],[269,282,257,5],[270,2,258,4],[271,2,259,4],[271,3,260,8],[271,71,260,76],[271,73,261,8],[271,141,261,76],[271,143,262,8],[271,211,262,76],[271,213,263,8],[271,281,263,76],[271,282,263,78],[272,2,263,78],[272,3,264,5],[272,4,265,1],[272,5,265,2,"map"],[272,8,265,5],[272,9,265,7,"i"],[272,10,265,8],[272,14,265,13,"i"],[272,15,265,14],[272,16,265,15,"map"],[272,19,265,18],[272,20,265,20,"j"],[272,21,265,21],[272,25,265,26,"BigInt"],[272,31,265,32],[272,32,265,33,"j"],[272,33,265,34],[272,34,265,35],[272,35,265,36],[272,36,265,37],[272,37,265,38],[272,39,265,40],[272,40,265,41],[273,2,266,0],[273,6,266,6,"mapSWU"],[273,12,266,12],[273,15,266,15],[273,30,266,31],[273,31,266,32],[273,37,266,38],[273,38,266,39],[273,39,266,40],[273,41,266,42,"weierstrass_js_1"],[273,57,266,58],[273,58,266,59,"mapToCurveSimpleSWU"],[273,77,266,78],[273,79,266,80,"Fpk1"],[273,83,266,84],[273,85,266,86],[274,4,267,4,"A"],[274,5,267,5],[274,7,267,7,"BigInt"],[274,13,267,13],[274,14,267,14],[274,82,267,82],[274,83,267,83],[275,4,268,4,"B"],[275,5,268,5],[275,7,268,7,"BigInt"],[275,13,268,13],[275,14,268,14],[275,20,268,20],[275,21,268,21],[276,4,269,4,"Z"],[276,5,269,5],[276,7,269,7,"Fpk1"],[276,11,269,11],[276,12,269,12,"create"],[276,18,269,18],[276,19,269,19,"BigInt"],[276,25,269,25],[276,26,269,26],[276,31,269,31],[276,32,269,32],[277,2,270,0],[277,3,270,1],[277,4,270,2],[277,6,270,4],[277,7,270,5],[278,2,271,0],[278,6,271,6,"htf"],[278,9,271,9],[278,12,271,12],[278,27,271,28],[278,28,271,29],[278,34,271,35],[278,35,271,36],[278,36,271,37],[278,38,271,39,"hash_to_curve_js_1"],[278,56,271,57],[278,57,271,58,"createHasher"],[278,69,271,70],[278,71,271,72,"exports"],[278,78,271,79],[278,79,271,80,"secp256k1"],[278,88,271,89],[278,89,271,90,"ProjectivePoint"],[278,104,271,105],[278,106,271,108,"scalars"],[278,113,271,115],[278,117,271,120],[279,4,272,4],[279,8,272,4,"_mapSWU"],[279,15,272,4],[279,18,272,21,"mapSWU"],[279,24,272,27],[279,25,272,28,"Fpk1"],[279,29,272,32],[279,30,272,33,"create"],[279,36,272,39],[279,37,272,40,"scalars"],[279,44,272,47],[279,45,272,48],[279,46,272,49],[279,47,272,50],[279,48,272,51],[279,49,272,52],[280,6,272,12,"x"],[280,7,272,13],[280,10,272,13,"_mapSWU"],[280,17,272,13],[280,18,272,12,"x"],[280,19,272,13],[281,6,272,15,"y"],[281,7,272,16],[281,10,272,16,"_mapSWU"],[281,17,272,16],[281,18,272,15,"y"],[281,19,272,16],[282,4,273,4],[282,11,273,11,"isoMap"],[282,17,273,17],[282,18,273,18,"x"],[282,19,273,19],[282,21,273,21,"y"],[282,22,273,22],[282,23,273,23],[283,2,274,0],[283,3,274,1],[283,5,274,3],[284,4,275,4,"DST"],[284,7,275,7],[284,9,275,9],[284,41,275,41],[285,4,276,4,"encodeDST"],[285,13,276,13],[285,15,276,15],[285,47,276,47],[286,4,277,4,"p"],[286,5,277,5],[286,7,277,7,"Fpk1"],[286,11,277,11],[286,12,277,12,"ORDER"],[286,17,277,17],[287,4,278,4,"m"],[287,5,278,5],[287,7,278,7],[287,8,278,8],[288,4,279,4,"k"],[288,5,279,5],[288,7,279,7],[288,10,279,10],[289,4,280,4,"expand"],[289,10,280,10],[289,12,280,12],[289,17,280,17],[290,4,281,4,"hash"],[290,8,281,8],[290,10,281,10,"sha256_1"],[290,18,281,18],[290,19,281,19,"sha256"],[291,2,282,0],[291,3,282,1],[291,4,282,2],[291,6,282,4],[291,7,282,5],[292,2,283,0],[293,2,284,0,"exports"],[293,9,284,7],[293,10,284,8,"hashToCurve"],[293,21,284,19],[293,24,284,22],[293,25,284,23],[293,31,284,29,"htf"],[293,34,284,32],[293,35,284,33,"hashToCurve"],[293,46,284,44],[293,48,284,46],[293,49,284,47],[294,2,285,0],[295,2,286,0,"exports"],[295,9,286,7],[295,10,286,8,"encodeToCurve"],[295,23,286,21],[295,26,286,24],[295,27,286,25],[295,33,286,31,"htf"],[295,36,286,34],[295,37,286,35,"encodeToCurve"],[295,50,286,48],[295,52,286,50],[295,53,286,51],[296,0,286,52],[296,3]],"functionMap":{"names":["<global>","divNearest","sqrtMod","endo.splitScalar","taggedHash","Uint8Array.from$argument_1","pointToBytes","numTo32b","modP","modN","GmulAdd","schnorrGetExtPubKey","lift_x","challenge","schnorrGetPublicKey","schnorrSign","schnorrVerify","<anonymous>","map$argument_0","i.map$argument_0"],"mappings":"AAA;mBC2B,2BD;AEK;CFuB;qBG2B;SHqB;AIQ;+DCG,sBD;CJK;qBME,0CN;iBOC,6CP;aQC,2CR;aSC,2CT;gBUE,qDV;AWE;CXK;AYK;CZU;AaK;CbE;AcI;CdE;AeK;CfkB;AgBK;ChBqB;mBiBY;EjBa;gCiBC;MC4B,aC,gBD,CD,EjB;gCiBC;EjBI;6BiBC;EjBW;uBiBE,qBjB;yBiBE,uBjB"}},"type":"js/module"}]}