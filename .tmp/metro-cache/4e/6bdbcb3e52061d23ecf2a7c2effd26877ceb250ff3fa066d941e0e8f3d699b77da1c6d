{"dependencies":[{"name":"../Address.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":16,"index":224},"end":{"line":6,"column":40,"index":248}}],"key":"qkCIfdsjELw3OdLdv3n+zfVbuAI="}},{"name":"../Errors.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":15,"index":265},"end":{"line":7,"column":38,"index":288}}],"key":"Uf2tTySut3JRNN1LBcTHvUgNatM="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.normalizeSignature = normalizeSignature;\n  exports.isArgOfType = isArgOfType;\n  exports.getAmbiguousTypes = getAmbiguousTypes;\n  var Address = require(_dependencyMap[0], \"../Address.js\");\n  var Errors = require(_dependencyMap[1], \"../Errors.js\");\n  function normalizeSignature(signature) {\n    var active = true;\n    var current = '';\n    var level = 0;\n    var result = '';\n    var valid = false;\n    for (var i = 0; i < signature.length; i++) {\n      var char = signature[i];\n      if (['(', ')', ','].includes(char)) active = true;\n      if (char === '(') level++;\n      if (char === ')') level--;\n      if (!active) continue;\n      if (level === 0) {\n        if (char === ' ' && ['event', 'function', 'error', ''].includes(result)) result = '';else {\n          result += char;\n          if (char === ')') {\n            valid = true;\n            break;\n          }\n        }\n        continue;\n      }\n      if (char === ' ') {\n        if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n          current = '';\n          active = false;\n        }\n        continue;\n      }\n      result += char;\n      current += char;\n    }\n    if (!valid) throw new Errors.BaseError('Unable to normalize signature.');\n    return result;\n  }\n  function isArgOfType(arg, abiParameter) {\n    var argType = typeof arg;\n    var abiParameterType = abiParameter.type;\n    switch (abiParameterType) {\n      case 'address':\n        return Address.validate(arg, {\n          strict: false\n        });\n      case 'bool':\n        return argType === 'boolean';\n      case 'function':\n        return argType === 'string';\n      case 'string':\n        return argType === 'string';\n      default:\n        {\n          if (abiParameterType === 'tuple' && 'components' in abiParameter) return Object.values(abiParameter.components).every((component, index) => {\n            return isArgOfType(Object.values(arg)[index], component);\n          });\n          if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType)) return argType === 'number' || argType === 'bigint';\n          if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType)) return argType === 'string' || arg instanceof Uint8Array;\n          if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n            return Array.isArray(arg) && arg.every(x => isArgOfType(x, {\n              ...abiParameter,\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, '')\n            }));\n          }\n          return false;\n        }\n    }\n  }\n  function getAmbiguousTypes(sourceParameters, targetParameters, args) {\n    var _loop = function (parameterIndex) {\n        var sourceParameter = sourceParameters[parameterIndex];\n        var targetParameter = targetParameters[parameterIndex];\n        if (sourceParameter.type === 'tuple' && targetParameter.type === 'tuple' && 'components' in sourceParameter && 'components' in targetParameter) return {\n          v: getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex])\n        };\n        var types = [sourceParameter.type, targetParameter.type];\n        var ambiguous = (() => {\n          if (types.includes('address') && types.includes('bytes20')) return true;\n          if (types.includes('address') && types.includes('string')) return Address.validate(args[parameterIndex], {\n            strict: false\n          });\n          if (types.includes('address') && types.includes('bytes')) return Address.validate(args[parameterIndex], {\n            strict: false\n          });\n          return false;\n        })();\n        if (ambiguous) return {\n          v: types\n        };\n      },\n      _ret;\n    for (var parameterIndex in sourceParameters) {\n      _ret = _loop(parameterIndex);\n      if (_ret) return _ret.v;\n    }\n    return;\n  }\n});","lineCount":107,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"normalizeSignature"],[7,28,3,26],[7,31,3,29,"normalizeSignature"],[7,49,3,47],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"isArgOfType"],[8,21,4,19],[8,24,4,22,"isArgOfType"],[8,35,4,33],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"getAmbiguousTypes"],[9,27,5,25],[9,30,5,28,"getAmbiguousTypes"],[9,47,5,45],[10,2,6,0],[10,6,6,6,"Address"],[10,13,6,13],[10,16,6,16,"require"],[10,23,6,23],[10,24,6,23,"_dependencyMap"],[10,38,6,23],[10,58,6,39],[10,59,6,40],[11,2,7,0],[11,6,7,6,"Errors"],[11,12,7,12],[11,15,7,15,"require"],[11,22,7,22],[11,23,7,22,"_dependencyMap"],[11,37,7,22],[11,56,7,37],[11,57,7,38],[12,2,8,0],[12,11,8,9,"normalizeSignature"],[12,29,8,27,"normalizeSignature"],[12,30,8,28,"signature"],[12,39,8,37],[12,41,8,39],[13,4,9,4],[13,8,9,8,"active"],[13,14,9,14],[13,17,9,17],[13,21,9,21],[14,4,10,4],[14,8,10,8,"current"],[14,15,10,15],[14,18,10,18],[14,20,10,20],[15,4,11,4],[15,8,11,8,"level"],[15,13,11,13],[15,16,11,16],[15,17,11,17],[16,4,12,4],[16,8,12,8,"result"],[16,14,12,14],[16,17,12,17],[16,19,12,19],[17,4,13,4],[17,8,13,8,"valid"],[17,13,13,13],[17,16,13,16],[17,21,13,21],[18,4,14,4],[18,9,14,9],[18,13,14,13,"i"],[18,14,14,14],[18,17,14,17],[18,18,14,18],[18,20,14,20,"i"],[18,21,14,21],[18,24,14,24,"signature"],[18,33,14,33],[18,34,14,34,"length"],[18,40,14,40],[18,42,14,42,"i"],[18,43,14,43],[18,45,14,45],[18,47,14,47],[19,6,15,8],[19,10,15,14,"char"],[19,14,15,18],[19,17,15,21,"signature"],[19,26,15,30],[19,27,15,31,"i"],[19,28,15,32],[19,29,15,33],[20,6,16,8],[20,10,16,12],[20,11,16,13],[20,14,16,16],[20,16,16,18],[20,19,16,21],[20,21,16,23],[20,24,16,26],[20,25,16,27],[20,26,16,28,"includes"],[20,34,16,36],[20,35,16,37,"char"],[20,39,16,41],[20,40,16,42],[20,42,17,12,"active"],[20,48,17,18],[20,51,17,21],[20,55,17,25],[21,6,18,8],[21,10,18,12,"char"],[21,14,18,16],[21,19,18,21],[21,22,18,24],[21,24,19,12,"level"],[21,29,19,17],[21,31,19,19],[22,6,20,8],[22,10,20,12,"char"],[22,14,20,16],[22,19,20,21],[22,22,20,24],[22,24,21,12,"level"],[22,29,21,17],[22,31,21,19],[23,6,22,8],[23,10,22,12],[23,11,22,13,"active"],[23,17,22,19],[23,19,23,12],[24,6,24,8],[24,10,24,12,"level"],[24,15,24,17],[24,20,24,22],[24,21,24,23],[24,23,24,25],[25,8,25,12],[25,12,25,16,"char"],[25,16,25,20],[25,21,25,25],[25,24,25,28],[25,28,25,32],[25,29,25,33],[25,36,25,40],[25,38,25,42],[25,48,25,52],[25,50,25,54],[25,57,25,61],[25,59,25,63],[25,61,25,65],[25,62,25,66],[25,63,25,67,"includes"],[25,71,25,75],[25,72,25,76,"result"],[25,78,25,82],[25,79,25,83],[25,81,26,16,"result"],[25,87,26,22],[25,90,26,25],[25,92,26,27],[25,93,26,28],[25,98,27,17],[26,10,28,16,"result"],[26,16,28,22],[26,20,28,26,"char"],[26,24,28,30],[27,10,29,16],[27,14,29,20,"char"],[27,18,29,24],[27,23,29,29],[27,26,29,32],[27,28,29,34],[28,12,30,20,"valid"],[28,17,30,25],[28,20,30,28],[28,24,30,32],[29,12,31,20],[30,10,32,16],[31,8,33,12],[32,8,34,12],[33,6,35,8],[34,6,36,8],[34,10,36,12,"char"],[34,14,36,16],[34,19,36,21],[34,22,36,24],[34,24,36,26],[35,8,37,12],[35,12,37,16,"signature"],[35,21,37,25],[35,22,37,26,"i"],[35,23,37,27],[35,26,37,30],[35,27,37,31],[35,28,37,32],[35,33,37,37],[35,36,37,40],[35,40,37,44,"current"],[35,47,37,51],[35,52,37,56],[35,55,37,59],[35,59,37,63,"current"],[35,66,37,70],[35,71,37,75],[35,75,37,79],[35,77,37,81],[36,10,38,16,"current"],[36,17,38,23],[36,20,38,26],[36,22,38,28],[37,10,39,16,"active"],[37,16,39,22],[37,19,39,25],[37,24,39,30],[38,8,40,12],[39,8,41,12],[40,6,42,8],[41,6,43,8,"result"],[41,12,43,14],[41,16,43,18,"char"],[41,20,43,22],[42,6,44,8,"current"],[42,13,44,15],[42,17,44,19,"char"],[42,21,44,23],[43,4,45,4],[44,4,46,4],[44,8,46,8],[44,9,46,9,"valid"],[44,14,46,14],[44,16,47,8],[44,22,47,14],[44,26,47,18,"Errors"],[44,32,47,24],[44,33,47,25,"BaseError"],[44,42,47,34],[44,43,47,35],[44,75,47,67],[44,76,47,68],[45,4,48,4],[45,11,48,11,"result"],[45,17,48,17],[46,2,49,0],[47,2,50,0],[47,11,50,9,"isArgOfType"],[47,22,50,20,"isArgOfType"],[47,23,50,21,"arg"],[47,26,50,24],[47,28,50,26,"abiParameter"],[47,40,50,38],[47,42,50,40],[48,4,51,4],[48,8,51,10,"argType"],[48,15,51,17],[48,18,51,20],[48,25,51,27,"arg"],[48,28,51,30],[49,4,52,4],[49,8,52,10,"abiParameterType"],[49,24,52,26],[49,27,52,29,"abiParameter"],[49,39,52,41],[49,40,52,42,"type"],[49,44,52,46],[50,4,53,4],[50,12,53,12,"abiParameterType"],[50,28,53,28],[51,6,54,8],[51,11,54,13],[51,20,54,22],[52,8,55,12],[52,15,55,19,"Address"],[52,22,55,26],[52,23,55,27,"validate"],[52,31,55,35],[52,32,55,36,"arg"],[52,35,55,39],[52,37,55,41],[53,10,55,43,"strict"],[53,16,55,49],[53,18,55,51],[54,8,55,57],[54,9,55,58],[54,10,55,59],[55,6,56,8],[55,11,56,13],[55,17,56,19],[56,8,57,12],[56,15,57,19,"argType"],[56,22,57,26],[56,27,57,31],[56,36,57,40],[57,6,58,8],[57,11,58,13],[57,21,58,23],[58,8,59,12],[58,15,59,19,"argType"],[58,22,59,26],[58,27,59,31],[58,35,59,39],[59,6,60,8],[59,11,60,13],[59,19,60,21],[60,8,61,12],[60,15,61,19,"argType"],[60,22,61,26],[60,27,61,31],[60,35,61,39],[61,6,62,8],[62,8,62,17],[63,10,63,12],[63,14,63,16,"abiParameterType"],[63,30,63,32],[63,35,63,37],[63,42,63,44],[63,46,63,48],[63,58,63,60],[63,62,63,64,"abiParameter"],[63,74,63,76],[63,76,64,16],[63,83,64,23,"Object"],[63,89,64,29],[63,90,64,30,"values"],[63,96,64,36],[63,97,64,37,"abiParameter"],[63,109,64,49],[63,110,64,50,"components"],[63,120,64,60],[63,121,64,61],[63,122,64,62,"every"],[63,127,64,67],[63,128,64,68],[63,129,64,69,"component"],[63,138,64,78],[63,140,64,80,"index"],[63,145,64,85],[63,150,64,90],[64,12,65,20],[64,19,65,27,"isArgOfType"],[64,30,65,38],[64,31,65,39,"Object"],[64,37,65,45],[64,38,65,46,"values"],[64,44,65,52],[64,45,65,53,"arg"],[64,48,65,56],[64,49,65,57],[64,50,65,58,"index"],[64,55,65,63],[64,56,65,64],[64,58,65,66,"component"],[64,67,65,75],[64,68,65,76],[65,10,66,16],[65,11,66,17],[65,12,66,18],[66,10,67,12],[66,14,67,16],[66,140,67,142],[66,141,67,143,"test"],[66,145,67,147],[66,146,67,148,"abiParameterType"],[66,162,67,164],[66,163,67,165],[66,165,68,16],[66,172,68,23,"argType"],[66,179,68,30],[66,184,68,35],[66,192,68,43],[66,196,68,47,"argType"],[66,203,68,54],[66,208,68,59],[66,216,68,67],[67,10,69,12],[67,14,69,16],[67,52,69,54],[67,53,69,55,"test"],[67,57,69,59],[67,58,69,60,"abiParameterType"],[67,74,69,76],[67,75,69,77],[67,77,70,16],[67,84,70,23,"argType"],[67,91,70,30],[67,96,70,35],[67,104,70,43],[67,108,70,47,"arg"],[67,111,70,50],[67,123,70,62,"Uint8Array"],[67,133,70,72],[68,10,71,12],[68,14,71,16],[68,49,71,51],[68,50,71,52,"test"],[68,54,71,56],[68,55,71,57,"abiParameterType"],[68,71,71,73],[68,72,71,74],[68,74,71,76],[69,12,72,16],[69,19,72,24,"Array"],[69,24,72,29],[69,25,72,30,"isArray"],[69,32,72,37],[69,33,72,38,"arg"],[69,36,72,41],[69,37,72,42],[69,41,73,20,"arg"],[69,44,73,23],[69,45,73,24,"every"],[69,50,73,29],[69,51,73,31,"x"],[69,52,73,32],[69,56,73,37,"isArgOfType"],[69,67,73,48],[69,68,73,49,"x"],[69,69,73,50],[69,71,73,52],[70,14,74,24],[70,17,74,27,"abiParameter"],[70,29,74,39],[71,14,75,24,"type"],[71,18,75,28],[71,20,75,30,"abiParameterType"],[71,36,75,46],[71,37,75,47,"replace"],[71,44,75,54],[71,45,75,55],[71,63,75,73],[71,65,75,75],[71,67,75,77],[72,12,76,20],[72,13,76,21],[72,14,76,22],[72,15,76,23],[73,10,77,12],[74,10,78,12],[74,17,78,19],[74,22,78,24],[75,8,79,8],[76,4,80,4],[77,2,81,0],[78,2,82,0],[78,11,82,9,"getAmbiguousTypes"],[78,28,82,26,"getAmbiguousTypes"],[78,29,82,27,"sourceParameters"],[78,45,82,43],[78,47,82,45,"targetParameters"],[78,63,82,61],[78,65,82,63,"args"],[78,69,82,67],[78,71,82,69],[79,4,82,69],[79,8,82,69,"_loop"],[79,13,82,69],[79,25,82,69,"_loop"],[79,26,82,69,"parameterIndex"],[79,40,82,69],[79,42,83,51],[80,8,84,8],[80,12,84,14,"sourceParameter"],[80,27,84,29],[80,30,84,32,"sourceParameters"],[80,46,84,48],[80,47,84,49,"parameterIndex"],[80,61,84,63],[80,62,84,64],[81,8,85,8],[81,12,85,14,"targetParameter"],[81,27,85,29],[81,30,85,32,"targetParameters"],[81,46,85,48],[81,47,85,49,"parameterIndex"],[81,61,85,63],[81,62,85,64],[82,8,86,8],[82,12,86,12,"sourceParameter"],[82,27,86,27],[82,28,86,28,"type"],[82,32,86,32],[82,37,86,37],[82,44,86,44],[82,48,87,12,"targetParameter"],[82,63,87,27],[82,64,87,28,"type"],[82,68,87,32],[82,73,87,37],[82,80,87,44],[82,84,88,12],[82,96,88,24],[82,100,88,28,"sourceParameter"],[82,115,88,43],[82,119,89,12],[82,131,89,24],[82,135,89,28,"targetParameter"],[82,150,89,43],[83,10,89,43,"v"],[83,11,89,43],[83,13,90,19,"getAmbiguousTypes"],[83,30,90,36],[83,31,90,37,"sourceParameter"],[83,46,90,52],[83,47,90,53,"components"],[83,57,90,63],[83,59,90,65,"targetParameter"],[83,74,90,80],[83,75,90,81,"components"],[83,85,90,91],[83,87,90,93,"args"],[83,91,90,97],[83,92,90,98,"parameterIndex"],[83,106,90,112],[83,107,90,113],[84,8,90,114],[85,8,91,8],[85,12,91,14,"types"],[85,17,91,19],[85,20,91,22],[85,21,91,23,"sourceParameter"],[85,36,91,38],[85,37,91,39,"type"],[85,41,91,43],[85,43,91,45,"targetParameter"],[85,58,91,60],[85,59,91,61,"type"],[85,63,91,65],[85,64,91,66],[86,8,92,8],[86,12,92,14,"ambiguous"],[86,21,92,23],[86,24,92,26],[86,25,92,27],[86,31,92,33],[87,10,93,12],[87,14,93,16,"types"],[87,19,93,21],[87,20,93,22,"includes"],[87,28,93,30],[87,29,93,31],[87,38,93,40],[87,39,93,41],[87,43,93,45,"types"],[87,48,93,50],[87,49,93,51,"includes"],[87,57,93,59],[87,58,93,60],[87,67,93,69],[87,68,93,70],[87,70,94,16],[87,77,94,23],[87,81,94,27],[88,10,95,12],[88,14,95,16,"types"],[88,19,95,21],[88,20,95,22,"includes"],[88,28,95,30],[88,29,95,31],[88,38,95,40],[88,39,95,41],[88,43,95,45,"types"],[88,48,95,50],[88,49,95,51,"includes"],[88,57,95,59],[88,58,95,60],[88,66,95,68],[88,67,95,69],[88,69,96,16],[88,76,96,23,"Address"],[88,83,96,30],[88,84,96,31,"validate"],[88,92,96,39],[88,93,96,40,"args"],[88,97,96,44],[88,98,96,45,"parameterIndex"],[88,112,96,59],[88,113,96,60],[88,115,96,62],[89,12,97,20,"strict"],[89,18,97,26],[89,20,97,28],[90,10,98,16],[90,11,98,17],[90,12,98,18],[91,10,99,12],[91,14,99,16,"types"],[91,19,99,21],[91,20,99,22,"includes"],[91,28,99,30],[91,29,99,31],[91,38,99,40],[91,39,99,41],[91,43,99,45,"types"],[91,48,99,50],[91,49,99,51,"includes"],[91,57,99,59],[91,58,99,60],[91,65,99,67],[91,66,99,68],[91,68,100,16],[91,75,100,23,"Address"],[91,82,100,30],[91,83,100,31,"validate"],[91,91,100,39],[91,92,100,40,"args"],[91,96,100,44],[91,97,100,45,"parameterIndex"],[91,111,100,59],[91,112,100,60],[91,114,100,62],[92,12,101,20,"strict"],[92,18,101,26],[92,20,101,28],[93,10,102,16],[93,11,102,17],[93,12,102,18],[94,10,103,12],[94,17,103,19],[94,22,103,24],[95,8,104,8],[95,9,104,9],[95,11,104,11],[95,12,104,12],[96,8,105,8],[96,12,105,12,"ambiguous"],[96,21,105,21],[97,10,105,21,"v"],[97,11,105,21],[97,13,106,19,"types"],[98,8,106,24],[99,6,107,4],[99,7,107,5],[100,6,107,5,"_ret"],[100,10,107,5],[101,4,83,4],[101,9,83,9],[101,13,83,15,"parameterIndex"],[101,27,83,29],[101,31,83,33,"sourceParameters"],[101,47,83,49],[102,6,83,49,"_ret"],[102,10,83,49],[102,13,83,49,"_loop"],[102,18,83,49],[102,19,83,49,"parameterIndex"],[102,33,83,49],[103,6,83,49],[103,10,83,49,"_ret"],[103,14,83,49],[103,23,83,49,"_ret"],[103,27,83,49],[103,28,83,49,"v"],[103,29,83,49],[104,4,83,49],[105,4,108,4],[106,2,109,0],[107,0,109,1],[107,3]],"functionMap":{"names":["<global>","normalizeSignature","isArgOfType","Object.values.every$argument_0","arg.every$argument_0","getAmbiguousTypes","<anonymous>"],"mappings":"AAA;ACO;CDyC;AEC;oECc;iBDE;8BEO;sBFG;CFK;AKC;2BCU;SDY;CLK"}},"type":"js/module"}]}