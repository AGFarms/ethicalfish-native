{"dependencies":[{"name":"../../errors/encoding.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":22,"index":282},"end":{"line":8,"column":57,"index":317}}],"key":"lnPLkJE3anL8Xkoa6kTdC5TXMoA="}},{"name":"../data/trim.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":18,"index":337},"end":{"line":9,"column":44,"index":363}}],"key":"IygFXf04/ijp2QeGdf2IfJdE61E="}},{"name":"./fromHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":10,"column":21,"index":386},"end":{"line":10,"column":44,"index":409}}],"key":"OUSIOu/yi5l1IER8v8UxpGlc2RA="}},{"name":"./toHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":11,"column":19,"index":430},"end":{"line":11,"column":40,"index":451}}],"key":"qhYjJi0tgbDYewo83gZCYTraLjU="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fromBytes = fromBytes;\n  exports.bytesToBigInt = bytesToBigInt;\n  exports.bytesToBool = bytesToBool;\n  exports.bytesToNumber = bytesToNumber;\n  exports.bytesToString = bytesToString;\n  var encoding_js_1 = require(_dependencyMap[0], \"../../errors/encoding.js\");\n  var trim_js_1 = require(_dependencyMap[1], \"../data/trim.js\");\n  var fromHex_js_1 = require(_dependencyMap[2], \"./fromHex.js\");\n  var toHex_js_1 = require(_dependencyMap[3], \"./toHex.js\");\n  function fromBytes(bytes, toOrOpts) {\n    var opts = typeof toOrOpts === 'string' ? {\n      to: toOrOpts\n    } : toOrOpts;\n    var to = opts.to;\n    if (to === 'number') return bytesToNumber(bytes, opts);\n    if (to === 'bigint') return bytesToBigInt(bytes, opts);\n    if (to === 'boolean') return bytesToBool(bytes, opts);\n    if (to === 'string') return bytesToString(bytes, opts);\n    return (0, toHex_js_1.bytesToHex)(bytes, opts);\n  }\n  function bytesToBigInt(bytes) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof opts.size !== 'undefined') (0, fromHex_js_1.assertSize)(bytes, {\n      size: opts.size\n    });\n    var hex = (0, toHex_js_1.bytesToHex)(bytes, opts);\n    return (0, fromHex_js_1.hexToBigInt)(hex, opts);\n  }\n  function bytesToBool(bytes_) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bytes = bytes_;\n    if (typeof opts.size !== 'undefined') {\n      (0, fromHex_js_1.assertSize)(bytes, {\n        size: opts.size\n      });\n      bytes = (0, trim_js_1.trim)(bytes);\n    }\n    if (bytes.length > 1 || bytes[0] > 1) throw new encoding_js_1.InvalidBytesBooleanError(bytes);\n    return Boolean(bytes[0]);\n  }\n  function bytesToNumber(bytes) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof opts.size !== 'undefined') (0, fromHex_js_1.assertSize)(bytes, {\n      size: opts.size\n    });\n    var hex = (0, toHex_js_1.bytesToHex)(bytes, opts);\n    return (0, fromHex_js_1.hexToNumber)(hex, opts);\n  }\n  function bytesToString(bytes_) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bytes = bytes_;\n    if (typeof opts.size !== 'undefined') {\n      (0, fromHex_js_1.assertSize)(bytes, {\n        size: opts.size\n      });\n      bytes = (0, trim_js_1.trim)(bytes, {\n        dir: 'right'\n      });\n    }\n    return new TextDecoder().decode(bytes);\n  }\n});","lineCount":68,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"fromBytes"],[7,19,3,17],[7,22,3,20,"fromBytes"],[7,31,3,29],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"bytesToBigInt"],[8,23,4,21],[8,26,4,24,"bytesToBigInt"],[8,39,4,37],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"bytesToBool"],[9,21,5,19],[9,24,5,22,"bytesToBool"],[9,35,5,33],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"bytesToNumber"],[10,23,6,21],[10,26,6,24,"bytesToNumber"],[10,39,6,37],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"bytesToString"],[11,23,7,21],[11,26,7,24,"bytesToString"],[11,39,7,37],[12,2,8,0],[12,6,8,6,"encoding_js_1"],[12,19,8,19],[12,22,8,22,"require"],[12,29,8,29],[12,30,8,29,"_dependencyMap"],[12,44,8,29],[12,75,8,56],[12,76,8,57],[13,2,9,0],[13,6,9,6,"trim_js_1"],[13,15,9,15],[13,18,9,18,"require"],[13,25,9,25],[13,26,9,25,"_dependencyMap"],[13,40,9,25],[13,62,9,43],[13,63,9,44],[14,2,10,0],[14,6,10,6,"fromHex_js_1"],[14,18,10,18],[14,21,10,21,"require"],[14,28,10,28],[14,29,10,28,"_dependencyMap"],[14,43,10,28],[14,62,10,43],[14,63,10,44],[15,2,11,0],[15,6,11,6,"toHex_js_1"],[15,16,11,16],[15,19,11,19,"require"],[15,26,11,26],[15,27,11,26,"_dependencyMap"],[15,41,11,26],[15,58,11,39],[15,59,11,40],[16,2,12,0],[16,11,12,9,"fromBytes"],[16,20,12,18,"fromBytes"],[16,21,12,19,"bytes"],[16,26,12,24],[16,28,12,26,"toOrOpts"],[16,36,12,34],[16,38,12,36],[17,4,13,4],[17,8,13,10,"opts"],[17,12,13,14],[17,15,13,17],[17,22,13,24,"toOrOpts"],[17,30,13,32],[17,35,13,37],[17,43,13,45],[17,46,13,48],[18,6,13,50,"to"],[18,8,13,52],[18,10,13,54,"toOrOpts"],[19,4,13,63],[19,5,13,64],[19,8,13,67,"toOrOpts"],[19,16,13,75],[20,4,14,4],[20,8,14,10,"to"],[20,10,14,12],[20,13,14,15,"opts"],[20,17,14,19],[20,18,14,20,"to"],[20,20,14,22],[21,4,15,4],[21,8,15,8,"to"],[21,10,15,10],[21,15,15,15],[21,23,15,23],[21,25,16,8],[21,32,16,15,"bytesToNumber"],[21,45,16,28],[21,46,16,29,"bytes"],[21,51,16,34],[21,53,16,36,"opts"],[21,57,16,40],[21,58,16,41],[22,4,17,4],[22,8,17,8,"to"],[22,10,17,10],[22,15,17,15],[22,23,17,23],[22,25,18,8],[22,32,18,15,"bytesToBigInt"],[22,45,18,28],[22,46,18,29,"bytes"],[22,51,18,34],[22,53,18,36,"opts"],[22,57,18,40],[22,58,18,41],[23,4,19,4],[23,8,19,8,"to"],[23,10,19,10],[23,15,19,15],[23,24,19,24],[23,26,20,8],[23,33,20,15,"bytesToBool"],[23,44,20,26],[23,45,20,27,"bytes"],[23,50,20,32],[23,52,20,34,"opts"],[23,56,20,38],[23,57,20,39],[24,4,21,4],[24,8,21,8,"to"],[24,10,21,10],[24,15,21,15],[24,23,21,23],[24,25,22,8],[24,32,22,15,"bytesToString"],[24,45,22,28],[24,46,22,29,"bytes"],[24,51,22,34],[24,53,22,36,"opts"],[24,57,22,40],[24,58,22,41],[25,4,23,4],[25,11,23,11],[25,12,23,12],[25,13,23,13],[25,15,23,15,"toHex_js_1"],[25,25,23,25],[25,26,23,26,"bytesToHex"],[25,36,23,36],[25,38,23,38,"bytes"],[25,43,23,43],[25,45,23,45,"opts"],[25,49,23,49],[25,50,23,50],[26,2,24,0],[27,2,25,0],[27,11,25,9,"bytesToBigInt"],[27,24,25,22,"bytesToBigInt"],[27,25,25,23,"bytes"],[27,30,25,28],[27,32,25,41],[28,4,25,41],[28,8,25,30,"opts"],[28,12,25,34],[28,15,25,34,"arguments"],[28,24,25,34],[28,25,25,34,"length"],[28,31,25,34],[28,39,25,34,"arguments"],[28,48,25,34],[28,56,25,34,"undefined"],[28,65,25,34],[28,68,25,34,"arguments"],[28,77,25,34],[28,83,25,37],[28,84,25,38],[28,85,25,39],[29,4,26,4],[29,8,26,8],[29,15,26,15,"opts"],[29,19,26,19],[29,20,26,20,"size"],[29,24,26,24],[29,29,26,29],[29,40,26,40],[29,42,27,8],[29,43,27,9],[29,44,27,10],[29,46,27,12,"fromHex_js_1"],[29,58,27,24],[29,59,27,25,"assertSize"],[29,69,27,35],[29,71,27,37,"bytes"],[29,76,27,42],[29,78,27,44],[30,6,27,46,"size"],[30,10,27,50],[30,12,27,52,"opts"],[30,16,27,56],[30,17,27,57,"size"],[31,4,27,62],[31,5,27,63],[31,6,27,64],[32,4,28,4],[32,8,28,10,"hex"],[32,11,28,13],[32,14,28,16],[32,15,28,17],[32,16,28,18],[32,18,28,20,"toHex_js_1"],[32,28,28,30],[32,29,28,31,"bytesToHex"],[32,39,28,41],[32,41,28,43,"bytes"],[32,46,28,48],[32,48,28,50,"opts"],[32,52,28,54],[32,53,28,55],[33,4,29,4],[33,11,29,11],[33,12,29,12],[33,13,29,13],[33,15,29,15,"fromHex_js_1"],[33,27,29,27],[33,28,29,28,"hexToBigInt"],[33,39,29,39],[33,41,29,41,"hex"],[33,44,29,44],[33,46,29,46,"opts"],[33,50,29,50],[33,51,29,51],[34,2,30,0],[35,2,31,0],[35,11,31,9,"bytesToBool"],[35,22,31,20,"bytesToBool"],[35,23,31,21,"bytes_"],[35,29,31,27],[35,31,31,40],[36,4,31,40],[36,8,31,29,"opts"],[36,12,31,33],[36,15,31,33,"arguments"],[36,24,31,33],[36,25,31,33,"length"],[36,31,31,33],[36,39,31,33,"arguments"],[36,48,31,33],[36,56,31,33,"undefined"],[36,65,31,33],[36,68,31,33,"arguments"],[36,77,31,33],[36,83,31,36],[36,84,31,37],[36,85,31,38],[37,4,32,4],[37,8,32,8,"bytes"],[37,13,32,13],[37,16,32,16,"bytes_"],[37,22,32,22],[38,4,33,4],[38,8,33,8],[38,15,33,15,"opts"],[38,19,33,19],[38,20,33,20,"size"],[38,24,33,24],[38,29,33,29],[38,40,33,40],[38,42,33,42],[39,6,34,8],[39,7,34,9],[39,8,34,10],[39,10,34,12,"fromHex_js_1"],[39,22,34,24],[39,23,34,25,"assertSize"],[39,33,34,35],[39,35,34,37,"bytes"],[39,40,34,42],[39,42,34,44],[40,8,34,46,"size"],[40,12,34,50],[40,14,34,52,"opts"],[40,18,34,56],[40,19,34,57,"size"],[41,6,34,62],[41,7,34,63],[41,8,34,64],[42,6,35,8,"bytes"],[42,11,35,13],[42,14,35,16],[42,15,35,17],[42,16,35,18],[42,18,35,20,"trim_js_1"],[42,27,35,29],[42,28,35,30,"trim"],[42,32,35,34],[42,34,35,36,"bytes"],[42,39,35,41],[42,40,35,42],[43,4,36,4],[44,4,37,4],[44,8,37,8,"bytes"],[44,13,37,13],[44,14,37,14,"length"],[44,20,37,20],[44,23,37,23],[44,24,37,24],[44,28,37,28,"bytes"],[44,33,37,33],[44,34,37,34],[44,35,37,35],[44,36,37,36],[44,39,37,39],[44,40,37,40],[44,42,38,8],[44,48,38,14],[44,52,38,18,"encoding_js_1"],[44,65,38,31],[44,66,38,32,"InvalidBytesBooleanError"],[44,90,38,56],[44,91,38,57,"bytes"],[44,96,38,62],[44,97,38,63],[45,4,39,4],[45,11,39,11,"Boolean"],[45,18,39,18],[45,19,39,19,"bytes"],[45,24,39,24],[45,25,39,25],[45,26,39,26],[45,27,39,27],[45,28,39,28],[46,2,40,0],[47,2,41,0],[47,11,41,9,"bytesToNumber"],[47,24,41,22,"bytesToNumber"],[47,25,41,23,"bytes"],[47,30,41,28],[47,32,41,41],[48,4,41,41],[48,8,41,30,"opts"],[48,12,41,34],[48,15,41,34,"arguments"],[48,24,41,34],[48,25,41,34,"length"],[48,31,41,34],[48,39,41,34,"arguments"],[48,48,41,34],[48,56,41,34,"undefined"],[48,65,41,34],[48,68,41,34,"arguments"],[48,77,41,34],[48,83,41,37],[48,84,41,38],[48,85,41,39],[49,4,42,4],[49,8,42,8],[49,15,42,15,"opts"],[49,19,42,19],[49,20,42,20,"size"],[49,24,42,24],[49,29,42,29],[49,40,42,40],[49,42,43,8],[49,43,43,9],[49,44,43,10],[49,46,43,12,"fromHex_js_1"],[49,58,43,24],[49,59,43,25,"assertSize"],[49,69,43,35],[49,71,43,37,"bytes"],[49,76,43,42],[49,78,43,44],[50,6,43,46,"size"],[50,10,43,50],[50,12,43,52,"opts"],[50,16,43,56],[50,17,43,57,"size"],[51,4,43,62],[51,5,43,63],[51,6,43,64],[52,4,44,4],[52,8,44,10,"hex"],[52,11,44,13],[52,14,44,16],[52,15,44,17],[52,16,44,18],[52,18,44,20,"toHex_js_1"],[52,28,44,30],[52,29,44,31,"bytesToHex"],[52,39,44,41],[52,41,44,43,"bytes"],[52,46,44,48],[52,48,44,50,"opts"],[52,52,44,54],[52,53,44,55],[53,4,45,4],[53,11,45,11],[53,12,45,12],[53,13,45,13],[53,15,45,15,"fromHex_js_1"],[53,27,45,27],[53,28,45,28,"hexToNumber"],[53,39,45,39],[53,41,45,41,"hex"],[53,44,45,44],[53,46,45,46,"opts"],[53,50,45,50],[53,51,45,51],[54,2,46,0],[55,2,47,0],[55,11,47,9,"bytesToString"],[55,24,47,22,"bytesToString"],[55,25,47,23,"bytes_"],[55,31,47,29],[55,33,47,42],[56,4,47,42],[56,8,47,31,"opts"],[56,12,47,35],[56,15,47,35,"arguments"],[56,24,47,35],[56,25,47,35,"length"],[56,31,47,35],[56,39,47,35,"arguments"],[56,48,47,35],[56,56,47,35,"undefined"],[56,65,47,35],[56,68,47,35,"arguments"],[56,77,47,35],[56,83,47,38],[56,84,47,39],[56,85,47,40],[57,4,48,4],[57,8,48,8,"bytes"],[57,13,48,13],[57,16,48,16,"bytes_"],[57,22,48,22],[58,4,49,4],[58,8,49,8],[58,15,49,15,"opts"],[58,19,49,19],[58,20,49,20,"size"],[58,24,49,24],[58,29,49,29],[58,40,49,40],[58,42,49,42],[59,6,50,8],[59,7,50,9],[59,8,50,10],[59,10,50,12,"fromHex_js_1"],[59,22,50,24],[59,23,50,25,"assertSize"],[59,33,50,35],[59,35,50,37,"bytes"],[59,40,50,42],[59,42,50,44],[60,8,50,46,"size"],[60,12,50,50],[60,14,50,52,"opts"],[60,18,50,56],[60,19,50,57,"size"],[61,6,50,62],[61,7,50,63],[61,8,50,64],[62,6,51,8,"bytes"],[62,11,51,13],[62,14,51,16],[62,15,51,17],[62,16,51,18],[62,18,51,20,"trim_js_1"],[62,27,51,29],[62,28,51,30,"trim"],[62,32,51,34],[62,34,51,36,"bytes"],[62,39,51,41],[62,41,51,43],[63,8,51,45,"dir"],[63,11,51,48],[63,13,51,50],[64,6,51,58],[64,7,51,59],[64,8,51,60],[65,4,52,4],[66,4,53,4],[66,11,53,11],[66,15,53,15,"TextDecoder"],[66,26,53,26],[66,27,53,27],[66,28,53,28],[66,29,53,29,"decode"],[66,35,53,35],[66,36,53,36,"bytes"],[66,41,53,41],[66,42,53,42],[67,2,54,0],[68,0,54,1],[68,3]],"functionMap":{"names":["<global>","fromBytes","bytesToBigInt","bytesToBool","bytesToNumber","bytesToString"],"mappings":"AAA;ACW;CDY;AEC;CFK;AGC;CHS;AIC;CJK;AKC;CLO"}},"type":"js/module"}]}