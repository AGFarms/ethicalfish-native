{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":40,"column":38,"index":1504}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"../../errors/unit.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":18,"index":128},"end":{"line":4,"column":49,"index":159}}],"key":"sPno2TyvvQKJOmqlVtLVEzbU0Lc="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseUnits = parseUnits;\n  var unit_js_1 = require(_dependencyMap[1], \"../../errors/unit.js\");\n  function parseUnits(value, decimals) {\n    if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value)) throw new unit_js_1.InvalidDecimalNumberError({\n      value\n    });\n    var _value$split = value.split('.'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      integer = _value$split2[0],\n      _value$split2$ = _value$split2[1],\n      fraction = _value$split2$ === void 0 ? '0' : _value$split2$;\n    var negative = integer.startsWith('-');\n    if (negative) integer = integer.slice(1);\n    fraction = fraction.replace(/(0+)$/, '');\n    if (decimals === 0) {\n      if (Math.round(Number(`.${fraction}`)) === 1) integer = `${BigInt(integer) + 1n}`;\n      fraction = '';\n    } else if (fraction.length > decimals) {\n      var _ref = [fraction.slice(0, decimals - 1), fraction.slice(decimals - 1, decimals), fraction.slice(decimals)],\n        left = _ref[0],\n        unit = _ref[1],\n        right = _ref[2];\n      var rounded = Math.round(Number(`${unit}.${right}`));\n      if (rounded > 9) fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');else fraction = `${left}${rounded}`;\n      if (fraction.length > decimals) {\n        fraction = fraction.slice(1);\n        integer = `${BigInt(integer) + 1n}`;\n      }\n      fraction = fraction.slice(0, decimals);\n    } else {\n      fraction = fraction.padEnd(decimals, '0');\n    }\n    return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n  }\n});","lineCount":42,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"parseUnits"],[8,20,3,18],[8,23,3,21,"parseUnits"],[8,33,3,31],[9,2,4,0],[9,6,4,6,"unit_js_1"],[9,15,4,15],[9,18,4,18,"require"],[9,25,4,25],[9,26,4,25,"_dependencyMap"],[9,40,4,25],[9,67,4,48],[9,68,4,49],[10,2,5,0],[10,11,5,9,"parseUnits"],[10,21,5,19,"parseUnits"],[10,22,5,20,"value"],[10,27,5,25],[10,29,5,27,"decimals"],[10,37,5,35],[10,39,5,37],[11,4,6,4],[11,8,6,8],[11,9,6,9],[11,36,6,36],[11,37,6,37,"test"],[11,41,6,41],[11,42,6,42,"value"],[11,47,6,47],[11,48,6,48],[11,50,7,8],[11,56,7,14],[11,60,7,18,"unit_js_1"],[11,69,7,27],[11,70,7,28,"InvalidDecimalNumberError"],[11,95,7,53],[11,96,7,54],[12,6,7,56,"value"],[13,4,7,62],[13,5,7,63],[13,6,7,64],[14,4,8,4],[14,8,8,4,"_value$split"],[14,20,8,4],[14,23,8,36,"value"],[14,28,8,41],[14,29,8,42,"split"],[14,34,8,47],[14,35,8,48],[14,38,8,51],[14,39,8,52],[15,6,8,52,"_value$split2"],[15,19,8,52],[15,22,8,52,"_slicedToArray"],[15,36,8,52],[15,37,8,52,"_value$split"],[15,49,8,52],[16,6,8,9,"integer"],[16,13,8,16],[16,16,8,16,"_value$split2"],[16,29,8,16],[17,6,8,16,"_value$split2$"],[17,20,8,16],[17,23,8,16,"_value$split2"],[17,36,8,16],[18,6,8,18,"fraction"],[18,14,8,26],[18,17,8,26,"_value$split2$"],[18,31,8,26],[18,45,8,29],[18,48,8,32],[18,51,8,32,"_value$split2$"],[18,65,8,32],[19,4,9,4],[19,8,9,10,"negative"],[19,16,9,18],[19,19,9,21,"integer"],[19,26,9,28],[19,27,9,29,"startsWith"],[19,37,9,39],[19,38,9,40],[19,41,9,43],[19,42,9,44],[20,4,10,4],[20,8,10,8,"negative"],[20,16,10,16],[20,18,11,8,"integer"],[20,25,11,15],[20,28,11,18,"integer"],[20,35,11,25],[20,36,11,26,"slice"],[20,41,11,31],[20,42,11,32],[20,43,11,33],[20,44,11,34],[21,4,12,4,"fraction"],[21,12,12,12],[21,15,12,15,"fraction"],[21,23,12,23],[21,24,12,24,"replace"],[21,31,12,31],[21,32,12,32],[21,39,12,39],[21,41,12,41],[21,43,12,43],[21,44,12,44],[22,4,13,4],[22,8,13,8,"decimals"],[22,16,13,16],[22,21,13,21],[22,22,13,22],[22,24,13,24],[23,6,14,8],[23,10,14,12,"Math"],[23,14,14,16],[23,15,14,17,"round"],[23,20,14,22],[23,21,14,23,"Number"],[23,27,14,29],[23,28,14,30],[23,32,14,34,"fraction"],[23,40,14,42],[23,42,14,44],[23,43,14,45],[23,44,14,46],[23,49,14,51],[23,50,14,52],[23,52,15,12,"integer"],[23,59,15,19],[23,62,15,22],[23,65,15,25,"BigInt"],[23,71,15,31],[23,72,15,32,"integer"],[23,79,15,39],[23,80,15,40],[23,83,15,43],[23,85,15,45],[23,87,15,47],[24,6,16,8,"fraction"],[24,14,16,16],[24,17,16,19],[24,19,16,21],[25,4,17,4],[25,5,17,5],[25,11,18,9],[25,15,18,13,"fraction"],[25,23,18,21],[25,24,18,22,"length"],[25,30,18,28],[25,33,18,31,"decimals"],[25,41,18,39],[25,43,18,41],[26,6,19,8],[26,10,19,8,"_ref"],[26,14,19,8],[26,17,19,36],[26,18,20,12,"fraction"],[26,26,20,20],[26,27,20,21,"slice"],[26,32,20,26],[26,33,20,27],[26,34,20,28],[26,36,20,30,"decimals"],[26,44,20,38],[26,47,20,41],[26,48,20,42],[26,49,20,43],[26,51,21,12,"fraction"],[26,59,21,20],[26,60,21,21,"slice"],[26,65,21,26],[26,66,21,27,"decimals"],[26,74,21,35],[26,77,21,38],[26,78,21,39],[26,80,21,41,"decimals"],[26,88,21,49],[26,89,21,50],[26,91,22,12,"fraction"],[26,99,22,20],[26,100,22,21,"slice"],[26,105,22,26],[26,106,22,27,"decimals"],[26,114,22,35],[26,115,22,36],[26,116,23,9],[27,8,19,15,"left"],[27,12,19,19],[27,15,19,19,"_ref"],[27,19,19,19],[28,8,19,21,"unit"],[28,12,19,25],[28,15,19,25,"_ref"],[28,19,19,25],[29,8,19,27,"right"],[29,13,19,32],[29,16,19,32,"_ref"],[29,20,19,32],[30,6,24,8],[30,10,24,14,"rounded"],[30,17,24,21],[30,20,24,24,"Math"],[30,24,24,28],[30,25,24,29,"round"],[30,30,24,34],[30,31,24,35,"Number"],[30,37,24,41],[30,38,24,42],[30,41,24,45,"unit"],[30,45,24,49],[30,49,24,53,"right"],[30,54,24,58],[30,56,24,60],[30,57,24,61],[30,58,24,62],[31,6,25,8],[31,10,25,12,"rounded"],[31,17,25,19],[31,20,25,22],[31,21,25,23],[31,23,26,12,"fraction"],[31,31,26,20],[31,34,26,23],[31,37,26,26,"BigInt"],[31,43,26,32],[31,44,26,33,"left"],[31,48,26,37],[31,49,26,38],[31,52,26,41,"BigInt"],[31,58,26,47],[31,59,26,48],[31,60,26,49],[31,61,26,50],[31,64,26,53],[31,65,26,54,"padStart"],[31,73,26,62],[31,74,26,63,"left"],[31,78,26,67],[31,79,26,68,"length"],[31,85,26,74],[31,88,26,77],[31,89,26,78],[31,91,26,80],[31,94,26,83],[31,95,26,84],[31,96,26,85],[31,101,28,12,"fraction"],[31,109,28,20],[31,112,28,23],[31,115,28,26,"left"],[31,119,28,30],[31,122,28,33,"rounded"],[31,129,28,40],[31,131,28,42],[32,6,29,8],[32,10,29,12,"fraction"],[32,18,29,20],[32,19,29,21,"length"],[32,25,29,27],[32,28,29,30,"decimals"],[32,36,29,38],[32,38,29,40],[33,8,30,12,"fraction"],[33,16,30,20],[33,19,30,23,"fraction"],[33,27,30,31],[33,28,30,32,"slice"],[33,33,30,37],[33,34,30,38],[33,35,30,39],[33,36,30,40],[34,8,31,12,"integer"],[34,15,31,19],[34,18,31,22],[34,21,31,25,"BigInt"],[34,27,31,31],[34,28,31,32,"integer"],[34,35,31,39],[34,36,31,40],[34,39,31,43],[34,41,31,45],[34,43,31,47],[35,6,32,8],[36,6,33,8,"fraction"],[36,14,33,16],[36,17,33,19,"fraction"],[36,25,33,27],[36,26,33,28,"slice"],[36,31,33,33],[36,32,33,34],[36,33,33,35],[36,35,33,37,"decimals"],[36,43,33,45],[36,44,33,46],[37,4,34,4],[37,5,34,5],[37,11,35,9],[38,6,36,8,"fraction"],[38,14,36,16],[38,17,36,19,"fraction"],[38,25,36,27],[38,26,36,28,"padEnd"],[38,32,36,34],[38,33,36,35,"decimals"],[38,41,36,43],[38,43,36,45],[38,46,36,48],[38,47,36,49],[39,4,37,4],[40,4,38,4],[40,11,38,11,"BigInt"],[40,17,38,17],[40,18,38,18],[40,21,38,21,"negative"],[40,29,38,29],[40,32,38,32],[40,35,38,35],[40,38,38,38],[40,40,38,40],[40,43,38,43,"integer"],[40,50,38,50],[40,53,38,53,"fraction"],[40,61,38,61],[40,63,38,63],[40,64,38,64],[41,2,39,0],[42,0,39,1],[42,3]],"functionMap":{"names":["<global>","parseUnits"],"mappings":"AAA;ACI;CDkC"}},"type":"js/module"}]}