{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":165,"column":0,"index":4373}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":165,"column":0,"index":4373}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../../vendor/base-x.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":14,"index":93},"end":{"line":5,"column":47,"index":126}}],"key":"59KYJLQKDuA8nf6g0dz0iQUuN6Y="}},{"name":"../bytes.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":12,"index":140},"end":{"line":6,"column":34,"index":162}}],"key":"m3x3BVgt8SPUbuy9aq+rIFLlpKQ="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var baseX$1 = require(_dependencyMap[2], \"../../vendor/base-x.js\");\n  var bytes = require(_dependencyMap[3], \"../bytes.js\");\n  var Encoder = /*#__PURE__*/function () {\n    function Encoder(name, prefix, baseEncode) {\n      _classCallCheck(this, Encoder);\n      this.name = name;\n      this.prefix = prefix;\n      this.baseEncode = baseEncode;\n    }\n    return _createClass(Encoder, [{\n      key: \"encode\",\n      value: function encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n          return `${this.prefix}${this.baseEncode(bytes)}`;\n        } else {\n          throw Error('Unknown type, must be binary type');\n        }\n      }\n    }]);\n  }();\n  var Decoder = /*#__PURE__*/function () {\n    function Decoder(name, prefix, baseDecode) {\n      _classCallCheck(this, Decoder);\n      this.name = name;\n      this.prefix = prefix;\n      if (prefix.codePointAt(0) === undefined) {\n        throw new Error('Invalid prefix character');\n      }\n      this.prefixCodePoint = prefix.codePointAt(0);\n      this.baseDecode = baseDecode;\n    }\n    return _createClass(Decoder, [{\n      key: \"decode\",\n      value: function decode(text) {\n        if (typeof text === 'string') {\n          if (text.codePointAt(0) !== this.prefixCodePoint) {\n            throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n          }\n          return this.baseDecode(text.slice(this.prefix.length));\n        } else {\n          throw Error('Can only multibase decode strings');\n        }\n      }\n    }, {\n      key: \"or\",\n      value: function or(decoder) {\n        return _or(this, decoder);\n      }\n    }]);\n  }();\n  var ComposedDecoder = /*#__PURE__*/function () {\n    function ComposedDecoder(decoders) {\n      _classCallCheck(this, ComposedDecoder);\n      this.decoders = decoders;\n    }\n    return _createClass(ComposedDecoder, [{\n      key: \"or\",\n      value: function or(decoder) {\n        return _or(this, decoder);\n      }\n    }, {\n      key: \"decode\",\n      value: function decode(input) {\n        var prefix = input[0];\n        var decoder = this.decoders[prefix];\n        if (decoder) {\n          return decoder.decode(input);\n        } else {\n          throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n      }\n    }]);\n  }();\n  var _or = (left, right) => new ComposedDecoder({\n    ...(left.decoders || {\n      [left.prefix]: left\n    }),\n    ...(right.decoders || {\n      [right.prefix]: right\n    })\n  });\n  var Codec = /*#__PURE__*/function () {\n    function Codec(name, prefix, baseEncode, baseDecode) {\n      _classCallCheck(this, Codec);\n      this.name = name;\n      this.prefix = prefix;\n      this.baseEncode = baseEncode;\n      this.baseDecode = baseDecode;\n      this.encoder = new Encoder(name, prefix, baseEncode);\n      this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    return _createClass(Codec, [{\n      key: \"encode\",\n      value: function encode(input) {\n        return this.encoder.encode(input);\n      }\n    }, {\n      key: \"decode\",\n      value: function decode(input) {\n        return this.decoder.decode(input);\n      }\n    }]);\n  }();\n  var from = _ref => {\n    var name = _ref.name,\n      prefix = _ref.prefix,\n      encode = _ref.encode,\n      decode = _ref.decode;\n    return new Codec(name, prefix, encode, decode);\n  };\n  var baseX = _ref2 => {\n    var prefix = _ref2.prefix,\n      name = _ref2.name,\n      alphabet = _ref2.alphabet;\n    var _baseX$ = baseX$1(alphabet, name),\n      encode = _baseX$.encode,\n      decode = _baseX$.decode;\n    return from({\n      prefix,\n      name,\n      encode,\n      decode: text => bytes.coerce(decode(text))\n    });\n  };\n  var decode = (string, alphabet, bitsPerChar, name) => {\n    var codes = {};\n    for (var i = 0; i < alphabet.length; ++i) {\n      codes[alphabet[i]] = i;\n    }\n    var end = string.length;\n    while (string[end - 1] === '=') {\n      --end;\n    }\n    var out = new Uint8Array(end * bitsPerChar / 8 | 0);\n    var bits = 0;\n    var buffer = 0;\n    var written = 0;\n    for (var _i = 0; _i < end; ++_i) {\n      var value = codes[string[_i]];\n      if (value === undefined) {\n        throw new SyntaxError(`Non-${name} character`);\n      }\n      buffer = buffer << bitsPerChar | value;\n      bits += bitsPerChar;\n      if (bits >= 8) {\n        bits -= 8;\n        out[written++] = 255 & buffer >> bits;\n      }\n    }\n    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n      throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n  };\n  var encode = (data, alphabet, bitsPerChar) => {\n    var pad = alphabet[alphabet.length - 1] === '=';\n    var mask = (1 << bitsPerChar) - 1;\n    var out = '';\n    var bits = 0;\n    var buffer = 0;\n    for (var i = 0; i < data.length; ++i) {\n      buffer = buffer << 8 | data[i];\n      bits += 8;\n      while (bits > bitsPerChar) {\n        bits -= bitsPerChar;\n        out += alphabet[mask & buffer >> bits];\n      }\n    }\n    if (bits) {\n      out += alphabet[mask & buffer << bitsPerChar - bits];\n    }\n    if (pad) {\n      while (out.length * bitsPerChar & 7) {\n        out += '=';\n      }\n    }\n    return out;\n  };\n  var rfc4648 = _ref3 => {\n    var name = _ref3.name,\n      prefix = _ref3.prefix,\n      bitsPerChar = _ref3.bitsPerChar,\n      alphabet = _ref3.alphabet;\n    return from({\n      prefix,\n      name,\n      encode(input) {\n        return encode(input, alphabet, bitsPerChar);\n      },\n      decode(input) {\n        return decode(input, alphabet, bitsPerChar, name);\n      }\n    });\n  };\n  exports.Codec = Codec;\n  exports.baseX = baseX;\n  exports.from = from;\n  exports.or = _or;\n  exports.rfc4648 = rfc4648;\n});","lineCount":208,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,21],[6,24,3,22,"exports"],[6,31,3,29],[6,33,3,31],[6,45,3,43],[6,47,3,45],[7,4,3,47,"value"],[7,9,3,52],[7,11,3,54],[8,2,3,59],[8,3,3,60],[8,4,3,61],[9,2,5,0],[9,6,5,4,"baseX$1"],[9,13,5,11],[9,16,5,14,"require"],[9,23,5,21],[9,24,5,21,"_dependencyMap"],[9,38,5,21],[9,67,5,46],[9,68,5,47],[10,2,6,0],[10,6,6,4,"bytes"],[10,11,6,9],[10,14,6,12,"require"],[10,21,6,19],[10,22,6,19,"_dependencyMap"],[10,36,6,19],[10,54,6,33],[10,55,6,34],[11,2,6,35],[11,6,8,6,"Encoder"],[11,13,8,13],[12,4,9,2],[12,13,9,2,"Encoder"],[12,21,9,14,"name"],[12,25,9,18],[12,27,9,20,"prefix"],[12,33,9,26],[12,35,9,28,"baseEncode"],[12,45,9,38],[12,47,9,40],[13,6,9,40,"_classCallCheck"],[13,21,9,40],[13,28,9,40,"Encoder"],[13,35,9,40],[14,6,10,4],[14,10,10,8],[14,11,10,9,"name"],[14,15,10,13],[14,18,10,16,"name"],[14,22,10,20],[15,6,11,4],[15,10,11,8],[15,11,11,9,"prefix"],[15,17,11,15],[15,20,11,18,"prefix"],[15,26,11,24],[16,6,12,4],[16,10,12,8],[16,11,12,9,"baseEncode"],[16,21,12,19],[16,24,12,22,"baseEncode"],[16,34,12,32],[17,4,13,2],[18,4,13,3],[18,11,13,3,"_createClass"],[18,23,13,3],[18,24,13,3,"Encoder"],[18,31,13,3],[19,6,13,3,"key"],[19,9,13,3],[20,6,13,3,"value"],[20,11,13,3],[20,13,14,2],[20,22,14,2,"encode"],[20,28,14,8,"encode"],[20,29,14,9,"bytes"],[20,34,14,14],[20,36,14,16],[21,8,15,4],[21,12,15,8,"bytes"],[21,17,15,13],[21,29,15,25,"Uint8Array"],[21,39,15,35],[21,41,15,37],[22,10,16,6],[22,17,16,13],[22,20,16,17],[22,24,16,21],[22,25,16,22,"prefix"],[22,31,16,28],[22,34,16,33],[22,38,16,37],[22,39,16,38,"baseEncode"],[22,49,16,48],[22,50,16,49,"bytes"],[22,55,16,54],[22,56,16,55],[22,58,16,58],[23,8,17,4],[23,9,17,5],[23,15,17,11],[24,10,18,6],[24,16,18,12,"Error"],[24,21,18,17],[24,22,18,18],[24,57,18,53],[24,58,18,54],[25,8,19,4],[26,6,20,2],[27,4,20,3],[28,2,20,3],[29,2,20,3],[29,6,22,6,"Decoder"],[29,13,22,13],[30,4,23,2],[30,13,23,2,"Decoder"],[30,21,23,14,"name"],[30,25,23,18],[30,27,23,20,"prefix"],[30,33,23,26],[30,35,23,28,"baseDecode"],[30,45,23,38],[30,47,23,40],[31,6,23,40,"_classCallCheck"],[31,21,23,40],[31,28,23,40,"Decoder"],[31,35,23,40],[32,6,24,4],[32,10,24,8],[32,11,24,9,"name"],[32,15,24,13],[32,18,24,16,"name"],[32,22,24,20],[33,6,25,4],[33,10,25,8],[33,11,25,9,"prefix"],[33,17,25,15],[33,20,25,18,"prefix"],[33,26,25,24],[34,6,26,4],[34,10,26,8,"prefix"],[34,16,26,14],[34,17,26,15,"codePointAt"],[34,28,26,26],[34,29,26,27],[34,30,26,28],[34,31,26,29],[34,36,26,34,"undefined"],[34,45,26,43],[34,47,26,45],[35,8,27,6],[35,14,27,12],[35,18,27,16,"Error"],[35,23,27,21],[35,24,27,22],[35,50,27,48],[35,51,27,49],[36,6,28,4],[37,6,29,4],[37,10,29,8],[37,11,29,9,"prefixCodePoint"],[37,26,29,24],[37,29,29,27,"prefix"],[37,35,29,33],[37,36,29,34,"codePointAt"],[37,47,29,45],[37,48,29,46],[37,49,29,47],[37,50,29,48],[38,6,30,4],[38,10,30,8],[38,11,30,9,"baseDecode"],[38,21,30,19],[38,24,30,22,"baseDecode"],[38,34,30,32],[39,4,31,2],[40,4,31,3],[40,11,31,3,"_createClass"],[40,23,31,3],[40,24,31,3,"Decoder"],[40,31,31,3],[41,6,31,3,"key"],[41,9,31,3],[42,6,31,3,"value"],[42,11,31,3],[42,13,32,2],[42,22,32,2,"decode"],[42,28,32,8,"decode"],[42,29,32,9,"text"],[42,33,32,13],[42,35,32,15],[43,8,33,4],[43,12,33,8],[43,19,33,15,"text"],[43,23,33,19],[43,28,33,24],[43,36,33,32],[43,38,33,34],[44,10,34,6],[44,14,34,10,"text"],[44,18,34,14],[44,19,34,15,"codePointAt"],[44,30,34,26],[44,31,34,27],[44,32,34,28],[44,33,34,29],[44,38,34,34],[44,42,34,38],[44,43,34,39,"prefixCodePoint"],[44,58,34,54],[44,60,34,56],[45,12,35,8],[45,18,35,14,"Error"],[45,23,35,19],[45,24,35,20],[45,61,35,58,"JSON"],[45,65,35,62],[45,66,35,63,"stringify"],[45,75,35,72],[45,76,35,73,"text"],[45,80,35,77],[45,81,35,78],[45,86,35,85],[45,90,35,89],[45,91,35,90,"name"],[45,95,35,94],[45,142,35,143],[45,146,35,147],[45,147,35,148,"prefix"],[45,153,35,154],[45,155,35,157],[45,156,35,158],[46,10,36,6],[47,10,37,6],[47,17,37,13],[47,21,37,17],[47,22,37,18,"baseDecode"],[47,32,37,28],[47,33,37,29,"text"],[47,37,37,33],[47,38,37,34,"slice"],[47,43,37,39],[47,44,37,40],[47,48,37,44],[47,49,37,45,"prefix"],[47,55,37,51],[47,56,37,52,"length"],[47,62,37,58],[47,63,37,59],[47,64,37,60],[48,8,38,4],[48,9,38,5],[48,15,38,11],[49,10,39,6],[49,16,39,12,"Error"],[49,21,39,17],[49,22,39,18],[49,57,39,53],[49,58,39,54],[50,8,40,4],[51,6,41,2],[52,4,41,3],[53,6,41,3,"key"],[53,9,41,3],[54,6,41,3,"value"],[54,11,41,3],[54,13,42,2],[54,22,42,2,"or"],[54,24,42,4,"or"],[54,25,42,5,"decoder"],[54,32,42,12],[54,34,42,14],[55,8,43,4],[55,15,43,11,"or"],[55,18,43,13],[55,19,43,14],[55,23,43,18],[55,25,43,20,"decoder"],[55,32,43,27],[55,33,43,28],[56,6,44,2],[57,4,44,3],[58,2,44,3],[59,2,44,3],[59,6,46,6,"ComposedDecoder"],[59,21,46,21],[60,4,47,2],[60,13,47,2,"ComposedDecoder"],[60,29,47,14,"decoders"],[60,37,47,22],[60,39,47,24],[61,6,47,24,"_classCallCheck"],[61,21,47,24],[61,28,47,24,"ComposedDecoder"],[61,43,47,24],[62,6,48,4],[62,10,48,8],[62,11,48,9,"decoders"],[62,19,48,17],[62,22,48,20,"decoders"],[62,30,48,28],[63,4,49,2],[64,4,49,3],[64,11,49,3,"_createClass"],[64,23,49,3],[64,24,49,3,"ComposedDecoder"],[64,39,49,3],[65,6,49,3,"key"],[65,9,49,3],[66,6,49,3,"value"],[66,11,49,3],[66,13,50,2],[66,22,50,2,"or"],[66,24,50,4,"or"],[66,25,50,5,"decoder"],[66,32,50,12],[66,34,50,14],[67,8,51,4],[67,15,51,11,"or"],[67,18,51,13],[67,19,51,14],[67,23,51,18],[67,25,51,20,"decoder"],[67,32,51,27],[67,33,51,28],[68,6,52,2],[69,4,52,3],[70,6,52,3,"key"],[70,9,52,3],[71,6,52,3,"value"],[71,11,52,3],[71,13,53,2],[71,22,53,2,"decode"],[71,28,53,8,"decode"],[71,29,53,9,"input"],[71,34,53,14],[71,36,53,16],[72,8,54,4],[72,12,54,10,"prefix"],[72,18,54,16],[72,21,54,19,"input"],[72,26,54,24],[72,27,54,25],[72,28,54,26],[72,29,54,27],[73,8,55,4],[73,12,55,10,"decoder"],[73,19,55,17],[73,22,55,20],[73,26,55,24],[73,27,55,25,"decoders"],[73,35,55,33],[73,36,55,34,"prefix"],[73,42,55,40],[73,43,55,41],[74,8,56,4],[74,12,56,8,"decoder"],[74,19,56,15],[74,21,56,17],[75,10,57,6],[75,17,57,13,"decoder"],[75,24,57,20],[75,25,57,21,"decode"],[75,31,57,27],[75,32,57,28,"input"],[75,37,57,33],[75,38,57,34],[76,8,58,4],[76,9,58,5],[76,15,58,11],[77,10,59,6],[77,16,59,12,"RangeError"],[77,26,59,22],[77,27,59,23],[77,64,59,61,"JSON"],[77,68,59,65],[77,69,59,66,"stringify"],[77,78,59,75],[77,79,59,76,"input"],[77,84,59,81],[77,85,59,82],[77,116,59,115,"Object"],[77,122,59,121],[77,123,59,122,"keys"],[77,127,59,126],[77,128,59,127],[77,132,59,131],[77,133,59,132,"decoders"],[77,141,59,140],[77,142,59,141],[77,158,59,158],[77,159,59,159],[78,8,60,4],[79,6,61,2],[80,4,61,3],[81,2,61,3],[82,2,63,0],[82,6,63,6,"or"],[82,9,63,8],[82,12,63,11,"or"],[82,13,63,12,"left"],[82,17,63,16],[82,19,63,18,"right"],[82,24,63,23],[82,29,63,28],[82,33,63,32,"ComposedDecoder"],[82,48,63,47],[82,49,63,48],[83,4,64,2],[83,8,64,5,"left"],[83,12,64,9],[83,13,64,10,"decoders"],[83,21,64,18],[83,25,64,22],[84,6,64,24],[84,7,64,25,"left"],[84,11,64,29],[84,12,64,30,"prefix"],[84,18,64,36],[84,21,64,39,"left"],[85,4,64,44],[85,5,64,45],[86,4,65,2],[86,8,65,5,"right"],[86,13,65,10],[86,14,65,11,"decoders"],[86,22,65,19],[86,26,65,23],[87,6,65,25],[87,7,65,26,"right"],[87,12,65,31],[87,13,65,32,"prefix"],[87,19,65,38],[87,22,65,41,"right"],[88,4,65,47],[88,5,65,48],[89,2,66,0],[89,3,66,1],[89,4,66,2],[90,2,66,3],[90,6,67,6,"Codec"],[90,11,67,11],[91,4,68,2],[91,13,68,2,"Codec"],[91,19,68,14,"name"],[91,23,68,18],[91,25,68,20,"prefix"],[91,31,68,26],[91,33,68,28,"baseEncode"],[91,43,68,38],[91,45,68,40,"baseDecode"],[91,55,68,50],[91,57,68,52],[92,6,68,52,"_classCallCheck"],[92,21,68,52],[92,28,68,52,"Codec"],[92,33,68,52],[93,6,69,4],[93,10,69,8],[93,11,69,9,"name"],[93,15,69,13],[93,18,69,16,"name"],[93,22,69,20],[94,6,70,4],[94,10,70,8],[94,11,70,9,"prefix"],[94,17,70,15],[94,20,70,18,"prefix"],[94,26,70,24],[95,6,71,4],[95,10,71,8],[95,11,71,9,"baseEncode"],[95,21,71,19],[95,24,71,22,"baseEncode"],[95,34,71,32],[96,6,72,4],[96,10,72,8],[96,11,72,9,"baseDecode"],[96,21,72,19],[96,24,72,22,"baseDecode"],[96,34,72,32],[97,6,73,4],[97,10,73,8],[97,11,73,9,"encoder"],[97,18,73,16],[97,21,73,19],[97,25,73,23,"Encoder"],[97,32,73,30],[97,33,73,31,"name"],[97,37,73,35],[97,39,73,37,"prefix"],[97,45,73,43],[97,47,73,45,"baseEncode"],[97,57,73,55],[97,58,73,56],[98,6,74,4],[98,10,74,8],[98,11,74,9,"decoder"],[98,18,74,16],[98,21,74,19],[98,25,74,23,"Decoder"],[98,32,74,30],[98,33,74,31,"name"],[98,37,74,35],[98,39,74,37,"prefix"],[98,45,74,43],[98,47,74,45,"baseDecode"],[98,57,74,55],[98,58,74,56],[99,4,75,2],[100,4,75,3],[100,11,75,3,"_createClass"],[100,23,75,3],[100,24,75,3,"Codec"],[100,29,75,3],[101,6,75,3,"key"],[101,9,75,3],[102,6,75,3,"value"],[102,11,75,3],[102,13,76,2],[102,22,76,2,"encode"],[102,28,76,8,"encode"],[102,29,76,9,"input"],[102,34,76,14],[102,36,76,16],[103,8,77,4],[103,15,77,11],[103,19,77,15],[103,20,77,16,"encoder"],[103,27,77,23],[103,28,77,24,"encode"],[103,34,77,30],[103,35,77,31,"input"],[103,40,77,36],[103,41,77,37],[104,6,78,2],[105,4,78,3],[106,6,78,3,"key"],[106,9,78,3],[107,6,78,3,"value"],[107,11,78,3],[107,13,79,2],[107,22,79,2,"decode"],[107,28,79,8,"decode"],[107,29,79,9,"input"],[107,34,79,14],[107,36,79,16],[108,8,80,4],[108,15,80,11],[108,19,80,15],[108,20,80,16,"decoder"],[108,27,80,23],[108,28,80,24,"decode"],[108,34,80,30],[108,35,80,31,"input"],[108,40,80,36],[108,41,80,37],[109,6,81,2],[110,4,81,3],[111,2,81,3],[112,2,83,0],[112,6,83,6,"from"],[112,10,83,10],[112,13,83,13,"_ref"],[112,17,83,13],[113,4,83,13],[113,8,83,15,"name"],[113,12,83,19],[113,15,83,19,"_ref"],[113,19,83,19],[113,20,83,15,"name"],[113,24,83,19],[114,6,83,21,"prefix"],[114,12,83,27],[114,15,83,27,"_ref"],[114,19,83,27],[114,20,83,21,"prefix"],[114,26,83,27],[115,6,83,29,"encode"],[115,12,83,35],[115,15,83,35,"_ref"],[115,19,83,35],[115,20,83,29,"encode"],[115,26,83,35],[116,6,83,37,"decode"],[116,12,83,43],[116,15,83,43,"_ref"],[116,19,83,43],[116,20,83,37,"decode"],[116,26,83,43],[117,4,83,43],[117,11,83,49],[117,15,83,53,"Codec"],[117,20,83,58],[117,21,83,59,"name"],[117,25,83,63],[117,27,83,65,"prefix"],[117,33,83,71],[117,35,83,73,"encode"],[117,41,83,79],[117,43,83,81,"decode"],[117,49,83,87],[117,50,83,88],[118,2,83,88],[119,2,84,0],[119,6,84,6,"baseX"],[119,11,84,11],[119,14,84,14,"_ref2"],[119,19,84,14],[119,23,84,44],[120,4,84,44],[120,8,84,16,"prefix"],[120,14,84,22],[120,17,84,22,"_ref2"],[120,22,84,22],[120,23,84,16,"prefix"],[120,29,84,22],[121,6,84,24,"name"],[121,10,84,28],[121,13,84,28,"_ref2"],[121,18,84,28],[121,19,84,24,"name"],[121,23,84,28],[122,6,84,30,"alphabet"],[122,14,84,38],[122,17,84,38,"_ref2"],[122,22,84,38],[122,23,84,30,"alphabet"],[122,31,84,38],[123,4,85,2],[123,8,85,2,"_baseX$"],[123,15,85,2],[123,18,85,27,"baseX$1"],[123,25,85,34],[123,26,85,35,"alphabet"],[123,34,85,43],[123,36,85,45,"name"],[123,40,85,49],[123,41,85,50],[124,6,85,9,"encode"],[124,12,85,15],[124,15,85,15,"_baseX$"],[124,22,85,15],[124,23,85,9,"encode"],[124,29,85,15],[125,6,85,17,"decode"],[125,12,85,23],[125,15,85,23,"_baseX$"],[125,22,85,23],[125,23,85,17,"decode"],[125,29,85,23],[126,4,86,2],[126,11,86,9,"from"],[126,15,86,13],[126,16,86,14],[127,6,87,4,"prefix"],[127,12,87,10],[128,6,88,4,"name"],[128,10,88,8],[129,6,89,4,"encode"],[129,12,89,10],[130,6,90,4,"decode"],[130,12,90,10],[130,14,90,12,"text"],[130,18,90,16],[130,22,90,20,"bytes"],[130,27,90,25],[130,28,90,26,"coerce"],[130,34,90,32],[130,35,90,33,"decode"],[130,41,90,39],[130,42,90,40,"text"],[130,46,90,44],[130,47,90,45],[131,4,91,2],[131,5,91,3],[131,6,91,4],[132,2,92,0],[132,3,92,1],[133,2,93,0],[133,6,93,6,"decode"],[133,12,93,12],[133,15,93,15,"decode"],[133,16,93,16,"string"],[133,22,93,22],[133,24,93,24,"alphabet"],[133,32,93,32],[133,34,93,34,"bitsPerChar"],[133,45,93,45],[133,47,93,47,"name"],[133,51,93,51],[133,56,93,56],[134,4,94,2],[134,8,94,8,"codes"],[134,13,94,13],[134,16,94,16],[134,17,94,17],[134,18,94,18],[135,4,95,2],[135,9,95,7],[135,13,95,11,"i"],[135,14,95,12],[135,17,95,15],[135,18,95,16],[135,20,95,18,"i"],[135,21,95,19],[135,24,95,22,"alphabet"],[135,32,95,30],[135,33,95,31,"length"],[135,39,95,37],[135,41,95,39],[135,43,95,41,"i"],[135,44,95,42],[135,46,95,44],[136,6,96,4,"codes"],[136,11,96,9],[136,12,96,10,"alphabet"],[136,20,96,18],[136,21,96,19,"i"],[136,22,96,20],[136,23,96,21],[136,24,96,22],[136,27,96,25,"i"],[136,28,96,26],[137,4,97,2],[138,4,98,2],[138,8,98,6,"end"],[138,11,98,9],[138,14,98,12,"string"],[138,20,98,18],[138,21,98,19,"length"],[138,27,98,25],[139,4,99,2],[139,11,99,9,"string"],[139,17,99,15],[139,18,99,16,"end"],[139,21,99,19],[139,24,99,22],[139,25,99,23],[139,26,99,24],[139,31,99,29],[139,34,99,32],[139,36,99,34],[140,6,100,4],[140,8,100,6,"end"],[140,11,100,9],[141,4,101,2],[142,4,102,2],[142,8,102,8,"out"],[142,11,102,11],[142,14,102,14],[142,18,102,18,"Uint8Array"],[142,28,102,28],[142,29,102,29,"end"],[142,32,102,32],[142,35,102,35,"bitsPerChar"],[142,46,102,46],[142,49,102,49],[142,50,102,50],[142,53,102,53],[142,54,102,54],[142,55,102,55],[143,4,103,2],[143,8,103,6,"bits"],[143,12,103,10],[143,15,103,13],[143,16,103,14],[144,4,104,2],[144,8,104,6,"buffer"],[144,14,104,12],[144,17,104,15],[144,18,104,16],[145,4,105,2],[145,8,105,6,"written"],[145,15,105,13],[145,18,105,16],[145,19,105,17],[146,4,106,2],[146,9,106,7],[146,13,106,11,"i"],[146,15,106,12],[146,18,106,15],[146,19,106,16],[146,21,106,18,"i"],[146,23,106,19],[146,26,106,22,"end"],[146,29,106,25],[146,31,106,27],[146,33,106,29,"i"],[146,35,106,30],[146,37,106,32],[147,6,107,4],[147,10,107,10,"value"],[147,15,107,15],[147,18,107,18,"codes"],[147,23,107,23],[147,24,107,24,"string"],[147,30,107,30],[147,31,107,31,"i"],[147,33,107,32],[147,34,107,33],[147,35,107,34],[148,6,108,4],[148,10,108,8,"value"],[148,15,108,13],[148,20,108,18,"undefined"],[148,29,108,27],[148,31,108,29],[149,8,109,6],[149,14,109,12],[149,18,109,16,"SyntaxError"],[149,29,109,27],[149,30,109,28],[149,37,109,36,"name"],[149,41,109,40],[149,53,109,53],[149,54,109,54],[150,6,110,4],[151,6,111,4,"buffer"],[151,12,111,10],[151,15,111,13,"buffer"],[151,21,111,19],[151,25,111,23,"bitsPerChar"],[151,36,111,34],[151,39,111,37,"value"],[151,44,111,42],[152,6,112,4,"bits"],[152,10,112,8],[152,14,112,12,"bitsPerChar"],[152,25,112,23],[153,6,113,4],[153,10,113,8,"bits"],[153,14,113,12],[153,18,113,16],[153,19,113,17],[153,21,113,19],[154,8,114,6,"bits"],[154,12,114,10],[154,16,114,14],[154,17,114,15],[155,8,115,6,"out"],[155,11,115,9],[155,12,115,10,"written"],[155,19,115,17],[155,21,115,19],[155,22,115,20],[155,25,115,23],[155,28,115,26],[155,31,115,29,"buffer"],[155,37,115,35],[155,41,115,39,"bits"],[155,45,115,43],[156,6,116,4],[157,4,117,2],[158,4,118,2],[158,8,118,6,"bits"],[158,12,118,10],[158,16,118,14,"bitsPerChar"],[158,27,118,25],[158,31,118,29],[158,34,118,32],[158,37,118,35,"buffer"],[158,43,118,41],[158,47,118,45],[158,48,118,46],[158,51,118,49,"bits"],[158,55,118,53],[158,57,118,55],[159,6,119,4],[159,12,119,10],[159,16,119,14,"SyntaxError"],[159,27,119,25],[159,28,119,26],[159,52,119,50],[159,53,119,51],[160,4,120,2],[161,4,121,2],[161,11,121,9,"out"],[161,14,121,12],[162,2,122,0],[162,3,122,1],[163,2,123,0],[163,6,123,6,"encode"],[163,12,123,12],[163,15,123,15,"encode"],[163,16,123,16,"data"],[163,20,123,20],[163,22,123,22,"alphabet"],[163,30,123,30],[163,32,123,32,"bitsPerChar"],[163,43,123,43],[163,48,123,48],[164,4,124,2],[164,8,124,8,"pad"],[164,11,124,11],[164,14,124,14,"alphabet"],[164,22,124,22],[164,23,124,23,"alphabet"],[164,31,124,31],[164,32,124,32,"length"],[164,38,124,38],[164,41,124,41],[164,42,124,42],[164,43,124,43],[164,48,124,48],[164,51,124,51],[165,4,125,2],[165,8,125,8,"mask"],[165,12,125,12],[165,15,125,15],[165,16,125,16],[165,17,125,17],[165,21,125,21,"bitsPerChar"],[165,32,125,32],[165,36,125,36],[165,37,125,37],[166,4,126,2],[166,8,126,6,"out"],[166,11,126,9],[166,14,126,12],[166,16,126,14],[167,4,127,2],[167,8,127,6,"bits"],[167,12,127,10],[167,15,127,13],[167,16,127,14],[168,4,128,2],[168,8,128,6,"buffer"],[168,14,128,12],[168,17,128,15],[168,18,128,16],[169,4,129,2],[169,9,129,7],[169,13,129,11,"i"],[169,14,129,12],[169,17,129,15],[169,18,129,16],[169,20,129,18,"i"],[169,21,129,19],[169,24,129,22,"data"],[169,28,129,26],[169,29,129,27,"length"],[169,35,129,33],[169,37,129,35],[169,39,129,37,"i"],[169,40,129,38],[169,42,129,40],[170,6,130,4,"buffer"],[170,12,130,10],[170,15,130,13,"buffer"],[170,21,130,19],[170,25,130,23],[170,26,130,24],[170,29,130,27,"data"],[170,33,130,31],[170,34,130,32,"i"],[170,35,130,33],[170,36,130,34],[171,6,131,4,"bits"],[171,10,131,8],[171,14,131,12],[171,15,131,13],[172,6,132,4],[172,13,132,11,"bits"],[172,17,132,15],[172,20,132,18,"bitsPerChar"],[172,31,132,29],[172,33,132,31],[173,8,133,6,"bits"],[173,12,133,10],[173,16,133,14,"bitsPerChar"],[173,27,133,25],[174,8,134,6,"out"],[174,11,134,9],[174,15,134,13,"alphabet"],[174,23,134,21],[174,24,134,22,"mask"],[174,28,134,26],[174,31,134,29,"buffer"],[174,37,134,35],[174,41,134,39,"bits"],[174,45,134,43],[174,46,134,44],[175,6,135,4],[176,4,136,2],[177,4,137,2],[177,8,137,6,"bits"],[177,12,137,10],[177,14,137,12],[178,6,138,4,"out"],[178,9,138,7],[178,13,138,11,"alphabet"],[178,21,138,19],[178,22,138,20,"mask"],[178,26,138,24],[178,29,138,27,"buffer"],[178,35,138,33],[178,39,138,37,"bitsPerChar"],[178,50,138,48],[178,53,138,51,"bits"],[178,57,138,55],[178,58,138,56],[179,4,139,2],[180,4,140,2],[180,8,140,6,"pad"],[180,11,140,9],[180,13,140,11],[181,6,141,4],[181,13,141,11,"out"],[181,16,141,14],[181,17,141,15,"length"],[181,23,141,21],[181,26,141,24,"bitsPerChar"],[181,37,141,35],[181,40,141,38],[181,41,141,39],[181,43,141,41],[182,8,142,6,"out"],[182,11,142,9],[182,15,142,13],[182,18,142,16],[183,6,143,4],[184,4,144,2],[185,4,145,2],[185,11,145,9,"out"],[185,14,145,12],[186,2,146,0],[186,3,146,1],[187,2,147,0],[187,6,147,6,"rfc4648"],[187,13,147,13],[187,16,147,16,"_ref3"],[187,21,147,16],[187,25,147,59],[188,4,147,59],[188,8,147,18,"name"],[188,12,147,22],[188,15,147,22,"_ref3"],[188,20,147,22],[188,21,147,18,"name"],[188,25,147,22],[189,6,147,24,"prefix"],[189,12,147,30],[189,15,147,30,"_ref3"],[189,20,147,30],[189,21,147,24,"prefix"],[189,27,147,30],[190,6,147,32,"bitsPerChar"],[190,17,147,43],[190,20,147,43,"_ref3"],[190,25,147,43],[190,26,147,32,"bitsPerChar"],[190,37,147,43],[191,6,147,45,"alphabet"],[191,14,147,53],[191,17,147,53,"_ref3"],[191,22,147,53],[191,23,147,45,"alphabet"],[191,31,147,53],[192,4,148,2],[192,11,148,9,"from"],[192,15,148,13],[192,16,148,14],[193,6,149,4,"prefix"],[193,12,149,10],[194,6,150,4,"name"],[194,10,150,8],[195,6,151,4,"encode"],[195,12,151,10,"encode"],[195,13,151,11,"input"],[195,18,151,16],[195,20,151,18],[196,8,152,6],[196,15,152,13,"encode"],[196,21,152,19],[196,22,152,20,"input"],[196,27,152,25],[196,29,152,27,"alphabet"],[196,37,152,35],[196,39,152,37,"bitsPerChar"],[196,50,152,48],[196,51,152,49],[197,6,153,4],[197,7,153,5],[198,6,154,4,"decode"],[198,12,154,10,"decode"],[198,13,154,11,"input"],[198,18,154,16],[198,20,154,18],[199,8,155,6],[199,15,155,13,"decode"],[199,21,155,19],[199,22,155,20,"input"],[199,27,155,25],[199,29,155,27,"alphabet"],[199,37,155,35],[199,39,155,37,"bitsPerChar"],[199,50,155,48],[199,52,155,50,"name"],[199,56,155,54],[199,57,155,55],[200,6,156,4],[201,4,157,2],[201,5,157,3],[201,6,157,4],[202,2,158,0],[202,3,158,1],[203,2,160,0,"exports"],[203,9,160,7],[203,10,160,8,"Codec"],[203,15,160,13],[203,18,160,16,"Codec"],[203,23,160,21],[204,2,161,0,"exports"],[204,9,161,7],[204,10,161,8,"baseX"],[204,15,161,13],[204,18,161,16,"baseX"],[204,23,161,21],[205,2,162,0,"exports"],[205,9,162,7],[205,10,162,8,"from"],[205,14,162,12],[205,17,162,15,"from"],[205,21,162,19],[206,2,163,0,"exports"],[206,9,163,7],[206,10,163,8,"or"],[206,12,163,10],[206,15,163,13,"or"],[206,18,163,15],[207,2,164,0,"exports"],[207,9,164,7],[207,10,164,8,"rfc4648"],[207,17,164,15],[207,20,164,18,"rfc4648"],[207,27,164,25],[208,0,164,26],[208,3]],"functionMap":{"names":["<global>","Encoder","Encoder#constructor","Encoder#encode","Decoder","Decoder#constructor","Decoder#decode","Decoder#or","ComposedDecoder","ComposedDecoder#constructor","ComposedDecoder#or","ComposedDecoder#decode","or","Codec","Codec#constructor","Codec#encode","Codec#decode","from","baseX","from$argument_0.decode","decode","encode","rfc4648","from$argument_0.encode"],"mappings":"AAA;ACO;ECC;GDI;EEC;GFM;CDC;AIC;ECC;GDQ;EEC;GFS;EGC;GHE;CJC;AQC;ECC;GDE;EEC;GFE;EGC;GHQ;CRC;WYC;EZG;AaC;ECC;GDO;EEC;GFE;EGC;GHE;CbC;aiBC,2EjB;ckBC;YCM,kCD;ClBE;eoBC;CpB6B;eqBC;CrBuB;gBsBC;ICI;KDE;IHC;KGE;CtBE"}},"type":"js/module"}]}