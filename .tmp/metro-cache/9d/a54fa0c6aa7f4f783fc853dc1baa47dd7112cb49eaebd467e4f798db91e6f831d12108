{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var empty = new Uint8Array(0);\n  var toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n  var fromHex = hex => {\n    var hexes = hex.match(/../g);\n    return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n  };\n  var equals = (aa, bb) => {\n    if (aa === bb) return true;\n    if (aa.byteLength !== bb.byteLength) {\n      return false;\n    }\n    for (var ii = 0; ii < aa.byteLength; ii++) {\n      if (aa[ii] !== bb[ii]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var coerce = o => {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;\n    if (o instanceof ArrayBuffer) return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n      return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n  };\n  var isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n  var fromString = str => new TextEncoder().encode(str);\n  var toString = b => new TextDecoder().decode(b);\n  exports.coerce = coerce;\n  exports.empty = empty;\n  exports.equals = equals;\n  exports.fromHex = fromHex;\n  exports.fromString = fromString;\n  exports.isBinary = isBinary;\n  exports.toHex = toHex;\n  exports.toString = toString;\n});","lineCount":44,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,3,47,"value"],[5,9,3,52],[5,11,3,54],[6,2,3,59],[6,3,3,60],[6,4,3,61],[7,2,5,0],[7,6,5,6,"empty"],[7,11,5,11],[7,14,5,14],[7,18,5,18,"Uint8Array"],[7,28,5,28],[7,29,5,29],[7,30,5,30],[7,31,5,31],[8,2,6,0],[8,6,6,6,"toHex"],[8,11,6,11],[8,14,6,14,"d"],[8,15,6,15],[8,19,6,19,"d"],[8,20,6,20],[8,21,6,21,"reduce"],[8,27,6,27],[8,28,6,28],[8,29,6,29,"hex"],[8,32,6,32],[8,34,6,34,"byte"],[8,38,6,38],[8,43,6,43,"hex"],[8,46,6,46],[8,49,6,49,"byte"],[8,53,6,53],[8,54,6,54,"toString"],[8,62,6,62],[8,63,6,63],[8,65,6,65],[8,66,6,66],[8,67,6,67,"padStart"],[8,75,6,75],[8,76,6,76],[8,77,6,77],[8,79,6,79],[8,82,6,82],[8,83,6,83],[8,85,6,85],[8,87,6,87],[8,88,6,88],[9,2,7,0],[9,6,7,6,"fromHex"],[9,13,7,13],[9,16,7,16,"hex"],[9,19,7,19],[9,23,7,23],[10,4,8,2],[10,8,8,8,"hexes"],[10,13,8,13],[10,16,8,16,"hex"],[10,19,8,19],[10,20,8,20,"match"],[10,25,8,25],[10,26,8,26],[10,31,8,31],[10,32,8,32],[11,4,9,2],[11,11,9,9,"hexes"],[11,16,9,14],[11,19,9,17],[11,23,9,21,"Uint8Array"],[11,33,9,31],[11,34,9,32,"hexes"],[11,39,9,37],[11,40,9,38,"map"],[11,43,9,41],[11,44,9,42,"b"],[11,45,9,43],[11,49,9,47,"parseInt"],[11,57,9,55],[11,58,9,56,"b"],[11,59,9,57],[11,61,9,59],[11,63,9,61],[11,64,9,62],[11,65,9,63],[11,66,9,64],[11,69,9,67,"empty"],[11,74,9,72],[12,2,10,0],[12,3,10,1],[13,2,11,0],[13,6,11,6,"equals"],[13,12,11,12],[13,15,11,15,"equals"],[13,16,11,16,"aa"],[13,18,11,18],[13,20,11,20,"bb"],[13,22,11,22],[13,27,11,27],[14,4,12,2],[14,8,12,6,"aa"],[14,10,12,8],[14,15,12,13,"bb"],[14,17,12,15],[14,19,13,4],[14,26,13,11],[14,30,13,15],[15,4,14,2],[15,8,14,6,"aa"],[15,10,14,8],[15,11,14,9,"byteLength"],[15,21,14,19],[15,26,14,24,"bb"],[15,28,14,26],[15,29,14,27,"byteLength"],[15,39,14,37],[15,41,14,39],[16,6,15,4],[16,13,15,11],[16,18,15,16],[17,4,16,2],[18,4,17,2],[18,9,17,7],[18,13,17,11,"ii"],[18,15,17,13],[18,18,17,16],[18,19,17,17],[18,21,17,19,"ii"],[18,23,17,21],[18,26,17,24,"aa"],[18,28,17,26],[18,29,17,27,"byteLength"],[18,39,17,37],[18,41,17,39,"ii"],[18,43,17,41],[18,45,17,43],[18,47,17,45],[19,6,18,4],[19,10,18,8,"aa"],[19,12,18,10],[19,13,18,11,"ii"],[19,15,18,13],[19,16,18,14],[19,21,18,19,"bb"],[19,23,18,21],[19,24,18,22,"ii"],[19,26,18,24],[19,27,18,25],[19,29,18,27],[20,8,19,6],[20,15,19,13],[20,20,19,18],[21,6,20,4],[22,4,21,2],[23,4,22,2],[23,11,22,9],[23,15,22,13],[24,2,23,0],[24,3,23,1],[25,2,24,0],[25,6,24,6,"coerce"],[25,12,24,12],[25,15,24,15,"o"],[25,16,24,16],[25,20,24,20],[26,4,25,2],[26,8,25,6,"o"],[26,9,25,7],[26,21,25,19,"Uint8Array"],[26,31,25,29],[26,35,25,33,"o"],[26,36,25,34],[26,37,25,35,"constructor"],[26,48,25,46],[26,49,25,47,"name"],[26,53,25,51],[26,58,25,56],[26,70,25,68],[26,72,26,4],[26,79,26,11,"o"],[26,80,26,12],[27,4,27,2],[27,8,27,6,"o"],[27,9,27,7],[27,21,27,19,"ArrayBuffer"],[27,32,27,30],[27,34,28,4],[27,41,28,11],[27,45,28,15,"Uint8Array"],[27,55,28,25],[27,56,28,26,"o"],[27,57,28,27],[27,58,28,28],[28,4,29,2],[28,8,29,6,"ArrayBuffer"],[28,19,29,17],[28,20,29,18,"isView"],[28,26,29,24],[28,27,29,25,"o"],[28,28,29,26],[28,29,29,27],[28,31,29,29],[29,6,30,4],[29,13,30,11],[29,17,30,15,"Uint8Array"],[29,27,30,25],[29,28,30,26,"o"],[29,29,30,27],[29,30,30,28,"buffer"],[29,36,30,34],[29,38,30,36,"o"],[29,39,30,37],[29,40,30,38,"byteOffset"],[29,50,30,48],[29,52,30,50,"o"],[29,53,30,51],[29,54,30,52,"byteLength"],[29,64,30,62],[29,65,30,63],[30,4,31,2],[31,4,32,2],[31,10,32,8],[31,14,32,12,"Error"],[31,19,32,17],[31,20,32,18],[31,55,32,53],[31,56,32,54],[32,2,33,0],[32,3,33,1],[33,2,34,0],[33,6,34,6,"isBinary"],[33,14,34,14],[33,17,34,17,"o"],[33,18,34,18],[33,22,34,22,"o"],[33,23,34,23],[33,35,34,35,"ArrayBuffer"],[33,46,34,46],[33,50,34,50,"ArrayBuffer"],[33,61,34,61],[33,62,34,62,"isView"],[33,68,34,68],[33,69,34,69,"o"],[33,70,34,70],[33,71,34,71],[34,2,35,0],[34,6,35,6,"fromString"],[34,16,35,16],[34,19,35,19,"str"],[34,22,35,22],[34,26,35,26],[34,30,35,30,"TextEncoder"],[34,41,35,41],[34,42,35,42],[34,43,35,43],[34,44,35,44,"encode"],[34,50,35,50],[34,51,35,51,"str"],[34,54,35,54],[34,55,35,55],[35,2,36,0],[35,6,36,6,"toString"],[35,14,36,14],[35,17,36,17,"b"],[35,18,36,18],[35,22,36,22],[35,26,36,26,"TextDecoder"],[35,37,36,37],[35,38,36,38],[35,39,36,39],[35,40,36,40,"decode"],[35,46,36,46],[35,47,36,47,"b"],[35,48,36,48],[35,49,36,49],[36,2,38,0,"exports"],[36,9,38,7],[36,10,38,8,"coerce"],[36,16,38,14],[36,19,38,17,"coerce"],[36,25,38,23],[37,2,39,0,"exports"],[37,9,39,7],[37,10,39,8,"empty"],[37,15,39,13],[37,18,39,16,"empty"],[37,23,39,21],[38,2,40,0,"exports"],[38,9,40,7],[38,10,40,8,"equals"],[38,16,40,14],[38,19,40,17,"equals"],[38,25,40,23],[39,2,41,0,"exports"],[39,9,41,7],[39,10,41,8,"fromHex"],[39,17,41,15],[39,20,41,18,"fromHex"],[39,27,41,25],[40,2,42,0,"exports"],[40,9,42,7],[40,10,42,8,"fromString"],[40,20,42,18],[40,23,42,21,"fromString"],[40,33,42,31],[41,2,43,0,"exports"],[41,9,43,7],[41,10,43,8,"isBinary"],[41,18,43,16],[41,21,43,19,"isBinary"],[41,29,43,27],[42,2,44,0,"exports"],[42,9,44,7],[42,10,44,8,"toHex"],[42,15,44,13],[42,18,44,16,"toHex"],[42,23,44,21],[43,2,45,0,"exports"],[43,9,45,7],[43,10,45,8,"toString"],[43,18,45,16],[43,21,45,19,"toString"],[43,29,45,27],[44,0,45,28],[44,3]],"functionMap":{"names":["<global>","toHex","d.reduce$argument_0","fromHex","hexes.map$argument_0","equals","coerce","isBinary","fromString","toString"],"mappings":"AAA;cCK,cC,uDD,KD;gBGC;0CCE,oBD;CHC;eKC;CLY;eMC;CNS;iBOC,sDP;mBQC,oCR;iBSC,gCT"}},"type":"js/module"}]}