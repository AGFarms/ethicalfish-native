{"dependencies":[{"name":"../../errors/data.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":18,"index":180},"end":{"line":6,"column":49,"index":211}}],"key":"z5e+MyiTvqv8ZsjGYixElgqY1ro="}},{"name":"./isHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":19,"index":232},"end":{"line":7,"column":40,"index":253}}],"key":"ipCkFY78GruAjbNe+7GIZPJElAI="}},{"name":"./size.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":18,"index":273},"end":{"line":8,"column":38,"index":293}}],"key":"yJ4HFYZocrVEE05uTixO9JiQzQw="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.slice = slice;\n  exports.sliceBytes = sliceBytes;\n  exports.sliceHex = sliceHex;\n  var data_js_1 = require(_dependencyMap[0], \"../../errors/data.js\");\n  var isHex_js_1 = require(_dependencyMap[1], \"./isHex.js\");\n  var size_js_1 = require(_dependencyMap[2], \"./size.js\");\n  function slice(value, start, end) {\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      strict = _ref.strict;\n    if ((0, isHex_js_1.isHex)(value, {\n      strict: false\n    })) return sliceHex(value, start, end, {\n      strict\n    });\n    return sliceBytes(value, start, end, {\n      strict\n    });\n  }\n  function assertStartOffset(value, start) {\n    if (typeof start === 'number' && start > 0 && start > (0, size_js_1.size)(value) - 1) throw new data_js_1.SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: (0, size_js_1.size)(value)\n    });\n  }\n  function assertEndOffset(value, start, end) {\n    if (typeof start === 'number' && typeof end === 'number' && (0, size_js_1.size)(value) !== end - start) {\n      throw new data_js_1.SliceOffsetOutOfBoundsError({\n        offset: end,\n        position: 'end',\n        size: (0, size_js_1.size)(value)\n      });\n    }\n  }\n  function sliceBytes(value_, start, end) {\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      strict = _ref2.strict;\n    assertStartOffset(value_, start);\n    var value = value_.slice(start, end);\n    if (strict) assertEndOffset(value, start, end);\n    return value;\n  }\n  function sliceHex(value_, start, end) {\n    var _ref3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      strict = _ref3.strict;\n    assertStartOffset(value_, start);\n    var value = `0x${value_.replace('0x', '').slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;\n    if (strict) assertEndOffset(value, start, end);\n    return value;\n  }\n});","lineCount":57,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"slice"],[7,15,3,13],[7,18,3,16,"slice"],[7,23,3,21],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"sliceBytes"],[8,20,4,18],[8,23,4,21,"sliceBytes"],[8,33,4,31],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"sliceHex"],[9,18,5,16],[9,21,5,19,"sliceHex"],[9,29,5,27],[10,2,6,0],[10,6,6,6,"data_js_1"],[10,15,6,15],[10,18,6,18,"require"],[10,25,6,25],[10,26,6,25,"_dependencyMap"],[10,40,6,25],[10,67,6,48],[10,68,6,49],[11,2,7,0],[11,6,7,6,"isHex_js_1"],[11,16,7,16],[11,19,7,19,"require"],[11,26,7,26],[11,27,7,26,"_dependencyMap"],[11,41,7,26],[11,58,7,39],[11,59,7,40],[12,2,8,0],[12,6,8,6,"size_js_1"],[12,15,8,15],[12,18,8,18,"require"],[12,25,8,25],[12,26,8,25,"_dependencyMap"],[12,40,8,25],[12,56,8,37],[12,57,8,38],[13,2,9,0],[13,11,9,9,"slice"],[13,16,9,14,"slice"],[13,17,9,15,"value"],[13,22,9,20],[13,24,9,22,"start"],[13,29,9,27],[13,31,9,29,"end"],[13,34,9,32],[13,36,9,51],[14,4,9,51],[14,8,9,51,"_ref"],[14,12,9,51],[14,15,9,51,"arguments"],[14,24,9,51],[14,25,9,51,"length"],[14,31,9,51],[14,39,9,51,"arguments"],[14,48,9,51],[14,56,9,51,"undefined"],[14,65,9,51],[14,68,9,51,"arguments"],[14,77,9,51],[14,83,9,47],[14,84,9,48],[14,85,9,49],[15,6,9,36,"strict"],[15,12,9,42],[15,15,9,42,"_ref"],[15,19,9,42],[15,20,9,36,"strict"],[15,26,9,42],[16,4,10,4],[16,8,10,8],[16,9,10,9],[16,10,10,10],[16,12,10,12,"isHex_js_1"],[16,22,10,22],[16,23,10,23,"isHex"],[16,28,10,28],[16,30,10,30,"value"],[16,35,10,35],[16,37,10,37],[17,6,10,39,"strict"],[17,12,10,45],[17,14,10,47],[18,4,10,53],[18,5,10,54],[18,6,10,55],[18,8,11,8],[18,15,11,15,"sliceHex"],[18,23,11,23],[18,24,11,24,"value"],[18,29,11,29],[18,31,11,31,"start"],[18,36,11,36],[18,38,11,38,"end"],[18,41,11,41],[18,43,11,43],[19,6,12,12,"strict"],[20,4,13,8],[20,5,13,9],[20,6,13,10],[21,4,14,4],[21,11,14,11,"sliceBytes"],[21,21,14,21],[21,22,14,22,"value"],[21,27,14,27],[21,29,14,29,"start"],[21,34,14,34],[21,36,14,36,"end"],[21,39,14,39],[21,41,14,41],[22,6,15,8,"strict"],[23,4,16,4],[23,5,16,5],[23,6,16,6],[24,2,17,0],[25,2,18,0],[25,11,18,9,"assertStartOffset"],[25,28,18,26,"assertStartOffset"],[25,29,18,27,"value"],[25,34,18,32],[25,36,18,34,"start"],[25,41,18,39],[25,43,18,41],[26,4,19,4],[26,8,19,8],[26,15,19,15,"start"],[26,20,19,20],[26,25,19,25],[26,33,19,33],[26,37,19,37,"start"],[26,42,19,42],[26,45,19,45],[26,46,19,46],[26,50,19,50,"start"],[26,55,19,55],[26,58,19,58],[26,59,19,59],[26,60,19,60],[26,62,19,62,"size_js_1"],[26,71,19,71],[26,72,19,72,"size"],[26,76,19,76],[26,78,19,78,"value"],[26,83,19,83],[26,84,19,84],[26,87,19,87],[26,88,19,88],[26,90,20,8],[26,96,20,14],[26,100,20,18,"data_js_1"],[26,109,20,27],[26,110,20,28,"SliceOffsetOutOfBoundsError"],[26,137,20,55],[26,138,20,56],[27,6,21,12,"offset"],[27,12,21,18],[27,14,21,20,"start"],[27,19,21,25],[28,6,22,12,"position"],[28,14,22,20],[28,16,22,22],[28,23,22,29],[29,6,23,12,"size"],[29,10,23,16],[29,12,23,18],[29,13,23,19],[29,14,23,20],[29,16,23,22,"size_js_1"],[29,25,23,31],[29,26,23,32,"size"],[29,30,23,36],[29,32,23,38,"value"],[29,37,23,43],[30,4,24,8],[30,5,24,9],[30,6,24,10],[31,2,25,0],[32,2,26,0],[32,11,26,9,"assertEndOffset"],[32,26,26,24,"assertEndOffset"],[32,27,26,25,"value"],[32,32,26,30],[32,34,26,32,"start"],[32,39,26,37],[32,41,26,39,"end"],[32,44,26,42],[32,46,26,44],[33,4,27,4],[33,8,27,8],[33,15,27,15,"start"],[33,20,27,20],[33,25,27,25],[33,33,27,33],[33,37,28,8],[33,44,28,15,"end"],[33,47,28,18],[33,52,28,23],[33,60,28,31],[33,64,29,8],[33,65,29,9],[33,66,29,10],[33,68,29,12,"size_js_1"],[33,77,29,21],[33,78,29,22,"size"],[33,82,29,26],[33,84,29,28,"value"],[33,89,29,33],[33,90,29,34],[33,95,29,39,"end"],[33,98,29,42],[33,101,29,45,"start"],[33,106,29,50],[33,108,29,52],[34,6,30,8],[34,12,30,14],[34,16,30,18,"data_js_1"],[34,25,30,27],[34,26,30,28,"SliceOffsetOutOfBoundsError"],[34,53,30,55],[34,54,30,56],[35,8,31,12,"offset"],[35,14,31,18],[35,16,31,20,"end"],[35,19,31,23],[36,8,32,12,"position"],[36,16,32,20],[36,18,32,22],[36,23,32,27],[37,8,33,12,"size"],[37,12,33,16],[37,14,33,18],[37,15,33,19],[37,16,33,20],[37,18,33,22,"size_js_1"],[37,27,33,31],[37,28,33,32,"size"],[37,32,33,36],[37,34,33,38,"value"],[37,39,33,43],[38,6,34,8],[38,7,34,9],[38,8,34,10],[39,4,35,4],[40,2,36,0],[41,2,37,0],[41,11,37,9,"sliceBytes"],[41,21,37,19,"sliceBytes"],[41,22,37,20,"value_"],[41,28,37,26],[41,30,37,28,"start"],[41,35,37,33],[41,37,37,35,"end"],[41,40,37,38],[41,42,37,57],[42,4,37,57],[42,8,37,57,"_ref2"],[42,13,37,57],[42,16,37,57,"arguments"],[42,25,37,57],[42,26,37,57,"length"],[42,32,37,57],[42,40,37,57,"arguments"],[42,49,37,57],[42,57,37,57,"undefined"],[42,66,37,57],[42,69,37,57,"arguments"],[42,78,37,57],[42,84,37,53],[42,85,37,54],[42,86,37,55],[43,6,37,42,"strict"],[43,12,37,48],[43,15,37,48,"_ref2"],[43,20,37,48],[43,21,37,42,"strict"],[43,27,37,48],[44,4,38,4,"assertStartOffset"],[44,21,38,21],[44,22,38,22,"value_"],[44,28,38,28],[44,30,38,30,"start"],[44,35,38,35],[44,36,38,36],[45,4,39,4],[45,8,39,10,"value"],[45,13,39,15],[45,16,39,18,"value_"],[45,22,39,24],[45,23,39,25,"slice"],[45,28,39,30],[45,29,39,31,"start"],[45,34,39,36],[45,36,39,38,"end"],[45,39,39,41],[45,40,39,42],[46,4,40,4],[46,8,40,8,"strict"],[46,14,40,14],[46,16,41,8,"assertEndOffset"],[46,31,41,23],[46,32,41,24,"value"],[46,37,41,29],[46,39,41,31,"start"],[46,44,41,36],[46,46,41,38,"end"],[46,49,41,41],[46,50,41,42],[47,4,42,4],[47,11,42,11,"value"],[47,16,42,16],[48,2,43,0],[49,2,44,0],[49,11,44,9,"sliceHex"],[49,19,44,17,"sliceHex"],[49,20,44,18,"value_"],[49,26,44,24],[49,28,44,26,"start"],[49,33,44,31],[49,35,44,33,"end"],[49,38,44,36],[49,40,44,55],[50,4,44,55],[50,8,44,55,"_ref3"],[50,13,44,55],[50,16,44,55,"arguments"],[50,25,44,55],[50,26,44,55,"length"],[50,32,44,55],[50,40,44,55,"arguments"],[50,49,44,55],[50,57,44,55,"undefined"],[50,66,44,55],[50,69,44,55,"arguments"],[50,78,44,55],[50,84,44,51],[50,85,44,52],[50,86,44,53],[51,6,44,40,"strict"],[51,12,44,46],[51,15,44,46,"_ref3"],[51,20,44,46],[51,21,44,40,"strict"],[51,27,44,46],[52,4,45,4,"assertStartOffset"],[52,21,45,21],[52,22,45,22,"value_"],[52,28,45,28],[52,30,45,30,"start"],[52,35,45,35],[52,36,45,36],[53,4,46,4],[53,8,46,10,"value"],[53,13,46,15],[53,16,46,18],[53,21,46,23,"value_"],[53,27,46,29],[53,28,47,9,"replace"],[53,35,47,16],[53,36,47,17],[53,40,47,21],[53,42,47,23],[53,44,47,25],[53,45,47,26],[53,46,48,9,"slice"],[53,51,48,14],[53,52,48,15],[53,53,48,16,"start"],[53,58,48,21],[53,62,48,25],[53,63,48,26],[53,67,48,30],[53,68,48,31],[53,70,48,33],[53,71,48,34,"end"],[53,74,48,37],[53,78,48,41,"value_"],[53,84,48,47],[53,85,48,48,"length"],[53,91,48,54],[53,95,48,58],[53,96,48,59],[53,97,48,60],[53,99,48,62],[54,4,49,4],[54,8,49,8,"strict"],[54,14,49,14],[54,16,50,8,"assertEndOffset"],[54,31,50,23],[54,32,50,24,"value"],[54,37,50,29],[54,39,50,31,"start"],[54,44,50,36],[54,46,50,38,"end"],[54,49,50,41],[54,50,50,42],[55,4,51,4],[55,11,51,11,"value"],[55,16,51,16],[56,2,52,0],[57,0,52,1],[57,3]],"functionMap":{"names":["<global>","slice","assertStartOffset","assertEndOffset","sliceBytes","sliceHex"],"mappings":"AAA;ACQ;CDQ;AEC;CFO;AGC;CHU;AIC;CJM;AKC;CLQ"}},"type":"js/module"}]}