{"dependencies":[{"name":"../Bytes.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":10,"column":14,"index":329},"end":{"line":10,"column":36,"index":351}}],"key":"qk45s9VMKz2BtcBim9dTnbQBeuQ="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.charCodeMap = void 0;\n  exports.assertSize = assertSize;\n  exports.assertStartOffset = assertStartOffset;\n  exports.assertEndOffset = assertEndOffset;\n  exports.charCodeToBase16 = charCodeToBase16;\n  exports.pad = pad;\n  exports.trim = trim;\n  var Bytes = require(_dependencyMap[0], \"../Bytes.js\");\n  function assertSize(bytes, size_) {\n    if (Bytes.size(bytes) > size_) throw new Bytes.SizeOverflowError({\n      givenSize: Bytes.size(bytes),\n      maxSize: size_\n    });\n  }\n  function assertStartOffset(value, start) {\n    if (typeof start === 'number' && start > 0 && start > Bytes.size(value) - 1) throw new Bytes.SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: Bytes.size(value)\n    });\n  }\n  function assertEndOffset(value, start, end) {\n    if (typeof start === 'number' && typeof end === 'number' && Bytes.size(value) !== end - start) {\n      throw new Bytes.SliceOffsetOutOfBoundsError({\n        offset: end,\n        position: 'end',\n        size: Bytes.size(value)\n      });\n    }\n  }\n  exports.charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n  };\n  function charCodeToBase16(char) {\n    if (char >= exports.charCodeMap.zero && char <= exports.charCodeMap.nine) return char - exports.charCodeMap.zero;\n    if (char >= exports.charCodeMap.A && char <= exports.charCodeMap.F) return char - (exports.charCodeMap.A - 10);\n    if (char >= exports.charCodeMap.a && char <= exports.charCodeMap.f) return char - (exports.charCodeMap.a - 10);\n    return undefined;\n  }\n  function pad(bytes) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dir = options.dir,\n      _options$size = options.size,\n      size = _options$size === void 0 ? 32 : _options$size;\n    if (size === 0) return bytes;\n    if (bytes.length > size) throw new Bytes.SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size,\n      type: 'Bytes'\n    });\n    var paddedBytes = new Uint8Array(size);\n    for (var i = 0; i < size; i++) {\n      var padEnd = dir === 'right';\n      paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n  }\n  function trim(value) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$dir = options.dir,\n      dir = _options$dir === void 0 ? 'left' : _options$dir;\n    var data = value;\n    var sliceLength = 0;\n    for (var i = 0; i < data.length - 1; i++) {\n      if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0') sliceLength++;else break;\n    }\n    data = dir === 'left' ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n    return data;\n  }\n});","lineCount":81,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"charCodeMap"],[7,21,3,19],[7,24,3,22],[7,29,3,27],[7,30,3,28],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"assertSize"],[8,20,4,18],[8,23,4,21,"assertSize"],[8,33,4,31],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"assertStartOffset"],[9,27,5,25],[9,30,5,28,"assertStartOffset"],[9,47,5,45],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"assertEndOffset"],[10,25,6,23],[10,28,6,26,"assertEndOffset"],[10,43,6,41],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"charCodeToBase16"],[11,26,7,24],[11,29,7,27,"charCodeToBase16"],[11,45,7,43],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"pad"],[12,13,8,11],[12,16,8,14,"pad"],[12,19,8,17],[13,2,9,0,"exports"],[13,9,9,7],[13,10,9,8,"trim"],[13,14,9,12],[13,17,9,15,"trim"],[13,21,9,19],[14,2,10,0],[14,6,10,6,"Bytes"],[14,11,10,11],[14,14,10,14,"require"],[14,21,10,21],[14,22,10,21,"_dependencyMap"],[14,36,10,21],[14,54,10,35],[14,55,10,36],[15,2,11,0],[15,11,11,9,"assertSize"],[15,21,11,19,"assertSize"],[15,22,11,20,"bytes"],[15,27,11,25],[15,29,11,27,"size_"],[15,34,11,32],[15,36,11,34],[16,4,12,4],[16,8,12,8,"Bytes"],[16,13,12,13],[16,14,12,14,"size"],[16,18,12,18],[16,19,12,19,"bytes"],[16,24,12,24],[16,25,12,25],[16,28,12,28,"size_"],[16,33,12,33],[16,35,13,8],[16,41,13,14],[16,45,13,18,"Bytes"],[16,50,13,23],[16,51,13,24,"SizeOverflowError"],[16,68,13,41],[16,69,13,42],[17,6,14,12,"givenSize"],[17,15,14,21],[17,17,14,23,"Bytes"],[17,22,14,28],[17,23,14,29,"size"],[17,27,14,33],[17,28,14,34,"bytes"],[17,33,14,39],[17,34,14,40],[18,6,15,12,"maxSize"],[18,13,15,19],[18,15,15,21,"size_"],[19,4,16,8],[19,5,16,9],[19,6,16,10],[20,2,17,0],[21,2,18,0],[21,11,18,9,"assertStartOffset"],[21,28,18,26,"assertStartOffset"],[21,29,18,27,"value"],[21,34,18,32],[21,36,18,34,"start"],[21,41,18,39],[21,43,18,41],[22,4,19,4],[22,8,19,8],[22,15,19,15,"start"],[22,20,19,20],[22,25,19,25],[22,33,19,33],[22,37,19,37,"start"],[22,42,19,42],[22,45,19,45],[22,46,19,46],[22,50,19,50,"start"],[22,55,19,55],[22,58,19,58,"Bytes"],[22,63,19,63],[22,64,19,64,"size"],[22,68,19,68],[22,69,19,69,"value"],[22,74,19,74],[22,75,19,75],[22,78,19,78],[22,79,19,79],[22,81,20,8],[22,87,20,14],[22,91,20,18,"Bytes"],[22,96,20,23],[22,97,20,24,"SliceOffsetOutOfBoundsError"],[22,124,20,51],[22,125,20,52],[23,6,21,12,"offset"],[23,12,21,18],[23,14,21,20,"start"],[23,19,21,25],[24,6,22,12,"position"],[24,14,22,20],[24,16,22,22],[24,23,22,29],[25,6,23,12,"size"],[25,10,23,16],[25,12,23,18,"Bytes"],[25,17,23,23],[25,18,23,24,"size"],[25,22,23,28],[25,23,23,29,"value"],[25,28,23,34],[26,4,24,8],[26,5,24,9],[26,6,24,10],[27,2,25,0],[28,2,26,0],[28,11,26,9,"assertEndOffset"],[28,26,26,24,"assertEndOffset"],[28,27,26,25,"value"],[28,32,26,30],[28,34,26,32,"start"],[28,39,26,37],[28,41,26,39,"end"],[28,44,26,42],[28,46,26,44],[29,4,27,4],[29,8,27,8],[29,15,27,15,"start"],[29,20,27,20],[29,25,27,25],[29,33,27,33],[29,37,28,8],[29,44,28,15,"end"],[29,47,28,18],[29,52,28,23],[29,60,28,31],[29,64,29,8,"Bytes"],[29,69,29,13],[29,70,29,14,"size"],[29,74,29,18],[29,75,29,19,"value"],[29,80,29,24],[29,81,29,25],[29,86,29,30,"end"],[29,89,29,33],[29,92,29,36,"start"],[29,97,29,41],[29,99,29,43],[30,6,30,8],[30,12,30,14],[30,16,30,18,"Bytes"],[30,21,30,23],[30,22,30,24,"SliceOffsetOutOfBoundsError"],[30,49,30,51],[30,50,30,52],[31,8,31,12,"offset"],[31,14,31,18],[31,16,31,20,"end"],[31,19,31,23],[32,8,32,12,"position"],[32,16,32,20],[32,18,32,22],[32,23,32,27],[33,8,33,12,"size"],[33,12,33,16],[33,14,33,18,"Bytes"],[33,19,33,23],[33,20,33,24,"size"],[33,24,33,28],[33,25,33,29,"value"],[33,30,33,34],[34,6,34,8],[34,7,34,9],[34,8,34,10],[35,4,35,4],[36,2,36,0],[37,2,37,0,"exports"],[37,9,37,7],[37,10,37,8,"charCodeMap"],[37,21,37,19],[37,24,37,22],[38,4,38,4,"zero"],[38,8,38,8],[38,10,38,10],[38,12,38,12],[39,4,39,4,"nine"],[39,8,39,8],[39,10,39,10],[39,12,39,12],[40,4,40,4,"A"],[40,5,40,5],[40,7,40,7],[40,9,40,9],[41,4,41,4,"F"],[41,5,41,5],[41,7,41,7],[41,9,41,9],[42,4,42,4,"a"],[42,5,42,5],[42,7,42,7],[42,9,42,9],[43,4,43,4,"f"],[43,5,43,5],[43,7,43,7],[44,2,44,0],[44,3,44,1],[45,2,45,0],[45,11,45,9,"charCodeToBase16"],[45,27,45,25,"charCodeToBase16"],[45,28,45,26,"char"],[45,32,45,30],[45,34,45,32],[46,4,46,4],[46,8,46,8,"char"],[46,12,46,12],[46,16,46,16,"exports"],[46,23,46,23],[46,24,46,24,"charCodeMap"],[46,35,46,35],[46,36,46,36,"zero"],[46,40,46,40],[46,44,46,44,"char"],[46,48,46,48],[46,52,46,52,"exports"],[46,59,46,59],[46,60,46,60,"charCodeMap"],[46,71,46,71],[46,72,46,72,"nine"],[46,76,46,76],[46,78,47,8],[46,85,47,15,"char"],[46,89,47,19],[46,92,47,22,"exports"],[46,99,47,29],[46,100,47,30,"charCodeMap"],[46,111,47,41],[46,112,47,42,"zero"],[46,116,47,46],[47,4,48,4],[47,8,48,8,"char"],[47,12,48,12],[47,16,48,16,"exports"],[47,23,48,23],[47,24,48,24,"charCodeMap"],[47,35,48,35],[47,36,48,36,"A"],[47,37,48,37],[47,41,48,41,"char"],[47,45,48,45],[47,49,48,49,"exports"],[47,56,48,56],[47,57,48,57,"charCodeMap"],[47,68,48,68],[47,69,48,69,"F"],[47,70,48,70],[47,72,49,8],[47,79,49,15,"char"],[47,83,49,19],[47,87,49,23,"exports"],[47,94,49,30],[47,95,49,31,"charCodeMap"],[47,106,49,42],[47,107,49,43,"A"],[47,108,49,44],[47,111,49,47],[47,113,49,49],[47,114,49,50],[48,4,50,4],[48,8,50,8,"char"],[48,12,50,12],[48,16,50,16,"exports"],[48,23,50,23],[48,24,50,24,"charCodeMap"],[48,35,50,35],[48,36,50,36,"a"],[48,37,50,37],[48,41,50,41,"char"],[48,45,50,45],[48,49,50,49,"exports"],[48,56,50,56],[48,57,50,57,"charCodeMap"],[48,68,50,68],[48,69,50,69,"f"],[48,70,50,70],[48,72,51,8],[48,79,51,15,"char"],[48,83,51,19],[48,87,51,23,"exports"],[48,94,51,30],[48,95,51,31,"charCodeMap"],[48,106,51,42],[48,107,51,43,"a"],[48,108,51,44],[48,111,51,47],[48,113,51,49],[48,114,51,50],[49,4,52,4],[49,11,52,11,"undefined"],[49,20,52,20],[50,2,53,0],[51,2,54,0],[51,11,54,9,"pad"],[51,14,54,12,"pad"],[51,15,54,13,"bytes"],[51,20,54,18],[51,22,54,34],[52,4,54,34],[52,8,54,20,"options"],[52,15,54,27],[52,18,54,27,"arguments"],[52,27,54,27],[52,28,54,27,"length"],[52,34,54,27],[52,42,54,27,"arguments"],[52,51,54,27],[52,59,54,27,"undefined"],[52,68,54,27],[52,71,54,27,"arguments"],[52,80,54,27],[52,86,54,30],[52,87,54,31],[52,88,54,32],[53,4,55,4],[53,8,55,12,"dir"],[53,11,55,15],[53,14,55,31,"options"],[53,21,55,38],[53,22,55,12,"dir"],[53,25,55,15],[54,6,55,15,"_options$size"],[54,19,55,15],[54,22,55,31,"options"],[54,29,55,38],[54,30,55,17,"size"],[54,34,55,21],[55,6,55,17,"size"],[55,10,55,21],[55,13,55,21,"_options$size"],[55,26,55,21],[55,40,55,24],[55,42,55,26],[55,45,55,26,"_options$size"],[55,58,55,26],[56,4,56,4],[56,8,56,8,"size"],[56,12,56,12],[56,17,56,17],[56,18,56,18],[56,20,57,8],[56,27,57,15,"bytes"],[56,32,57,20],[57,4,58,4],[57,8,58,8,"bytes"],[57,13,58,13],[57,14,58,14,"length"],[57,20,58,20],[57,23,58,23,"size"],[57,27,58,27],[57,29,59,8],[57,35,59,14],[57,39,59,18,"Bytes"],[57,44,59,23],[57,45,59,24,"SizeExceedsPaddingSizeError"],[57,72,59,51],[57,73,59,52],[58,6,60,12,"size"],[58,10,60,16],[58,12,60,18,"bytes"],[58,17,60,23],[58,18,60,24,"length"],[58,24,60,30],[59,6,61,12,"targetSize"],[59,16,61,22],[59,18,61,24,"size"],[59,22,61,28],[60,6,62,12,"type"],[60,10,62,16],[60,12,62,18],[61,4,63,8],[61,5,63,9],[61,6,63,10],[62,4,64,4],[62,8,64,10,"paddedBytes"],[62,19,64,21],[62,22,64,24],[62,26,64,28,"Uint8Array"],[62,36,64,38],[62,37,64,39,"size"],[62,41,64,43],[62,42,64,44],[63,4,65,4],[63,9,65,9],[63,13,65,13,"i"],[63,14,65,14],[63,17,65,17],[63,18,65,18],[63,20,65,20,"i"],[63,21,65,21],[63,24,65,24,"size"],[63,28,65,28],[63,30,65,30,"i"],[63,31,65,31],[63,33,65,33],[63,35,65,35],[64,6,66,8],[64,10,66,14,"padEnd"],[64,16,66,20],[64,19,66,23,"dir"],[64,22,66,26],[64,27,66,31],[64,34,66,38],[65,6,67,8,"paddedBytes"],[65,17,67,19],[65,18,67,20,"padEnd"],[65,24,67,26],[65,27,67,29,"i"],[65,28,67,30],[65,31,67,33,"size"],[65,35,67,37],[65,38,67,40,"i"],[65,39,67,41],[65,42,67,44],[65,43,67,45],[65,44,67,46],[65,47,68,12,"bytes"],[65,52,68,17],[65,53,68,18,"padEnd"],[65,59,68,24],[65,62,68,27,"i"],[65,63,68,28],[65,66,68,31,"bytes"],[65,71,68,36],[65,72,68,37,"length"],[65,78,68,43],[65,81,68,46,"i"],[65,82,68,47],[65,85,68,50],[65,86,68,51],[65,87,68,52],[66,4,69,4],[67,4,70,4],[67,11,70,11,"paddedBytes"],[67,22,70,22],[68,2,71,0],[69,2,72,0],[69,11,72,9,"trim"],[69,15,72,13,"trim"],[69,16,72,14,"value"],[69,21,72,19],[69,23,72,35],[70,4,72,35],[70,8,72,21,"options"],[70,15,72,28],[70,18,72,28,"arguments"],[70,27,72,28],[70,28,72,28,"length"],[70,34,72,28],[70,42,72,28,"arguments"],[70,51,72,28],[70,59,72,28,"undefined"],[70,68,72,28],[70,71,72,28,"arguments"],[70,80,72,28],[70,86,72,31],[70,87,72,32],[70,88,72,33],[71,4,73,4],[71,8,73,4,"_options$dir"],[71,20,73,4],[71,23,73,29,"options"],[71,30,73,36],[71,31,73,12,"dir"],[71,34,73,15],[72,6,73,12,"dir"],[72,9,73,15],[72,12,73,15,"_options$dir"],[72,24,73,15],[72,38,73,18],[72,44,73,24],[72,47,73,24,"_options$dir"],[72,59,73,24],[73,4,74,4],[73,8,74,8,"data"],[73,12,74,12],[73,15,74,15,"value"],[73,20,74,20],[74,4,75,4],[74,8,75,8,"sliceLength"],[74,19,75,19],[74,22,75,22],[74,23,75,23],[75,4,76,4],[75,9,76,9],[75,13,76,13,"i"],[75,14,76,14],[75,17,76,17],[75,18,76,18],[75,20,76,20,"i"],[75,21,76,21],[75,24,76,24,"data"],[75,28,76,28],[75,29,76,29,"length"],[75,35,76,35],[75,38,76,38],[75,39,76,39],[75,41,76,41,"i"],[75,42,76,42],[75,44,76,44],[75,46,76,46],[76,6,77,8],[76,10,77,12,"data"],[76,14,77,16],[76,15,77,17,"dir"],[76,18,77,20],[76,23,77,25],[76,29,77,31],[76,32,77,34,"i"],[76,33,77,35],[76,36,77,38,"data"],[76,40,77,42],[76,41,77,43,"length"],[76,47,77,49],[76,50,77,52,"i"],[76,51,77,53],[76,54,77,56],[76,55,77,57],[76,56,77,58],[76,57,77,59,"toString"],[76,65,77,67],[76,66,77,68],[76,67,77,69],[76,72,77,74],[76,75,77,77],[76,77,78,12,"sliceLength"],[76,88,78,23],[76,90,78,25],[76,91,78,26],[76,96,80,12],[77,4,81,4],[78,4,82,4,"data"],[78,8,82,8],[78,11,83,8,"dir"],[78,14,83,11],[78,19,83,16],[78,25,83,22],[78,28,84,14,"data"],[78,32,84,18],[78,33,84,19,"slice"],[78,38,84,24],[78,39,84,25,"sliceLength"],[78,50,84,36],[78,51,84,37],[78,54,85,14,"data"],[78,58,85,18],[78,59,85,19,"slice"],[78,64,85,24],[78,65,85,25],[78,66,85,26],[78,68,85,28,"data"],[78,72,85,32],[78,73,85,33,"length"],[78,79,85,39],[78,82,85,42,"sliceLength"],[78,93,85,53],[78,94,85,54],[79,4,86,4],[79,11,86,11,"data"],[79,15,86,15],[80,2,87,0],[81,0,87,1],[81,3]],"functionMap":{"names":["<global>","assertSize","assertStartOffset","assertEndOffset","charCodeToBase16","pad","trim"],"mappings":"AAA;ACU;CDM;AEC;CFO;AGC;CHU;AIS;CJQ;AKC;CLiB;AMC;CNe"}},"type":"js/module"}]}