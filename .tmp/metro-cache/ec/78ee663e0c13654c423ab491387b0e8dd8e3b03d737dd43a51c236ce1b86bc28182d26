{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":36,"column":44,"index":1752}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"../data/isHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":19,"index":141},"end":{"line":4,"column":46,"index":168}}],"key":"R8qgJsJhdu+CmE/WnBMonx8mlek="}},{"name":"../encoding/fromHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":21,"index":191},"end":{"line":5,"column":54,"index":224}}],"key":"ywyZK3J50+SFp9lslgkEXztZmXA="}},{"name":"../encoding/toHex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":19,"index":245},"end":{"line":6,"column":50,"index":276}}],"key":"bRt+1vooOX12K5i1W+v01PrrHLA="}},{"name":"@noble/curves/secp256k1","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":61,"index":481},"end":{"line":9,"column":95,"index":515}}],"key":"7jiBkJ2sIIt8cJMcDwzx/1wwwSE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _asyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.recoverPublicKey = recoverPublicKey;\n  var isHex_js_1 = require(_dependencyMap[1], \"../data/isHex.js\");\n  var fromHex_js_1 = require(_dependencyMap[2], \"../encoding/fromHex.js\");\n  var toHex_js_1 = require(_dependencyMap[3], \"../encoding/toHex.js\");\n  function recoverPublicKey(_x) {\n    return _recoverPublicKey.apply(this, arguments);\n  }\n  function _recoverPublicKey() {\n    _recoverPublicKey = _asyncToGenerator(function* (_ref) {\n      var hash = _ref.hash,\n        signature = _ref.signature;\n      var hashHex = (0, isHex_js_1.isHex)(hash) ? hash : (0, toHex_js_1.toHex)(hash);\n      var _yield$Promise$resolv = yield Promise.resolve().then(() => require(_dependencyMap[4], \"@noble/curves/secp256k1\")),\n        secp256k1 = _yield$Promise$resolv.secp256k1;\n      var signature_ = (() => {\n        if (typeof signature === 'object' && 'r' in signature && 's' in signature) {\n          var r = signature.r,\n            s = signature.s,\n            v = signature.v,\n            yParity = signature.yParity;\n          var _yParityOrV = Number(yParity ?? v);\n          var _recoveryBit = toRecoveryBit(_yParityOrV);\n          return new secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(s)).addRecoveryBit(_recoveryBit);\n        }\n        var signatureHex = (0, isHex_js_1.isHex)(signature) ? signature : (0, toHex_js_1.toHex)(signature);\n        var yParityOrV = (0, fromHex_js_1.hexToNumber)(`0x${signatureHex.slice(130)}`);\n        var recoveryBit = toRecoveryBit(yParityOrV);\n        return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);\n      })();\n      var publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);\n      return `0x${publicKey}`;\n    });\n    return _recoverPublicKey.apply(this, arguments);\n  }\n  function toRecoveryBit(yParityOrV) {\n    if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV;\n    if (yParityOrV === 27) return 0;\n    if (yParityOrV === 28) return 1;\n    throw new Error('Invalid yParityOrV value');\n  }\n});","lineCount":48,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"require"],[4,33,1,13],[4,34,1,13,"_dependencyMap"],[4,48,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"recoverPublicKey"],[8,26,3,24],[8,29,3,27,"recoverPublicKey"],[8,45,3,43],[9,2,4,0],[9,6,4,6,"isHex_js_1"],[9,16,4,16],[9,19,4,19,"require"],[9,26,4,26],[9,27,4,26,"_dependencyMap"],[9,41,4,26],[9,64,4,45],[9,65,4,46],[10,2,5,0],[10,6,5,6,"fromHex_js_1"],[10,18,5,18],[10,21,5,21,"require"],[10,28,5,28],[10,29,5,28,"_dependencyMap"],[10,43,5,28],[10,72,5,53],[10,73,5,54],[11,2,6,0],[11,6,6,6,"toHex_js_1"],[11,16,6,16],[11,19,6,19,"require"],[11,26,6,26],[11,27,6,26,"_dependencyMap"],[11,41,6,26],[11,68,6,49],[11,69,6,50],[12,2,6,51],[12,11,7,15,"recoverPublicKey"],[12,27,7,31,"recoverPublicKey"],[12,28,7,31,"_x"],[12,30,7,31],[13,4,7,31],[13,11,7,31,"_recoverPublicKey"],[13,28,7,31],[13,29,7,31,"apply"],[13,34,7,31],[13,41,7,31,"arguments"],[13,50,7,31],[14,2,7,31],[15,2,7,31],[15,11,7,31,"_recoverPublicKey"],[15,29,7,31],[16,4,7,31,"_recoverPublicKey"],[16,21,7,31],[16,24,7,31,"_asyncToGenerator"],[16,41,7,31],[16,42,7,0],[16,53,7,0,"_ref"],[16,57,7,0],[16,59,7,54],[17,6,7,54],[17,10,7,34,"hash"],[17,14,7,38],[17,17,7,38,"_ref"],[17,21,7,38],[17,22,7,34,"hash"],[17,26,7,38],[18,8,7,40,"signature"],[18,17,7,49],[18,20,7,49,"_ref"],[18,24,7,49],[18,25,7,40,"signature"],[18,34,7,49],[19,6,8,4],[19,10,8,10,"hashHex"],[19,17,8,17],[19,20,8,20],[19,21,8,21],[19,22,8,22],[19,24,8,24,"isHex_js_1"],[19,34,8,34],[19,35,8,35,"isHex"],[19,40,8,40],[19,42,8,42,"hash"],[19,46,8,46],[19,47,8,47],[19,50,8,50,"hash"],[19,54,8,54],[19,57,8,57],[19,58,8,58],[19,59,8,59],[19,61,8,61,"toHex_js_1"],[19,71,8,71],[19,72,8,72,"toHex"],[19,77,8,77],[19,79,8,79,"hash"],[19,83,8,83],[19,84,8,84],[20,6,9,4],[20,10,9,4,"_yield$Promise$resolv"],[20,31,9,4],[20,40,9,32,"Promise"],[20,47,9,39],[20,48,9,40,"resolve"],[20,55,9,47],[20,56,9,48],[20,57,9,49],[20,58,9,50,"then"],[20,62,9,54],[20,63,9,55],[20,69,9,61,"require"],[20,76,9,68],[20,77,9,68,"_dependencyMap"],[20,91,9,68],[20,121,9,94],[20,122,9,95],[20,123,9,96],[21,8,9,12,"secp256k1"],[21,17,9,21],[21,20,9,21,"_yield$Promise$resolv"],[21,41,9,21],[21,42,9,12,"secp256k1"],[21,51,9,21],[22,6,10,4],[22,10,10,10,"signature_"],[22,20,10,20],[22,23,10,23],[22,24,10,24],[22,30,10,30],[23,8,11,8],[23,12,11,12],[23,19,11,19,"signature"],[23,28,11,28],[23,33,11,33],[23,41,11,41],[23,45,11,45],[23,48,11,48],[23,52,11,52,"signature"],[23,61,11,61],[23,65,11,65],[23,68,11,68],[23,72,11,72,"signature"],[23,81,11,81],[23,83,11,83],[24,10,12,12],[24,14,12,20,"r"],[24,15,12,21],[24,18,12,41,"signature"],[24,27,12,50],[24,28,12,20,"r"],[24,29,12,21],[25,12,12,23,"s"],[25,13,12,24],[25,16,12,41,"signature"],[25,25,12,50],[25,26,12,23,"s"],[25,27,12,24],[26,12,12,26,"v"],[26,13,12,27],[26,16,12,41,"signature"],[26,25,12,50],[26,26,12,26,"v"],[26,27,12,27],[27,12,12,29,"yParity"],[27,19,12,36],[27,22,12,41,"signature"],[27,31,12,50],[27,32,12,29,"yParity"],[27,39,12,36],[28,10,13,12],[28,14,13,18,"yParityOrV"],[28,25,13,28],[28,28,13,31,"Number"],[28,34,13,37],[28,35,13,38,"yParity"],[28,42,13,45],[28,46,13,49,"v"],[28,47,13,50],[28,48,13,51],[29,10,14,12],[29,14,14,18,"recoveryBit"],[29,26,14,29],[29,29,14,32,"toRecoveryBit"],[29,42,14,45],[29,43,14,46,"yParityOrV"],[29,54,14,56],[29,55,14,57],[30,10,15,12],[30,17,15,19],[30,21,15,23,"secp256k1"],[30,30,15,32],[30,31,15,33,"Signature"],[30,40,15,42],[30,41,15,43],[30,42,15,44],[30,43,15,45],[30,45,15,47,"fromHex_js_1"],[30,57,15,59],[30,58,15,60,"hexToBigInt"],[30,69,15,71],[30,71,15,73,"r"],[30,72,15,74],[30,73,15,75],[30,75,15,77],[30,76,15,78],[30,77,15,79],[30,79,15,81,"fromHex_js_1"],[30,91,15,93],[30,92,15,94,"hexToBigInt"],[30,103,15,105],[30,105,15,107,"s"],[30,106,15,108],[30,107,15,109],[30,108,15,110],[30,109,15,111,"addRecoveryBit"],[30,123,15,125],[30,124,15,126,"recoveryBit"],[30,136,15,137],[30,137,15,138],[31,8,16,8],[32,8,17,8],[32,12,17,14,"signatureHex"],[32,24,17,26],[32,27,17,29],[32,28,17,30],[32,29,17,31],[32,31,17,33,"isHex_js_1"],[32,41,17,43],[32,42,17,44,"isHex"],[32,47,17,49],[32,49,17,51,"signature"],[32,58,17,60],[32,59,17,61],[32,62,17,64,"signature"],[32,71,17,73],[32,74,17,76],[32,75,17,77],[32,76,17,78],[32,78,17,80,"toHex_js_1"],[32,88,17,90],[32,89,17,91,"toHex"],[32,94,17,96],[32,96,17,98,"signature"],[32,105,17,107],[32,106,17,108],[33,8,18,8],[33,12,18,14,"yParityOrV"],[33,22,18,24],[33,25,18,27],[33,26,18,28],[33,27,18,29],[33,29,18,31,"fromHex_js_1"],[33,41,18,43],[33,42,18,44,"hexToNumber"],[33,53,18,55],[33,55,18,57],[33,60,18,62,"signatureHex"],[33,72,18,74],[33,73,18,75,"slice"],[33,78,18,80],[33,79,18,81],[33,82,18,84],[33,83,18,85],[33,85,18,87],[33,86,18,88],[34,8,19,8],[34,12,19,14,"recoveryBit"],[34,23,19,25],[34,26,19,28,"toRecoveryBit"],[34,39,19,41],[34,40,19,42,"yParityOrV"],[34,50,19,52],[34,51,19,53],[35,8,20,8],[35,15,20,15,"secp256k1"],[35,24,20,24],[35,25,20,25,"Signature"],[35,34,20,34],[35,35,20,35,"fromCompact"],[35,46,20,46],[35,47,20,47,"signatureHex"],[35,59,20,59],[35,60,20,60,"substring"],[35,69,20,69],[35,70,20,70],[35,71,20,71],[35,73,20,73],[35,76,20,76],[35,77,20,77],[35,78,20,78],[35,79,20,79,"addRecoveryBit"],[35,93,20,93],[35,94,20,94,"recoveryBit"],[35,105,20,105],[35,106,20,106],[36,6,21,4],[36,7,21,5],[36,9,21,7],[36,10,21,8],[37,6,22,4],[37,10,22,10,"publicKey"],[37,19,22,19],[37,22,22,22,"signature_"],[37,32,22,32],[37,33,23,9,"recoverPublicKey"],[37,49,23,25],[37,50,23,26,"hashHex"],[37,57,23,33],[37,58,23,34,"substring"],[37,67,23,43],[37,68,23,44],[37,69,23,45],[37,70,23,46],[37,71,23,47],[37,72,24,9,"toHex"],[37,77,24,14],[37,78,24,15],[37,83,24,20],[37,84,24,21],[38,6,25,4],[38,13,25,11],[38,18,25,16,"publicKey"],[38,27,25,25],[38,29,25,27],[39,4,26,0],[39,5,26,1],[40,4,26,1],[40,11,26,1,"_recoverPublicKey"],[40,28,26,1],[40,29,26,1,"apply"],[40,34,26,1],[40,41,26,1,"arguments"],[40,50,26,1],[41,2,26,1],[42,2,27,0],[42,11,27,9,"toRecoveryBit"],[42,24,27,22,"toRecoveryBit"],[42,25,27,23,"yParityOrV"],[42,35,27,33],[42,37,27,35],[43,4,28,4],[43,8,28,8,"yParityOrV"],[43,18,28,18],[43,23,28,23],[43,24,28,24],[43,28,28,28,"yParityOrV"],[43,38,28,38],[43,43,28,43],[43,44,28,44],[43,46,29,8],[43,53,29,15,"yParityOrV"],[43,63,29,25],[44,4,30,4],[44,8,30,8,"yParityOrV"],[44,18,30,18],[44,23,30,23],[44,25,30,25],[44,27,31,8],[44,34,31,15],[44,35,31,16],[45,4,32,4],[45,8,32,8,"yParityOrV"],[45,18,32,18],[45,23,32,23],[45,25,32,25],[45,27,33,8],[45,34,33,15],[45,35,33,16],[46,4,34,4],[46,10,34,10],[46,14,34,14,"Error"],[46,19,34,19],[46,20,34,20],[46,46,34,46],[46,47,34,47],[47,2,35,0],[48,0,35,1],[48,3]],"functionMap":{"names":["<global>","recoverPublicKey","Promise.resolve.then$argument_0","<anonymous>","toRecoveryBit"],"mappings":"AAA;ACM;uDCE,wCD;wBEC;KFW;CDK;AIC;CJQ"}},"type":"js/module"}]}