{"dependencies":[{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":30,"column":46,"index":1133}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"@babel/runtime/helpers/setPrototypeOf","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":30,"column":46,"index":1133}}],"key":"BwnLtkiuo7h9YGmngMiP/VDyXDc="}},{"name":"../regex.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":19,"index":145},"end":{"line":4,"column":41,"index":167}}],"key":"y5uIP5kO3bpnmwyMhzPmHRwcsg0="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _inherits = require(_dependencyMap[0], \"@babel/runtime/helpers/inherits\");\n  var _setPrototypeOf = require(_dependencyMap[1], \"@babel/runtime/helpers/setPrototypeOf\");\n  function _wrapRegExp() { _wrapRegExp = function (e, r) { return new BabelRegExp(e, void 0, r); }; var e = RegExp.prototype, r = new WeakMap(); function BabelRegExp(e, t, p) { var o = RegExp(e, t); return r.set(o, p || r.get(e)), _setPrototypeOf(o, BabelRegExp.prototype); } function buildGroups(e, t) { var p = r.get(t); return Object.keys(p).reduce(function (r, t) { var o = p[t]; if (\"number\" == typeof o) r[t] = e[o];else { for (var i = 0; void 0 === e[o[i]] && i + 1 < o.length;) i++; r[t] = e[o[i]]; } return r; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (r) { var t = e.exec.call(this, r); if (t) { t.groups = buildGroups(t, this); var p = t.indices; p && (p.groups = buildGroups(p, this)); } return t; }, BabelRegExp.prototype[Symbol.replace] = function (t, p) { if (\"string\" == typeof p) { var o = r.get(this); return e[Symbol.replace].call(this, t, p.replace(/\\$<([^>]+)>/g, function (e, r) { var t = o[r]; return \"$\" + (Array.isArray(t) ? t.join(\"$\") : t); })); } if (\"function\" == typeof p) { var i = this; return e[Symbol.replace].call(this, t, function () { var e = arguments; return \"object\" != typeof e[e.length - 1] && (e = [].slice.call(e)).push(buildGroups(e, i)), p.apply(this, e); }); } return e[Symbol.replace].call(this, t, p); }, _wrapRegExp.apply(this, arguments); }\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.formatAbiParameter = formatAbiParameter;\n  var regex_js_1 = require(_dependencyMap[2], \"../regex.js\");\n  var tupleRegex = /*#__PURE__*/_wrapRegExp(/^tuple((\\[(\\d*)\\])*)$/, {\n    array: 1\n  });\n  function formatAbiParameter(abiParameter) {\n    var type = abiParameter.type;\n    if (tupleRegex.test(abiParameter.type) && 'components' in abiParameter) {\n      type = '(';\n      var length = abiParameter.components.length;\n      for (var i = 0; i < length; i++) {\n        var component = abiParameter.components[i];\n        type += formatAbiParameter(component);\n        if (i < length - 1) type += ', ';\n      }\n      var result = (0, regex_js_1.execTyped)(tupleRegex, abiParameter.type);\n      type += `)${result?.array ?? ''}`;\n      return formatAbiParameter({\n        ...abiParameter,\n        type\n      });\n    }\n    if ('indexed' in abiParameter && abiParameter.indexed) type = `${type} indexed`;\n    if (abiParameter.name) return `${type} ${abiParameter.name}`;\n    return type;\n  }\n});","lineCount":36,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_inherits"],[4,15,1,13],[4,18,1,13,"require"],[4,25,1,13],[4,26,1,13,"_dependencyMap"],[4,40,1,13],[5,2,1,13],[5,6,1,13,"_setPrototypeOf"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,11,1,13,"_wrapRegExp"],[6,23,1,13],[6,27,1,13,"_wrapRegExp"],[6,38,1,13],[6,50,1,13,"_wrapRegExp"],[6,51,1,13,"e"],[6,52,1,13],[6,54,1,13,"r"],[6,55,1,13],[6,70,1,13,"BabelRegExp"],[6,81,1,13],[6,82,1,13,"e"],[6,83,1,13],[6,93,1,13,"r"],[6,94,1,13],[6,104,1,13,"e"],[6,105,1,13],[6,108,1,13,"RegExp"],[6,114,1,13],[6,115,1,13,"prototype"],[6,124,1,13],[6,126,1,13,"r"],[6,127,1,13],[6,134,1,13,"WeakMap"],[6,141,1,13],[6,154,1,13,"BabelRegExp"],[6,166,1,13,"e"],[6,167,1,13],[6,169,1,13,"t"],[6,170,1,13],[6,172,1,13,"p"],[6,173,1,13],[6,181,1,13,"o"],[6,182,1,13],[6,185,1,13,"RegExp"],[6,191,1,13],[6,192,1,13,"e"],[6,193,1,13],[6,195,1,13,"t"],[6,196,1,13],[6,206,1,13,"r"],[6,207,1,13],[6,208,1,13,"set"],[6,211,1,13],[6,212,1,13,"o"],[6,213,1,13],[6,215,1,13,"p"],[6,216,1,13],[6,220,1,13,"r"],[6,221,1,13],[6,222,1,13,"get"],[6,225,1,13],[6,226,1,13,"e"],[6,227,1,13],[6,231,1,13,"_setPrototypeOf"],[6,246,1,13],[6,247,1,13,"o"],[6,248,1,13],[6,250,1,13,"BabelRegExp"],[6,261,1,13],[6,262,1,13,"prototype"],[6,271,1,13],[6,285,1,13,"buildGroups"],[6,297,1,13,"e"],[6,298,1,13],[6,300,1,13,"t"],[6,301,1,13],[6,309,1,13,"p"],[6,310,1,13],[6,313,1,13,"r"],[6,314,1,13],[6,315,1,13,"get"],[6,318,1,13],[6,319,1,13,"t"],[6,320,1,13],[6,330,1,13,"Object"],[6,336,1,13],[6,337,1,13,"keys"],[6,341,1,13],[6,342,1,13,"p"],[6,343,1,13],[6,345,1,13,"reduce"],[6,351,1,13],[6,362,1,13,"r"],[6,363,1,13],[6,365,1,13,"t"],[6,366,1,13],[6,374,1,13,"o"],[6,375,1,13],[6,378,1,13,"p"],[6,379,1,13],[6,380,1,13,"t"],[6,381,1,13],[6,407,1,13,"o"],[6,408,1,13],[6,410,1,13,"r"],[6,411,1,13],[6,412,1,13,"t"],[6,413,1,13],[6,417,1,13,"e"],[6,418,1,13],[6,419,1,13,"o"],[6,420,1,13],[6,438,1,13,"i"],[6,439,1,13],[6,456,1,13,"e"],[6,457,1,13],[6,458,1,13,"o"],[6,459,1,13],[6,460,1,13,"i"],[6,461,1,13],[6,467,1,13,"i"],[6,468,1,13],[6,475,1,13,"o"],[6,476,1,13],[6,477,1,13,"length"],[6,483,1,13],[6,486,1,13,"i"],[6,487,1,13],[6,491,1,13,"r"],[6,492,1,13],[6,493,1,13,"t"],[6,494,1,13],[6,498,1,13,"e"],[6,499,1,13],[6,500,1,13,"o"],[6,501,1,13],[6,502,1,13,"i"],[6,503,1,13],[6,516,1,13,"r"],[6,517,1,13],[6,522,1,13,"Object"],[6,528,1,13],[6,529,1,13,"create"],[6,535,1,13],[6,553,1,13,"_inherits"],[6,562,1,13],[6,563,1,13,"BabelRegExp"],[6,574,1,13],[6,576,1,13,"RegExp"],[6,582,1,13],[6,585,1,13,"BabelRegExp"],[6,596,1,13],[6,597,1,13,"prototype"],[6,606,1,13],[6,607,1,13,"exec"],[6,611,1,13],[6,624,1,13,"r"],[6,625,1,13],[6,633,1,13,"t"],[6,634,1,13],[6,637,1,13,"e"],[6,638,1,13],[6,639,1,13,"exec"],[6,643,1,13],[6,644,1,13,"call"],[6,648,1,13],[6,655,1,13,"r"],[6,656,1,13],[6,663,1,13,"t"],[6,664,1,13],[6,668,1,13,"t"],[6,669,1,13],[6,670,1,13,"groups"],[6,676,1,13],[6,679,1,13,"buildGroups"],[6,690,1,13],[6,691,1,13,"t"],[6,692,1,13],[6,705,1,13,"p"],[6,706,1,13],[6,709,1,13,"t"],[6,710,1,13],[6,711,1,13,"indices"],[6,718,1,13],[6,720,1,13,"p"],[6,721,1,13],[6,726,1,13,"p"],[6,727,1,13],[6,728,1,13,"groups"],[6,734,1,13],[6,737,1,13,"buildGroups"],[6,748,1,13],[6,749,1,13,"p"],[6,750,1,13],[6,769,1,13,"t"],[6,770,1,13],[6,775,1,13,"BabelRegExp"],[6,786,1,13],[6,787,1,13,"prototype"],[6,796,1,13],[6,797,1,13,"Symbol"],[6,803,1,13],[6,804,1,13,"replace"],[6,811,1,13],[6,825,1,13,"t"],[6,826,1,13],[6,828,1,13,"p"],[6,829,1,13],[6,856,1,13,"p"],[6,857,1,13],[6,865,1,13,"o"],[6,866,1,13],[6,869,1,13,"r"],[6,870,1,13],[6,871,1,13,"get"],[6,874,1,13],[6,889,1,13,"e"],[6,890,1,13],[6,891,1,13,"Symbol"],[6,897,1,13],[6,898,1,13,"replace"],[6,905,1,13],[6,907,1,13,"call"],[6,911,1,13],[6,918,1,13,"t"],[6,919,1,13],[6,921,1,13,"p"],[6,922,1,13],[6,923,1,13,"replace"],[6,930,1,13],[6,957,1,13,"e"],[6,958,1,13],[6,960,1,13,"r"],[6,961,1,13],[6,969,1,13,"t"],[6,970,1,13],[6,973,1,13,"o"],[6,974,1,13],[6,975,1,13,"r"],[6,976,1,13],[6,993,1,13,"Array"],[6,998,1,13],[6,999,1,13,"isArray"],[6,1006,1,13],[6,1007,1,13,"t"],[6,1008,1,13],[6,1012,1,13,"t"],[6,1013,1,13],[6,1014,1,13,"join"],[6,1018,1,13],[6,1026,1,13,"t"],[6,1027,1,13],[6,1062,1,13,"p"],[6,1063,1,13],[6,1071,1,13,"i"],[6,1072,1,13],[6,1088,1,13,"e"],[6,1089,1,13],[6,1090,1,13,"Symbol"],[6,1096,1,13],[6,1097,1,13,"replace"],[6,1104,1,13],[6,1106,1,13,"call"],[6,1110,1,13],[6,1117,1,13,"t"],[6,1118,1,13],[6,1138,1,13,"e"],[6,1139,1,13],[6,1142,1,13,"arguments"],[6,1151,1,13],[6,1179,1,13,"e"],[6,1180,1,13],[6,1181,1,13,"e"],[6,1182,1,13],[6,1183,1,13,"length"],[6,1189,1,13],[6,1199,1,13,"e"],[6,1200,1,13],[6,1206,1,13,"slice"],[6,1211,1,13],[6,1212,1,13,"call"],[6,1216,1,13],[6,1217,1,13,"e"],[6,1218,1,13],[6,1221,1,13,"push"],[6,1225,1,13],[6,1226,1,13,"buildGroups"],[6,1237,1,13],[6,1238,1,13,"e"],[6,1239,1,13],[6,1241,1,13,"i"],[6,1242,1,13],[6,1246,1,13,"p"],[6,1247,1,13],[6,1248,1,13,"apply"],[6,1253,1,13],[6,1260,1,13,"e"],[6,1261,1,13],[6,1277,1,13,"e"],[6,1278,1,13],[6,1279,1,13,"Symbol"],[6,1285,1,13],[6,1286,1,13,"replace"],[6,1293,1,13],[6,1295,1,13,"call"],[6,1299,1,13],[6,1306,1,13,"t"],[6,1307,1,13],[6,1309,1,13,"p"],[6,1310,1,13],[6,1316,1,13,"_wrapRegExp"],[6,1327,1,13],[6,1328,1,13,"apply"],[6,1333,1,13],[6,1340,1,13,"arguments"],[6,1349,1,13],[7,2,2,0,"Object"],[7,8,2,6],[7,9,2,7,"defineProperty"],[7,23,2,21],[7,24,2,22,"exports"],[7,31,2,29],[7,33,2,31],[7,45,2,43],[7,47,2,45],[8,4,2,47,"value"],[8,9,2,52],[8,11,2,54],[9,2,2,59],[9,3,2,60],[9,4,2,61],[10,2,3,0,"exports"],[10,9,3,7],[10,10,3,8,"formatAbiParameter"],[10,28,3,26],[10,31,3,29,"formatAbiParameter"],[10,49,3,47],[11,2,4,0],[11,6,4,6,"regex_js_1"],[11,16,4,16],[11,19,4,19,"require"],[11,26,4,26],[11,27,4,26,"_dependencyMap"],[11,41,4,26],[11,59,4,40],[11,60,4,41],[12,2,5,0],[12,6,5,6,"tupleRegex"],[12,16,5,16],[12,32,5,16,"_wrapRegExp"],[12,43,5,16],[12,44,5,19],[12,67,5,50],[13,4,5,50,"array"],[13,9,5,50],[14,2,5,50],[15,2,6,0],[15,11,6,9,"formatAbiParameter"],[15,29,6,27,"formatAbiParameter"],[15,30,6,28,"abiParameter"],[15,42,6,40],[15,44,6,42],[16,4,7,4],[16,8,7,8,"type"],[16,12,7,12],[16,15,7,15,"abiParameter"],[16,27,7,27],[16,28,7,28,"type"],[16,32,7,32],[17,4,8,4],[17,8,8,8,"tupleRegex"],[17,18,8,18],[17,19,8,19,"test"],[17,23,8,23],[17,24,8,24,"abiParameter"],[17,36,8,36],[17,37,8,37,"type"],[17,41,8,41],[17,42,8,42],[17,46,8,46],[17,58,8,58],[17,62,8,62,"abiParameter"],[17,74,8,74],[17,76,8,76],[18,6,9,8,"type"],[18,10,9,12],[18,13,9,15],[18,16,9,18],[19,6,10,8],[19,10,10,14,"length"],[19,16,10,20],[19,19,10,23,"abiParameter"],[19,31,10,35],[19,32,10,36,"components"],[19,42,10,46],[19,43,10,47,"length"],[19,49,10,53],[20,6,11,8],[20,11,11,13],[20,15,11,17,"i"],[20,16,11,18],[20,19,11,21],[20,20,11,22],[20,22,11,24,"i"],[20,23,11,25],[20,26,11,28,"length"],[20,32,11,34],[20,34,11,36,"i"],[20,35,11,37],[20,37,11,39],[20,39,11,41],[21,8,12,12],[21,12,12,18,"component"],[21,21,12,27],[21,24,12,30,"abiParameter"],[21,36,12,42],[21,37,12,43,"components"],[21,47,12,53],[21,48,12,54,"i"],[21,49,12,55],[21,50,12,56],[22,8,13,12,"type"],[22,12,13,16],[22,16,13,20,"formatAbiParameter"],[22,34,13,38],[22,35,13,39,"component"],[22,44,13,48],[22,45,13,49],[23,8,14,12],[23,12,14,16,"i"],[23,13,14,17],[23,16,14,20,"length"],[23,22,14,26],[23,25,14,29],[23,26,14,30],[23,28,15,16,"type"],[23,32,15,20],[23,36,15,24],[23,40,15,28],[24,6,16,8],[25,6,17,8],[25,10,17,14,"result"],[25,16,17,20],[25,19,17,23],[25,20,17,24],[25,21,17,25],[25,23,17,27,"regex_js_1"],[25,33,17,37],[25,34,17,38,"execTyped"],[25,43,17,47],[25,45,17,49,"tupleRegex"],[25,55,17,59],[25,57,17,61,"abiParameter"],[25,69,17,73],[25,70,17,74,"type"],[25,74,17,78],[25,75,17,79],[26,6,18,8,"type"],[26,10,18,12],[26,14,18,16],[26,18,18,20,"result"],[26,24,18,26],[26,26,18,28,"array"],[26,31,18,33],[26,35,18,37],[26,37,18,39],[26,39,18,41],[27,6,19,8],[27,13,19,15,"formatAbiParameter"],[27,31,19,33],[27,32,19,34],[28,8,20,12],[28,11,20,15,"abiParameter"],[28,23,20,27],[29,8,21,12,"type"],[30,6,22,8],[30,7,22,9],[30,8,22,10],[31,4,23,4],[32,4,24,4],[32,8,24,8],[32,17,24,17],[32,21,24,21,"abiParameter"],[32,33,24,33],[32,37,24,37,"abiParameter"],[32,49,24,49],[32,50,24,50,"indexed"],[32,57,24,57],[32,59,25,8,"type"],[32,63,25,12],[32,66,25,15],[32,69,25,18,"type"],[32,73,25,22],[32,83,25,32],[33,4,26,4],[33,8,26,8,"abiParameter"],[33,20,26,20],[33,21,26,21,"name"],[33,25,26,25],[33,27,27,8],[33,34,27,15],[33,37,27,18,"type"],[33,41,27,22],[33,45,27,26,"abiParameter"],[33,57,27,38],[33,58,27,39,"name"],[33,62,27,43],[33,64,27,45],[34,4,28,4],[34,11,28,11,"type"],[34,15,28,15],[35,2,29,0],[36,0,29,1],[36,3]],"functionMap":{"names":["<global>","formatAbiParameter"],"mappings":"AAA;ACK;CDuB"}},"type":"js/module"}]}